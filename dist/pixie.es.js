var Rv = Object.defineProperty;
var Lv = (t, e, n) => e in t ? Rv(t, e, { enumerable: !0, configurable: !0, writable: !0, value: n }) : t[e] = n;
var Te = (t, e, n) => (Lv(t, typeof e != "symbol" ? e + "" : e, n), n);
import { jsxs as ie, jsx as x, Fragment as Of } from "react/jsx-runtime";
import * as ge from "react";
import ce, { forwardRef as Je, createContext as Gn, useLayoutEffect as Ci, useEffect as Se, useContext as ze, useRef as de, useInsertionEffect as Df, useCallback as Oe, useMemo as He, createElement as Bv, useState as De, useId as Pt, cloneElement as ut, Children as mn, isValidElement as Jt, memo as zv, Fragment as Xt } from "react";
import { createRoot as Nv } from "react-dom/client";
import * as jv from "react-dom";
import { createPortal as vl, flushSync as $v } from "react-dom";
function Vv(t, e) {
  e === void 0 && (e = {});
  var n = e.insertAt;
  if (!(!t || typeof document > "u")) {
    var r = document.head || document.getElementsByTagName("head")[0], i = document.createElement("style");
    i.type = "text/css", n === "top" && r.firstChild ? r.insertBefore(i, r.firstChild) : r.appendChild(i), i.styleSheet ? i.styleSheet.cssText = t : i.appendChild(document.createTextNode(t));
  }
}
function bl(t, e) {
  return e === void 0 && (e = 15), +parseFloat(Number(t).toPrecision(e));
}
function Bt(t) {
  var e = t.toString().split(/[eE]/), n = (e[0].split(".")[1] || "").length - +(e[1] || 0);
  return n > 0 ? n : 0;
}
function oi(t) {
  if (t.toString().indexOf("e") === -1)
    return Number(t.toString().replace(".", ""));
  var e = Bt(t);
  return e > 0 ? bl(Number(t) * Math.pow(10, e)) : Number(t);
}
function aa(t) {
  Pf && (t > Number.MAX_SAFE_INTEGER || t < Number.MIN_SAFE_INTEGER) && console.warn(t + " is beyond boundary when transfer to integer, the results may not be accurate");
}
function $s(t) {
  return function() {
    for (var e = [], n = 0; n < arguments.length; n++)
      e[n] = arguments[n];
    var r = e[0], i = e.slice(1);
    return i.reduce(function(f, g) {
      return t(f, g);
    }, r);
  };
}
var vn = $s(function(t, e) {
  var n = oi(t), r = oi(e), i = Bt(t) + Bt(e), f = n * r;
  return aa(f), f / Math.pow(10, i);
}), Hv = $s(function(t, e) {
  var n = Math.pow(10, Math.max(Bt(t), Bt(e)));
  return (vn(t, n) + vn(e, n)) / n;
}), Wv = $s(function(t, e) {
  var n = Math.pow(10, Math.max(Bt(t), Bt(e)));
  return (vn(t, n) - vn(e, n)) / n;
}), Af = $s(function(t, e) {
  var n = oi(t), r = oi(e);
  return aa(n), aa(r), vn(n / r, bl(Math.pow(10, Bt(e) - Bt(t))));
});
function Uv(t, e) {
  var n = Math.pow(10, e), r = Af(Math.round(Math.abs(vn(t, n))), n);
  return t < 0 && r !== 0 && (r = vn(r, -1)), r;
}
var Pf = !0;
function Xv(t) {
  t === void 0 && (t = !0), Pf = t;
}
var la = {
  strip: bl,
  plus: Hv,
  minus: Wv,
  times: vn,
  divide: Af,
  round: Uv,
  digitLength: Bt,
  float2Fixed: oi,
  enableBoundaryChecking: Xv
};
const Mf = Object.prototype.toString;
function Ff(t) {
  switch (Mf.call(t)) {
    case "[object Error]":
    case "[object Exception]":
    case "[object DOMException]":
      return !0;
    default:
      return jn(t, Error);
  }
}
function Pr(t, e) {
  return Mf.call(t) === `[object ${e}]`;
}
function yl(t) {
  return Pr(t, "ErrorEvent");
}
function Ic(t) {
  return Pr(t, "DOMError");
}
function Yv(t) {
  return Pr(t, "DOMException");
}
function Yt(t) {
  return Pr(t, "String");
}
function wl(t) {
  return typeof t == "object" && t !== null && "__sentry_template_string__" in t && "__sentry_template_values__" in t;
}
function xl(t) {
  return t === null || wl(t) || typeof t != "object" && typeof t != "function";
}
function yr(t) {
  return Pr(t, "Object");
}
function Vs(t) {
  return typeof Event < "u" && jn(t, Event);
}
function Gv(t) {
  return typeof Element < "u" && jn(t, Element);
}
function Kv(t) {
  return Pr(t, "RegExp");
}
function Hs(t) {
  return !!(t && t.then && typeof t.then == "function");
}
function qv(t) {
  return yr(t) && "nativeEvent" in t && "preventDefault" in t && "stopPropagation" in t;
}
function Zv(t) {
  return typeof t == "number" && t !== t;
}
function jn(t, e) {
  try {
    return t instanceof e;
  } catch {
    return !1;
  }
}
function If(t) {
  return !!(typeof t == "object" && t !== null && (t.__isVue || t._isVue));
}
function pr(t, e = 0) {
  return typeof t != "string" || e === 0 || t.length <= e ? t : `${t.slice(0, e)}...`;
}
function Rc(t, e) {
  if (!Array.isArray(t))
    return "";
  const n = [];
  for (let r = 0; r < t.length; r++) {
    const i = t[r];
    try {
      If(i) ? n.push("[VueViewModel]") : n.push(String(i));
    } catch {
      n.push("[value cannot be serialized]");
    }
  }
  return n.join(e);
}
function Jv(t, e, n = !1) {
  return Yt(t) ? Kv(e) ? e.test(t) : Yt(e) ? n ? t === e : t.includes(e) : !1 : !1;
}
function Ws(t, e = [], n = !1) {
  return e.some((r) => Jv(t, r, n));
}
function Qv(t, e, n = 250, r, i, f, g) {
  if (!f.exception || !f.exception.values || !g || !jn(g.originalException, Error))
    return;
  const l = f.exception.values.length > 0 ? f.exception.values[f.exception.values.length - 1] : void 0;
  l && (f.exception.values = e0(
    ca(
      t,
      e,
      i,
      g.originalException,
      r,
      f.exception.values,
      l,
      0
    ),
    n
  ));
}
function ca(t, e, n, r, i, f, g, l) {
  if (f.length >= n + 1)
    return f;
  let s = [...f];
  if (jn(r[i], Error)) {
    Lc(g, l);
    const a = t(e, r[i]), h = s.length;
    Bc(a, i, h, l), s = ca(
      t,
      e,
      n,
      r[i],
      i,
      [a, ...s],
      a,
      h
    );
  }
  return Array.isArray(r.errors) && r.errors.forEach((a, h) => {
    if (jn(a, Error)) {
      Lc(g, l);
      const o = t(e, a), u = s.length;
      Bc(o, `errors[${h}]`, u, l), s = ca(
        t,
        e,
        n,
        a,
        i,
        [o, ...s],
        o,
        u
      );
    }
  }), s;
}
function Lc(t, e) {
  t.mechanism = t.mechanism || { type: "generic", handled: !0 }, t.mechanism = {
    ...t.mechanism,
    ...t.type === "AggregateError" && { is_exception_group: !0 },
    exception_id: e
  };
}
function Bc(t, e, n, r) {
  t.mechanism = t.mechanism || { type: "generic", handled: !0 }, t.mechanism = {
    ...t.mechanism,
    type: "chained",
    source: e,
    exception_id: n,
    parent_id: r
  };
}
function e0(t, e) {
  return t.map((n) => (n.value && (n.value = pr(n.value, e)), n));
}
function Hi(t) {
  return t && t.Math == Math ? t : void 0;
}
const Ae = typeof globalThis == "object" && Hi(globalThis) || // eslint-disable-next-line no-restricted-globals
typeof window == "object" && Hi(window) || typeof self == "object" && Hi(self) || typeof global == "object" && Hi(global) || function() {
  return this;
}() || {};
function Cl() {
  return Ae;
}
function Rf(t, e, n) {
  const r = n || Ae, i = r.__SENTRY__ = r.__SENTRY__ || {};
  return i[t] || (i[t] = e());
}
const _l = Cl(), t0 = 80;
function Lf(t, e = {}) {
  if (!t)
    return "<unknown>";
  try {
    let n = t;
    const r = 5, i = [];
    let f = 0, g = 0;
    const l = " > ", s = l.length;
    let a;
    const h = Array.isArray(e) ? e : e.keyAttrs, o = !Array.isArray(e) && e.maxStringLength || t0;
    for (; n && f++ < r && (a = n0(n, h), !(a === "html" || f > 1 && g + i.length * s + a.length >= o)); )
      i.push(a), g += a.length, n = n.parentNode;
    return i.reverse().join(l);
  } catch {
    return "<unknown>";
  }
}
function n0(t, e) {
  const n = t, r = [];
  let i, f, g, l, s;
  if (!n || !n.tagName)
    return "";
  if (_l.HTMLElement && n instanceof HTMLElement && n.dataset && n.dataset.sentryComponent)
    return n.dataset.sentryComponent;
  r.push(n.tagName.toLowerCase());
  const a = e && e.length ? e.filter((o) => n.getAttribute(o)).map((o) => [o, n.getAttribute(o)]) : null;
  if (a && a.length)
    a.forEach((o) => {
      r.push(`[${o[0]}="${o[1]}"]`);
    });
  else if (n.id && r.push(`#${n.id}`), i = n.className, i && Yt(i))
    for (f = i.split(/\s+/), s = 0; s < f.length; s++)
      r.push(`.${f[s]}`);
  const h = ["aria-label", "type", "name", "title", "alt"];
  for (s = 0; s < h.length; s++)
    g = h[s], l = n.getAttribute(g), l && r.push(`[${g}="${l}"]`);
  return r.join("");
}
function r0() {
  try {
    return _l.document.location.href;
  } catch {
    return "";
  }
}
function i0(t) {
  if (!_l.HTMLElement)
    return null;
  let e = t;
  const n = 5;
  for (let r = 0; r < n; r++) {
    if (!e)
      return null;
    if (e instanceof HTMLElement && e.dataset.sentryComponent)
      return e.dataset.sentryComponent;
    e = e.parentNode;
  }
  return null;
}
const _i = typeof __SENTRY_DEBUG__ > "u" || __SENTRY_DEBUG__, s0 = "Sentry Logger ", ua = [
  "debug",
  "info",
  "warn",
  "error",
  "log",
  "assert",
  "trace"
], fs = {};
function Us(t) {
  if (!("console" in Ae))
    return t();
  const e = Ae.console, n = {}, r = Object.keys(fs);
  r.forEach((i) => {
    const f = fs[i];
    n[i] = e[i], e[i] = f;
  });
  try {
    return t();
  } finally {
    r.forEach((i) => {
      e[i] = n[i];
    });
  }
}
function o0() {
  let t = !1;
  const e = {
    enable: () => {
      t = !0;
    },
    disable: () => {
      t = !1;
    },
    isEnabled: () => t
  };
  return _i ? ua.forEach((n) => {
    e[n] = (...r) => {
      t && Us(() => {
        Ae.console[n](`${s0}[${n}]:`, ...r);
      });
    };
  }) : ua.forEach((n) => {
    e[n] = () => {
    };
  }), e;
}
const _e = o0(), a0 = /^(?:(\w+):)\/\/(?:(\w+)(?::(\w+)?)?@)([\w.-]+)(?::(\d+))?\/(.+)/;
function l0(t) {
  return t === "http" || t === "https";
}
function Si(t, e = !1) {
  const { host: n, path: r, pass: i, port: f, projectId: g, protocol: l, publicKey: s } = t;
  return `${l}://${s}${e && i ? `:${i}` : ""}@${n}${f ? `:${f}` : ""}/${r && `${r}/`}${g}`;
}
function c0(t) {
  const e = a0.exec(t);
  if (!e) {
    Us(() => {
      console.error(`Invalid Sentry Dsn: ${t}`);
    });
    return;
  }
  const [n, r, i = "", f, g = "", l] = e.slice(1);
  let s = "", a = l;
  const h = a.split("/");
  if (h.length > 1 && (s = h.slice(0, -1).join("/"), a = h.pop()), a) {
    const o = a.match(/^\d+/);
    o && (a = o[0]);
  }
  return Bf({ host: f, pass: i, path: s, projectId: a, port: g, protocol: n, publicKey: r });
}
function Bf(t) {
  return {
    protocol: t.protocol,
    publicKey: t.publicKey || "",
    pass: t.pass || "",
    host: t.host,
    port: t.port || "",
    path: t.path || "",
    projectId: t.projectId
  };
}
function u0(t) {
  if (!_i)
    return !0;
  const { port: e, projectId: n, protocol: r } = t;
  return ["protocol", "publicKey", "host", "projectId"].find((g) => t[g] ? !1 : (_e.error(`Invalid Sentry Dsn: ${g} missing`), !0)) ? !1 : n.match(/^\d+$/) ? l0(r) ? e && isNaN(parseInt(e, 10)) ? (_e.error(`Invalid Sentry Dsn: Invalid port ${e}`), !1) : !0 : (_e.error(`Invalid Sentry Dsn: Invalid protocol ${r}`), !1) : (_e.error(`Invalid Sentry Dsn: Invalid projectId ${n}`), !1);
}
function h0(t) {
  const e = typeof t == "string" ? c0(t) : Bf(t);
  if (!(!e || !u0(e)))
    return e;
}
class It extends Error {
  /** Display name of this error instance. */
  constructor(e, n = "warn") {
    super(e), this.message = e, this.name = new.target.prototype.constructor.name, Object.setPrototypeOf(this, new.target.prototype), this.logLevel = n;
  }
}
function qe(t, e, n) {
  if (!(e in t))
    return;
  const r = t[e], i = n(r);
  typeof i == "function" && zf(i, r), t[e] = i;
}
function ai(t, e, n) {
  try {
    Object.defineProperty(t, e, {
      // enumerable: false, // the default, so we can save on bundle size by not explicitly setting it
      value: n,
      writable: !0,
      configurable: !0
    });
  } catch {
    _i && _e.log(`Failed to add non-enumerable property "${e}" to object`, t);
  }
}
function zf(t, e) {
  try {
    const n = e.prototype || {};
    t.prototype = e.prototype = n, ai(t, "__sentry_original__", e);
  } catch {
  }
}
function Sl(t) {
  return t.__sentry_original__;
}
function f0(t) {
  return Object.keys(t).map((e) => `${encodeURIComponent(e)}=${encodeURIComponent(t[e])}`).join("&");
}
function Nf(t) {
  if (Ff(t))
    return {
      message: t.message,
      name: t.name,
      stack: t.stack,
      ...Nc(t)
    };
  if (Vs(t)) {
    const e = {
      type: t.type,
      target: zc(t.target),
      currentTarget: zc(t.currentTarget),
      ...Nc(t)
    };
    return typeof CustomEvent < "u" && jn(t, CustomEvent) && (e.detail = t.detail), e;
  } else
    return t;
}
function zc(t) {
  try {
    return Gv(t) ? Lf(t) : Object.prototype.toString.call(t);
  } catch {
    return "<unknown>";
  }
}
function Nc(t) {
  if (typeof t == "object" && t !== null) {
    const e = {};
    for (const n in t)
      Object.prototype.hasOwnProperty.call(t, n) && (e[n] = t[n]);
    return e;
  } else
    return {};
}
function d0(t, e = 40) {
  const n = Object.keys(Nf(t));
  if (n.sort(), !n.length)
    return "[object has no keys]";
  if (n[0].length >= e)
    return pr(n[0], e);
  for (let r = n.length; r > 0; r--) {
    const i = n.slice(0, r).join(", ");
    if (!(i.length > e))
      return r === n.length ? i : pr(i, e);
  }
  return "";
}
function Vt(t) {
  return ha(t, /* @__PURE__ */ new Map());
}
function ha(t, e) {
  if (p0(t)) {
    const n = e.get(t);
    if (n !== void 0)
      return n;
    const r = {};
    e.set(t, r);
    for (const i of Object.keys(t))
      typeof t[i] < "u" && (r[i] = ha(t[i], e));
    return r;
  }
  if (Array.isArray(t)) {
    const n = e.get(t);
    if (n !== void 0)
      return n;
    const r = [];
    return e.set(t, r), t.forEach((i) => {
      r.push(ha(i, e));
    }), r;
  }
  return t;
}
function p0(t) {
  if (!yr(t))
    return !1;
  try {
    const e = Object.getPrototypeOf(t).constructor.name;
    return !e || e === "Object";
  } catch {
    return !0;
  }
}
const jf = 50, jc = /\(error: (.*)\)/, $c = /captureMessage|captureException/;
function $f(...t) {
  const e = t.sort((n, r) => n[0] - r[0]).map((n) => n[1]);
  return (n, r = 0) => {
    const i = [], f = n.split(`
`);
    for (let g = r; g < f.length; g++) {
      const l = f[g];
      if (l.length > 1024)
        continue;
      const s = jc.test(l) ? l.replace(jc, "$1") : l;
      if (!s.match(/\S*Error: /)) {
        for (const a of e) {
          const h = a(s);
          if (h) {
            i.push(h);
            break;
          }
        }
        if (i.length >= jf)
          break;
      }
    }
    return m0(i);
  };
}
function g0(t) {
  return Array.isArray(t) ? $f(...t) : t;
}
function m0(t) {
  if (!t.length)
    return [];
  const e = Array.from(t);
  return /sentryWrapped/.test(e[e.length - 1].function || "") && e.pop(), e.reverse(), $c.test(e[e.length - 1].function || "") && (e.pop(), $c.test(e[e.length - 1].function || "") && e.pop()), e.slice(0, jf).map((n) => ({
    ...n,
    filename: n.filename || e[e.length - 1].filename,
    function: n.function || "?"
  }));
}
const ko = "<anonymous>";
function bn(t) {
  try {
    return !t || typeof t != "function" ? ko : t.name || ko;
  } catch {
    return ko;
  }
}
const as = {}, Vc = {};
function Kn(t, e) {
  as[t] = as[t] || [], as[t].push(e);
}
function qn(t, e) {
  Vc[t] || (e(), Vc[t] = !0);
}
function Dt(t, e) {
  const n = t && as[t];
  if (n)
    for (const r of n)
      try {
        r(e);
      } catch (i) {
        _i && _e.error(
          `Error while triggering instrumentation handler.
Type: ${t}
Name: ${bn(r)}
Error:`,
          i
        );
      }
}
function v0(t) {
  const e = "console";
  Kn(e, t), qn(e, b0);
}
function b0() {
  "console" in Ae && ua.forEach(function(t) {
    t in Ae.console && qe(Ae.console, t, function(e) {
      return fs[t] = e, function(...n) {
        Dt("console", { args: n, level: t });
        const i = fs[t];
        i && i.apply(Ae.console, n);
      };
    });
  });
}
function kt() {
  const t = Ae, e = t.crypto || t.msCrypto;
  let n = () => Math.random() * 16;
  try {
    if (e && e.randomUUID)
      return e.randomUUID().replace(/-/g, "");
    e && e.getRandomValues && (n = () => {
      const r = new Uint8Array(1);
      return e.getRandomValues(r), r[0];
    });
  } catch {
  }
  return ([1e7] + 1e3 + 4e3 + 8e3 + 1e11).replace(
    /[018]/g,
    (r) => (
      // eslint-disable-next-line no-bitwise
      (r ^ (n() & 15) >> r / 4).toString(16)
    )
  );
}
function Vf(t) {
  return t.exception && t.exception.values ? t.exception.values[0] : void 0;
}
function cn(t) {
  const { message: e, event_id: n } = t;
  if (e)
    return e;
  const r = Vf(t);
  return r ? r.type && r.value ? `${r.type}: ${r.value}` : r.type || r.value || n || "<unknown>" : n || "<unknown>";
}
function fa(t, e, n) {
  const r = t.exception = t.exception || {}, i = r.values = r.values || [], f = i[0] = i[0] || {};
  f.value || (f.value = e || ""), f.type || (f.type = n || "Error");
}
function li(t, e) {
  const n = Vf(t);
  if (!n)
    return;
  const r = { type: "generic", handled: !0 }, i = n.mechanism;
  if (n.mechanism = { ...r, ...i, ...e }, e && "data" in e) {
    const f = { ...i && i.data, ...e.data };
    n.mechanism.data = f;
  }
}
function Hc(t) {
  if (t && t.__sentry_captured__)
    return !0;
  try {
    ai(t, "__sentry_captured__", !0);
  } catch {
  }
  return !1;
}
function Hf(t) {
  return Array.isArray(t) ? t : [t];
}
const lr = Ae, y0 = 1e3;
let Wc, da, pa;
function w0(t) {
  const e = "dom";
  Kn(e, t), qn(e, x0);
}
function x0() {
  if (!lr.document)
    return;
  const t = Dt.bind(null, "dom"), e = Uc(t, !0);
  lr.document.addEventListener("click", e, !1), lr.document.addEventListener("keypress", e, !1), ["EventTarget", "Node"].forEach((n) => {
    const r = lr[n] && lr[n].prototype;
    !r || !r.hasOwnProperty || !r.hasOwnProperty("addEventListener") || (qe(r, "addEventListener", function(i) {
      return function(f, g, l) {
        if (f === "click" || f == "keypress")
          try {
            const s = this, a = s.__sentry_instrumentation_handlers__ = s.__sentry_instrumentation_handlers__ || {}, h = a[f] = a[f] || { refCount: 0 };
            if (!h.handler) {
              const o = Uc(t);
              h.handler = o, i.call(this, f, o, l);
            }
            h.refCount++;
          } catch {
          }
        return i.call(this, f, g, l);
      };
    }), qe(
      r,
      "removeEventListener",
      function(i) {
        return function(f, g, l) {
          if (f === "click" || f == "keypress")
            try {
              const s = this, a = s.__sentry_instrumentation_handlers__ || {}, h = a[f];
              h && (h.refCount--, h.refCount <= 0 && (i.call(this, f, h.handler, l), h.handler = void 0, delete a[f]), Object.keys(a).length === 0 && delete s.__sentry_instrumentation_handlers__);
            } catch {
            }
          return i.call(this, f, g, l);
        };
      }
    ));
  });
}
function C0(t) {
  if (t.type !== da)
    return !1;
  try {
    if (!t.target || t.target._sentryId !== pa)
      return !1;
  } catch {
  }
  return !0;
}
function _0(t, e) {
  return t !== "keypress" ? !1 : !e || !e.tagName ? !0 : !(e.tagName === "INPUT" || e.tagName === "TEXTAREA" || e.isContentEditable);
}
function Uc(t, e = !1) {
  return (n) => {
    if (!n || n._sentryCaptured)
      return;
    const r = S0(n);
    if (_0(n.type, r))
      return;
    ai(n, "_sentryCaptured", !0), r && !r._sentryId && ai(r, "_sentryId", kt());
    const i = n.type === "keypress" ? "input" : n.type;
    C0(n) || (t({ event: n, name: i, global: e }), da = n.type, pa = r ? r._sentryId : void 0), clearTimeout(Wc), Wc = lr.setTimeout(() => {
      pa = void 0, da = void 0;
    }, y0);
  };
}
function S0(t) {
  try {
    return t.target;
  } catch {
    return null;
  }
}
const ga = Cl();
function Wf() {
  if (!("fetch" in ga))
    return !1;
  try {
    return new Headers(), new Request("http://www.example.com"), new Response(), !0;
  } catch {
    return !1;
  }
}
function ma(t) {
  return t && /^function fetch\(\)\s+\{\s+\[native code\]\s+\}$/.test(t.toString());
}
function T0() {
  if (typeof EdgeRuntime == "string")
    return !0;
  if (!Wf())
    return !1;
  if (ma(ga.fetch))
    return !0;
  let t = !1;
  const e = ga.document;
  if (e && typeof e.createElement == "function")
    try {
      const n = e.createElement("iframe");
      n.hidden = !0, e.head.appendChild(n), n.contentWindow && n.contentWindow.fetch && (t = ma(n.contentWindow.fetch)), e.head.removeChild(n);
    } catch (n) {
      _i && _e.warn("Could not create sandbox iframe for pure fetch check, bailing to window.fetch: ", n);
    }
  return t;
}
function E0(t) {
  const e = "fetch";
  Kn(e, t), qn(e, k0);
}
function k0() {
  T0() && qe(Ae, "fetch", function(t) {
    return function(...e) {
      const { method: n, url: r } = O0(e), i = {
        args: e,
        fetchData: {
          method: n,
          url: r
        },
        startTimestamp: Date.now()
      };
      return Dt("fetch", {
        ...i
      }), t.apply(Ae, e).then(
        (f) => {
          const g = {
            ...i,
            endTimestamp: Date.now(),
            response: f
          };
          return Dt("fetch", g), f;
        },
        (f) => {
          const g = {
            ...i,
            endTimestamp: Date.now(),
            error: f
          };
          throw Dt("fetch", g), f;
        }
      );
    };
  });
}
function va(t, e) {
  return !!t && typeof t == "object" && !!t[e];
}
function Xc(t) {
  return typeof t == "string" ? t : t ? va(t, "url") ? t.url : t.toString ? t.toString() : "" : "";
}
function O0(t) {
  if (t.length === 0)
    return { method: "GET", url: "" };
  if (t.length === 2) {
    const [n, r] = t;
    return {
      url: Xc(n),
      method: va(r, "method") ? String(r.method).toUpperCase() : "GET"
    };
  }
  const e = t[0];
  return {
    url: Xc(e),
    method: va(e, "method") ? String(e.method).toUpperCase() : "GET"
  };
}
let Wi = null;
function D0(t) {
  const e = "error";
  Kn(e, t), qn(e, A0);
}
function A0() {
  Wi = Ae.onerror, Ae.onerror = function(t, e, n, r, i) {
    return Dt("error", {
      column: r,
      error: i,
      line: n,
      msg: t,
      url: e
    }), Wi && !Wi.__SENTRY_LOADER__ ? Wi.apply(this, arguments) : !1;
  }, Ae.onerror.__SENTRY_INSTRUMENTED__ = !0;
}
let Ui = null;
function P0(t) {
  const e = "unhandledrejection";
  Kn(e, t), qn(e, M0);
}
function M0() {
  Ui = Ae.onunhandledrejection, Ae.onunhandledrejection = function(t) {
    return Dt("unhandledrejection", t), Ui && !Ui.__SENTRY_LOADER__ ? Ui.apply(this, arguments) : !0;
  }, Ae.onunhandledrejection.__SENTRY_INSTRUMENTED__ = !0;
}
const Xi = Cl();
function F0() {
  const t = Xi.chrome, e = t && t.app && t.app.runtime, n = "history" in Xi && !!Xi.history.pushState && !!Xi.history.replaceState;
  return !e && n;
}
const Vr = Ae;
let Yi;
function Uf(t) {
  const e = "history";
  Kn(e, t), qn(e, I0);
}
function I0() {
  if (!F0())
    return;
  const t = Vr.onpopstate;
  Vr.onpopstate = function(...n) {
    const r = Vr.location.href, i = Yi;
    if (Yi = r, Dt("history", { from: i, to: r }), t)
      try {
        return t.apply(this, n);
      } catch {
      }
  };
  function e(n) {
    return function(...r) {
      const i = r.length > 2 ? r[2] : void 0;
      if (i) {
        const f = Yi, g = String(i);
        Yi = g, Dt("history", { from: f, to: g });
      }
      return n.apply(this, r);
    };
  }
  qe(Vr.history, "pushState", e), qe(Vr.history, "replaceState", e);
}
const R0 = Ae, Kr = "__sentry_xhr_v3__";
function L0(t) {
  const e = "xhr";
  Kn(e, t), qn(e, B0);
}
function B0() {
  if (!R0.XMLHttpRequest)
    return;
  const t = XMLHttpRequest.prototype;
  qe(t, "open", function(e) {
    return function(...n) {
      const r = Date.now(), i = Yt(n[0]) ? n[0].toUpperCase() : void 0, f = z0(n[1]);
      if (!i || !f)
        return e.apply(this, n);
      this[Kr] = {
        method: i,
        url: f,
        request_headers: {}
      }, i === "POST" && f.match(/sentry_key/) && (this.__sentry_own_request__ = !0);
      const g = () => {
        const l = this[Kr];
        if (l && this.readyState === 4) {
          try {
            l.status_code = this.status;
          } catch {
          }
          const s = {
            args: [i, f],
            endTimestamp: Date.now(),
            startTimestamp: r,
            xhr: this
          };
          Dt("xhr", s);
        }
      };
      return "onreadystatechange" in this && typeof this.onreadystatechange == "function" ? qe(this, "onreadystatechange", function(l) {
        return function(...s) {
          return g(), l.apply(this, s);
        };
      }) : this.addEventListener("readystatechange", g), qe(this, "setRequestHeader", function(l) {
        return function(...s) {
          const [a, h] = s, o = this[Kr];
          return o && Yt(a) && Yt(h) && (o.request_headers[a.toLowerCase()] = h), l.apply(this, s);
        };
      }), e.apply(this, n);
    };
  }), qe(t, "send", function(e) {
    return function(...n) {
      const r = this[Kr];
      if (!r)
        return e.apply(this, n);
      n[0] !== void 0 && (r.body = n[0]);
      const i = {
        args: [r.method, r.url],
        startTimestamp: Date.now(),
        xhr: this
      };
      return Dt("xhr", i), e.apply(this, n);
    };
  });
}
function z0(t) {
  if (Yt(t))
    return t;
  try {
    return t.toString();
  } catch {
  }
}
function N0() {
  return "npm";
}
function j0() {
  const t = typeof WeakSet == "function", e = t ? /* @__PURE__ */ new WeakSet() : [];
  function n(i) {
    if (t)
      return e.has(i) ? !0 : (e.add(i), !1);
    for (let f = 0; f < e.length; f++)
      if (e[f] === i)
        return !0;
    return e.push(i), !1;
  }
  function r(i) {
    if (t)
      e.delete(i);
    else
      for (let f = 0; f < e.length; f++)
        if (e[f] === i) {
          e.splice(f, 1);
          break;
        }
  }
  return [n, r];
}
function an(t, e = 100, n = 1 / 0) {
  try {
    return ba("", t, e, n);
  } catch (r) {
    return { ERROR: `**non-serializable** (${r})` };
  }
}
function Xf(t, e = 3, n = 100 * 1024) {
  const r = an(t, e);
  return W0(r) > n ? Xf(t, e - 1, n) : r;
}
function ba(t, e, n = 1 / 0, r = 1 / 0, i = j0()) {
  const [f, g] = i;
  if (e == null || // this matches null and undefined -> eqeq not eqeqeq
  ["number", "boolean", "string"].includes(typeof e) && !Zv(e))
    return e;
  const l = $0(t, e);
  if (!l.startsWith("[object "))
    return l;
  if (e.__sentry_skip_normalization__)
    return e;
  const s = typeof e.__sentry_override_normalization_depth__ == "number" ? e.__sentry_override_normalization_depth__ : n;
  if (s === 0)
    return l.replace("object ", "");
  if (f(e))
    return "[Circular ~]";
  const a = e;
  if (a && typeof a.toJSON == "function")
    try {
      const c = a.toJSON();
      return ba("", c, s - 1, r, i);
    } catch {
    }
  const h = Array.isArray(e) ? [] : {};
  let o = 0;
  const u = Nf(e);
  for (const c in u) {
    if (!Object.prototype.hasOwnProperty.call(u, c))
      continue;
    if (o >= r) {
      h[c] = "[MaxProperties ~]";
      break;
    }
    const d = u[c];
    h[c] = ba(c, d, s - 1, r, i), o++;
  }
  return g(e), h;
}
function $0(t, e) {
  try {
    if (t === "domain" && e && typeof e == "object" && e._events)
      return "[Domain]";
    if (t === "domainEmitter")
      return "[DomainEmitter]";
    if (typeof global < "u" && e === global)
      return "[Global]";
    if (typeof window < "u" && e === window)
      return "[Window]";
    if (typeof document < "u" && e === document)
      return "[Document]";
    if (If(e))
      return "[VueViewModel]";
    if (qv(e))
      return "[SyntheticEvent]";
    if (typeof e == "number" && e !== e)
      return "[NaN]";
    if (typeof e == "function")
      return `[Function: ${bn(e)}]`;
    if (typeof e == "symbol")
      return `[${String(e)}]`;
    if (typeof e == "bigint")
      return `[BigInt: ${String(e)}]`;
    const n = V0(e);
    return /^HTML(\w*)Element$/.test(n) ? `[HTMLElement: ${n}]` : `[object ${n}]`;
  } catch (n) {
    return `**non-serializable** (${n})`;
  }
}
function V0(t) {
  const e = Object.getPrototypeOf(t);
  return e ? e.constructor.name : "null prototype";
}
function H0(t) {
  return ~-encodeURI(t).split(/%..|./).length;
}
function W0(t) {
  return H0(JSON.stringify(t));
}
var $t;
(function(t) {
  t[t.PENDING = 0] = "PENDING";
  const n = 1;
  t[t.RESOLVED = n] = "RESOLVED";
  const r = 2;
  t[t.REJECTED = r] = "REJECTED";
})($t || ($t = {}));
function wr(t) {
  return new ft((e) => {
    e(t);
  });
}
function Tl(t) {
  return new ft((e, n) => {
    n(t);
  });
}
class ft {
  constructor(e) {
    ft.prototype.__init.call(this), ft.prototype.__init2.call(this), ft.prototype.__init3.call(this), ft.prototype.__init4.call(this), this._state = $t.PENDING, this._handlers = [];
    try {
      e(this._resolve, this._reject);
    } catch (n) {
      this._reject(n);
    }
  }
  /** JSDoc */
  then(e, n) {
    return new ft((r, i) => {
      this._handlers.push([
        !1,
        (f) => {
          if (!e)
            r(f);
          else
            try {
              r(e(f));
            } catch (g) {
              i(g);
            }
        },
        (f) => {
          if (!n)
            i(f);
          else
            try {
              r(n(f));
            } catch (g) {
              i(g);
            }
        }
      ]), this._executeHandlers();
    });
  }
  /** JSDoc */
  catch(e) {
    return this.then((n) => n, e);
  }
  /** JSDoc */
  finally(e) {
    return new ft((n, r) => {
      let i, f;
      return this.then(
        (g) => {
          f = !1, i = g, e && e();
        },
        (g) => {
          f = !0, i = g, e && e();
        }
      ).then(() => {
        if (f) {
          r(i);
          return;
        }
        n(i);
      });
    });
  }
  /** JSDoc */
  __init() {
    this._resolve = (e) => {
      this._setResult($t.RESOLVED, e);
    };
  }
  /** JSDoc */
  __init2() {
    this._reject = (e) => {
      this._setResult($t.REJECTED, e);
    };
  }
  /** JSDoc */
  __init3() {
    this._setResult = (e, n) => {
      if (this._state === $t.PENDING) {
        if (Hs(n)) {
          n.then(this._resolve, this._reject);
          return;
        }
        this._state = e, this._value = n, this._executeHandlers();
      }
    };
  }
  /** JSDoc */
  __init4() {
    this._executeHandlers = () => {
      if (this._state === $t.PENDING)
        return;
      const e = this._handlers.slice();
      this._handlers = [], e.forEach((n) => {
        n[0] || (this._state === $t.RESOLVED && n[1](this._value), this._state === $t.REJECTED && n[2](this._value), n[0] = !0);
      });
    };
  }
}
function U0(t) {
  const e = [];
  function n() {
    return t === void 0 || e.length < t;
  }
  function r(g) {
    return e.splice(e.indexOf(g), 1)[0];
  }
  function i(g) {
    if (!n())
      return Tl(new It("Not adding Promise because buffer limit was reached."));
    const l = g();
    return e.indexOf(l) === -1 && e.push(l), l.then(() => r(l)).then(
      null,
      () => r(l).then(null, () => {
      })
    ), l;
  }
  function f(g) {
    return new ft((l, s) => {
      let a = e.length;
      if (!a)
        return l(!0);
      const h = setTimeout(() => {
        g && g > 0 && l(!1);
      }, g);
      e.forEach((o) => {
        wr(o).then(() => {
          --a || (clearTimeout(h), l(!0));
        }, s);
      });
    });
  }
  return {
    $: e,
    add: i,
    drain: f
  };
}
function Oo(t) {
  if (!t)
    return {};
  const e = t.match(/^(([^:/?#]+):)?(\/\/([^/?#]*))?([^?#]*)(\?([^#]*))?(#(.*))?$/);
  if (!e)
    return {};
  const n = e[6] || "", r = e[8] || "";
  return {
    host: e[4],
    path: e[5],
    protocol: e[2],
    search: n,
    hash: r,
    relative: e[5] + n + r
    // everything minus origin
  };
}
const X0 = ["fatal", "error", "warning", "log", "info", "debug"];
function Y0(t) {
  return t === "warn" ? "warning" : X0.includes(t) ? t : "log";
}
const Yf = 1e3;
function Ti() {
  return Date.now() / Yf;
}
function G0() {
  const { performance: t } = Ae;
  if (!t || !t.now)
    return Ti;
  const e = Date.now() - t.now(), n = t.timeOrigin == null ? e : t.timeOrigin;
  return () => (n + t.now()) / Yf;
}
const Gf = G0();
(() => {
  const { performance: t } = Ae;
  if (!t || !t.now)
    return;
  const e = 3600 * 1e3, n = t.now(), r = Date.now(), i = t.timeOrigin ? Math.abs(t.timeOrigin + n - r) : e, f = i < e, g = t.timing && t.timing.navigationStart, s = typeof g == "number" ? Math.abs(g + n - r) : e, a = s < e;
  return f || a ? i <= s ? t.timeOrigin : g : r;
})();
function Mr(t, e = []) {
  return [t, e];
}
function K0(t, e) {
  const [n, r] = t;
  return [n, [...r, e]];
}
function Yc(t, e) {
  const n = t[1];
  for (const r of n) {
    const i = r[0].type;
    if (e(r, i))
      return !0;
  }
  return !1;
}
function ya(t, e) {
  return (e || new TextEncoder()).encode(t);
}
function q0(t, e) {
  const [n, r] = t;
  let i = JSON.stringify(n);
  function f(g) {
    typeof i == "string" ? i = typeof g == "string" ? i + g : [ya(i, e), g] : i.push(typeof g == "string" ? ya(g, e) : g);
  }
  for (const g of r) {
    const [l, s] = g;
    if (f(`
${JSON.stringify(l)}
`), typeof s == "string" || s instanceof Uint8Array)
      f(s);
    else {
      let a;
      try {
        a = JSON.stringify(s);
      } catch {
        a = JSON.stringify(an(s));
      }
      f(a);
    }
  }
  return typeof i == "string" ? i : Z0(i);
}
function Z0(t) {
  const e = t.reduce((i, f) => i + f.length, 0), n = new Uint8Array(e);
  let r = 0;
  for (const i of t)
    n.set(i, r), r += i.length;
  return n;
}
function J0(t, e) {
  const n = typeof t.data == "string" ? ya(t.data, e) : t.data;
  return [
    Vt({
      type: "attachment",
      length: n.length,
      filename: t.filename,
      content_type: t.contentType,
      attachment_type: t.attachmentType
    }),
    n
  ];
}
const Q0 = {
  session: "session",
  sessions: "session",
  attachment: "attachment",
  transaction: "transaction",
  event: "error",
  client_report: "internal",
  user_report: "default",
  profile: "profile",
  replay_event: "replay",
  replay_recording: "replay",
  check_in: "monitor",
  feedback: "feedback",
  span: "span",
  statsd: "metric_bucket"
};
function Gc(t) {
  return Q0[t];
}
function Kf(t) {
  if (!t || !t.sdk)
    return;
  const { name: e, version: n } = t.sdk;
  return { name: e, version: n };
}
function eb(t, e, n, r) {
  const i = t.sdkProcessingMetadata && t.sdkProcessingMetadata.dynamicSamplingContext;
  return {
    event_id: t.event_id,
    sent_at: (/* @__PURE__ */ new Date()).toISOString(),
    ...e && { sdk: e },
    ...!!n && r && { dsn: Si(r) },
    ...i && {
      trace: Vt({ ...i })
    }
  };
}
function tb(t, e, n) {
  const r = [
    { type: "client_report" },
    {
      timestamp: n || Ti(),
      discarded_events: t
    }
  ];
  return Mr(e ? { dsn: e } : {}, [r]);
}
const nb = 60 * 1e3;
function rb(t, e = Date.now()) {
  const n = parseInt(`${t}`, 10);
  if (!isNaN(n))
    return n * 1e3;
  const r = Date.parse(`${t}`);
  return isNaN(r) ? nb : r - e;
}
function ib(t, e) {
  return t[e] || t.all || 0;
}
function sb(t, e, n = Date.now()) {
  return ib(t, e) > n;
}
function ob(t, { statusCode: e, headers: n }, r = Date.now()) {
  const i = {
    ...t
  }, f = n && n["x-sentry-rate-limits"], g = n && n["retry-after"];
  if (f)
    for (const l of f.trim().split(",")) {
      const [s, a, , , h] = l.split(":", 5), o = parseInt(s, 10), u = (isNaN(o) ? 60 : o) * 1e3;
      if (!a)
        i.all = r + u;
      else
        for (const c of a.split(";"))
          c === "metric_bucket" ? (!h || h.split(";").includes("custom")) && (i[c] = r + u) : i[c] = r + u;
    }
  else
    g ? i.all = r + rb(g, r) : e === 429 && (i.all = r + 60 * 1e3);
  return i;
}
const Le = typeof __SENTRY_DEBUG__ > "u" || __SENTRY_DEBUG__, Xs = "production";
function El() {
  return Rf("globalEventProcessors", () => []);
}
function ab(t) {
  El().push(t);
}
function ds(t, e, n, r = 0) {
  return new ft((i, f) => {
    const g = t[r];
    if (e === null || typeof g != "function")
      i(e);
    else {
      const l = g({ ...e }, n);
      Le && g.id && l === null && _e.log(`Event processor "${g.id}" dropped event`), Hs(l) ? l.then((s) => ds(t, s, n, r + 1).then(i)).then(null, f) : ds(t, l, n, r + 1).then(i).then(null, f);
    }
  });
}
function qf(t) {
  const e = Gf(), n = {
    sid: kt(),
    init: !0,
    timestamp: e,
    started: e,
    duration: 0,
    status: "ok",
    errors: 0,
    ignoreDuration: !1,
    toJSON: () => lb(n)
  };
  return t && $n(n, t), n;
}
function $n(t, e = {}) {
  if (e.user && (!t.ipAddress && e.user.ip_address && (t.ipAddress = e.user.ip_address), !t.did && !e.did && (t.did = e.user.id || e.user.email || e.user.username)), t.timestamp = e.timestamp || Gf(), e.abnormal_mechanism && (t.abnormal_mechanism = e.abnormal_mechanism), e.ignoreDuration && (t.ignoreDuration = e.ignoreDuration), e.sid && (t.sid = e.sid.length === 32 ? e.sid : kt()), e.init !== void 0 && (t.init = e.init), !t.did && e.did && (t.did = `${e.did}`), typeof e.started == "number" && (t.started = e.started), t.ignoreDuration)
    t.duration = void 0;
  else if (typeof e.duration == "number")
    t.duration = e.duration;
  else {
    const n = t.timestamp - t.started;
    t.duration = n >= 0 ? n : 0;
  }
  e.release && (t.release = e.release), e.environment && (t.environment = e.environment), !t.ipAddress && e.ipAddress && (t.ipAddress = e.ipAddress), !t.userAgent && e.userAgent && (t.userAgent = e.userAgent), typeof e.errors == "number" && (t.errors = e.errors), e.status && (t.status = e.status);
}
function Zf(t, e) {
  let n = {};
  e ? n = { status: e } : t.status === "ok" && (n = { status: "exited" }), $n(t, n);
}
function lb(t) {
  return Vt({
    sid: `${t.sid}`,
    init: t.init,
    // Make sure that sec is converted to ms for date constructor
    started: new Date(t.started * 1e3).toISOString(),
    timestamp: new Date(t.timestamp * 1e3).toISOString(),
    status: t.status,
    errors: t.errors,
    did: typeof t.did == "number" || typeof t.did == "string" ? `${t.did}` : void 0,
    duration: t.duration,
    abnormal_mechanism: t.abnormal_mechanism,
    attrs: {
      release: t.release,
      environment: t.environment,
      ip_address: t.ipAddress,
      user_agent: t.userAgent
    }
  });
}
const cb = 1;
function ub(t) {
  const { spanId: e, traceId: n } = t.spanContext(), { data: r, op: i, parent_span_id: f, status: g, tags: l, origin: s } = ci(t);
  return Vt({
    data: r,
    op: i,
    parent_span_id: f,
    span_id: e,
    status: g,
    tags: l,
    trace_id: n,
    origin: s
  });
}
function ci(t) {
  return hb(t) ? t.getSpanJSON() : typeof t.toJSON == "function" ? t.toJSON() : {};
}
function hb(t) {
  return typeof t.getSpanJSON == "function";
}
function fb(t) {
  const { traceFlags: e } = t.spanContext();
  return !!(e & cb);
}
function db(t, e, n, r, i, f) {
  const { normalizeDepth: g = 3, normalizeMaxBreadth: l = 1e3 } = t, s = {
    ...e,
    event_id: e.event_id || n.event_id || kt(),
    timestamp: e.timestamp || Ti()
  }, a = n.integrations || t.integrations.map((p) => p.name);
  pb(s, t), vb(s, a), e.type === void 0 && gb(s, t.stackParser);
  const h = yb(r, n.captureContext);
  n.mechanism && li(s, n.mechanism);
  const o = i && i.getEventProcessors ? i.getEventProcessors() : [], u = Fb().getScopeData();
  if (f) {
    const p = f.getScopeData();
    Jc(u, p);
  }
  if (h) {
    const p = h.getScopeData();
    Jc(u, p);
  }
  const c = [...n.attachments || [], ...u.attachments];
  c.length && (n.attachments = c), rd(s, u);
  const d = [
    ...o,
    // eslint-disable-next-line deprecation/deprecation
    ...El(),
    // Run scope event processors _after_ all other processors
    ...u.eventProcessors
  ];
  return ds(d, s, n).then((p) => (p && mb(p), typeof g == "number" && g > 0 ? bb(p, g, l) : p));
}
function pb(t, e) {
  const { environment: n, release: r, dist: i, maxValueLength: f = 250 } = e;
  "environment" in t || (t.environment = "environment" in e ? n : Xs), t.release === void 0 && r !== void 0 && (t.release = r), t.dist === void 0 && i !== void 0 && (t.dist = i), t.message && (t.message = pr(t.message, f));
  const g = t.exception && t.exception.values && t.exception.values[0];
  g && g.value && (g.value = pr(g.value, f));
  const l = t.request;
  l && l.url && (l.url = pr(l.url, f));
}
const Kc = /* @__PURE__ */ new WeakMap();
function gb(t, e) {
  const n = Ae._sentryDebugIds;
  if (!n)
    return;
  let r;
  const i = Kc.get(e);
  i ? r = i : (r = /* @__PURE__ */ new Map(), Kc.set(e, r));
  const f = Object.keys(n).reduce((g, l) => {
    let s;
    const a = r.get(l);
    a ? s = a : (s = e(l), r.set(l, s));
    for (let h = s.length - 1; h >= 0; h--) {
      const o = s[h];
      if (o.filename) {
        g[o.filename] = n[l];
        break;
      }
    }
    return g;
  }, {});
  try {
    t.exception.values.forEach((g) => {
      g.stacktrace.frames.forEach((l) => {
        l.filename && (l.debug_id = f[l.filename]);
      });
    });
  } catch {
  }
}
function mb(t) {
  const e = {};
  try {
    t.exception.values.forEach((r) => {
      r.stacktrace.frames.forEach((i) => {
        i.debug_id && (i.abs_path ? e[i.abs_path] = i.debug_id : i.filename && (e[i.filename] = i.debug_id), delete i.debug_id);
      });
    });
  } catch {
  }
  if (Object.keys(e).length === 0)
    return;
  t.debug_meta = t.debug_meta || {}, t.debug_meta.images = t.debug_meta.images || [];
  const n = t.debug_meta.images;
  Object.keys(e).forEach((r) => {
    n.push({
      type: "sourcemap",
      code_file: r,
      debug_id: e[r]
    });
  });
}
function vb(t, e) {
  e.length > 0 && (t.sdk = t.sdk || {}, t.sdk.integrations = [...t.sdk.integrations || [], ...e]);
}
function bb(t, e, n) {
  if (!t)
    return null;
  const r = {
    ...t,
    ...t.breadcrumbs && {
      breadcrumbs: t.breadcrumbs.map((i) => ({
        ...i,
        ...i.data && {
          data: an(i.data, e, n)
        }
      }))
    },
    ...t.user && {
      user: an(t.user, e, n)
    },
    ...t.contexts && {
      contexts: an(t.contexts, e, n)
    },
    ...t.extra && {
      extra: an(t.extra, e, n)
    }
  };
  return t.contexts && t.contexts.trace && r.contexts && (r.contexts.trace = t.contexts.trace, t.contexts.trace.data && (r.contexts.trace.data = an(t.contexts.trace.data, e, n))), t.spans && (r.spans = t.spans.map((i) => {
    const f = ci(i).data;
    return f && (i.data = an(f, e, n)), i;
  })), r;
}
function yb(t, e) {
  if (!e)
    return t;
  const n = t ? t.clone() : new Gt();
  return n.update(e), n;
}
function wb(t) {
  if (t)
    return xb(t) ? { captureContext: t } : _b(t) ? {
      captureContext: t
    } : t;
}
function xb(t) {
  return t instanceof Gt || typeof t == "function";
}
const Cb = [
  "user",
  "level",
  "extra",
  "contexts",
  "tags",
  "fingerprint",
  "requestSession",
  "propagationContext"
];
function _b(t) {
  return Object.keys(t).some((e) => Cb.includes(e));
}
function Sb(t, e) {
  return en().captureException(t, wb(e));
}
function Jf(t, e) {
  return en().captureEvent(t, e);
}
function Vn(t, e) {
  en().addBreadcrumb(t, e);
}
function Tb(...t) {
  const e = en();
  if (t.length === 2) {
    const [n, r] = t;
    return n ? e.withScope(() => (e.getStackTop().scope = n, r(n))) : e.withScope(r);
  }
  return e.withScope(t[0]);
}
function ht() {
  return en().getClient();
}
function Ei() {
  return en().getScope();
}
function qc(t) {
  const e = ht(), n = Gs(), r = Ei(), { release: i, environment: f = Xs } = e && e.getOptions() || {}, { userAgent: g } = Ae.navigator || {}, l = qf({
    release: i,
    environment: f,
    user: r.getUser() || n.getUser(),
    ...g && { userAgent: g },
    ...t
  }), s = n.getSession();
  return s && s.status === "ok" && $n(s, { status: "exited" }), Qf(), n.setSession(l), r.setSession(l), l;
}
function Qf() {
  const t = Gs(), e = Ei(), n = e.getSession() || t.getSession();
  n && Zf(n), ed(), t.setSession(), e.setSession();
}
function ed() {
  const t = Gs(), e = Ei(), n = ht(), r = e.getSession() || t.getSession();
  r && n && n.captureSession && n.captureSession(r);
}
function Zc(t = !1) {
  if (t) {
    Qf();
    return;
  }
  ed();
}
function td(t) {
  return t.transaction;
}
function nd(t, e, n) {
  const r = e.getOptions(), { publicKey: i } = e.getDsn() || {}, { segment: f } = n && n.getUser() || {}, g = Vt({
    environment: r.environment || Xs,
    release: r.release,
    user_segment: f,
    public_key: i,
    trace_id: t
  });
  return e.emit && e.emit("createDsc", g), g;
}
function Eb(t) {
  const e = ht();
  if (!e)
    return {};
  const n = nd(ci(t).trace_id || "", e, Ei()), r = td(t);
  if (!r)
    return n;
  const i = r && r._frozenDynamicSamplingContext;
  if (i)
    return i;
  const { sampleRate: f, source: g } = r.metadata;
  f != null && (n.sample_rate = `${f}`);
  const l = ci(r);
  return g && g !== "url" && (n.transaction = l.description), n.sampled = String(fb(r)), e.emit && e.emit("createDsc", n), n;
}
function rd(t, e) {
  const { fingerprint: n, span: r, breadcrumbs: i, sdkProcessingMetadata: f } = e;
  kb(t, e), r && Ab(t, r), Pb(t, n), Ob(t, i), Db(t, f);
}
function Jc(t, e) {
  const {
    extra: n,
    tags: r,
    user: i,
    contexts: f,
    level: g,
    sdkProcessingMetadata: l,
    breadcrumbs: s,
    fingerprint: a,
    eventProcessors: h,
    attachments: o,
    propagationContext: u,
    // eslint-disable-next-line deprecation/deprecation
    transactionName: c,
    span: d
  } = e;
  Hr(t, "extra", n), Hr(t, "tags", r), Hr(t, "user", i), Hr(t, "contexts", f), Hr(t, "sdkProcessingMetadata", l), g && (t.level = g), c && (t.transactionName = c), d && (t.span = d), s.length && (t.breadcrumbs = [...t.breadcrumbs, ...s]), a.length && (t.fingerprint = [...t.fingerprint, ...a]), h.length && (t.eventProcessors = [...t.eventProcessors, ...h]), o.length && (t.attachments = [...t.attachments, ...o]), t.propagationContext = { ...t.propagationContext, ...u };
}
function Hr(t, e, n) {
  if (n && Object.keys(n).length) {
    t[e] = { ...t[e] };
    for (const r in n)
      Object.prototype.hasOwnProperty.call(n, r) && (t[e][r] = n[r]);
  }
}
function kb(t, e) {
  const {
    extra: n,
    tags: r,
    user: i,
    contexts: f,
    level: g,
    // eslint-disable-next-line deprecation/deprecation
    transactionName: l
  } = e, s = Vt(n);
  s && Object.keys(s).length && (t.extra = { ...s, ...t.extra });
  const a = Vt(r);
  a && Object.keys(a).length && (t.tags = { ...a, ...t.tags });
  const h = Vt(i);
  h && Object.keys(h).length && (t.user = { ...h, ...t.user });
  const o = Vt(f);
  o && Object.keys(o).length && (t.contexts = { ...o, ...t.contexts }), g && (t.level = g), l && (t.transaction = l);
}
function Ob(t, e) {
  const n = [...t.breadcrumbs || [], ...e];
  t.breadcrumbs = n.length ? n : void 0;
}
function Db(t, e) {
  t.sdkProcessingMetadata = {
    ...t.sdkProcessingMetadata,
    ...e
  };
}
function Ab(t, e) {
  t.contexts = { trace: ub(e), ...t.contexts };
  const n = td(e);
  if (n) {
    t.sdkProcessingMetadata = {
      dynamicSamplingContext: Eb(e),
      ...t.sdkProcessingMetadata
    };
    const r = ci(n).description;
    r && (t.tags = { transaction: r, ...t.tags });
  }
}
function Pb(t, e) {
  t.fingerprint = t.fingerprint ? Hf(t.fingerprint) : [], e && (t.fingerprint = t.fingerprint.concat(e)), t.fingerprint && !t.fingerprint.length && delete t.fingerprint;
}
const Mb = 100;
let Do;
class Gt {
  /** Flag if notifying is happening. */
  /** Callback for client to receive scope changes. */
  /** Callback list that will be called after {@link applyToEvent}. */
  /** Array of breadcrumbs. */
  /** User */
  /** Tags */
  /** Extra */
  /** Contexts */
  /** Attachments */
  /** Propagation Context for distributed tracing */
  /**
   * A place to stash data which is needed at some point in the SDK's event processing pipeline but which shouldn't get
   * sent to Sentry
   */
  /** Fingerprint */
  /** Severity */
  // eslint-disable-next-line deprecation/deprecation
  /**
   * Transaction Name
   */
  /** Span */
  /** Session */
  /** Request Mode Session Status */
  /** The client on this scope */
  // NOTE: Any field which gets added here should get added not only to the constructor but also to the `clone` method.
  constructor() {
    this._notifyingListeners = !1, this._scopeListeners = [], this._eventProcessors = [], this._breadcrumbs = [], this._attachments = [], this._user = {}, this._tags = {}, this._extra = {}, this._contexts = {}, this._sdkProcessingMetadata = {}, this._propagationContext = Qc();
  }
  /**
   * Inherit values from the parent scope.
   * @deprecated Use `scope.clone()` and `new Scope()` instead.
   */
  static clone(e) {
    return e ? e.clone() : new Gt();
  }
  /**
   * Clone this scope instance.
   */
  clone() {
    const e = new Gt();
    return e._breadcrumbs = [...this._breadcrumbs], e._tags = { ...this._tags }, e._extra = { ...this._extra }, e._contexts = { ...this._contexts }, e._user = this._user, e._level = this._level, e._span = this._span, e._session = this._session, e._transactionName = this._transactionName, e._fingerprint = this._fingerprint, e._eventProcessors = [...this._eventProcessors], e._requestSession = this._requestSession, e._attachments = [...this._attachments], e._sdkProcessingMetadata = { ...this._sdkProcessingMetadata }, e._propagationContext = { ...this._propagationContext }, e._client = this._client, e;
  }
  /** Update the client on the scope. */
  setClient(e) {
    this._client = e;
  }
  /**
   * Get the client assigned to this scope.
   *
   * It is generally recommended to use the global function `Sentry.getClient()` instead, unless you know what you are doing.
   */
  getClient() {
    return this._client;
  }
  /**
   * Add internal on change listener. Used for sub SDKs that need to store the scope.
   * @hidden
   */
  addScopeListener(e) {
    this._scopeListeners.push(e);
  }
  /**
   * @inheritDoc
   */
  addEventProcessor(e) {
    return this._eventProcessors.push(e), this;
  }
  /**
   * @inheritDoc
   */
  setUser(e) {
    return this._user = e || {
      email: void 0,
      id: void 0,
      ip_address: void 0,
      segment: void 0,
      username: void 0
    }, this._session && $n(this._session, { user: e }), this._notifyScopeListeners(), this;
  }
  /**
   * @inheritDoc
   */
  getUser() {
    return this._user;
  }
  /**
   * @inheritDoc
   */
  getRequestSession() {
    return this._requestSession;
  }
  /**
   * @inheritDoc
   */
  setRequestSession(e) {
    return this._requestSession = e, this;
  }
  /**
   * @inheritDoc
   */
  setTags(e) {
    return this._tags = {
      ...this._tags,
      ...e
    }, this._notifyScopeListeners(), this;
  }
  /**
   * @inheritDoc
   */
  setTag(e, n) {
    return this._tags = { ...this._tags, [e]: n }, this._notifyScopeListeners(), this;
  }
  /**
   * @inheritDoc
   */
  setExtras(e) {
    return this._extra = {
      ...this._extra,
      ...e
    }, this._notifyScopeListeners(), this;
  }
  /**
   * @inheritDoc
   */
  setExtra(e, n) {
    return this._extra = { ...this._extra, [e]: n }, this._notifyScopeListeners(), this;
  }
  /**
   * @inheritDoc
   */
  setFingerprint(e) {
    return this._fingerprint = e, this._notifyScopeListeners(), this;
  }
  /**
   * @inheritDoc
   */
  setLevel(e) {
    return this._level = e, this._notifyScopeListeners(), this;
  }
  /**
   * Sets the transaction name on the scope for future events.
   */
  setTransactionName(e) {
    return this._transactionName = e, this._notifyScopeListeners(), this;
  }
  /**
   * @inheritDoc
   */
  setContext(e, n) {
    return n === null ? delete this._contexts[e] : this._contexts[e] = n, this._notifyScopeListeners(), this;
  }
  /**
   * Sets the Span on the scope.
   * @param span Span
   * @deprecated Instead of setting a span on a scope, use `startSpan()`/`startSpanManual()` instead.
   */
  setSpan(e) {
    return this._span = e, this._notifyScopeListeners(), this;
  }
  /**
   * Returns the `Span` if there is one.
   * @deprecated Use `getActiveSpan()` instead.
   */
  getSpan() {
    return this._span;
  }
  /**
   * Returns the `Transaction` attached to the scope (if there is one).
   * @deprecated You should not rely on the transaction, but just use `startSpan()` APIs instead.
   */
  getTransaction() {
    const e = this._span;
    return e && e.transaction;
  }
  /**
   * @inheritDoc
   */
  setSession(e) {
    return e ? this._session = e : delete this._session, this._notifyScopeListeners(), this;
  }
  /**
   * @inheritDoc
   */
  getSession() {
    return this._session;
  }
  /**
   * @inheritDoc
   */
  update(e) {
    if (!e)
      return this;
    const n = typeof e == "function" ? e(this) : e;
    if (n instanceof Gt) {
      const r = n.getScopeData();
      this._tags = { ...this._tags, ...r.tags }, this._extra = { ...this._extra, ...r.extra }, this._contexts = { ...this._contexts, ...r.contexts }, r.user && Object.keys(r.user).length && (this._user = r.user), r.level && (this._level = r.level), r.fingerprint.length && (this._fingerprint = r.fingerprint), n.getRequestSession() && (this._requestSession = n.getRequestSession()), r.propagationContext && (this._propagationContext = r.propagationContext);
    } else if (yr(n)) {
      const r = e;
      this._tags = { ...this._tags, ...r.tags }, this._extra = { ...this._extra, ...r.extra }, this._contexts = { ...this._contexts, ...r.contexts }, r.user && (this._user = r.user), r.level && (this._level = r.level), r.fingerprint && (this._fingerprint = r.fingerprint), r.requestSession && (this._requestSession = r.requestSession), r.propagationContext && (this._propagationContext = r.propagationContext);
    }
    return this;
  }
  /**
   * @inheritDoc
   */
  clear() {
    return this._breadcrumbs = [], this._tags = {}, this._extra = {}, this._user = {}, this._contexts = {}, this._level = void 0, this._transactionName = void 0, this._fingerprint = void 0, this._requestSession = void 0, this._span = void 0, this._session = void 0, this._notifyScopeListeners(), this._attachments = [], this._propagationContext = Qc(), this;
  }
  /**
   * @inheritDoc
   */
  addBreadcrumb(e, n) {
    const r = typeof n == "number" ? n : Mb;
    if (r <= 0)
      return this;
    const i = {
      timestamp: Ti(),
      ...e
    }, f = this._breadcrumbs;
    return f.push(i), this._breadcrumbs = f.length > r ? f.slice(-r) : f, this._notifyScopeListeners(), this;
  }
  /**
   * @inheritDoc
   */
  getLastBreadcrumb() {
    return this._breadcrumbs[this._breadcrumbs.length - 1];
  }
  /**
   * @inheritDoc
   */
  clearBreadcrumbs() {
    return this._breadcrumbs = [], this._notifyScopeListeners(), this;
  }
  /**
   * @inheritDoc
   */
  addAttachment(e) {
    return this._attachments.push(e), this;
  }
  /**
   * @inheritDoc
   * @deprecated Use `getScopeData()` instead.
   */
  getAttachments() {
    return this.getScopeData().attachments;
  }
  /**
   * @inheritDoc
   */
  clearAttachments() {
    return this._attachments = [], this;
  }
  /** @inheritDoc */
  getScopeData() {
    const {
      _breadcrumbs: e,
      _attachments: n,
      _contexts: r,
      _tags: i,
      _extra: f,
      _user: g,
      _level: l,
      _fingerprint: s,
      _eventProcessors: a,
      _propagationContext: h,
      _sdkProcessingMetadata: o,
      _transactionName: u,
      _span: c
    } = this;
    return {
      breadcrumbs: e,
      attachments: n,
      contexts: r,
      tags: i,
      extra: f,
      user: g,
      level: l,
      fingerprint: s || [],
      eventProcessors: a,
      propagationContext: h,
      sdkProcessingMetadata: o,
      transactionName: u,
      span: c
    };
  }
  /**
   * Applies data from the scope to the event and runs all event processors on it.
   *
   * @param event Event
   * @param hint Object containing additional information about the original exception, for use by the event processors.
   * @hidden
   * @deprecated Use `applyScopeDataToEvent()` directly
   */
  applyToEvent(e, n = {}, r = []) {
    rd(e, this.getScopeData());
    const i = [
      ...r,
      // eslint-disable-next-line deprecation/deprecation
      ...El(),
      ...this._eventProcessors
    ];
    return ds(i, e, n);
  }
  /**
   * Add data which will be accessible during event processing but won't get sent to Sentry
   */
  setSDKProcessingMetadata(e) {
    return this._sdkProcessingMetadata = { ...this._sdkProcessingMetadata, ...e }, this;
  }
  /**
   * @inheritDoc
   */
  setPropagationContext(e) {
    return this._propagationContext = e, this;
  }
  /**
   * @inheritDoc
   */
  getPropagationContext() {
    return this._propagationContext;
  }
  /**
   * Capture an exception for this scope.
   *
   * @param exception The exception to capture.
   * @param hint Optinal additional data to attach to the Sentry event.
   * @returns the id of the captured Sentry event.
   */
  captureException(e, n) {
    const r = n && n.event_id ? n.event_id : kt();
    if (!this._client)
      return _e.warn("No client configured on scope - will not capture exception!"), r;
    const i = new Error("Sentry syntheticException");
    return this._client.captureException(
      e,
      {
        originalException: e,
        syntheticException: i,
        ...n,
        event_id: r
      },
      this
    ), r;
  }
  /**
   * Capture a message for this scope.
   *
   * @param message The message to capture.
   * @param level An optional severity level to report the message with.
   * @param hint Optional additional data to attach to the Sentry event.
   * @returns the id of the captured message.
   */
  captureMessage(e, n, r) {
    const i = r && r.event_id ? r.event_id : kt();
    if (!this._client)
      return _e.warn("No client configured on scope - will not capture message!"), i;
    const f = new Error(e);
    return this._client.captureMessage(
      e,
      n,
      {
        originalException: e,
        syntheticException: f,
        ...r,
        event_id: i
      },
      this
    ), i;
  }
  /**
   * Captures a manually created event for this scope and sends it to Sentry.
   *
   * @param exception The event to capture.
   * @param hint Optional additional data to attach to the Sentry event.
   * @returns the id of the captured event.
   */
  captureEvent(e, n) {
    const r = n && n.event_id ? n.event_id : kt();
    return this._client ? (this._client.captureEvent(e, { ...n, event_id: r }, this), r) : (_e.warn("No client configured on scope - will not capture event!"), r);
  }
  /**
   * This will be called on every set call.
   */
  _notifyScopeListeners() {
    this._notifyingListeners || (this._notifyingListeners = !0, this._scopeListeners.forEach((e) => {
      e(this);
    }), this._notifyingListeners = !1);
  }
}
function Fb() {
  return Do || (Do = new Gt()), Do;
}
function Qc() {
  return {
    traceId: kt(),
    spanId: kt().substring(16)
  };
}
const wa = "7.116.0", id = parseFloat(wa), Ib = 100;
class sd {
  /** Is a {@link Layer}[] containing the client and scope */
  /** Contains the last event id of a captured event.  */
  /**
   * Creates a new instance of the hub, will push one {@link Layer} into the
   * internal stack on creation.
   *
   * @param client bound to the hub.
   * @param scope bound to the hub.
   * @param version number, higher number means higher priority.
   *
   * @deprecated Instantiation of Hub objects is deprecated and the constructor will be removed in version 8 of the SDK.
   *
   * If you are currently using the Hub for multi-client use like so:
   *
   * ```
   * // OLD
   * const hub = new Hub();
   * hub.bindClient(client);
   * makeMain(hub)
   * ```
   *
   * instead initialize the client as follows:
   *
   * ```
   * // NEW
   * Sentry.withIsolationScope(() => {
   *    Sentry.setCurrentClient(client);
   *    client.init();
   * });
   * ```
   *
   * If you are using the Hub to capture events like so:
   *
   * ```
   * // OLD
   * const client = new Client();
   * const hub = new Hub(client);
   * hub.captureException()
   * ```
   *
   * instead capture isolated events as follows:
   *
   * ```
   * // NEW
   * const client = new Client();
   * const scope = new Scope();
   * scope.setClient(client);
   * scope.captureException();
   * ```
   */
  constructor(e, n, r, i = id) {
    this._version = i;
    let f;
    n ? f = n : (f = new Gt(), f.setClient(e));
    let g;
    r ? g = r : (g = new Gt(), g.setClient(e)), this._stack = [{ scope: f }], e && this.bindClient(e), this._isolationScope = g;
  }
  /**
   * Checks if this hub's version is older than the given version.
   *
   * @param version A version number to compare to.
   * @return True if the given version is newer; otherwise false.
   *
   * @deprecated This will be removed in v8.
   */
  isOlderThan(e) {
    return this._version < e;
  }
  /**
   * This binds the given client to the current scope.
   * @param client An SDK client (client) instance.
   *
   * @deprecated Use `initAndBind()` directly, or `setCurrentClient()` and/or `client.init()` instead.
   */
  bindClient(e) {
    const n = this.getStackTop();
    n.client = e, n.scope.setClient(e), e && e.setupIntegrations && e.setupIntegrations();
  }
  /**
   * @inheritDoc
   *
   * @deprecated Use `withScope` instead.
   */
  pushScope() {
    const e = this.getScope().clone();
    return this.getStack().push({
      // eslint-disable-next-line deprecation/deprecation
      client: this.getClient(),
      scope: e
    }), e;
  }
  /**
   * @inheritDoc
   *
   * @deprecated Use `withScope` instead.
   */
  popScope() {
    return this.getStack().length <= 1 ? !1 : !!this.getStack().pop();
  }
  /**
   * @inheritDoc
   *
   * @deprecated Use `Sentry.withScope()` instead.
   */
  withScope(e) {
    const n = this.pushScope();
    let r;
    try {
      r = e(n);
    } catch (i) {
      throw this.popScope(), i;
    }
    return Hs(r) ? r.then(
      (i) => (this.popScope(), i),
      (i) => {
        throw this.popScope(), i;
      }
    ) : (this.popScope(), r);
  }
  /**
   * @inheritDoc
   *
   * @deprecated Use `Sentry.getClient()` instead.
   */
  getClient() {
    return this.getStackTop().client;
  }
  /**
   * Returns the scope of the top stack.
   *
   * @deprecated Use `Sentry.getCurrentScope()` instead.
   */
  getScope() {
    return this.getStackTop().scope;
  }
  /**
   * @deprecated Use `Sentry.getIsolationScope()` instead.
   */
  getIsolationScope() {
    return this._isolationScope;
  }
  /**
   * Returns the scope stack for domains or the process.
   * @deprecated This will be removed in v8.
   */
  getStack() {
    return this._stack;
  }
  /**
   * Returns the topmost scope layer in the order domain > local > process.
   * @deprecated This will be removed in v8.
   */
  getStackTop() {
    return this._stack[this._stack.length - 1];
  }
  /**
   * @inheritDoc
   *
   * @deprecated Use `Sentry.captureException()` instead.
   */
  captureException(e, n) {
    const r = this._lastEventId = n && n.event_id ? n.event_id : kt(), i = new Error("Sentry syntheticException");
    return this.getScope().captureException(e, {
      originalException: e,
      syntheticException: i,
      ...n,
      event_id: r
    }), r;
  }
  /**
   * @inheritDoc
   *
   * @deprecated Use  `Sentry.captureMessage()` instead.
   */
  captureMessage(e, n, r) {
    const i = this._lastEventId = r && r.event_id ? r.event_id : kt(), f = new Error(e);
    return this.getScope().captureMessage(e, n, {
      originalException: e,
      syntheticException: f,
      ...r,
      event_id: i
    }), i;
  }
  /**
   * @inheritDoc
   *
   * @deprecated Use `Sentry.captureEvent()` instead.
   */
  captureEvent(e, n) {
    const r = n && n.event_id ? n.event_id : kt();
    return e.type || (this._lastEventId = r), this.getScope().captureEvent(e, { ...n, event_id: r }), r;
  }
  /**
   * @inheritDoc
   *
   * @deprecated This will be removed in v8.
   */
  lastEventId() {
    return this._lastEventId;
  }
  /**
   * @inheritDoc
   *
   * @deprecated Use `Sentry.addBreadcrumb()` instead.
   */
  addBreadcrumb(e, n) {
    const { scope: r, client: i } = this.getStackTop();
    if (!i)
      return;
    const { beforeBreadcrumb: f = null, maxBreadcrumbs: g = Ib } = i.getOptions && i.getOptions() || {};
    if (g <= 0)
      return;
    const s = { timestamp: Ti(), ...e }, a = f ? Us(() => f(s, n)) : s;
    a !== null && (i.emit && i.emit("beforeAddBreadcrumb", a, n), r.addBreadcrumb(a, g));
  }
  /**
   * @inheritDoc
   * @deprecated Use `Sentry.setUser()` instead.
   */
  setUser(e) {
    this.getScope().setUser(e), this.getIsolationScope().setUser(e);
  }
  /**
   * @inheritDoc
   * @deprecated Use `Sentry.setTags()` instead.
   */
  setTags(e) {
    this.getScope().setTags(e), this.getIsolationScope().setTags(e);
  }
  /**
   * @inheritDoc
   * @deprecated Use `Sentry.setExtras()` instead.
   */
  setExtras(e) {
    this.getScope().setExtras(e), this.getIsolationScope().setExtras(e);
  }
  /**
   * @inheritDoc
   * @deprecated Use `Sentry.setTag()` instead.
   */
  setTag(e, n) {
    this.getScope().setTag(e, n), this.getIsolationScope().setTag(e, n);
  }
  /**
   * @inheritDoc
   * @deprecated Use `Sentry.setExtra()` instead.
   */
  setExtra(e, n) {
    this.getScope().setExtra(e, n), this.getIsolationScope().setExtra(e, n);
  }
  /**
   * @inheritDoc
   * @deprecated Use `Sentry.setContext()` instead.
   */
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  setContext(e, n) {
    this.getScope().setContext(e, n), this.getIsolationScope().setContext(e, n);
  }
  /**
   * @inheritDoc
   *
   * @deprecated Use `getScope()` directly.
   */
  configureScope(e) {
    const { scope: n, client: r } = this.getStackTop();
    r && e(n);
  }
  /**
   * @inheritDoc
   */
  // eslint-disable-next-line deprecation/deprecation
  run(e) {
    const n = eu(this);
    try {
      e(this);
    } finally {
      eu(n);
    }
  }
  /**
   * @inheritDoc
   * @deprecated Use `Sentry.getClient().getIntegrationByName()` instead.
   */
  getIntegration(e) {
    const n = this.getClient();
    if (!n)
      return null;
    try {
      return n.getIntegration(e);
    } catch {
      return Le && _e.warn(`Cannot retrieve integration ${e.id} from the current Hub`), null;
    }
  }
  /**
   * Starts a new `Transaction` and returns it. This is the entry point to manual tracing instrumentation.
   *
   * A tree structure can be built by adding child spans to the transaction, and child spans to other spans. To start a
   * new child span within the transaction or any span, call the respective `.startChild()` method.
   *
   * Every child span must be finished before the transaction is finished, otherwise the unfinished spans are discarded.
   *
   * The transaction must be finished with a call to its `.end()` method, at which point the transaction with all its
   * finished child spans will be sent to Sentry.
   *
   * @param context Properties of the new `Transaction`.
   * @param customSamplingContext Information given to the transaction sampling function (along with context-dependent
   * default values). See {@link Options.tracesSampler}.
   *
   * @returns The transaction which was just started
   *
   * @deprecated Use `startSpan()`, `startSpanManual()` or `startInactiveSpan()` instead.
   */
  startTransaction(e, n) {
    const r = this._callExtensionMethod("startTransaction", e, n);
    return Le && !r && (this.getClient() ? _e.warn(`Tracing extension 'startTransaction' has not been added. Call 'addTracingExtensions' before calling 'init':
Sentry.addTracingExtensions();
Sentry.init({...});
`) : _e.warn(
      "Tracing extension 'startTransaction' is missing. You should 'init' the SDK before calling 'startTransaction'"
    )), r;
  }
  /**
   * @inheritDoc
   * @deprecated Use `spanToTraceHeader()` instead.
   */
  traceHeaders() {
    return this._callExtensionMethod("traceHeaders");
  }
  /**
   * @inheritDoc
   *
   * @deprecated Use top level `captureSession` instead.
   */
  captureSession(e = !1) {
    if (e)
      return this.endSession();
    this._sendSessionUpdate();
  }
  /**
   * @inheritDoc
   * @deprecated Use top level `endSession` instead.
   */
  endSession() {
    const n = this.getStackTop().scope, r = n.getSession();
    r && Zf(r), this._sendSessionUpdate(), n.setSession();
  }
  /**
   * @inheritDoc
   * @deprecated Use top level `startSession` instead.
   */
  startSession(e) {
    const { scope: n, client: r } = this.getStackTop(), { release: i, environment: f = Xs } = r && r.getOptions() || {}, { userAgent: g } = Ae.navigator || {}, l = qf({
      release: i,
      environment: f,
      user: n.getUser(),
      ...g && { userAgent: g },
      ...e
    }), s = n.getSession && n.getSession();
    return s && s.status === "ok" && $n(s, { status: "exited" }), this.endSession(), n.setSession(l), l;
  }
  /**
   * Returns if default PII should be sent to Sentry and propagated in ourgoing requests
   * when Tracing is used.
   *
   * @deprecated Use top-level `getClient().getOptions().sendDefaultPii` instead. This function
   * only unnecessarily increased API surface but only wrapped accessing the option.
   */
  shouldSendDefaultPii() {
    const e = this.getClient(), n = e && e.getOptions();
    return !!(n && n.sendDefaultPii);
  }
  /**
   * Sends the current Session on the scope
   */
  _sendSessionUpdate() {
    const { scope: e, client: n } = this.getStackTop(), r = e.getSession();
    r && n && n.captureSession && n.captureSession(r);
  }
  /**
   * Calls global extension method and binding current instance to the function call
   */
  // @ts-expect-error Function lacks ending return statement and return type does not include 'undefined'. ts(2366)
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  _callExtensionMethod(e, ...n) {
    const i = Ys().__SENTRY__;
    if (i && i.extensions && typeof i.extensions[e] == "function")
      return i.extensions[e].apply(this, n);
    Le && _e.warn(`Extension method ${e} couldn't be found, doing nothing.`);
  }
}
function Ys() {
  return Ae.__SENTRY__ = Ae.__SENTRY__ || {
    extensions: {},
    hub: void 0
  }, Ae;
}
function eu(t) {
  const e = Ys(), n = xa(e);
  return od(e, t), n;
}
function en() {
  const t = Ys();
  if (t.__SENTRY__ && t.__SENTRY__.acs) {
    const e = t.__SENTRY__.acs.getCurrentHub();
    if (e)
      return e;
  }
  return Rb(t);
}
function Gs() {
  return en().getIsolationScope();
}
function Rb(t = Ys()) {
  return (!Lb(t) || // eslint-disable-next-line deprecation/deprecation
  xa(t).isOlderThan(id)) && od(t, new sd()), xa(t);
}
function Lb(t) {
  return !!(t && t.__SENTRY__ && t.__SENTRY__.hub);
}
function xa(t) {
  return Rf("hub", () => new sd(), t);
}
function od(t, e) {
  if (!t)
    return !1;
  const n = t.__SENTRY__ = t.__SENTRY__ || {};
  return n.hub = e, !0;
}
function Bb(t, e) {
  return e && (t.sdk = t.sdk || {}, t.sdk.name = t.sdk.name || e.name, t.sdk.version = t.sdk.version || e.version, t.sdk.integrations = [...t.sdk.integrations || [], ...e.integrations || []], t.sdk.packages = [...t.sdk.packages || [], ...e.packages || []]), t;
}
function zb(t, e, n, r) {
  const i = Kf(n), f = {
    sent_at: (/* @__PURE__ */ new Date()).toISOString(),
    ...i && { sdk: i },
    ...!!r && e && { dsn: Si(e) }
  }, g = "aggregates" in t ? [{ type: "sessions" }, t] : [{ type: "session" }, t.toJSON()];
  return Mr(f, [g]);
}
function Nb(t, e, n, r) {
  const i = Kf(n), f = t.type && t.type !== "replay_event" ? t.type : "event";
  Bb(t, n && n.sdk);
  const g = eb(t, i, r, e);
  return delete t.sdkProcessingMetadata, Mr(g, [[{ type: f }, t]]);
}
const jb = "7";
function $b(t) {
  const e = t.protocol ? `${t.protocol}:` : "", n = t.port ? `:${t.port}` : "";
  return `${e}//${t.host}${n}${t.path ? `/${t.path}` : ""}/api/`;
}
function Vb(t) {
  return `${$b(t)}${t.projectId}/envelope/`;
}
function Hb(t, e) {
  return f0({
    // We send only the minimum set of required information. See
    // https://github.com/getsentry/sentry-javascript/issues/2572.
    sentry_key: t.publicKey,
    sentry_version: jb,
    ...e && { sentry_client: `${e.name}/${e.version}` }
  });
}
function Wb(t, e = {}) {
  const n = typeof e == "string" ? e : e.tunnel, r = typeof e == "string" || !e._metadata ? void 0 : e._metadata.sdk;
  return n || `${Vb(t)}?${Hb(t, r)}`;
}
const tu = [];
function Ub(t) {
  const e = {};
  return t.forEach((n) => {
    const { name: r } = n, i = e[r];
    i && !i.isDefaultInstance && n.isDefaultInstance || (e[r] = n);
  }), Object.keys(e).map((n) => e[n]);
}
function Xb(t) {
  const e = t.defaultIntegrations || [], n = t.integrations;
  e.forEach((g) => {
    g.isDefaultInstance = !0;
  });
  let r;
  Array.isArray(n) ? r = [...e, ...n] : typeof n == "function" ? r = Hf(n(e)) : r = e;
  const i = Ub(r), f = Gb(i, (g) => g.name === "Debug");
  if (f !== -1) {
    const [g] = i.splice(f, 1);
    i.push(g);
  }
  return i;
}
function Yb(t, e) {
  const n = {};
  return e.forEach((r) => {
    r && ad(t, r, n);
  }), n;
}
function nu(t, e) {
  for (const n of e)
    n && n.afterAllSetup && n.afterAllSetup(t);
}
function ad(t, e, n) {
  if (n[e.name]) {
    Le && _e.log(`Integration skipped because it was already installed: ${e.name}`);
    return;
  }
  if (n[e.name] = e, tu.indexOf(e.name) === -1 && (e.setupOnce(ab, en), tu.push(e.name)), e.setup && typeof e.setup == "function" && e.setup(t), t.on && typeof e.preprocessEvent == "function") {
    const r = e.preprocessEvent.bind(e);
    t.on("preprocessEvent", (i, f) => r(i, f, t));
  }
  if (t.addEventProcessor && typeof e.processEvent == "function") {
    const r = e.processEvent.bind(e), i = Object.assign((f, g) => r(f, g, t), {
      id: e.name
    });
    t.addEventProcessor(i);
  }
  Le && _e.log(`Integration installed: ${e.name}`);
}
function Gb(t, e) {
  for (let n = 0; n < t.length; n++)
    if (e(t[n]) === !0)
      return n;
  return -1;
}
function Sn(t, e) {
  return Object.assign(
    function(...r) {
      return e(...r);
    },
    { id: t }
  );
}
function Kb(t) {
  let e = "";
  for (const n of t) {
    const r = Object.entries(n.tags), i = r.length > 0 ? `|#${r.map(([f, g]) => `${f}:${g}`).join(",")}` : "";
    e += `${n.name}@${n.unit}:${n.metric}|${n.metricType}${i}|T${n.timestamp}
`;
  }
  return e;
}
function qb(t, e, n, r) {
  const i = {
    sent_at: (/* @__PURE__ */ new Date()).toISOString()
  };
  n && n.sdk && (i.sdk = {
    name: n.sdk.name,
    version: n.sdk.version
  }), r && e && (i.dsn = Si(e));
  const f = Zb(t);
  return Mr(i, [f]);
}
function Zb(t) {
  const e = Kb(t);
  return [{
    type: "statsd",
    length: e.length
  }, e];
}
const ru = "Not capturing exception because it's already been captured.";
class Jb {
  /**
   * A reference to a metrics aggregator
   *
   * @experimental Note this is alpha API. It may experience breaking changes in the future.
   */
  /** Options passed to the SDK. */
  /** The client Dsn, if specified in options. Without this Dsn, the SDK will be disabled. */
  /** Array of set up integrations. */
  /** Indicates whether this client's integrations have been set up. */
  /** Number of calls being processed */
  /** Holds flushable  */
  // eslint-disable-next-line @typescript-eslint/ban-types
  /**
   * Initializes this client instance.
   *
   * @param options Options for the client.
   */
  constructor(e) {
    if (this._options = e, this._integrations = {}, this._integrationsInitialized = !1, this._numProcessing = 0, this._outcomes = {}, this._hooks = {}, this._eventProcessors = [], e.dsn ? this._dsn = h0(e.dsn) : Le && _e.warn("No DSN provided, client will not send events."), this._dsn) {
      const n = Wb(this._dsn, e);
      this._transport = e.transport({
        tunnel: this._options.tunnel,
        recordDroppedEvent: this.recordDroppedEvent.bind(this),
        ...e.transportOptions,
        url: n
      });
    }
  }
  /**
   * @inheritDoc
   */
  // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/explicit-module-boundary-types
  captureException(e, n, r) {
    if (Hc(e)) {
      Le && _e.log(ru);
      return;
    }
    let i = n && n.event_id;
    return this._process(
      this.eventFromException(e, n).then((f) => this._captureEvent(f, n, r)).then((f) => {
        i = f;
      })
    ), i;
  }
  /**
   * @inheritDoc
   */
  captureMessage(e, n, r, i) {
    let f = r && r.event_id;
    const g = wl(e) ? e : String(e), l = xl(e) ? this.eventFromMessage(g, n, r) : this.eventFromException(e, r);
    return this._process(
      l.then((s) => this._captureEvent(s, r, i)).then((s) => {
        f = s;
      })
    ), f;
  }
  /**
   * @inheritDoc
   */
  captureEvent(e, n, r) {
    if (n && n.originalException && Hc(n.originalException)) {
      Le && _e.log(ru);
      return;
    }
    let i = n && n.event_id;
    const g = (e.sdkProcessingMetadata || {}).capturedSpanScope;
    return this._process(
      this._captureEvent(e, n, g || r).then((l) => {
        i = l;
      })
    ), i;
  }
  /**
   * @inheritDoc
   */
  captureSession(e) {
    typeof e.release != "string" ? Le && _e.warn("Discarded session because of missing or non-string release") : (this.sendSession(e), $n(e, { init: !1 }));
  }
  /**
   * @inheritDoc
   */
  getDsn() {
    return this._dsn;
  }
  /**
   * @inheritDoc
   */
  getOptions() {
    return this._options;
  }
  /**
   * @see SdkMetadata in @sentry/types
   *
   * @return The metadata of the SDK
   */
  getSdkMetadata() {
    return this._options._metadata;
  }
  /**
   * @inheritDoc
   */
  getTransport() {
    return this._transport;
  }
  /**
   * @inheritDoc
   */
  flush(e) {
    const n = this._transport;
    return n ? (this.metricsAggregator && this.metricsAggregator.flush(), this._isClientDoneProcessing(e).then((r) => n.flush(e).then((i) => r && i))) : wr(!0);
  }
  /**
   * @inheritDoc
   */
  close(e) {
    return this.flush(e).then((n) => (this.getOptions().enabled = !1, this.metricsAggregator && this.metricsAggregator.close(), n));
  }
  /** Get all installed event processors. */
  getEventProcessors() {
    return this._eventProcessors;
  }
  /** @inheritDoc */
  addEventProcessor(e) {
    this._eventProcessors.push(e);
  }
  /**
   * This is an internal function to setup all integrations that should run on the client.
   * @deprecated Use `client.init()` instead.
   */
  setupIntegrations(e) {
    (e && !this._integrationsInitialized || this._isEnabled() && !this._integrationsInitialized) && this._setupIntegrations();
  }
  /** @inheritdoc */
  init() {
    this._isEnabled() && this._setupIntegrations();
  }
  /**
   * Gets an installed integration by its `id`.
   *
   * @returns The installed integration or `undefined` if no integration with that `id` was installed.
   * @deprecated Use `getIntegrationByName()` instead.
   */
  getIntegrationById(e) {
    return this.getIntegrationByName(e);
  }
  /**
   * Gets an installed integration by its name.
   *
   * @returns The installed integration or `undefined` if no integration with that `name` was installed.
   */
  getIntegrationByName(e) {
    return this._integrations[e];
  }
  /**
   * Returns the client's instance of the given integration class, it any.
   * @deprecated Use `getIntegrationByName()` instead.
   */
  getIntegration(e) {
    try {
      return this._integrations[e.id] || null;
    } catch {
      return Le && _e.warn(`Cannot retrieve integration ${e.id} from the current Client`), null;
    }
  }
  /**
   * @inheritDoc
   */
  addIntegration(e) {
    const n = this._integrations[e.name];
    ad(this, e, this._integrations), n || nu(this, [e]);
  }
  /**
   * @inheritDoc
   */
  sendEvent(e, n = {}) {
    this.emit("beforeSendEvent", e, n);
    let r = Nb(e, this._dsn, this._options._metadata, this._options.tunnel);
    for (const f of n.attachments || [])
      r = K0(
        r,
        J0(
          f,
          this._options.transportOptions && this._options.transportOptions.textEncoder
        )
      );
    const i = this._sendEnvelope(r);
    i && i.then((f) => this.emit("afterSendEvent", e, f), null);
  }
  /**
   * @inheritDoc
   */
  sendSession(e) {
    const n = zb(e, this._dsn, this._options._metadata, this._options.tunnel);
    this._sendEnvelope(n);
  }
  /**
   * @inheritDoc
   */
  recordDroppedEvent(e, n, r) {
    if (this._options.sendClientReports) {
      const i = `${e}:${n}`;
      Le && _e.log(`Adding outcome: "${i}"`), this._outcomes[i] = this._outcomes[i] + 1 || 1;
    }
  }
  /**
   * @inheritDoc
   */
  captureAggregateMetrics(e) {
    Le && _e.log(`Flushing aggregated metrics, number of metrics: ${e.length}`);
    const n = qb(
      e,
      this._dsn,
      this._options._metadata,
      this._options.tunnel
    );
    this._sendEnvelope(n);
  }
  // Keep on() & emit() signatures in sync with types' client.ts interface
  /* eslint-disable @typescript-eslint/unified-signatures */
  /** @inheritdoc */
  /** @inheritdoc */
  on(e, n) {
    this._hooks[e] || (this._hooks[e] = []), this._hooks[e].push(n);
  }
  /** @inheritdoc */
  /** @inheritdoc */
  emit(e, ...n) {
    this._hooks[e] && this._hooks[e].forEach((r) => r(...n));
  }
  /* eslint-enable @typescript-eslint/unified-signatures */
  /** Setup integrations for this client. */
  _setupIntegrations() {
    const { integrations: e } = this._options;
    this._integrations = Yb(this, e), nu(this, e), this._integrationsInitialized = !0;
  }
  /** Updates existing session based on the provided event */
  _updateSessionFromEvent(e, n) {
    let r = !1, i = !1;
    const f = n.exception && n.exception.values;
    if (f) {
      i = !0;
      for (const s of f) {
        const a = s.mechanism;
        if (a && a.handled === !1) {
          r = !0;
          break;
        }
      }
    }
    const g = e.status === "ok";
    (g && e.errors === 0 || g && r) && ($n(e, {
      ...r && { status: "crashed" },
      errors: e.errors || Number(i || r)
    }), this.captureSession(e));
  }
  /**
   * Determine if the client is finished processing. Returns a promise because it will wait `timeout` ms before saying
   * "no" (resolving to `false`) in order to give the client a chance to potentially finish first.
   *
   * @param timeout The time, in ms, after which to resolve to `false` if the client is still busy. Passing `0` (or not
   * passing anything) will make the promise wait as long as it takes for processing to finish before resolving to
   * `true`.
   * @returns A promise which will resolve to `true` if processing is already done or finishes before the timeout, and
   * `false` otherwise
   */
  _isClientDoneProcessing(e) {
    return new ft((n) => {
      let r = 0;
      const i = 1, f = setInterval(() => {
        this._numProcessing == 0 ? (clearInterval(f), n(!0)) : (r += i, e && r >= e && (clearInterval(f), n(!1)));
      }, i);
    });
  }
  /** Determines whether this SDK is enabled and a transport is present. */
  _isEnabled() {
    return this.getOptions().enabled !== !1 && this._transport !== void 0;
  }
  /**
   * Adds common information to events.
   *
   * The information includes release and environment from `options`,
   * breadcrumbs and context (extra, tags and user) from the scope.
   *
   * Information that is already present in the event is never overwritten. For
   * nested objects, such as the context, keys are merged.
   *
   * @param event The original event.
   * @param hint May contain additional information about the original exception.
   * @param scope A scope containing event metadata.
   * @returns A new event with more information.
   */
  _prepareEvent(e, n, r, i = Gs()) {
    const f = this.getOptions(), g = Object.keys(this._integrations);
    return !n.integrations && g.length > 0 && (n.integrations = g), this.emit("preprocessEvent", e, n), db(f, e, n, r, this, i).then((l) => {
      if (l === null)
        return l;
      const s = {
        ...i.getPropagationContext(),
        ...r ? r.getPropagationContext() : void 0
      };
      if (!(l.contexts && l.contexts.trace) && s) {
        const { traceId: h, spanId: o, parentSpanId: u, dsc: c } = s;
        l.contexts = {
          trace: {
            trace_id: h,
            span_id: o,
            parent_span_id: u
          },
          ...l.contexts
        };
        const d = c || nd(h, this, r);
        l.sdkProcessingMetadata = {
          dynamicSamplingContext: d,
          ...l.sdkProcessingMetadata
        };
      }
      return l;
    });
  }
  /**
   * Processes the event and logs an error in case of rejection
   * @param event
   * @param hint
   * @param scope
   */
  _captureEvent(e, n = {}, r) {
    return this._processEvent(e, n, r).then(
      (i) => i.event_id,
      (i) => {
        if (Le) {
          const f = i;
          f.logLevel === "log" ? _e.log(f.message) : _e.warn(f);
        }
      }
    );
  }
  /**
   * Processes an event (either error or message) and sends it to Sentry.
   *
   * This also adds breadcrumbs and context information to the event. However,
   * platform specific meta data (such as the User's IP address) must be added
   * by the SDK implementor.
   *
   *
   * @param event The event to send to Sentry.
   * @param hint May contain additional information about the original exception.
   * @param scope A scope containing event metadata.
   * @returns A SyncPromise that resolves with the event or rejects in case event was/will not be send.
   */
  _processEvent(e, n, r) {
    const i = this.getOptions(), { sampleRate: f } = i, g = cd(e), l = ld(e), s = e.type || "error", a = `before send for type \`${s}\``;
    if (l && typeof f == "number" && Math.random() > f)
      return this.recordDroppedEvent("sample_rate", "error", e), Tl(
        new It(
          `Discarding event because it's not included in the random sample (sampling rate = ${f})`,
          "log"
        )
      );
    const h = s === "replay_event" ? "replay" : s, u = (e.sdkProcessingMetadata || {}).capturedSpanIsolationScope;
    return this._prepareEvent(e, n, r, u).then((c) => {
      if (c === null)
        throw this.recordDroppedEvent("event_processor", h, e), new It("An event processor returned `null`, will not send event.", "log");
      if (n.data && n.data.__sentry__ === !0)
        return c;
      const m = ey(i, c, n);
      return Qb(m, a);
    }).then((c) => {
      if (c === null)
        throw this.recordDroppedEvent("before_send", h, e), new It(`${a} returned \`null\`, will not send event.`, "log");
      const d = r && r.getSession();
      !g && d && this._updateSessionFromEvent(d, c);
      const m = c.transaction_info;
      if (g && m && c.transaction !== e.transaction) {
        const p = "custom";
        c.transaction_info = {
          ...m,
          source: p
        };
      }
      return this.sendEvent(c, n), c;
    }).then(null, (c) => {
      throw c instanceof It ? c : (this.captureException(c, {
        data: {
          __sentry__: !0
        },
        originalException: c
      }), new It(
        `Event processing pipeline threw an error, original event will not be sent. Details have been sent as a new event.
Reason: ${c}`
      ));
    });
  }
  /**
   * Occupies the client with processing and event
   */
  _process(e) {
    this._numProcessing++, e.then(
      (n) => (this._numProcessing--, n),
      (n) => (this._numProcessing--, n)
    );
  }
  /**
   * @inheritdoc
   */
  _sendEnvelope(e) {
    if (this.emit("beforeEnvelope", e), this._isEnabled() && this._transport)
      return this._transport.send(e).then(null, (n) => {
        Le && _e.error("Error while sending event:", n);
      });
    Le && _e.error("Transport disabled");
  }
  /**
   * Clears outcomes on this client and returns them.
   */
  _clearOutcomes() {
    const e = this._outcomes;
    return this._outcomes = {}, Object.keys(e).map((n) => {
      const [r, i] = n.split(":");
      return {
        reason: r,
        category: i,
        quantity: e[n]
      };
    });
  }
  /**
   * @inheritDoc
   */
  // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/explicit-module-boundary-types
}
function Qb(t, e) {
  const n = `${e} must return \`null\` or a valid event.`;
  if (Hs(t))
    return t.then(
      (r) => {
        if (!yr(r) && r !== null)
          throw new It(n);
        return r;
      },
      (r) => {
        throw new It(`${e} rejected with ${r}`);
      }
    );
  if (!yr(t) && t !== null)
    throw new It(n);
  return t;
}
function ey(t, e, n) {
  const { beforeSend: r, beforeSendTransaction: i } = t;
  return ld(e) && r ? r(e, n) : cd(e) && i ? i(e, n) : e;
}
function ld(t) {
  return t.type === void 0;
}
function cd(t) {
  return t.type === "transaction";
}
function ty(t, e) {
  e.debug === !0 && (Le ? _e.enable() : Us(() => {
    console.warn("[Sentry] Cannot initialize SDK with `debug` option using a non-debug bundle.");
  })), Ei().update(e.initialScope);
  const r = new t(e);
  ny(r), ry(r);
}
function ny(t) {
  const n = en().getStackTop();
  n.client = t, n.scope.setClient(t);
}
function ry(t) {
  t.init ? t.init() : t.setupIntegrations && t.setupIntegrations();
}
const iy = 30;
function ud(t, e, n = U0(
  t.bufferSize || iy
)) {
  let r = {};
  const i = (g) => n.drain(g);
  function f(g) {
    const l = [];
    if (Yc(g, (o, u) => {
      const c = Gc(u);
      if (sb(r, c)) {
        const d = iu(o, u);
        t.recordDroppedEvent("ratelimit_backoff", c, d);
      } else
        l.push(o);
    }), l.length === 0)
      return wr();
    const s = Mr(g[0], l), a = (o) => {
      Yc(s, (u, c) => {
        const d = iu(u, c);
        t.recordDroppedEvent(o, Gc(c), d);
      });
    }, h = () => e({ body: q0(s, t.textEncoder) }).then(
      (o) => (o.statusCode !== void 0 && (o.statusCode < 200 || o.statusCode >= 300) && Le && _e.warn(`Sentry responded with status code ${o.statusCode} to sent event.`), r = ob(r, o), o),
      (o) => {
        throw a("network_error"), o;
      }
    );
    return n.add(h).then(
      (o) => o,
      (o) => {
        if (o instanceof It)
          return Le && _e.error("Skipped sending event because buffer is full."), a("queue_overflow"), wr();
        throw o;
      }
    );
  }
  return f.__sentry__baseTransport__ = !0, {
    send: f,
    flush: i
  };
}
function iu(t, e) {
  if (!(e !== "event" && e !== "transaction"))
    return Array.isArray(t) ? t[1] : void 0;
}
function hd(t, e, n = [e], r = "npm") {
  const i = t._metadata || {};
  i.sdk || (i.sdk = {
    name: `sentry.javascript.${e}`,
    packages: n.map((f) => ({
      name: `${r}:@sentry/${f}`,
      version: wa
    })),
    version: wa
  }), t._metadata = i;
}
const sy = [
  /^Script error\.?$/,
  /^Javascript error: Script error\.? on line 0$/,
  /^ResizeObserver loop completed with undelivered notifications.$/,
  /^Cannot redefine property: googletag$/
], oy = [
  /^.*\/healthcheck$/,
  /^.*\/healthy$/,
  /^.*\/live$/,
  /^.*\/ready$/,
  /^.*\/heartbeat$/,
  /^.*\/health$/,
  /^.*\/healthz$/
], fd = "InboundFilters", ay = (t = {}) => ({
  name: fd,
  // TODO v8: Remove this
  setupOnce() {
  },
  // eslint-disable-line @typescript-eslint/no-empty-function
  processEvent(e, n, r) {
    const i = r.getOptions(), f = ly(t, i);
    return cy(e, f) ? null : e;
  }
}), dd = ay;
Sn(
  fd,
  dd
);
function ly(t = {}, e = {}) {
  return {
    allowUrls: [...t.allowUrls || [], ...e.allowUrls || []],
    denyUrls: [...t.denyUrls || [], ...e.denyUrls || []],
    ignoreErrors: [
      ...t.ignoreErrors || [],
      ...e.ignoreErrors || [],
      ...t.disableErrorDefaults ? [] : sy
    ],
    ignoreTransactions: [
      ...t.ignoreTransactions || [],
      ...e.ignoreTransactions || [],
      ...t.disableTransactionDefaults ? [] : oy
    ],
    ignoreInternal: t.ignoreInternal !== void 0 ? t.ignoreInternal : !0
  };
}
function cy(t, e) {
  return e.ignoreInternal && gy(t) ? (Le && _e.warn(`Event dropped due to being internal Sentry Error.
Event: ${cn(t)}`), !0) : uy(t, e.ignoreErrors) ? (Le && _e.warn(
    `Event dropped due to being matched by \`ignoreErrors\` option.
Event: ${cn(t)}`
  ), !0) : hy(t, e.ignoreTransactions) ? (Le && _e.warn(
    `Event dropped due to being matched by \`ignoreTransactions\` option.
Event: ${cn(t)}`
  ), !0) : fy(t, e.denyUrls) ? (Le && _e.warn(
    `Event dropped due to being matched by \`denyUrls\` option.
Event: ${cn(
      t
    )}.
Url: ${ps(t)}`
  ), !0) : dy(t, e.allowUrls) ? !1 : (Le && _e.warn(
    `Event dropped due to not being matched by \`allowUrls\` option.
Event: ${cn(
      t
    )}.
Url: ${ps(t)}`
  ), !0);
}
function uy(t, e) {
  return t.type || !e || !e.length ? !1 : py(t).some((n) => Ws(n, e));
}
function hy(t, e) {
  if (t.type !== "transaction" || !e || !e.length)
    return !1;
  const n = t.transaction;
  return n ? Ws(n, e) : !1;
}
function fy(t, e) {
  if (!e || !e.length)
    return !1;
  const n = ps(t);
  return n ? Ws(n, e) : !1;
}
function dy(t, e) {
  if (!e || !e.length)
    return !0;
  const n = ps(t);
  return n ? Ws(n, e) : !0;
}
function py(t) {
  const e = [];
  t.message && e.push(t.message);
  let n;
  try {
    n = t.exception.values[t.exception.values.length - 1];
  } catch {
  }
  return n && n.value && (e.push(n.value), n.type && e.push(`${n.type}: ${n.value}`)), Le && e.length === 0 && _e.error(`Could not extract message for event ${cn(t)}`), e;
}
function gy(t) {
  try {
    return t.exception.values[0].type === "SentryError";
  } catch {
  }
  return !1;
}
function my(t = []) {
  for (let e = t.length - 1; e >= 0; e--) {
    const n = t[e];
    if (n && n.filename !== "<anonymous>" && n.filename !== "[native code]")
      return n.filename || null;
  }
  return null;
}
function ps(t) {
  try {
    let e;
    try {
      e = t.exception.values[0].stacktrace.frames;
    } catch {
    }
    return e ? my(e) : null;
  } catch {
    return Le && _e.error(`Cannot extract url for event ${cn(t)}`), null;
  }
}
let su;
const pd = "FunctionToString", ou = /* @__PURE__ */ new WeakMap(), vy = () => ({
  name: pd,
  setupOnce() {
    su = Function.prototype.toString;
    try {
      Function.prototype.toString = function(...t) {
        const e = Sl(this), n = ou.has(ht()) && e !== void 0 ? e : this;
        return su.apply(n, t);
      };
    } catch {
    }
  },
  setup(t) {
    ou.set(t, !0);
  }
}), gd = vy;
Sn(
  pd,
  gd
);
const Ie = Ae;
let Ca = 0;
function md() {
  return Ca > 0;
}
function by() {
  Ca++, setTimeout(() => {
    Ca--;
  });
}
function xr(t, e = {}, n) {
  if (typeof t != "function")
    return t;
  try {
    const i = t.__sentry_wrapped__;
    if (i)
      return i;
    if (Sl(t))
      return t;
  } catch {
    return t;
  }
  const r = function() {
    const i = Array.prototype.slice.call(arguments);
    try {
      n && typeof n == "function" && n.apply(this, arguments);
      const f = i.map((g) => xr(g, e));
      return t.apply(this, f);
    } catch (f) {
      throw by(), Tb((g) => {
        g.addEventProcessor((l) => (e.mechanism && (fa(l, void 0, void 0), li(l, e.mechanism)), l.extra = {
          ...l.extra,
          arguments: i
        }, l)), Sb(f);
      }), f;
    }
  };
  try {
    for (const i in t)
      Object.prototype.hasOwnProperty.call(t, i) && (r[i] = t[i]);
  } catch {
  }
  zf(r, t), ai(t, "__sentry_wrapped__", r);
  try {
    Object.getOwnPropertyDescriptor(r, "name").configurable && Object.defineProperty(r, "name", {
      get() {
        return t.name;
      }
    });
  } catch {
  }
  return r;
}
const Ht = typeof __SENTRY_DEBUG__ > "u" || __SENTRY_DEBUG__;
function vd(t, e) {
  const n = kl(t, e), r = {
    type: e && e.name,
    value: Cy(e)
  };
  return n.length && (r.stacktrace = { frames: n }), r.type === void 0 && r.value === "" && (r.value = "Unrecoverable error caught"), r;
}
function yy(t, e, n, r) {
  const i = ht(), f = i && i.getOptions().normalizeDepth, g = {
    exception: {
      values: [
        {
          type: Vs(e) ? e.constructor.name : r ? "UnhandledRejection" : "Error",
          value: Ty(e, { isUnhandledRejection: r })
        }
      ]
    },
    extra: {
      __serialized__: Xf(e, f)
    }
  };
  if (n) {
    const l = kl(t, n);
    l.length && (g.exception.values[0].stacktrace = { frames: l });
  }
  return g;
}
function Ao(t, e) {
  return {
    exception: {
      values: [vd(t, e)]
    }
  };
}
function kl(t, e) {
  const n = e.stacktrace || e.stack || "", r = xy(e);
  try {
    return t(n, r);
  } catch {
  }
  return [];
}
const wy = /Minified React error #\d+;/i;
function xy(t) {
  if (t) {
    if (typeof t.framesToPop == "number")
      return t.framesToPop;
    if (wy.test(t.message))
      return 1;
  }
  return 0;
}
function Cy(t) {
  const e = t && t.message;
  return e ? e.error && typeof e.error.message == "string" ? e.error.message : e : "No error message";
}
function _y(t, e, n, r) {
  const i = n && n.syntheticException || void 0, f = Ol(t, e, i, r);
  return li(f), f.level = "error", n && n.event_id && (f.event_id = n.event_id), wr(f);
}
function Sy(t, e, n = "info", r, i) {
  const f = r && r.syntheticException || void 0, g = _a(t, e, f, i);
  return g.level = n, r && r.event_id && (g.event_id = r.event_id), wr(g);
}
function Ol(t, e, n, r, i) {
  let f;
  if (yl(e) && e.error)
    return Ao(t, e.error);
  if (Ic(e) || Yv(e)) {
    const g = e;
    if ("stack" in e)
      f = Ao(t, e);
    else {
      const l = g.name || (Ic(g) ? "DOMError" : "DOMException"), s = g.message ? `${l}: ${g.message}` : l;
      f = _a(t, s, n, r), fa(f, s);
    }
    return "code" in g && (f.tags = { ...f.tags, "DOMException.code": `${g.code}` }), f;
  }
  return Ff(e) ? Ao(t, e) : yr(e) || Vs(e) ? (f = yy(t, e, n, i), li(f, {
    synthetic: !0
  }), f) : (f = _a(t, e, n, r), fa(f, `${e}`, void 0), li(f, {
    synthetic: !0
  }), f);
}
function _a(t, e, n, r) {
  const i = {};
  if (r && n) {
    const f = kl(t, n);
    f.length && (i.exception = {
      values: [{ value: e, stacktrace: { frames: f } }]
    });
  }
  if (wl(e)) {
    const { __sentry_template_string__: f, __sentry_template_values__: g } = e;
    return i.logentry = {
      message: f,
      params: g
    }, i;
  }
  return i.message = e, i;
}
function Ty(t, { isUnhandledRejection: e }) {
  const n = d0(t), r = e ? "promise rejection" : "exception";
  return yl(t) ? `Event \`ErrorEvent\` captured as ${r} with message \`${t.message}\`` : Vs(t) ? `Event \`${Ey(t)}\` (type=${t.type}) captured as ${r}` : `Object captured as ${r} with keys: ${n}`;
}
function Ey(t) {
  try {
    const e = Object.getPrototypeOf(t);
    return e ? e.constructor.name : void 0;
  } catch {
  }
}
function ky(t, {
  metadata: e,
  tunnel: n,
  dsn: r
}) {
  const i = {
    event_id: t.event_id,
    sent_at: (/* @__PURE__ */ new Date()).toISOString(),
    ...e && e.sdk && {
      sdk: {
        name: e.sdk.name,
        version: e.sdk.version
      }
    },
    ...!!n && !!r && { dsn: Si(r) }
  }, f = Oy(t);
  return Mr(i, [f]);
}
function Oy(t) {
  return [{
    type: "user_report"
  }, t];
}
class Dy extends Jb {
  /**
   * Creates a new Browser SDK instance.
   *
   * @param options Configuration options for this SDK.
   */
  constructor(e) {
    const n = Ie.SENTRY_SDK_SOURCE || N0();
    hd(e, "browser", ["browser"], n), super(e), e.sendClientReports && Ie.document && Ie.document.addEventListener("visibilitychange", () => {
      Ie.document.visibilityState === "hidden" && this._flushOutcomes();
    });
  }
  /**
   * @inheritDoc
   */
  eventFromException(e, n) {
    return _y(this._options.stackParser, e, n, this._options.attachStacktrace);
  }
  /**
   * @inheritDoc
   */
  eventFromMessage(e, n = "info", r) {
    return Sy(this._options.stackParser, e, n, r, this._options.attachStacktrace);
  }
  /**
   * Sends user feedback to Sentry.
   */
  captureUserFeedback(e) {
    if (!this._isEnabled()) {
      Ht && _e.warn("SDK not enabled, will not capture user feedback.");
      return;
    }
    const n = ky(e, {
      metadata: this.getSdkMetadata(),
      dsn: this.getDsn(),
      tunnel: this.getOptions().tunnel
    });
    this._sendEnvelope(n);
  }
  /**
   * @inheritDoc
   */
  _prepareEvent(e, n, r) {
    return e.platform = e.platform || "javascript", super._prepareEvent(e, n, r);
  }
  /**
   * Sends client reports as an envelope.
   */
  _flushOutcomes() {
    const e = this._clearOutcomes();
    if (e.length === 0) {
      Ht && _e.log("No outcomes to send");
      return;
    }
    if (!this._dsn) {
      Ht && _e.log("No dsn provided, will not send outcomes");
      return;
    }
    Ht && _e.log("Sending outcomes:", e);
    const n = tb(e, this._options.tunnel && Si(this._dsn));
    this._sendEnvelope(n);
  }
}
let qr;
function Ay() {
  if (qr)
    return qr;
  if (ma(Ie.fetch))
    return qr = Ie.fetch.bind(Ie);
  const t = Ie.document;
  let e = Ie.fetch;
  if (t && typeof t.createElement == "function")
    try {
      const n = t.createElement("iframe");
      n.hidden = !0, t.head.appendChild(n);
      const r = n.contentWindow;
      r && r.fetch && (e = r.fetch), t.head.removeChild(n);
    } catch (n) {
      Ht && _e.warn("Could not create sandbox iframe for pure fetch check, bailing to window.fetch: ", n);
    }
  return qr = e.bind(Ie);
}
function Py() {
  qr = void 0;
}
function My(t, e = Ay()) {
  let n = 0, r = 0;
  function i(f) {
    const g = f.body.length;
    n += g, r++;
    const l = {
      body: f.body,
      method: "POST",
      referrerPolicy: "origin",
      headers: t.headers,
      // Outgoing requests are usually cancelled when navigating to a different page, causing a "TypeError: Failed to
      // fetch" error and sending a "network_error" client-outcome - in Chrome, the request status shows "(cancelled)".
      // The `keepalive` flag keeps outgoing requests alive, even when switching pages. We want this since we're
      // frequently sending events right before the user is switching pages (eg. whenfinishing navigation transactions).
      // Gotchas:
      // - `keepalive` isn't supported by Firefox
      // - As per spec (https://fetch.spec.whatwg.org/#http-network-or-cache-fetch):
      //   If the sum of contentLength and inflightKeepaliveBytes is greater than 64 kibibytes, then return a network error.
      //   We will therefore only activate the flag when we're below that limit.
      // There is also a limit of requests that can be open at the same time, so we also limit this to 15
      // See https://github.com/getsentry/sentry-javascript/pull/7553 for details
      keepalive: n <= 6e4 && r < 15,
      ...t.fetchOptions
    };
    try {
      return e(t.url, l).then((s) => (n -= g, r--, {
        statusCode: s.status,
        headers: {
          "x-sentry-rate-limits": s.headers.get("X-Sentry-Rate-Limits"),
          "retry-after": s.headers.get("Retry-After")
        }
      }));
    } catch (s) {
      return Py(), n -= g, r--, Tl(s);
    }
  }
  return ud(t, i);
}
const Fy = 4;
function Iy(t) {
  function e(n) {
    return new ft((r, i) => {
      const f = new XMLHttpRequest();
      f.onerror = i, f.onreadystatechange = () => {
        f.readyState === Fy && r({
          statusCode: f.status,
          headers: {
            "x-sentry-rate-limits": f.getResponseHeader("X-Sentry-Rate-Limits"),
            "retry-after": f.getResponseHeader("Retry-After")
          }
        });
      }, f.open("POST", t.url);
      for (const g in t.headers)
        Object.prototype.hasOwnProperty.call(t.headers, g) && f.setRequestHeader(g, t.headers[g]);
      f.send(n.body);
    });
  }
  return ud(t, e);
}
const Ks = "?", Ry = 30, Ly = 40, By = 50;
function Dl(t, e, n, r) {
  const i = {
    filename: t,
    function: e,
    in_app: !0
    // All browser frames are considered in_app
  };
  return n !== void 0 && (i.lineno = n), r !== void 0 && (i.colno = r), i;
}
const zy = /^\s*at (?:(.+?\)(?: \[.+\])?|.*?) ?\((?:address at )?)?(?:async )?((?:<anonymous>|[-a-z]+:|.*bundle|\/)?.*?)(?::(\d+))?(?::(\d+))?\)?\s*$/i, Ny = /\((\S*)(?::(\d+))(?::(\d+))\)/, jy = (t) => {
  const e = zy.exec(t);
  if (e) {
    if (e[2] && e[2].indexOf("eval") === 0) {
      const f = Ny.exec(e[2]);
      f && (e[2] = f[1], e[3] = f[2], e[4] = f[3]);
    }
    const [r, i] = bd(e[1] || Ks, e[2]);
    return Dl(i, r, e[3] ? +e[3] : void 0, e[4] ? +e[4] : void 0);
  }
}, $y = [Ry, jy], Vy = /^\s*(.*?)(?:\((.*?)\))?(?:^|@)?((?:[-a-z]+)?:\/.*?|\[native code\]|[^@]*(?:bundle|\d+\.js)|\/[\w\-. /=]+)(?::(\d+))?(?::(\d+))?\s*$/i, Hy = /(\S+) line (\d+)(?: > eval line \d+)* > eval/i, Wy = (t) => {
  const e = Vy.exec(t);
  if (e) {
    if (e[3] && e[3].indexOf(" > eval") > -1) {
      const f = Hy.exec(e[3]);
      f && (e[1] = e[1] || "eval", e[3] = f[1], e[4] = f[2], e[5] = "");
    }
    let r = e[3], i = e[1] || Ks;
    return [i, r] = bd(i, r), Dl(r, i, e[4] ? +e[4] : void 0, e[5] ? +e[5] : void 0);
  }
}, Uy = [By, Wy], Xy = /^\s*at (?:((?:\[object object\])?.+) )?\(?((?:[-a-z]+):.*?):(\d+)(?::(\d+))?\)?\s*$/i, Yy = (t) => {
  const e = Xy.exec(t);
  return e ? Dl(e[2], e[1] || Ks, +e[3], e[4] ? +e[4] : void 0) : void 0;
}, Gy = [Ly, Yy], Ky = [$y, Uy, Gy], qy = $f(...Ky), bd = (t, e) => {
  const n = t.indexOf("safari-extension") !== -1, r = t.indexOf("safari-web-extension") !== -1;
  return n || r ? [
    t.indexOf("@") !== -1 ? t.split("@")[0] : Ks,
    n ? `safari-extension:${e}` : `safari-web-extension:${e}`
  ] : [t, e];
}, Gi = 1024, yd = "Breadcrumbs", Zy = (t = {}) => {
  const e = {
    console: !0,
    dom: !0,
    fetch: !0,
    history: !0,
    sentry: !0,
    xhr: !0,
    ...t
  };
  return {
    name: yd,
    // TODO v8: Remove this
    setupOnce() {
    },
    // eslint-disable-line @typescript-eslint/no-empty-function
    setup(n) {
      e.console && v0(e1(n)), e.dom && w0(Qy(n, e.dom)), e.xhr && L0(t1(n)), e.fetch && E0(n1(n)), e.history && Uf(r1(n)), e.sentry && n.on && n.on("beforeSendEvent", Jy(n));
    }
  };
}, wd = Zy;
Sn(yd, wd);
function Jy(t) {
  return function(n) {
    ht() === t && Vn(
      {
        category: `sentry.${n.type === "transaction" ? "transaction" : "event"}`,
        event_id: n.event_id,
        level: n.level,
        message: cn(n)
      },
      {
        event: n
      }
    );
  };
}
function Qy(t, e) {
  return function(r) {
    if (ht() !== t)
      return;
    let i, f, g = typeof e == "object" ? e.serializeAttribute : void 0, l = typeof e == "object" && typeof e.maxStringLength == "number" ? e.maxStringLength : void 0;
    l && l > Gi && (Ht && _e.warn(
      `\`dom.maxStringLength\` cannot exceed ${Gi}, but a value of ${l} was configured. Sentry will use ${Gi} instead.`
    ), l = Gi), typeof g == "string" && (g = [g]);
    try {
      const a = r.event, h = i1(a) ? a.target : a;
      i = Lf(h, { keyAttrs: g, maxStringLength: l }), f = i0(h);
    } catch {
      i = "<unknown>";
    }
    if (i.length === 0)
      return;
    const s = {
      category: `ui.${r.name}`,
      message: i
    };
    f && (s.data = { "ui.component_name": f }), Vn(s, {
      event: r.event,
      name: r.name,
      global: r.global
    });
  };
}
function e1(t) {
  return function(n) {
    if (ht() !== t)
      return;
    const r = {
      category: "console",
      data: {
        arguments: n.args,
        logger: "console"
      },
      level: Y0(n.level),
      message: Rc(n.args, " ")
    };
    if (n.level === "assert")
      if (n.args[0] === !1)
        r.message = `Assertion failed: ${Rc(n.args.slice(1), " ") || "console.assert"}`, r.data.arguments = n.args.slice(1);
      else
        return;
    Vn(r, {
      input: n.args,
      level: n.level
    });
  };
}
function t1(t) {
  return function(n) {
    if (ht() !== t)
      return;
    const { startTimestamp: r, endTimestamp: i } = n, f = n.xhr[Kr];
    if (!r || !i || !f)
      return;
    const { method: g, url: l, status_code: s, body: a } = f, h = {
      method: g,
      url: l,
      status_code: s
    }, o = {
      xhr: n.xhr,
      input: a,
      startTimestamp: r,
      endTimestamp: i
    };
    Vn(
      {
        category: "xhr",
        data: h,
        type: "http"
      },
      o
    );
  };
}
function n1(t) {
  return function(n) {
    if (ht() !== t)
      return;
    const { startTimestamp: r, endTimestamp: i } = n;
    if (i && !(n.fetchData.url.match(/sentry_key/) && n.fetchData.method === "POST"))
      if (n.error) {
        const f = n.fetchData, g = {
          data: n.error,
          input: n.args,
          startTimestamp: r,
          endTimestamp: i
        };
        Vn(
          {
            category: "fetch",
            data: f,
            level: "error",
            type: "http"
          },
          g
        );
      } else {
        const f = n.response, g = {
          ...n.fetchData,
          status_code: f && f.status
        }, l = {
          input: n.args,
          response: f,
          startTimestamp: r,
          endTimestamp: i
        };
        Vn(
          {
            category: "fetch",
            data: g,
            type: "http"
          },
          l
        );
      }
  };
}
function r1(t) {
  return function(n) {
    if (ht() !== t)
      return;
    let r = n.from, i = n.to;
    const f = Oo(Ie.location.href);
    let g = r ? Oo(r) : void 0;
    const l = Oo(i);
    (!g || !g.path) && (g = f), f.protocol === l.protocol && f.host === l.host && (i = l.relative), f.protocol === g.protocol && f.host === g.host && (r = g.relative), Vn({
      category: "navigation",
      data: {
        from: r,
        to: i
      }
    });
  };
}
function i1(t) {
  return !!t && !!t.target;
}
const xd = "Dedupe", s1 = () => {
  let t;
  return {
    name: xd,
    // TODO v8: Remove this
    setupOnce() {
    },
    // eslint-disable-line @typescript-eslint/no-empty-function
    processEvent(e) {
      if (e.type)
        return e;
      try {
        if (o1(e, t))
          return Ht && _e.warn("Event dropped due to being a duplicate of previously captured event."), null;
      } catch {
      }
      return t = e;
    }
  };
}, Cd = s1;
Sn(xd, Cd);
function o1(t, e) {
  return e ? !!(a1(t, e) || l1(t, e)) : !1;
}
function a1(t, e) {
  const n = t.message, r = e.message;
  return !(!n && !r || n && !r || !n && r || n !== r || !Sd(t, e) || !_d(t, e));
}
function l1(t, e) {
  const n = au(e), r = au(t);
  return !(!n || !r || n.type !== r.type || n.value !== r.value || !Sd(t, e) || !_d(t, e));
}
function _d(t, e) {
  let n = lu(t), r = lu(e);
  if (!n && !r)
    return !0;
  if (n && !r || !n && r || (n = n, r = r, r.length !== n.length))
    return !1;
  for (let i = 0; i < r.length; i++) {
    const f = r[i], g = n[i];
    if (f.filename !== g.filename || f.lineno !== g.lineno || f.colno !== g.colno || f.function !== g.function)
      return !1;
  }
  return !0;
}
function Sd(t, e) {
  let n = t.fingerprint, r = e.fingerprint;
  if (!n && !r)
    return !0;
  if (n && !r || !n && r)
    return !1;
  n = n, r = r;
  try {
    return n.join("") === r.join("");
  } catch {
    return !1;
  }
}
function au(t) {
  return t.exception && t.exception.values && t.exception.values[0];
}
function lu(t) {
  const e = t.exception;
  if (e)
    try {
      return e.values[0].stacktrace.frames;
    } catch {
      return;
    }
}
const Td = "GlobalHandlers", c1 = (t = {}) => {
  const e = {
    onerror: !0,
    onunhandledrejection: !0,
    ...t
  };
  return {
    name: Td,
    setupOnce() {
      Error.stackTraceLimit = 50;
    },
    setup(n) {
      e.onerror && (u1(n), cu("onerror")), e.onunhandledrejection && (h1(n), cu("onunhandledrejection"));
    }
  };
}, Ed = c1;
Sn(
  Td,
  Ed
);
function u1(t) {
  D0((e) => {
    const { stackParser: n, attachStacktrace: r } = Od();
    if (ht() !== t || md())
      return;
    const { msg: i, url: f, line: g, column: l, error: s } = e, a = s === void 0 && Yt(i) ? p1(i, f, g, l) : kd(
      Ol(n, s || i, void 0, r, !1),
      f,
      g,
      l
    );
    a.level = "error", Jf(a, {
      originalException: s,
      mechanism: {
        handled: !1,
        type: "onerror"
      }
    });
  });
}
function h1(t) {
  P0((e) => {
    const { stackParser: n, attachStacktrace: r } = Od();
    if (ht() !== t || md())
      return;
    const i = f1(e), f = xl(i) ? d1(i) : Ol(n, i, void 0, r, !0);
    f.level = "error", Jf(f, {
      originalException: i,
      mechanism: {
        handled: !1,
        type: "onunhandledrejection"
      }
    });
  });
}
function f1(t) {
  if (xl(t))
    return t;
  const e = t;
  try {
    if ("reason" in e)
      return e.reason;
    if ("detail" in e && "reason" in e.detail)
      return e.detail.reason;
  } catch {
  }
  return t;
}
function d1(t) {
  return {
    exception: {
      values: [
        {
          type: "UnhandledRejection",
          // String() is needed because the Primitive type includes symbols (which can't be automatically stringified)
          value: `Non-Error promise rejection captured with value: ${String(t)}`
        }
      ]
    }
  };
}
function p1(t, e, n, r) {
  const i = /^(?:[Uu]ncaught (?:exception: )?)?(?:((?:Eval|Internal|Range|Reference|Syntax|Type|URI|)Error): )?(.*)$/i;
  let f = yl(t) ? t.message : t, g = "Error";
  const l = f.match(i);
  return l && (g = l[1], f = l[2]), kd({
    exception: {
      values: [
        {
          type: g,
          value: f
        }
      ]
    }
  }, e, n, r);
}
function kd(t, e, n, r) {
  const i = t.exception = t.exception || {}, f = i.values = i.values || [], g = f[0] = f[0] || {}, l = g.stacktrace = g.stacktrace || {}, s = l.frames = l.frames || [], a = isNaN(parseInt(r, 10)) ? void 0 : r, h = isNaN(parseInt(n, 10)) ? void 0 : n, o = Yt(e) && e.length > 0 ? e : r0();
  return s.length === 0 && s.push({
    colno: a,
    filename: o,
    function: "?",
    in_app: !0,
    lineno: h
  }), t;
}
function cu(t) {
  Ht && _e.log(`Global Handler attached: ${t}`);
}
function Od() {
  const t = ht();
  return t && t.getOptions() || {
    stackParser: () => [],
    attachStacktrace: !1
  };
}
const Dd = "HttpContext", g1 = () => ({
  name: Dd,
  // TODO v8: Remove this
  setupOnce() {
  },
  // eslint-disable-line @typescript-eslint/no-empty-function
  preprocessEvent(t) {
    if (!Ie.navigator && !Ie.location && !Ie.document)
      return;
    const e = t.request && t.request.url || Ie.location && Ie.location.href, { referrer: n } = Ie.document || {}, { userAgent: r } = Ie.navigator || {}, i = {
      ...t.request && t.request.headers,
      ...n && { Referer: n },
      ...r && { "User-Agent": r }
    }, f = { ...t.request, ...e && { url: e }, headers: i };
    t.request = f;
  }
}), Ad = g1;
Sn(Dd, Ad);
const m1 = "cause", v1 = 5, Pd = "LinkedErrors", b1 = (t = {}) => {
  const e = t.limit || v1, n = t.key || m1;
  return {
    name: Pd,
    // TODO v8: Remove this
    setupOnce() {
    },
    // eslint-disable-line @typescript-eslint/no-empty-function
    preprocessEvent(r, i, f) {
      const g = f.getOptions();
      Qv(
        // This differs from the LinkedErrors integration in core by using a different exceptionFromError function
        vd,
        g.stackParser,
        g.maxValueLength,
        n,
        e,
        r,
        i
      );
    }
  };
}, Md = b1;
Sn(Pd, Md);
const y1 = [
  "EventTarget",
  "Window",
  "Node",
  "ApplicationCache",
  "AudioTrackList",
  "BroadcastChannel",
  "ChannelMergerNode",
  "CryptoOperation",
  "EventSource",
  "FileReader",
  "HTMLUnknownElement",
  "IDBDatabase",
  "IDBRequest",
  "IDBTransaction",
  "KeyOperation",
  "MediaController",
  "MessagePort",
  "ModalWindow",
  "Notification",
  "SVGElementInstance",
  "Screen",
  "SharedWorker",
  "TextTrack",
  "TextTrackCue",
  "TextTrackList",
  "WebSocket",
  "WebSocketWorker",
  "Worker",
  "XMLHttpRequest",
  "XMLHttpRequestEventTarget",
  "XMLHttpRequestUpload"
], Fd = "TryCatch", w1 = (t = {}) => {
  const e = {
    XMLHttpRequest: !0,
    eventTarget: !0,
    requestAnimationFrame: !0,
    setInterval: !0,
    setTimeout: !0,
    ...t
  };
  return {
    name: Fd,
    // TODO: This currently only works for the first client this is setup
    // We may want to adjust this to check for client etc.
    setupOnce() {
      e.setTimeout && qe(Ie, "setTimeout", uu), e.setInterval && qe(Ie, "setInterval", uu), e.requestAnimationFrame && qe(Ie, "requestAnimationFrame", x1), e.XMLHttpRequest && "XMLHttpRequest" in Ie && qe(XMLHttpRequest.prototype, "send", C1);
      const n = e.eventTarget;
      n && (Array.isArray(n) ? n : y1).forEach(_1);
    }
  };
}, Id = w1;
Sn(
  Fd,
  Id
);
function uu(t) {
  return function(...e) {
    const n = e[0];
    return e[0] = xr(n, {
      mechanism: {
        data: { function: bn(t) },
        handled: !1,
        type: "instrument"
      }
    }), t.apply(this, e);
  };
}
function x1(t) {
  return function(e) {
    return t.apply(this, [
      xr(e, {
        mechanism: {
          data: {
            function: "requestAnimationFrame",
            handler: bn(t)
          },
          handled: !1,
          type: "instrument"
        }
      })
    ]);
  };
}
function C1(t) {
  return function(...e) {
    const n = this;
    return ["onload", "onerror", "onprogress", "onreadystatechange"].forEach((i) => {
      i in n && typeof n[i] == "function" && qe(n, i, function(f) {
        const g = {
          mechanism: {
            data: {
              function: i,
              handler: bn(f)
            },
            handled: !1,
            type: "instrument"
          }
        }, l = Sl(f);
        return l && (g.mechanism.data.handler = bn(l)), xr(f, g);
      });
    }), t.apply(this, e);
  };
}
function _1(t) {
  const e = Ie, n = e[t] && e[t].prototype;
  !n || !n.hasOwnProperty || !n.hasOwnProperty("addEventListener") || (qe(n, "addEventListener", function(r) {
    return function(i, f, g) {
      try {
        typeof f.handleEvent == "function" && (f.handleEvent = xr(f.handleEvent, {
          mechanism: {
            data: {
              function: "handleEvent",
              handler: bn(f),
              target: t
            },
            handled: !1,
            type: "instrument"
          }
        }));
      } catch {
      }
      return r.apply(this, [
        i,
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        xr(f, {
          mechanism: {
            data: {
              function: "addEventListener",
              handler: bn(f),
              target: t
            },
            handled: !1,
            type: "instrument"
          }
        }),
        g
      ]);
    };
  }), qe(
    n,
    "removeEventListener",
    function(r) {
      return function(i, f, g) {
        const l = f;
        try {
          const s = l && l.__sentry_wrapped__;
          s && r.call(this, i, s, g);
        } catch {
        }
        return r.call(this, i, l, g);
      };
    }
  ));
}
const S1 = [
  dd(),
  gd(),
  Id(),
  wd(),
  Ed(),
  Md(),
  Cd(),
  Ad()
];
function T1(t) {
  return [
    // eslint-disable-next-line deprecation/deprecation
    ...S1
  ];
}
function E1(t = {}) {
  t.defaultIntegrations === void 0 && (t.defaultIntegrations = T1()), t.release === void 0 && (typeof __SENTRY_RELEASE__ == "string" && (t.release = __SENTRY_RELEASE__), Ie.SENTRY_RELEASE && Ie.SENTRY_RELEASE.id && (t.release = Ie.SENTRY_RELEASE.id)), t.autoSessionTracking === void 0 && (t.autoSessionTracking = !0), t.sendClientReports === void 0 && (t.sendClientReports = !0);
  const e = {
    ...t,
    stackParser: g0(t.stackParser || qy),
    integrations: Xb(t),
    transport: t.transport || (Wf() ? My : Iy)
  };
  ty(Dy, e), t.autoSessionTracking && k1();
}
function k1() {
  if (typeof Ie.document > "u") {
    Ht && _e.warn("Session tracking in non-browser environment with @sentry/browser is not supported.");
    return;
  }
  qc({ ignoreDuration: !0 }), Zc(), Uf(({ from: t, to: e }) => {
    t !== void 0 && t !== e && (qc({ ignoreDuration: !0 }), Zc());
  });
}
var cr = typeof globalThis < "u" ? globalThis : typeof window < "u" ? window : typeof global < "u" ? global : typeof self < "u" ? self : {};
function ki(t) {
  return t && t.__esModule && Object.prototype.hasOwnProperty.call(t, "default") ? t.default : t;
}
function O1(t) {
  if (t.__esModule)
    return t;
  var e = t.default;
  if (typeof e == "function") {
    var n = function r() {
      return this instanceof r ? Reflect.construct(e, arguments, this.constructor) : e.apply(this, arguments);
    };
    n.prototype = e.prototype;
  } else
    n = {};
  return Object.defineProperty(n, "__esModule", { value: !0 }), Object.keys(t).forEach(function(r) {
    var i = Object.getOwnPropertyDescriptor(t, r);
    Object.defineProperty(n, r, i.get ? i : {
      enumerable: !0,
      get: function() {
        return t[r];
      }
    });
  }), n;
}
function D1(t) {
  const e = {
    ...t
  };
  hd(e, "react"), E1(e);
}
var Al = /* @__PURE__ */ ((t) => (t.INLINE = "inline", t.OVERLAY = "overlay", t))(Al || {}), Rd = /* @__PURE__ */ ((t) => (t.TOP = "top", t.BOTTOM = "bottom", t.HIDDEN = "", t))(Rd || {});
const A1 = [
  {
    name: "circle",
    type: "Circle"
  },
  {
    name: "square",
    type: "Rect",
    options: {
      lockUniScaling: !1
    }
  },
  {
    name: "triangle",
    type: "Triangle"
  },
  {
    name: "ellipse",
    type: "Ellipse",
    options: {
      lockUniScaling: !1
    }
  },
  {
    name: "Arrow #1",
    type: "Path",
    options: {
      path: "M 294.9 16.4 l 15.7 42.2 c -171.4 70.3 -294 242.3 -289.1 437.4 l 14.7 -1 c 9.1 -0.6 18.1 -1.2 27.1 -1.9 l 14.7 -1 c -4.3 -170.1 102.5 -320 252 -381.3 l 15.7 42.2 c 34.7 -40.5 83.1 -76.6 144.8 -99.8 c -58.1 -26.2 -124.9 -39.6 -195.6 -36.8 z"
    }
  },
  {
    name: "Arrow #2",
    type: "Path",
    options: {
      path: "M 16 248.4 v 14.9 h 447.5 l -93.2 82.5 l 11.9 10.5 l 113.8 -100.2 l -113.6 -100.4 l -11.8 10.5 l 92.9 82.2 z"
    }
  },
  {
    name: "Arrow #3",
    type: "Path",
    options: {
      path: "M 496 256 l -118.6 -66 v 40.8 h -361.4 v 50.4 h 361.4 v 40.8 l 118.6 -66 z"
    }
  },
  {
    name: "Line",
    type: "Path",
    options: {
      path: "M 16 256 h 480",
      strokeWidth: 10,
      stroke: "#000",
      padding: 10
    }
  },
  {
    name: "Star",
    type: "Path",
    options: {
      path: "M 256 406.3 l 148.3 78 l -28.3 -165.2 l 120 -117 l -165.8 -24.1 l -74.2 -150.3 l -74.2 150.3 l -165.8 24.1 l 120 117 l -28.3 165.2 z"
    }
  },
  {
    name: "Polygon",
    type: "Path",
    options: {
      path: "M 256 19.6 l 156.6 57.1 l 83.4 144.3 l -28.9 164.2 l -127.7 107.2 h -166.8 l -127.7 -107.2 l -28.9 -164.2 l 83.4 -144.3 z"
    }
  },
  {
    name: "Badge",
    type: "Path",
    options: {
      path: "M 257.3 16.2 s -148 58.2 -204.4 81.4 c 0 75.7 -16.8 303.5 204.4 398.2 c 218.7 -94.6 201.9 -322.4 201.9 -398.2 c -62.1 -23.6 -201.9 -81.4 -201.9 -81.4 z"
    }
  }
], P1 = [
  "afro-1",
  "afro",
  "agent",
  "alien-1",
  "alien",
  "angel",
  "angry-1",
  "angry-2",
  "angry-3",
  "angry-4",
  "angry-5",
  "angry",
  "arguing",
  "arrogant",
  "asian-1",
  "asian",
  "avatar",
  "baby-1",
  "baby-2",
  "baby",
  "bully",
  "burglar",
  "businessman",
  "cheeky-1",
  "cheeky",
  "clown",
  "confused-1",
  "confused-2",
  "confused-3",
  "confused",
  "creepy",
  "crying-1",
  "crying-2",
  "crying-3",
  "crying",
  "dazed-1",
  "dazed-2",
  "dazed-3",
  "dazed",
  "dead-1",
  "dead-2",
  "dead-3",
  "dead-4",
  "dead-5",
  "dead-6",
  "dead",
  "desperate-1",
  "desperate",
  "detective",
  "dissapointment",
  "doctor",
  "drunk",
  "dumb",
  "emo-1",
  "emo-2",
  "emo",
  "emoticon",
  "evil",
  "faint-1",
  "faint",
  "flirt-1",
  "flirt-2",
  "flirt",
  "flirty",
  "gangster",
  "geek-1",
  "geek",
  "gentleman-1",
  "gentleman-2",
  "gentleman-3",
  "gentleman-4",
  "gentleman",
  "ginger",
  "girl-1",
  "girl",
  "goofy-1",
  "goofy-2",
  "goofy-3",
  "goofy-4",
  "goofy",
  "grubby-1",
  "grubby",
  "happy-1",
  "happy-10",
  "happy-11",
  "happy-12",
  "happy-13",
  "happy-14",
  "happy-15",
  "happy-16",
  "happy-2",
  "happy-3",
  "happy-4",
  "happy-5",
  "happy-6",
  "happy-7",
  "happy-8",
  "happy-9",
  "happy",
  "harry-potter",
  "heisenberg",
  "hipster-1",
  "hipster-2",
  "hipster",
  "in-love-1",
  "in-love-2",
  "in-love-3",
  "in-love-4",
  "in-love-5",
  "in-love-6",
  "in-love",
  "japan",
  "jew",
  "joyful-1",
  "joyful-2",
  "joyful",
  "kiss-1",
  "kiss-2",
  "kiss-3",
  "kiss-4",
  "kiss",
  "laughing-1",
  "laughing-2",
  "laughing-3",
  "laughing",
  "listening",
  "love",
  "manly",
  "miserly-1",
  "miserly",
  "nerd-1",
  "nerd-2",
  "nerd-3",
  "nerd-4",
  "nerd",
  "ninja",
  "pirate-1",
  "pirate-2",
  "pirate",
  "punk-1",
  "punk-2",
  "punk",
  "rapper",
  "relieved",
  "rich-1",
  "rich-2",
  "rich",
  "rockstar",
  "sad-1",
  "sad-2",
  "sad-3",
  "sad-4",
  "sad-5",
  "sad-6",
  "sad",
  "scared-1",
  "scared-2",
  "scared-3",
  "scared",
  "sceptic-1",
  "sceptic-2",
  "sceptic-3",
  "sceptic-4",
  "sceptic-5",
  "sceptic-6",
  "sceptic-7",
  "sceptic",
  "secret",
  "shocked-1",
  "shocked-2",
  "shocked-3",
  "shocked",
  "sick-1",
  "sick-2",
  "sick-3",
  "sick-4",
  "sick",
  "silent",
  "skeleton",
  "smile",
  "smiling-1",
  "smiling",
  "smoked",
  "smug-1",
  "smug-2",
  "smug-3",
  "smug-4",
  "smug-5",
  "smug-6",
  "smug",
  "sporty",
  "stunned",
  "superhero-1",
  "superhero-2",
  "superhero-3",
  "superhero-4",
  "superhero",
  "surprised-1",
  "surprised",
  "thinking",
  "tired-1",
  "tired-2",
  "tired-3",
  "tired",
  "tough-1",
  "tough",
  "trendy",
  "vampire-1",
  "vampire",
  "wink-1",
  "wink-2",
  "wink",
  "winking-1",
  "winking",
  "yawning-1",
  "yawning-2",
  "yawning-3",
  "yawning",
  "yelling",
  "zombie"
];
function oe(t, e) {
  return { ...e, message: t };
}
const M1 = [
  {
    name: "emoticons",
    list: P1,
    type: "svg",
    thumbnailUrl: "images/stickers/categories/emoticon.svg"
  },
  {
    name: "doodles",
    items: 100,
    type: "svg",
    thumbnailUrl: "images/stickers/categories/doodles.svg"
  },
  {
    name: "landmarks",
    items: 100,
    type: "svg",
    thumbnailUrl: "images/stickers/categories/landmark.svg",
    invertPreview: !0
  },
  {
    name: "bubbles",
    items: 104,
    type: "png",
    thumbnailUrl: "images/stickers/categories/speech-bubble.svg"
  },
  {
    name: "transportation",
    items: 22,
    type: "svg",
    thumbnailUrl: "images/stickers/categories/transportation.svg",
    invertPreview: !0
  },
  {
    name: "beach",
    items: 22,
    type: "svg",
    thumbnailUrl: "images/stickers/categories/beach.svg",
    invertPreview: !0
  }
], F1 = {
  emoticons: oe("Emoticons"),
  doodles: oe("Doodles"),
  landmarks: oe("Landmarks"),
  bubbles: oe("Bubbles"),
  transportation: oe("Transportation"),
  beach: oe("Beach")
}, Pl = {
  fill: "#1565C0",
  opacity: 1,
  backgroundColor: null,
  strokeWidth: 0.05,
  stroke: "#000"
}, I1 = [
  "PencilBrush",
  "EraserBrush",
  "SprayBrush",
  "CircleBrush",
  "DiamondBrush",
  "VLineBrush",
  "HLineBrush",
  "SquareBrush"
], Ld = [1, 8, 15, 20, 25];
var gs = /* @__PURE__ */ ((t) => (t.DARK = "dark", t.LIGHT = "light", t))(gs || {});
const Sa = [
  {
    name: gs.LIGHT,
    colors: {
      "--be-foreground-base": "0 0 0",
      "--be-primary-light": "191 219 254",
      // 200
      "--be-primary": "59 130 246",
      // 500
      "--be-primary-dark": "37 99 235",
      "--be-on-primary": "255 255 255",
      "--be-danger": "179 38 30",
      "--be-on-danger": "255 255 255",
      "--be-background": "255 255 255",
      "--be-background-alt": "250 250 250",
      "--be-paper": "255 255 255",
      "--be-disabled-bg-opacity": "12%",
      "--be-disabled-fg-opacity": "26%",
      "--be-hover-opacity": "4%",
      "--be-focus-opacity": "12%",
      "--be-selected-opacity": "8%",
      "--be-text-main-opacity": "87%",
      "--be-text-muted-opacity": "60%",
      "--be-divider-opacity": "12%"
    }
  },
  {
    name: gs.DARK,
    isDark: !0,
    colors: {
      "--be-foreground-base": "255 255 255",
      "--be-primary-light": "239 246 255",
      // 50
      "--be-primary": "191 219 254",
      // 200
      "--be-primary-dark": "147 197 253",
      // 300
      "--be-on-primary": "56 30 114",
      "--be-danger": "242 184 181",
      "--be-on-danger": "96 20 16",
      "--be-background": "20 21 23",
      "--be-background-alt": "26 27 30",
      "--be-paper": "44 46 51",
      "--be-disabled-bg-opacity": "12%",
      "--be-disabled-fg-opacity": "30%",
      "--be-hover-opacity": "8%",
      "--be-focus-opacity": "12%",
      "--be-selected-opacity": "16%",
      "--be-text-main-opacity": "100%",
      "--be-text-muted-opacity": "70%",
      "--be-divider-opacity": "12%"
    }
  }
];
var Me = /* @__PURE__ */ ((t) => (t.FILTER = "filter", t.RESIZE = "resize", t.CROP = "crop", t.DRAW = "draw", t.TEXT = "text", t.SHAPES = "shapes", t.STICKERS = "stickers", t.FRAME = "frame", t.CORNERS = "corners", t.MERGE = "merge", t))(Me || {});
function Bd(t) {
  var e, n, r = "";
  if (typeof t == "string" || typeof t == "number")
    r += t;
  else if (typeof t == "object")
    if (Array.isArray(t)) {
      var i = t.length;
      for (e = 0; e < i; e++)
        t[e] && (n = Bd(t[e])) && (r && (r += " "), r += n);
    } else
      for (n in t)
        t[n] && (r && (r += " "), r += n);
  return r;
}
function ae() {
  for (var t, e, n = 0, r = "", i = arguments.length; n < i; n++)
    (t = arguments[n]) && (e = Bd(t)) && (r && (r += " "), r += e);
  return r;
}
const R1 = Je(
  (t, e) => {
    const {
      attr: n,
      size: r,
      title: i,
      className: f,
      color: g,
      style: l,
      children: s,
      viewBox: a,
      width: h,
      height: o,
      ...u
    } = t;
    return /* @__PURE__ */ ie(
      "svg",
      {
        "aria-hidden": !i,
        focusable: !1,
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: a || "0 0 24 24",
        ...n,
        ...u,
        className: ae("svg-icon", f, L1(r)),
        style: {
          color: g,
          ...l
        },
        ref: e,
        height: o || "1em",
        width: h || "1em",
        children: [
          i && /* @__PURE__ */ x("title", { children: i }),
          s
        ]
      }
    );
  }
);
function L1(t) {
  switch (t) {
    case "2xs":
      return "icon-2xs";
    case "xs":
      return "icon-xs";
    case "sm":
      return "icon-sm";
    case "md":
      return "icon-md";
    case "lg":
      return "icon-lg";
    case "xl":
      return "icon-xl";
    default:
      return t;
  }
}
function be(t, e = "", n) {
  const r = (i, f) => /* @__PURE__ */ x(
    R1,
    {
      "data-testid": `${e}Icon`,
      ref: f,
      viewBox: n,
      ...i,
      size: i.size || "md",
      children: t
    }
  );
  return ce.memo(ce.forwardRef(r));
}
function B1(t, e = "") {
  const n = zd(t);
  return be(n, e);
}
function zd(t) {
  return (t == null ? void 0 : t.map) && t.map((e, n) => ce.createElement(
    e.tag,
    { key: n, ...e.attr },
    zd(e.child)
  ));
}
const Nd = be(
  /* @__PURE__ */ x("path", { d: "M3 17v2h6v-2H3zM3 5v2h10V5H3zm10 16v-2h8v-2h-8v-2h-2v6h2zM7 9v2H3v2h4v2h2V9H7zm14 4v-2H11v2h10zm-6-4h2V7h4V5h-4V3h-2v6z" }),
  "TuneOutlined"
), z1 = be(
  /* @__PURE__ */ x("path", { d: "M21 15h2v2h-2v-2zm0-4h2v2h-2v-2zm2 8h-2v2c1 0 2-1 2-2zM13 3h2v2h-2V3zm8 4h2v2h-2V7zm0-4v2h2c0-1-1-2-2-2zM1 7h2v2H1V7zm16-4h2v2h-2V3zm0 16h2v2h-2v-2zM3 3C2 3 1 4 1 5h2V3zm6 0h2v2H9V3zM5 3h2v2H5V3zm-4 8v8c0 1.1.9 2 2 2h12V11H1zm2 8 2.5-3.21 1.79 2.15 2.5-3.22L13 19H3z" }),
  "PhotoSizeSelectLargeOutlined"
), N1 = be(
  /* @__PURE__ */ x("path", { d: "M17 15h2V7c0-1.1-.9-2-2-2H9v2h8v8zM7 17V1H5v4H1v2h4v10c0 1.1.9 2 2 2h10v4h2v-4h4v-2H7z" }),
  "CropOutlined"
), j1 = be(
  /* @__PURE__ */ x("path", { d: "M2.5 4v3h5v12h3V7h5V4h-13zm19 5h-9v3h3v7h3v-7h3V9z" }),
  "TextFieldsOutlined"
), $1 = be(
  /* @__PURE__ */ x("path", { d: "M10.5 4.5c.28 0 .5.22.5.5v2h6v6h2c.28 0 .5.22.5.5s-.22.5-.5.5h-2v6h-2.12c-.68-1.75-2.39-3-4.38-3s-3.7 1.25-4.38 3H4v-2.12c1.75-.68 3-2.39 3-4.38 0-1.99-1.24-3.7-2.99-4.38L4 7h6V5c0-.28.22-.5.5-.5m0-2C9.12 2.5 8 3.62 8 5H4c-1.1 0-1.99.9-1.99 2v3.8h.29c1.49 0 2.7 1.21 2.7 2.7s-1.21 2.7-2.7 2.7H2V20c0 1.1.9 2 2 2h3.8v-.3c0-1.49 1.21-2.7 2.7-2.7s2.7 1.21 2.7 2.7v.3H17c1.1 0 2-.9 2-2v-4c1.38 0 2.5-1.12 2.5-2.5S20.38 11 19 11V7c0-1.1-.9-2-2-2h-4c0-1.38-1.12-2.5-2.5-2.5z" }),
  "ExtensionOutlined"
), V1 = be(
  /* @__PURE__ */ x("path", { d: "M10.25 13c0 .69-.56 1.25-1.25 1.25S7.75 13.69 7.75 13s.56-1.25 1.25-1.25 1.25.56 1.25 1.25zM15 11.75c-.69 0-1.25.56-1.25 1.25s.56 1.25 1.25 1.25 1.25-.56 1.25-1.25-.56-1.25-1.25-1.25zm7 .25c0 5.52-4.48 10-10 10S2 17.52 2 12 6.48 2 12 2s10 4.48 10 10zM10.66 4.12C12.06 6.44 14.6 8 17.5 8c.46 0 .91-.05 1.34-.12C17.44 5.56 14.9 4 12 4c-.46 0-.91.05-1.34.12zM4.42 9.47c1.71-.97 3.03-2.55 3.66-4.44C6.37 6 5.05 7.58 4.42 9.47zM20 12c0-.78-.12-1.53-.33-2.24-.7.15-1.42.24-2.17.24-3.13 0-5.92-1.44-7.76-3.69C8.69 8.87 6.6 10.88 4 11.86c.01.04 0 .09 0 .14 0 4.41 3.59 8 8 8s8-3.59 8-8z" }),
  "FaceOutlined"
), H1 = be(
  /* @__PURE__ */ x("path", { d: "M20 4h-4l-4-4-4 4H4c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V6c0-1.1-.9-2-2-2zm0 16H4V6h4.52l3.52-3.5L15.52 6H20v14zM6 18h12V8H6v10zm2-8h8v6H8v-6z" }),
  "FilterFramesOutlined"
), W1 = be(
  /* @__PURE__ */ x("path", { d: "M6.41 21 5 19.59l4.83-4.83c.75-.75 1.17-1.77 1.17-2.83v-5.1L9.41 8.41 8 7l4-4 4 4-1.41 1.41L13 6.83v5.1c0 1.06.42 2.08 1.17 2.83L19 19.59 17.59 21 12 15.41 6.41 21z" }),
  "MergeOutlined"
), U1 = be(
  /* @__PURE__ */ x("path", { d: "M19 19h2v2h-2v-2zm0-2h2v-2h-2v2zM3 13h2v-2H3v2zm0 4h2v-2H3v2zm0-8h2V7H3v2zm0-4h2V3H3v2zm4 0h2V3H7v2zm8 16h2v-2h-2v2zm-4 0h2v-2h-2v2zm4 0h2v-2h-2v2zm-8 0h2v-2H7v2zm-4 0h2v-2H3v2zM21 8c0-2.76-2.24-5-5-5h-5v2h5c1.65 0 3 1.35 3 3v5h2V8z" }),
  "RoundedCornerOutlined"
), hu = be(
  /* @__PURE__ */ x("path", { d: "M20 4v12H8V4h12m0-2H8c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h12c1.1 0 2-.9 2-2V4c0-1.1-.9-2-2-2zm-8.5 9.67 1.69 2.26 2.48-3.1L19 15H9zM2 6v14c0 1.1.9 2 2 2h14v-2H4V6H2z" }),
  "PhotoLibraryOutlined"
), jd = be(
  /* @__PURE__ */ x("path", { d: "M13 3c-4.97 0-9 4.03-9 9H1l3.89 3.89.07.14L9 12H6c0-3.87 3.13-7 7-7s7 3.13 7 7-3.13 7-7 7c-1.93 0-3.68-.79-4.94-2.06l-1.42 1.42C8.27 19.99 10.51 21 13 21c4.97 0 9-4.03 9-9s-4.03-9-9-9zm-1 5v5l4.25 2.52.77-1.28-3.52-2.09V8z" }),
  "HistoryOutlined"
), X1 = be(
  [/* @__PURE__ */ x("path", { d: "m2.53 19.65 1.34.56v-9.03l-2.43 5.86c-.41 1.02.08 2.19 1.09 2.61zm19.5-3.7L17.07 3.98c-.31-.75-1.04-1.21-1.81-1.23-.26 0-.53.04-.79.15L7.1 5.95c-.75.31-1.21 1.03-1.23 1.8-.01.27.04.54.15.8l4.96 11.97c.31.76 1.05 1.22 1.83 1.23.26 0 .52-.05.77-.15l7.36-3.05c1.02-.42 1.51-1.59 1.09-2.6zm-9.2 3.8L7.87 7.79l7.35-3.04h.01l4.95 11.95-7.35 3.05z" }, "0"), /* @__PURE__ */ x("circle", { cx: "11", cy: "9", r: "1" }, "1"), /* @__PURE__ */ x("path", { d: "M5.88 19.75c0 1.1.9 2 2 2h1.45l-3.45-8.34v6.34z" }, "2")],
  "StyleOutlined"
), Y1 = be(
  /* @__PURE__ */ x("path", { d: "M16 9v10H8V9h8m-1.5-6h-5l-1 1H5v2h14V4h-3.5l-1-1zM18 7H6v12c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7z" }),
  "DeleteOutlined"
), G1 = be(
  /* @__PURE__ */ x("path", { d: "M18.85,10.39l1.06-1.06c0.78-0.78,0.78-2.05,0-2.83L18.5,5.09c-0.78-0.78-2.05-0.78-2.83,0l-1.06,1.06L18.85,10.39z M14.61,11.81L7.41,19H6v-1.41l7.19-7.19L14.61,11.81z M13.19,7.56L4,16.76V21h4.24l9.19-9.19L13.19,7.56L13.19,7.56z M19,17.5 c0,2.19-2.54,3.5-5,3.5c-0.55,0-1-0.45-1-1s0.45-1,1-1c1.54,0,3-0.73,3-1.5c0-0.47-0.48-0.87-1.23-1.2l1.48-1.48 C18.32,15.45,19,16.29,19,17.5z M4.58,13.35C3.61,12.79,3,12.06,3,11c0-1.8,1.89-2.63,3.56-3.36C7.59,7.18,9,6.56,9,6 c0-0.41-0.78-1-2-1C5.74,5,5.2,5.61,5.17,5.64C4.82,6.05,4.19,6.1,3.77,5.76C3.36,5.42,3.28,4.81,3.62,4.38C3.73,4.24,4.76,3,7,3 c2.24,0,4,1.32,4,3c0,1.87-1.93,2.72-3.64,3.47C6.42,9.88,5,10.5,5,11c0,0.31,0.43,0.6,1.07,0.86L4.58,13.35z" }),
  "Draw"
), K1 = be(
  /* @__PURE__ */ x("path", { d: "m12 5.69 5 4.5V18h-2v-6H9v6H7v-7.81l5-4.5M12 3 2 12h3v8h6v-6h2v6h6v-8h3L12 3z" }),
  "HomeOutlined"
), ln = {
  [Me.FILTER]: {
    name: oe("Applied Filters"),
    icon: Nd
  },
  [Me.RESIZE]: {
    name: oe("Resized Image"),
    icon: z1
  },
  [Me.CROP]: {
    name: oe("Cropped Image"),
    icon: N1
  },
  [Me.DRAW]: {
    name: oe("Added Drawing"),
    icon: G1
  },
  [Me.TEXT]: {
    name: oe("Added Text"),
    icon: j1
  },
  [Me.SHAPES]: {
    name: oe("Added Shape"),
    icon: $1
  },
  [Me.STICKERS]: {
    name: oe("Added Sticker"),
    icon: V1
  },
  [Me.FRAME]: {
    name: oe("Added Frame"),
    icon: H1
  },
  [Me.MERGE]: {
    name: oe("Merged Objects"),
    icon: W1
  },
  [Me.CORNERS]: {
    name: oe("Rounded Corner"),
    icon: U1
  },
  bgImage: {
    name: oe("Replaced Background Image"),
    icon: hu
  },
  overlayImage: {
    name: oe("Added Image"),
    icon: hu
  },
  initial: { name: oe("Initial"), icon: K1 },
  loadedState: {
    name: oe("Loaded State"),
    icon: jd
  },
  objectStyle: {
    name: oe("Changed Style"),
    icon: X1
  },
  deletedObject: {
    name: oe("Deleted object"),
    icon: Y1
  }
}, q1 = Object.values(Me).map(
  (t) => ({
    name: t,
    icon: ln[t].icon,
    action: t === Me.MERGE ? (e) => {
      e.tools.merge.apply();
    } : t
  })
), Z1 = {
  filter: oe("filter"),
  resize: oe("resize"),
  crop: oe("crop"),
  draw: oe("draw"),
  text: oe("text"),
  shapes: oe("shapes"),
  stickers: oe("stickers"),
  frame: oe("frame"),
  corners: oe("corners"),
  merge: oe("merge")
}, J1 = be(
  /* @__PURE__ */ x("path", { d: "M18 15v3H6v-3H4v3c0 1.1.9 2 2 2h12c1.1 0 2-.9 2-2v-3h-2zm-1-4-1.41-1.41L13 12.17V4h-2v8.17L8.41 9.59 7 11l5 5 5-5z" }),
  "FileDownloadOutlined"
), Q1 = "pixie", ew = "3.0.5", tw = "dist/pixie.umd.js", nw = "dist/pixie.es.js", rw = "dist/types/src/pixie.d.ts", iw = {
  ".": {
    import: "./dist/pixie.es.js",
    require: "./dist/pixie.umd.js"
  }
}, sw = [
  "dist"
], ow = {
  dev: "vite --host",
  build: "vite build && npm run build-umd && npm run types && npm run build-cc",
  types: "tsc --skipLibCheck --emitDeclarationOnly --noEmit false --declarationMap false",
  "build-umd": "vite build --config scripts/vite-umd.config.ts",
  "build-cc": "./scripts/build-cc.sh",
  serve: "vite preview",
  extract: "node ./scripts/extract-translations.js"
}, aw = {
  "@floating-ui/react-dom": "^2.0.2",
  "@internationalized/date": "^3.5.0",
  "@internationalized/number": "^3.3.0",
  "@paypal/paypal-js": "^7.0.3",
  "@react-aria/focus": "^3.14.3",
  "@react-aria/interactions": "^3.19.1",
  "@react-aria/overlays": "^3.18.1",
  "@react-aria/ssr": "^3.8.0",
  "@react-aria/utils": "^3.21.1",
  "@react-stately/color": "^3.4.4",
  "@react-stately/utils": "^3.8.0",
  "@sentry/react": "^7.76.0",
  "@sentry/tracing": "^7.76.0",
  "@stripe/react-stripe-js": "^2.3.1",
  "@stripe/stripe-js": "^2.1.10",
  "@tailwindcss/container-queries": "^0.1.0",
  "@tanstack/react-query": "^5.0.5",
  "@tanstack/react-query-devtools": "^5.4.2",
  "@tanstack/react-virtual": "^3.0.0-beta.68",
  "@tiptap/extension-code-block-lowlight": "^2.1.12",
  "@tiptap/extension-color": "^2.1.12",
  "@tiptap/extension-image": "^2.1.12",
  "@tiptap/extension-link": "^2.1.12",
  "@tiptap/extension-subscript": "^2.1.12",
  "@tiptap/extension-superscript": "^2.1.12",
  "@tiptap/extension-text-align": "^2.1.12",
  "@tiptap/extension-text-style": "^2.1.12",
  "@tiptap/extension-underline": "^2.1.12",
  "@tiptap/react": "^2.1.12",
  "@tiptap/starter-kit": "^2.1.12",
  "@types/google.visualization": "^0.0.71",
  "@use-gesture/react": "^10.2.20",
  "@vitejs/plugin-react-swc": "^3.4.0",
  "ace-builds": "^1.31.0",
  axios: "^1.6.0",
  "axios-retry": "^3.8.1",
  "chart.js": "^4.4.0",
  clsx: "^2.0.0",
  color: "^4.2.3",
  dashjs: "^4.7.2",
  "deep-object-diff": "^1.1.7",
  deepmerge: "^4.2.2",
  "dot-object": "^2.1.4",
  fabric: "^5.3.0",
  "file-saver": "^2.0.5",
  "framer-motion": "^10.16.4",
  fscreen: "^1.2.0",
  "get-video-id": "^3.6.5",
  "highlight.js": "^11.9.0",
  "hls.js": "^1.4.12",
  immer: "^10.0.3",
  "just-debounce-it": "^3.2.0",
  "linkify-string": "^4.0.2",
  lowlight: "^3.1.0",
  "media-icons": "^0.10.0",
  "mime-match": "^1.0.2",
  "nano-memoize": "^1.3.0",
  nanoid: "^5.0.2",
  "number-precision": "^1.6.0",
  "performant-array-to-tree": "^1.11.0",
  "prosemirror-state": "^1.4.1",
  react: ">=18.2.0",
  "react-ace": "^10.1.0",
  "react-colorful": "^5.5.1",
  "react-dom": ">=18.2.0",
  "react-hook-form": "^7.47.0",
  "react-merge-refs": "^2.1.1",
  "react-router-dom": "^6.17.0",
  "react-textarea-autosize": "^8.5.3",
  "react-use-clipboard": "^1.0.7",
  "react-use-cookie": "^1.4.0",
  slugify: "^1.6.5",
  "style-inject": "^0.3.0",
  "swagger-ui-react": "^4.15",
  "tus-js-client": "^3.0.1",
  "url-regex": "^5.0.0",
  "use-debounce": "^9.0.4",
  "use-immer": "^0.9.0",
  zustand: "^4.4.4"
}, lw = {
  react: ">=18.2.0",
  "react-dom": ">=18.2.0"
}, cw = {
  "@prettier/plugin-php": "^0.21.0",
  "@rollup/plugin-replace": "^5.0",
  "@tailwindcss/typography": "^0.5.10",
  "@types/color": "^3.0.6",
  "@types/dot-object": "^2.1.4",
  "@types/fabric": "^4.5.12",
  "@types/file-saver": "^2.0.7",
  "@types/fscreen": "^1.0.3",
  "@types/react": "^18",
  "@types/react-dom": "^18",
  "@types/react-recaptcha-v3": "^1.1.3",
  "@types/swagger-ui-react": "^4.18.2",
  "@typescript-eslint/eslint-plugin": "^6.9.0",
  "@typescript-eslint/parser": "^6.9.0",
  "@vitejs/plugin-react": "^4.3.0",
  autoprefixer: "^10.4.16",
  "babel-loader": "^9.1.3",
  cssnano: "^7.0.2",
  eslint: "^8.52.0",
  "eslint-config-prettier": "^9.0.0",
  "eslint-plugin-import": "^2.29.0",
  "eslint-plugin-jsx-a11y": "^6.6.1",
  "eslint-plugin-react": "^7.33.2",
  "eslint-plugin-react-hooks": "^4.6.0",
  express: "^4.18.2",
  "laravel-vite-plugin": "^0.8.1",
  postcss: "^8.4.31",
  prettier: "^3.0.3",
  "prettier-plugin-blade": "^1.6.14",
  "prettier-plugin-tailwindcss": "^0.5.6",
  tailwindcss: "^3.3",
  typescript: "^5.2.2",
  "utility-types": "^3.10.0",
  vite: "^4.5.0",
  "vite-tsconfig-paths": "^4.2.1"
}, uw = {
  name: Q1,
  version: ew,
  main: tw,
  module: nw,
  types: rw,
  private: !0,
  exports: iw,
  files: sw,
  scripts: ow,
  dependencies: aw,
  peerDependencies: lw,
  devDependencies: cw
}, hw = uw.version, $d = {
  selector: "pixie-editor",
  textureSize: 4096,
  activeLanguage: "en",
  ui: {
    visible: !0,
    mode: Al.INLINE,
    forceOverlayModeOnMobile: !0,
    activeTheme: gs.LIGHT,
    themes: Sa,
    allowEditorClose: !0,
    menubar: {
      items: [
        {
          type: "undoWidget",
          align: "left"
        },
        {
          type: "zoomWidget",
          align: "center",
          desktopOnly: !0
        },
        {
          type: "button",
          icon: jd,
          align: "right",
          desktopOnly: !0,
          action: (t) => {
            t.togglePanel("history");
          }
        },
        {
          type: "button",
          icon: J1,
          label: oe("Done"),
          align: "right",
          action: (t) => {
            var e;
            (e = t.state.config.ui) != null && e.showExportPanel ? t.state.togglePanel("export", !0) : t.tools.export.save();
          }
        }
      ]
    },
    nav: {
      position: Rd.BOTTOM,
      items: [...q1]
    },
    openImageDialog: {
      show: !0,
      sampleImages: [
        {
          url: "images/samples/sample1.jpg",
          thumbnail: "images/samples/sample1_thumbnail.jpg"
        },
        {
          url: "images/samples/sample2.jpg",
          thumbnail: "images/samples/sample2_thumbnail.jpg"
        },
        {
          url: "images/samples/sample3.jpg",
          thumbnail: "images/samples/sample3_thumbnail.jpg"
        }
      ]
    },
    colorPresets: {
      items: [
        "rgb(0,0,0)",
        "rgb(255, 255, 255)",
        "rgb(242, 38, 19)",
        "rgb(249, 105, 14)",
        "rgb(253, 227, 167)",
        "rgb(4, 147, 114)",
        "rgb(30, 139, 195)",
        "rgb(142, 68, 173)"
      ]
    }
  },
  objectDefaults: {
    global: {
      ...Pl
    },
    sticker: {
      fill: void 0
    },
    text: {
      textAlign: "initial",
      underline: !1,
      linethrough: !1,
      fontStyle: "normal",
      fontFamily: "Times New Roman",
      fontWeight: "normal",
      stroke: void 0,
      fontSize: 40
    }
  },
  tools: {
    filter: {
      items: [
        "grayscale",
        "blackWhite",
        "sharpen",
        "invert",
        "vintage",
        "polaroid",
        "kodachrome",
        "technicolor",
        "brownie",
        "sepia",
        "removeColor",
        "brightness",
        "gamma",
        "noise",
        "pixelate",
        "blur",
        "emboss",
        "blendColor"
      ]
    },
    zoom: {
      allowUserZoom: !0,
      fitImageToScreen: !0
    },
    crop: {
      allowCustomRatio: !0,
      defaultRatio: "1:1",
      presets: [
        { ratio: null, name: "Custom" },
        { ratio: "1:1", name: "Square" },
        { ratio: "4:3" },
        { ratio: "16:9" },
        { ratio: "5:3" },
        { ratio: "5:4" },
        { ratio: "6:4" },
        { ratio: "7:5" },
        { ratio: "10:8" }
      ]
    },
    text: {
      defaultText: "Double click to edit",
      controlsPadding: 6,
      items: [
        {
          family: "Roboto",
          src: "fonts/open-sans-v27-latin-ext_latin-regular.woff2"
        },
        {
          family: "Fuzzy Bubbles",
          src: "fonts/fuzzy-bubbles-v3-latin-700.woff2",
          descriptors: { weight: "700" }
        },
        {
          family: "Aleo Bold",
          src: "fonts/aleo-v4-latin-ext_latin-700.woff2",
          descriptors: { weight: "700" }
        },
        {
          family: "Amatic SC",
          src: "fonts/amatic-sc-v16-latin-ext_latin-regular.woff2"
        },
        {
          family: "Corinthia Bold",
          src: "fonts/corinthia-v7-latin-ext_latin-700.woff2"
        },
        {
          family: "Bungee Inline",
          src: "fonts/bungee-inline-v6-latin-ext_latin-regular.woff2"
        },
        {
          family: "Robot Slab Bold",
          src: "fonts/roboto-slab-v16-latin-ext_latin-500.woff2"
        },
        {
          family: "Carter One",
          src: "fonts/carter-one-v12-latin-regular.woff2"
        },
        {
          family: "Cody Star",
          src: "fonts/codystar-v10-latin-ext_latin-regular.woff2"
        },
        {
          family: "Fira Sans",
          src: "fonts/fira-sans-v11-latin-ext_latin_cyrillic-regular.woff2"
        },
        {
          family: "Krona One",
          src: "fonts/krona-one-v9-latin-ext_latin-regular.woff2"
        },
        {
          family: "Kumar One Outline",
          src: "fonts/kumar-one-outline-v8-latin-ext_latin-regular.woff2"
        },
        {
          family: "Lobster Two",
          src: "fonts/lobster-two-v13-latin-regular.woff2"
        },
        {
          family: "Molle Italic",
          src: "fonts/molle-v11-latin-ext_latin-italic.woff2"
        },
        {
          family: "Monoton",
          src: "fonts/monoton-v10-latin-regular.woff2"
        },
        {
          family: "Nixie One",
          src: "fonts/nixie-one-v11-latin-regular.woff2"
        },
        {
          family: "Permanent Marker",
          src: "fonts/permanent-marker-v10-latin-regular.woff2"
        },
        {
          family: "Sancreek",
          src: "fonts/sancreek-v13-latin-ext_latin-regular.woff2"
        },
        {
          family: "Stint Ultra Expanded",
          src: "fonts/stint-ultra-expanded-v10-latin-regular.woff2"
        },
        {
          family: "VT323",
          src: "fonts/vt323-v12-latin-ext_latin-regular.woff2"
        },
        {
          family: "Trash Hand",
          src: "fonts/TrashHand.ttf"
        }
      ]
    },
    draw: {
      brushSizes: Ld,
      brushTypes: I1
    },
    shapes: {
      items: A1.slice()
    },
    stickers: {
      items: M1
    },
    import: {
      validImgExtensions: ["png", "jpg", "jpeg", "svg", "gif"],
      fitOverlayToScreen: !0,
      openDroppedImageAsBackground: !1
    },
    export: {
      defaultFormat: "png",
      defaultQuality: 0.8,
      defaultName: "image"
    },
    frame: {
      items: [
        {
          name: "basic",
          mode: "basic",
          size: {
            min: 1,
            max: 35,
            default: 10
          }
        },
        {
          name: "pine",
          mode: "stretch",
          size: {
            min: 1,
            max: 35,
            default: 15
          }
        },
        {
          name: "oak",
          mode: "stretch",
          size: {
            min: 1,
            max: 35,
            default: 15
          }
        },
        {
          name: "rainbow",
          mode: "stretch",
          size: {
            min: 1,
            max: 35,
            default: 15
          }
        },
        {
          name: "grunge1",
          display_name: "grunge #1",
          mode: "stretch",
          size: {
            min: 1,
            max: 35,
            default: 15
          }
        },
        {
          name: "grunge2",
          display_name: "grunge #2",
          mode: "stretch",
          size: {
            min: 1,
            max: 35,
            default: 20
          }
        },
        {
          name: "ebony",
          mode: "stretch",
          size: {
            min: 1,
            max: 35,
            default: 15
          }
        },
        {
          name: "art1",
          display_name: "Art #1",
          mode: "repeat",
          size: {
            min: 10,
            max: 70,
            default: 55
          }
        },
        {
          name: "art2",
          display_name: "Art #2",
          mode: "repeat",
          size: {
            min: 10,
            max: 70,
            default: 55
          }
        }
      ]
    }
  }
}, fu = (t) => {
  let e;
  const n = /* @__PURE__ */ new Set(), r = (h, o) => {
    const u = typeof h == "function" ? h(e) : h;
    if (!Object.is(u, e)) {
      const c = e;
      e = o ?? (typeof u != "object" || u === null) ? u : Object.assign({}, e, u), n.forEach((d) => d(e, c));
    }
  }, i = () => e, s = { setState: r, getState: i, getInitialState: () => a, subscribe: (h) => (n.add(h), () => n.delete(h)), destroy: () => {
    n.clear();
  } }, a = e = t(r, i, s);
  return s;
}, fw = (t) => t ? fu(t) : fu;
var Vd = { exports: {} }, Hd = {}, Wd = { exports: {} }, Ud = {};
/**
 * @license React
 * use-sync-external-store-shim.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var Cr = ce;
function dw(t, e) {
  return t === e && (t !== 0 || 1 / t === 1 / e) || t !== t && e !== e;
}
var pw = typeof Object.is == "function" ? Object.is : dw, gw = Cr.useState, mw = Cr.useEffect, vw = Cr.useLayoutEffect, bw = Cr.useDebugValue;
function yw(t, e) {
  var n = e(), r = gw({ inst: { value: n, getSnapshot: e } }), i = r[0].inst, f = r[1];
  return vw(function() {
    i.value = n, i.getSnapshot = e, Po(i) && f({ inst: i });
  }, [t, n, e]), mw(function() {
    return Po(i) && f({ inst: i }), t(function() {
      Po(i) && f({ inst: i });
    });
  }, [t]), bw(n), n;
}
function Po(t) {
  var e = t.getSnapshot;
  t = t.value;
  try {
    var n = e();
    return !pw(t, n);
  } catch {
    return !0;
  }
}
function ww(t, e) {
  return e();
}
var xw = typeof window > "u" || typeof window.document > "u" || typeof window.document.createElement > "u" ? ww : yw;
Ud.useSyncExternalStore = Cr.useSyncExternalStore !== void 0 ? Cr.useSyncExternalStore : xw;
Wd.exports = Ud;
var Cw = Wd.exports;
/**
 * @license React
 * use-sync-external-store-shim/with-selector.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var qs = ce, _w = Cw;
function Sw(t, e) {
  return t === e && (t !== 0 || 1 / t === 1 / e) || t !== t && e !== e;
}
var Tw = typeof Object.is == "function" ? Object.is : Sw, Ew = _w.useSyncExternalStore, kw = qs.useRef, Ow = qs.useEffect, Dw = qs.useMemo, Aw = qs.useDebugValue;
Hd.useSyncExternalStoreWithSelector = function(t, e, n, r, i) {
  var f = kw(null);
  if (f.current === null) {
    var g = { hasValue: !1, value: null };
    f.current = g;
  } else
    g = f.current;
  f = Dw(function() {
    function s(c) {
      if (!a) {
        if (a = !0, h = c, c = r(c), i !== void 0 && g.hasValue) {
          var d = g.value;
          if (i(d, c))
            return o = d;
        }
        return o = c;
      }
      if (d = o, Tw(h, c))
        return d;
      var m = r(c);
      return i !== void 0 && i(d, m) ? d : (h = c, o = m);
    }
    var a = !1, h, o, u = n === void 0 ? null : n;
    return [function() {
      return s(e());
    }, u === null ? void 0 : function() {
      return s(u());
    }];
  }, [e, n, r, i]);
  var l = Ew(t, f[0], f[1]);
  return Ow(function() {
    g.hasValue = !0, g.value = l;
  }, [l]), Aw(l), l;
};
Vd.exports = Hd;
var Pw = Vd.exports;
const Mw = /* @__PURE__ */ ki(Pw), { useDebugValue: Fw } = ce, { useSyncExternalStoreWithSelector: Iw } = Mw;
const Rw = (t) => t;
function Lw(t, e = Rw, n) {
  const r = Iw(
    t.subscribe,
    t.getState,
    t.getServerState || t.getInitialState,
    e,
    n
  );
  return Fw(r), r;
}
const du = (t) => {
  const e = typeof t == "function" ? fw(t) : t, n = (r, i) => Lw(e, r, i);
  return Object.assign(n, e), n;
}, Ml = (t) => t ? du(t) : du, Bw = (t) => (e, n, r) => {
  const i = r.subscribe;
  return r.subscribe = (g, l, s) => {
    let a = g;
    if (l) {
      const h = (s == null ? void 0 : s.equalityFn) || Object.is;
      let o = g(r.getState());
      a = (u) => {
        const c = g(u);
        if (!h(o, c)) {
          const d = o;
          l(o = c, d);
        }
      }, s != null && s.fireImmediately && l(o, o);
    }
    return i(a);
  }, t(e, n, r);
}, zw = Bw;
var Xd = Symbol.for("immer-nothing"), pu = Symbol.for("immer-draftable"), wt = Symbol.for("immer-state");
function Ot(t, ...e) {
  throw new Error(
    `[Immer] minified error nr: ${t}. Full error at: https://bit.ly/3cXEKWf`
  );
}
var _r = Object.getPrototypeOf;
function Sr(t) {
  return !!t && !!t[wt];
}
function Hn(t) {
  var e;
  return t ? Yd(t) || Array.isArray(t) || !!t[pu] || !!((e = t.constructor) != null && e[pu]) || Js(t) || Qs(t) : !1;
}
var Nw = Object.prototype.constructor.toString();
function Yd(t) {
  if (!t || typeof t != "object")
    return !1;
  const e = _r(t);
  if (e === null)
    return !0;
  const n = Object.hasOwnProperty.call(e, "constructor") && e.constructor;
  return n === Object ? !0 : typeof n == "function" && Function.toString.call(n) === Nw;
}
function ms(t, e) {
  Zs(t) === 0 ? Reflect.ownKeys(t).forEach((n) => {
    e(n, t[n], t);
  }) : t.forEach((n, r) => e(r, n, t));
}
function Zs(t) {
  const e = t[wt];
  return e ? e.type_ : Array.isArray(t) ? 1 : Js(t) ? 2 : Qs(t) ? 3 : 0;
}
function Ta(t, e) {
  return Zs(t) === 2 ? t.has(e) : Object.prototype.hasOwnProperty.call(t, e);
}
function Gd(t, e, n) {
  const r = Zs(t);
  r === 2 ? t.set(e, n) : r === 3 ? t.add(n) : t[e] = n;
}
function jw(t, e) {
  return t === e ? t !== 0 || 1 / t === 1 / e : t !== t && e !== e;
}
function Js(t) {
  return t instanceof Map;
}
function Qs(t) {
  return t instanceof Set;
}
function Mn(t) {
  return t.copy_ || t.base_;
}
function Ea(t, e) {
  if (Js(t))
    return new Map(t);
  if (Qs(t))
    return new Set(t);
  if (Array.isArray(t))
    return Array.prototype.slice.call(t);
  const n = Yd(t);
  if (e === !0 || e === "class_only" && !n) {
    const r = Object.getOwnPropertyDescriptors(t);
    delete r[wt];
    let i = Reflect.ownKeys(r);
    for (let f = 0; f < i.length; f++) {
      const g = i[f], l = r[g];
      l.writable === !1 && (l.writable = !0, l.configurable = !0), (l.get || l.set) && (r[g] = {
        configurable: !0,
        writable: !0,
        // could live with !!desc.set as well here...
        enumerable: l.enumerable,
        value: t[g]
      });
    }
    return Object.create(_r(t), r);
  } else {
    const r = _r(t);
    if (r !== null && n)
      return { ...t };
    const i = Object.create(r);
    return Object.assign(i, t);
  }
}
function Fl(t, e = !1) {
  return eo(t) || Sr(t) || !Hn(t) || (Zs(t) > 1 && (t.set = t.add = t.clear = t.delete = $w), Object.freeze(t), e && Object.entries(t).forEach(([n, r]) => Fl(r, !0))), t;
}
function $w() {
  Ot(2);
}
function eo(t) {
  return Object.isFrozen(t);
}
var Vw = {};
function Wn(t) {
  const e = Vw[t];
  return e || Ot(0, t), e;
}
var ui;
function Kd() {
  return ui;
}
function Hw(t, e) {
  return {
    drafts_: [],
    parent_: t,
    immer_: e,
    // Whenever the modified draft contains a draft from another scope, we
    // need to prevent auto-freezing so the unowned draft can be finalized.
    canAutoFreeze_: !0,
    unfinalizedDrafts_: 0
  };
}
function gu(t, e) {
  e && (Wn("Patches"), t.patches_ = [], t.inversePatches_ = [], t.patchListener_ = e);
}
function ka(t) {
  Oa(t), t.drafts_.forEach(Ww), t.drafts_ = null;
}
function Oa(t) {
  t === ui && (ui = t.parent_);
}
function mu(t) {
  return ui = Hw(ui, t);
}
function Ww(t) {
  const e = t[wt];
  e.type_ === 0 || e.type_ === 1 ? e.revoke_() : e.revoked_ = !0;
}
function vu(t, e) {
  e.unfinalizedDrafts_ = e.drafts_.length;
  const n = e.drafts_[0];
  return t !== void 0 && t !== n ? (n[wt].modified_ && (ka(e), Ot(4)), Hn(t) && (t = vs(e, t), e.parent_ || bs(e, t)), e.patches_ && Wn("Patches").generateReplacementPatches_(
    n[wt].base_,
    t,
    e.patches_,
    e.inversePatches_
  )) : t = vs(e, n, []), ka(e), e.patches_ && e.patchListener_(e.patches_, e.inversePatches_), t !== Xd ? t : void 0;
}
function vs(t, e, n) {
  if (eo(e))
    return e;
  const r = e[wt];
  if (!r)
    return ms(
      e,
      (i, f) => bu(t, r, e, i, f, n)
    ), e;
  if (r.scope_ !== t)
    return e;
  if (!r.modified_)
    return bs(t, r.base_, !0), r.base_;
  if (!r.finalized_) {
    r.finalized_ = !0, r.scope_.unfinalizedDrafts_--;
    const i = r.copy_;
    let f = i, g = !1;
    r.type_ === 3 && (f = new Set(i), i.clear(), g = !0), ms(
      f,
      (l, s) => bu(t, r, i, l, s, n, g)
    ), bs(t, i, !1), n && t.patches_ && Wn("Patches").generatePatches_(
      r,
      n,
      t.patches_,
      t.inversePatches_
    );
  }
  return r.copy_;
}
function bu(t, e, n, r, i, f, g) {
  if (Sr(i)) {
    const l = f && e && e.type_ !== 3 && // Set objects are atomic since they have no keys.
    !Ta(e.assigned_, r) ? f.concat(r) : void 0, s = vs(t, i, l);
    if (Gd(n, r, s), Sr(s))
      t.canAutoFreeze_ = !1;
    else
      return;
  } else
    g && n.add(i);
  if (Hn(i) && !eo(i)) {
    if (!t.immer_.autoFreeze_ && t.unfinalizedDrafts_ < 1)
      return;
    vs(t, i), (!e || !e.scope_.parent_) && typeof r != "symbol" && Object.prototype.propertyIsEnumerable.call(n, r) && bs(t, i);
  }
}
function bs(t, e, n = !1) {
  !t.parent_ && t.immer_.autoFreeze_ && t.canAutoFreeze_ && Fl(e, n);
}
function Uw(t, e) {
  const n = Array.isArray(t), r = {
    type_: n ? 1 : 0,
    // Track which produce call this is associated with.
    scope_: e ? e.scope_ : Kd(),
    // True for both shallow and deep changes.
    modified_: !1,
    // Used during finalization.
    finalized_: !1,
    // Track which properties have been assigned (true) or deleted (false).
    assigned_: {},
    // The parent draft state.
    parent_: e,
    // The base state.
    base_: t,
    // The base proxy.
    draft_: null,
    // set below
    // The base copy with any updated values.
    copy_: null,
    // Called by the `produce` function.
    revoke_: null,
    isManual_: !1
  };
  let i = r, f = Il;
  n && (i = [r], f = hi);
  const { revoke: g, proxy: l } = Proxy.revocable(i, f);
  return r.draft_ = l, r.revoke_ = g, l;
}
var Il = {
  get(t, e) {
    if (e === wt)
      return t;
    const n = Mn(t);
    if (!Ta(n, e))
      return Xw(t, n, e);
    const r = n[e];
    return t.finalized_ || !Hn(r) ? r : r === Mo(t.base_, e) ? (Fo(t), t.copy_[e] = Aa(r, t)) : r;
  },
  has(t, e) {
    return e in Mn(t);
  },
  ownKeys(t) {
    return Reflect.ownKeys(Mn(t));
  },
  set(t, e, n) {
    const r = qd(Mn(t), e);
    if (r != null && r.set)
      return r.set.call(t.draft_, n), !0;
    if (!t.modified_) {
      const i = Mo(Mn(t), e), f = i == null ? void 0 : i[wt];
      if (f && f.base_ === n)
        return t.copy_[e] = n, t.assigned_[e] = !1, !0;
      if (jw(n, i) && (n !== void 0 || Ta(t.base_, e)))
        return !0;
      Fo(t), Da(t);
    }
    return t.copy_[e] === n && // special case: handle new props with value 'undefined'
    (n !== void 0 || e in t.copy_) || // special case: NaN
    Number.isNaN(n) && Number.isNaN(t.copy_[e]) || (t.copy_[e] = n, t.assigned_[e] = !0), !0;
  },
  deleteProperty(t, e) {
    return Mo(t.base_, e) !== void 0 || e in t.base_ ? (t.assigned_[e] = !1, Fo(t), Da(t)) : delete t.assigned_[e], t.copy_ && delete t.copy_[e], !0;
  },
  // Note: We never coerce `desc.value` into an Immer draft, because we can't make
  // the same guarantee in ES5 mode.
  getOwnPropertyDescriptor(t, e) {
    const n = Mn(t), r = Reflect.getOwnPropertyDescriptor(n, e);
    return r && {
      writable: !0,
      configurable: t.type_ !== 1 || e !== "length",
      enumerable: r.enumerable,
      value: n[e]
    };
  },
  defineProperty() {
    Ot(11);
  },
  getPrototypeOf(t) {
    return _r(t.base_);
  },
  setPrototypeOf() {
    Ot(12);
  }
}, hi = {};
ms(Il, (t, e) => {
  hi[t] = function() {
    return arguments[0] = arguments[0][0], e.apply(this, arguments);
  };
});
hi.deleteProperty = function(t, e) {
  return hi.set.call(this, t, e, void 0);
};
hi.set = function(t, e, n) {
  return Il.set.call(this, t[0], e, n, t[0]);
};
function Mo(t, e) {
  const n = t[wt];
  return (n ? Mn(n) : t)[e];
}
function Xw(t, e, n) {
  var i;
  const r = qd(e, n);
  return r ? "value" in r ? r.value : (
    // This is a very special case, if the prop is a getter defined by the
    // prototype, we should invoke it with the draft as context!
    (i = r.get) == null ? void 0 : i.call(t.draft_)
  ) : void 0;
}
function qd(t, e) {
  if (!(e in t))
    return;
  let n = _r(t);
  for (; n; ) {
    const r = Object.getOwnPropertyDescriptor(n, e);
    if (r)
      return r;
    n = _r(n);
  }
}
function Da(t) {
  t.modified_ || (t.modified_ = !0, t.parent_ && Da(t.parent_));
}
function Fo(t) {
  t.copy_ || (t.copy_ = Ea(
    t.base_,
    t.scope_.immer_.useStrictShallowCopy_
  ));
}
var Yw = class {
  constructor(t) {
    this.autoFreeze_ = !0, this.useStrictShallowCopy_ = !1, this.produce = (e, n, r) => {
      if (typeof e == "function" && typeof n != "function") {
        const f = n;
        n = e;
        const g = this;
        return function(s = f, ...a) {
          return g.produce(s, (h) => n.call(this, h, ...a));
        };
      }
      typeof n != "function" && Ot(6), r !== void 0 && typeof r != "function" && Ot(7);
      let i;
      if (Hn(e)) {
        const f = mu(this), g = Aa(e, void 0);
        let l = !0;
        try {
          i = n(g), l = !1;
        } finally {
          l ? ka(f) : Oa(f);
        }
        return gu(f, r), vu(i, f);
      } else if (!e || typeof e != "object") {
        if (i = n(e), i === void 0 && (i = e), i === Xd && (i = void 0), this.autoFreeze_ && Fl(i, !0), r) {
          const f = [], g = [];
          Wn("Patches").generateReplacementPatches_(e, i, f, g), r(f, g);
        }
        return i;
      } else
        Ot(1, e);
    }, this.produceWithPatches = (e, n) => {
      if (typeof e == "function")
        return (g, ...l) => this.produceWithPatches(g, (s) => e(s, ...l));
      let r, i;
      return [this.produce(e, n, (g, l) => {
        r = g, i = l;
      }), r, i];
    }, typeof (t == null ? void 0 : t.autoFreeze) == "boolean" && this.setAutoFreeze(t.autoFreeze), typeof (t == null ? void 0 : t.useStrictShallowCopy) == "boolean" && this.setUseStrictShallowCopy(t.useStrictShallowCopy);
  }
  createDraft(t) {
    Hn(t) || Ot(8), Sr(t) && (t = Gw(t));
    const e = mu(this), n = Aa(t, void 0);
    return n[wt].isManual_ = !0, Oa(e), n;
  }
  finishDraft(t, e) {
    const n = t && t[wt];
    (!n || !n.isManual_) && Ot(9);
    const { scope_: r } = n;
    return gu(r, e), vu(void 0, r);
  }
  /**
   * Pass true to automatically freeze all copies created by Immer.
   *
   * By default, auto-freezing is enabled.
   */
  setAutoFreeze(t) {
    this.autoFreeze_ = t;
  }
  /**
   * Pass true to enable strict shallow copy.
   *
   * By default, immer does not copy the object descriptors such as getter, setter and non-enumrable properties.
   */
  setUseStrictShallowCopy(t) {
    this.useStrictShallowCopy_ = t;
  }
  applyPatches(t, e) {
    let n;
    for (n = e.length - 1; n >= 0; n--) {
      const i = e[n];
      if (i.path.length === 0 && i.op === "replace") {
        t = i.value;
        break;
      }
    }
    n > -1 && (e = e.slice(n + 1));
    const r = Wn("Patches").applyPatches_;
    return Sr(t) ? r(t, e) : this.produce(
      t,
      (i) => r(i, e)
    );
  }
};
function Aa(t, e) {
  const n = Js(t) ? Wn("MapSet").proxyMap_(t, e) : Qs(t) ? Wn("MapSet").proxySet_(t, e) : Uw(t, e);
  return (e ? e.scope_ : Kd()).drafts_.push(n), n;
}
function Gw(t) {
  return Sr(t) || Ot(10, t), Zd(t);
}
function Zd(t) {
  if (!Hn(t) || eo(t))
    return t;
  const e = t[wt];
  let n;
  if (e) {
    if (!e.modified_)
      return e.base_;
    e.finalized_ = !0, n = Ea(t, e.scope_.immer_.useStrictShallowCopy_);
  } else
    n = Ea(t, !0);
  return ms(n, (r, i) => {
    Gd(n, r, Zd(i));
  }), e && (e.finalized_ = !1), n;
}
var xt = new Yw(), Kw = xt.produce;
xt.produceWithPatches.bind(
  xt
);
xt.setAutoFreeze.bind(xt);
xt.setUseStrictShallowCopy.bind(xt);
xt.applyPatches.bind(xt);
xt.createDraft.bind(xt);
xt.finishDraft.bind(xt);
var qw = function(e) {
  return Zw(e) && !Jw(e);
};
function Zw(t) {
  return !!t && typeof t == "object";
}
function Jw(t) {
  var e = Object.prototype.toString.call(t);
  return e === "[object RegExp]" || e === "[object Date]" || t2(t);
}
var Qw = typeof Symbol == "function" && Symbol.for, e2 = Qw ? Symbol.for("react.element") : 60103;
function t2(t) {
  return t.$$typeof === e2;
}
function n2(t) {
  return Array.isArray(t) ? [] : {};
}
function fi(t, e) {
  return e.clone !== !1 && e.isMergeableObject(t) ? Tr(n2(t), t, e) : t;
}
function r2(t, e, n) {
  return t.concat(e).map(function(r) {
    return fi(r, n);
  });
}
function i2(t, e) {
  if (!e.customMerge)
    return Tr;
  var n = e.customMerge(t);
  return typeof n == "function" ? n : Tr;
}
function s2(t) {
  return Object.getOwnPropertySymbols ? Object.getOwnPropertySymbols(t).filter(function(e) {
    return Object.propertyIsEnumerable.call(t, e);
  }) : [];
}
function yu(t) {
  return Object.keys(t).concat(s2(t));
}
function Jd(t, e) {
  try {
    return e in t;
  } catch {
    return !1;
  }
}
function o2(t, e) {
  return Jd(t, e) && !(Object.hasOwnProperty.call(t, e) && Object.propertyIsEnumerable.call(t, e));
}
function a2(t, e, n) {
  var r = {};
  return n.isMergeableObject(t) && yu(t).forEach(function(i) {
    r[i] = fi(t[i], n);
  }), yu(e).forEach(function(i) {
    o2(t, i) || (Jd(t, i) && n.isMergeableObject(e[i]) ? r[i] = i2(i, n)(t[i], e[i], n) : r[i] = fi(e[i], n));
  }), r;
}
function Tr(t, e, n) {
  n = n || {}, n.arrayMerge = n.arrayMerge || r2, n.isMergeableObject = n.isMergeableObject || qw, n.cloneUnlessOtherwiseSpecified = fi;
  var r = Array.isArray(e), i = Array.isArray(t), f = r === i;
  return f ? r ? n.arrayMerge(t, e, n) : a2(t, e, n) : fi(e, n);
}
Tr.all = function(e, n) {
  if (!Array.isArray(e))
    throw new Error("first argument should be an array");
  return e.reduce(function(r, i) {
    return Tr(r, i, n);
  }, {});
};
var l2 = Tr, c2 = l2;
const Qd = /* @__PURE__ */ ki(c2);
function u2(t) {
  return t ? t.charAt(0).toLowerCase() + t.slice(1) : "";
}
function h2(t, e) {
  const n = Qd(e, t);
  return ep(n, t);
}
function ep(t, e) {
  return Object.keys(t).forEach((n) => {
    if (n.startsWith("replaceDefault") && t[n]) {
      const r = u2(
        n.replace("replaceDefault", "") || "items"
      );
      t[r] = e ? e[r] : [], delete t[n];
    } else
      typeof t[n] == "object" && t[n] !== null && ep(t[n], e == null ? void 0 : e[n]);
  }), t;
}
const f2 = (t, e) => ({
  history: {
    ...wu,
    updatePointerById: (n) => {
      const r = e().history.items.findIndex((i) => i.id === n);
      e().history.update(r);
    },
    update: (n, r) => {
      t((i) => {
        i.history.pointer = n, r && (i.history.items = r), i.history.canUndo = i.history.pointer > 0, i.history.canRedo = i.history.items.length > i.history.pointer + 1;
      });
    },
    reset: (n) => {
      t({ history: { ...e().history, ...n ?? wu } });
    }
  }
}), wu = {
  items: [],
  pointer: 0,
  canUndo: !1,
  canRedo: !1
};
var Et = /* @__PURE__ */ ((t) => (t.Filter = "filter", t.Frame = "frame", t.ActiveObject = "activeObj", t.Text = "text", t))(Et || {});
const d2 = (t, e) => ({
  filter: {
    ...xu,
    select(n, r = !1) {
      t((i) => {
        i.filter.selected = n, i.activeToolOverlay = r ? Et.Filter : null, i.dirty = !0;
      });
    },
    deselect(n) {
      e().filter.selected === n && t((r) => {
        r.filter.selected = null, r.activeToolOverlay = null, r.dirty = !0;
      });
    },
    reset() {
      t({ filter: { ...e().filter, ...xu } });
    }
  }
}), xu = {
  selected: null,
  applied: []
}, p2 = (t, e) => ({
  crop: {
    ...Cu,
    setCropzoneRect: (n) => {
      t((r) => {
        r.crop.zoneRect = n;
      });
    },
    setAspectRatio: (n) => {
      t((r) => {
        r.crop.selectedAspectRatio = n;
      });
    },
    setTransformAngle: (n) => {
      t((r) => {
        r.crop.straightenAngle = n;
      });
    },
    apply: async () => {
      const n = e().crop.zoneRect;
      if (n) {
        const r = {
          width: Math.ceil(n.width / e().zoom),
          height: Math.ceil(n.height / e().zoom),
          left: Math.ceil(n.left / e().zoom),
          top: Math.ceil(n.top / e().zoom)
        };
        await e().editor.tools.crop.apply(r);
      }
    },
    reset: () => {
      t({ crop: { ...e().crop, ...Cu } });
    }
  }
}), Cu = {
  zoneRect: null,
  selectedAspectRatio: null,
  straightenAngle: 0
};
function Tn(t) {
  return (t == null ? void 0 : t.type) === "i-text";
}
var Ve = /* @__PURE__ */ ((t) => (t.Text = "text", t.Shape = "shape", t.Sticker = "sticker", t.Drawing = "drawing", t.Image = "image", t.MainImage = "mainImage", t.StraightenAnchor = "straightenHelper", t))(Ve || {});
const g2 = {
  text: {
    name: oe("Text"),
    icon: ln.text.icon
  },
  shape: {
    name: oe("Shape"),
    icon: ln.shapes.icon
  },
  sticker: {
    name: oe("Sticker"),
    icon: ln.stickers.icon
  },
  drawing: {
    name: oe("Drawing"),
    icon: ln.draw.icon
  },
  image: {
    name: oe("Image"),
    icon: ln.overlayImage.icon
  },
  mainImage: {
    name: oe("Background Image"),
    icon: ln.bgImage.icon
  }
};
function m2(t) {
  return t.name === Ve.Image;
}
const tp = {
  isMoving: !1,
  editableProps: {},
  id: null,
  isText: !1,
  isImage: !1,
  name: null
};
function v2(t) {
  if (!t)
    return {};
  const e = {
    fill: t.fill,
    opacity: t.opacity,
    backgroundColor: t.backgroundColor,
    stroke: t.stroke,
    strokeWidth: t.strokeWidth
  }, n = t.shadow;
  return n && (e.shadow = {
    color: n.color,
    blur: n.blur,
    offsetX: n.offsetX,
    offsetY: n.offsetY
  }), Tn(t) && (e.textAlign = t.textAlign, e.underline = t.underline, e.linethrough = t.linethrough, e.fontStyle = t.fontStyle, e.fontFamily = t.fontFamily, e.fontWeight = t.fontWeight, e.fontSize = t.fontSize), e;
}
const b2 = (t, e) => ({
  objects: {
    ..._u,
    setActiveIsMoving: (n) => {
      t((r) => {
        r.objects.active.isMoving = n;
      });
    },
    setIsEditingText: (n) => {
      t((r) => {
        r.objects.isEditingText = n;
      });
    },
    setActive: (n) => {
      t(n ? (r) => {
        r.objects.active.editableProps = v2(n), r.objects.active.id = n.data.id, r.objects.active.name = n.name ?? null, r.objects.active.isText = Tn(n), r.objects.active.isImage = m2(n);
      } : (r) => {
        var f, g, l, s, a;
        const i = {
          ...(f = e().config.objectDefaults) == null ? void 0 : f.global,
          fontFamily: (l = (g = e().config.objectDefaults) == null ? void 0 : g.text) == null ? void 0 : l.fontFamily,
          fontSize: (a = (s = e().config.objectDefaults) == null ? void 0 : s.text) == null ? void 0 : a.fontSize
        };
        r.objects.active = {
          ...tp,
          editableProps: i
        };
      });
    },
    reset() {
      t({ objects: { ...e().objects, ..._u } });
    }
  }
}), _u = {
  all: [],
  isEditingText: !1,
  active: tp
}, y2 = (t, e) => ({
  frame: {
    ...Su,
    select: (n) => {
      t((r) => {
        r.frame.active = n;
      }), e().frame.showOptionsPanel();
    },
    deselect: () => {
      t((n) => {
        n.frame.active = null, n.activeToolOverlay = null;
      });
    },
    showOptionsPanel: () => {
      e().activeTool === Me.FRAME && t((n) => {
        n.activeToolOverlay = Et.Frame;
      });
    },
    reset() {
      t({ frame: { ...e().frame, ...Su } });
    }
  }
}), Su = {
  active: null
}, w2 = (t, e) => ({
  resize: {
    ...Tu,
    setFormValue: (n) => {
      t((r) => {
        Object.entries(n).forEach(([i, f]) => {
          r.resize.formValue[i] = f;
        });
      });
    },
    apply() {
      const n = e().resize.formValue, r = e().original;
      if (n.width === r.width && n.height === r.height)
        return !1;
      e().editor.tools.resize.apply(n);
    },
    reset() {
      t({ resize: { ...e().resize, ...Tu } });
    }
  }
}), Tu = {
  formValue: {
    width: 1,
    height: 1,
    maintainAspect: !0,
    usePercentages: !1
  }
}, x2 = (t, e) => ({
  corners: {
    ...Eu,
    setRadius: (n) => {
      t((r) => {
        r.corners.radius = n;
      });
    },
    apply() {
      return e().editor.tools.corners.apply(e().corners.radius);
    },
    reset() {
      t({ corners: { ...e().corners, ...Eu } });
    }
  }
}), Eu = {
  radius: 50
}, C2 = (t) => (e, n, r) => (r.setState = (i, f, ...g) => {
  const l = typeof i == "function" ? Kw(i) : i;
  return e(l, f, ...g);
}, t(r.setState, n, r)), np = C2;
var rp = { exports: {} }, _2 = {
  aliceblue: [240, 248, 255],
  antiquewhite: [250, 235, 215],
  aqua: [0, 255, 255],
  aquamarine: [127, 255, 212],
  azure: [240, 255, 255],
  beige: [245, 245, 220],
  bisque: [255, 228, 196],
  black: [0, 0, 0],
  blanchedalmond: [255, 235, 205],
  blue: [0, 0, 255],
  blueviolet: [138, 43, 226],
  brown: [165, 42, 42],
  burlywood: [222, 184, 135],
  cadetblue: [95, 158, 160],
  chartreuse: [127, 255, 0],
  chocolate: [210, 105, 30],
  coral: [255, 127, 80],
  cornflowerblue: [100, 149, 237],
  cornsilk: [255, 248, 220],
  crimson: [220, 20, 60],
  cyan: [0, 255, 255],
  darkblue: [0, 0, 139],
  darkcyan: [0, 139, 139],
  darkgoldenrod: [184, 134, 11],
  darkgray: [169, 169, 169],
  darkgreen: [0, 100, 0],
  darkgrey: [169, 169, 169],
  darkkhaki: [189, 183, 107],
  darkmagenta: [139, 0, 139],
  darkolivegreen: [85, 107, 47],
  darkorange: [255, 140, 0],
  darkorchid: [153, 50, 204],
  darkred: [139, 0, 0],
  darksalmon: [233, 150, 122],
  darkseagreen: [143, 188, 143],
  darkslateblue: [72, 61, 139],
  darkslategray: [47, 79, 79],
  darkslategrey: [47, 79, 79],
  darkturquoise: [0, 206, 209],
  darkviolet: [148, 0, 211],
  deeppink: [255, 20, 147],
  deepskyblue: [0, 191, 255],
  dimgray: [105, 105, 105],
  dimgrey: [105, 105, 105],
  dodgerblue: [30, 144, 255],
  firebrick: [178, 34, 34],
  floralwhite: [255, 250, 240],
  forestgreen: [34, 139, 34],
  fuchsia: [255, 0, 255],
  gainsboro: [220, 220, 220],
  ghostwhite: [248, 248, 255],
  gold: [255, 215, 0],
  goldenrod: [218, 165, 32],
  gray: [128, 128, 128],
  green: [0, 128, 0],
  greenyellow: [173, 255, 47],
  grey: [128, 128, 128],
  honeydew: [240, 255, 240],
  hotpink: [255, 105, 180],
  indianred: [205, 92, 92],
  indigo: [75, 0, 130],
  ivory: [255, 255, 240],
  khaki: [240, 230, 140],
  lavender: [230, 230, 250],
  lavenderblush: [255, 240, 245],
  lawngreen: [124, 252, 0],
  lemonchiffon: [255, 250, 205],
  lightblue: [173, 216, 230],
  lightcoral: [240, 128, 128],
  lightcyan: [224, 255, 255],
  lightgoldenrodyellow: [250, 250, 210],
  lightgray: [211, 211, 211],
  lightgreen: [144, 238, 144],
  lightgrey: [211, 211, 211],
  lightpink: [255, 182, 193],
  lightsalmon: [255, 160, 122],
  lightseagreen: [32, 178, 170],
  lightskyblue: [135, 206, 250],
  lightslategray: [119, 136, 153],
  lightslategrey: [119, 136, 153],
  lightsteelblue: [176, 196, 222],
  lightyellow: [255, 255, 224],
  lime: [0, 255, 0],
  limegreen: [50, 205, 50],
  linen: [250, 240, 230],
  magenta: [255, 0, 255],
  maroon: [128, 0, 0],
  mediumaquamarine: [102, 205, 170],
  mediumblue: [0, 0, 205],
  mediumorchid: [186, 85, 211],
  mediumpurple: [147, 112, 219],
  mediumseagreen: [60, 179, 113],
  mediumslateblue: [123, 104, 238],
  mediumspringgreen: [0, 250, 154],
  mediumturquoise: [72, 209, 204],
  mediumvioletred: [199, 21, 133],
  midnightblue: [25, 25, 112],
  mintcream: [245, 255, 250],
  mistyrose: [255, 228, 225],
  moccasin: [255, 228, 181],
  navajowhite: [255, 222, 173],
  navy: [0, 0, 128],
  oldlace: [253, 245, 230],
  olive: [128, 128, 0],
  olivedrab: [107, 142, 35],
  orange: [255, 165, 0],
  orangered: [255, 69, 0],
  orchid: [218, 112, 214],
  palegoldenrod: [238, 232, 170],
  palegreen: [152, 251, 152],
  paleturquoise: [175, 238, 238],
  palevioletred: [219, 112, 147],
  papayawhip: [255, 239, 213],
  peachpuff: [255, 218, 185],
  peru: [205, 133, 63],
  pink: [255, 192, 203],
  plum: [221, 160, 221],
  powderblue: [176, 224, 230],
  purple: [128, 0, 128],
  rebeccapurple: [102, 51, 153],
  red: [255, 0, 0],
  rosybrown: [188, 143, 143],
  royalblue: [65, 105, 225],
  saddlebrown: [139, 69, 19],
  salmon: [250, 128, 114],
  sandybrown: [244, 164, 96],
  seagreen: [46, 139, 87],
  seashell: [255, 245, 238],
  sienna: [160, 82, 45],
  silver: [192, 192, 192],
  skyblue: [135, 206, 235],
  slateblue: [106, 90, 205],
  slategray: [112, 128, 144],
  slategrey: [112, 128, 144],
  snow: [255, 250, 250],
  springgreen: [0, 255, 127],
  steelblue: [70, 130, 180],
  tan: [210, 180, 140],
  teal: [0, 128, 128],
  thistle: [216, 191, 216],
  tomato: [255, 99, 71],
  turquoise: [64, 224, 208],
  violet: [238, 130, 238],
  wheat: [245, 222, 179],
  white: [255, 255, 255],
  whitesmoke: [245, 245, 245],
  yellow: [255, 255, 0],
  yellowgreen: [154, 205, 50]
}, ip = { exports: {} }, S2 = function(e) {
  return !e || typeof e == "string" ? !1 : e instanceof Array || Array.isArray(e) || e.length >= 0 && (e.splice instanceof Function || Object.getOwnPropertyDescriptor(e, e.length - 1) && e.constructor.name !== "String");
}, T2 = S2, E2 = Array.prototype.concat, k2 = Array.prototype.slice, ku = ip.exports = function(e) {
  for (var n = [], r = 0, i = e.length; r < i; r++) {
    var f = e[r];
    T2(f) ? n = E2.call(n, k2.call(f)) : n.push(f);
  }
  return n;
};
ku.wrap = function(t) {
  return function() {
    return t(ku(arguments));
  };
};
var O2 = ip.exports, ei = _2, Oi = O2, sp = Object.hasOwnProperty, op = /* @__PURE__ */ Object.create(null);
for (var Io in ei)
  sp.call(ei, Io) && (op[ei[Io]] = Io);
var gt = rp.exports = {
  to: {},
  get: {}
};
gt.get = function(t) {
  var e = t.substring(0, 3).toLowerCase(), n, r;
  switch (e) {
    case "hsl":
      n = gt.get.hsl(t), r = "hsl";
      break;
    case "hwb":
      n = gt.get.hwb(t), r = "hwb";
      break;
    default:
      n = gt.get.rgb(t), r = "rgb";
      break;
  }
  return n ? { model: r, value: n } : null;
};
gt.get.rgb = function(t) {
  if (!t)
    return null;
  var e = /^#([a-f0-9]{3,4})$/i, n = /^#([a-f0-9]{6})([a-f0-9]{2})?$/i, r = /^rgba?\(\s*([+-]?\d+)(?=[\s,])\s*(?:,\s*)?([+-]?\d+)(?=[\s,])\s*(?:,\s*)?([+-]?\d+)\s*(?:[,|\/]\s*([+-]?[\d\.]+)(%?)\s*)?\)$/, i = /^rgba?\(\s*([+-]?[\d\.]+)\%\s*,?\s*([+-]?[\d\.]+)\%\s*,?\s*([+-]?[\d\.]+)\%\s*(?:[,|\/]\s*([+-]?[\d\.]+)(%?)\s*)?\)$/, f = /^(\w+)$/, g = [0, 0, 0, 1], l, s, a;
  if (l = t.match(n)) {
    for (a = l[2], l = l[1], s = 0; s < 3; s++) {
      var h = s * 2;
      g[s] = parseInt(l.slice(h, h + 2), 16);
    }
    a && (g[3] = parseInt(a, 16) / 255);
  } else if (l = t.match(e)) {
    for (l = l[1], a = l[3], s = 0; s < 3; s++)
      g[s] = parseInt(l[s] + l[s], 16);
    a && (g[3] = parseInt(a + a, 16) / 255);
  } else if (l = t.match(r)) {
    for (s = 0; s < 3; s++)
      g[s] = parseInt(l[s + 1], 0);
    l[4] && (l[5] ? g[3] = parseFloat(l[4]) * 0.01 : g[3] = parseFloat(l[4]));
  } else if (l = t.match(i)) {
    for (s = 0; s < 3; s++)
      g[s] = Math.round(parseFloat(l[s + 1]) * 2.55);
    l[4] && (l[5] ? g[3] = parseFloat(l[4]) * 0.01 : g[3] = parseFloat(l[4]));
  } else
    return (l = t.match(f)) ? l[1] === "transparent" ? [0, 0, 0, 0] : sp.call(ei, l[1]) ? (g = ei[l[1]], g[3] = 1, g) : null : null;
  for (s = 0; s < 3; s++)
    g[s] = hn(g[s], 0, 255);
  return g[3] = hn(g[3], 0, 1), g;
};
gt.get.hsl = function(t) {
  if (!t)
    return null;
  var e = /^hsla?\(\s*([+-]?(?:\d{0,3}\.)?\d+)(?:deg)?\s*,?\s*([+-]?[\d\.]+)%\s*,?\s*([+-]?[\d\.]+)%\s*(?:[,|\/]\s*([+-]?(?=\.\d|\d)(?:0|[1-9]\d*)?(?:\.\d*)?(?:[eE][+-]?\d+)?)\s*)?\)$/, n = t.match(e);
  if (n) {
    var r = parseFloat(n[4]), i = (parseFloat(n[1]) % 360 + 360) % 360, f = hn(parseFloat(n[2]), 0, 100), g = hn(parseFloat(n[3]), 0, 100), l = hn(isNaN(r) ? 1 : r, 0, 1);
    return [i, f, g, l];
  }
  return null;
};
gt.get.hwb = function(t) {
  if (!t)
    return null;
  var e = /^hwb\(\s*([+-]?\d{0,3}(?:\.\d+)?)(?:deg)?\s*,\s*([+-]?[\d\.]+)%\s*,\s*([+-]?[\d\.]+)%\s*(?:,\s*([+-]?(?=\.\d|\d)(?:0|[1-9]\d*)?(?:\.\d*)?(?:[eE][+-]?\d+)?)\s*)?\)$/, n = t.match(e);
  if (n) {
    var r = parseFloat(n[4]), i = (parseFloat(n[1]) % 360 + 360) % 360, f = hn(parseFloat(n[2]), 0, 100), g = hn(parseFloat(n[3]), 0, 100), l = hn(isNaN(r) ? 1 : r, 0, 1);
    return [i, f, g, l];
  }
  return null;
};
gt.to.hex = function() {
  var t = Oi(arguments);
  return "#" + Ki(t[0]) + Ki(t[1]) + Ki(t[2]) + (t[3] < 1 ? Ki(Math.round(t[3] * 255)) : "");
};
gt.to.rgb = function() {
  var t = Oi(arguments);
  return t.length < 4 || t[3] === 1 ? "rgb(" + Math.round(t[0]) + ", " + Math.round(t[1]) + ", " + Math.round(t[2]) + ")" : "rgba(" + Math.round(t[0]) + ", " + Math.round(t[1]) + ", " + Math.round(t[2]) + ", " + t[3] + ")";
};
gt.to.rgb.percent = function() {
  var t = Oi(arguments), e = Math.round(t[0] / 255 * 100), n = Math.round(t[1] / 255 * 100), r = Math.round(t[2] / 255 * 100);
  return t.length < 4 || t[3] === 1 ? "rgb(" + e + "%, " + n + "%, " + r + "%)" : "rgba(" + e + "%, " + n + "%, " + r + "%, " + t[3] + ")";
};
gt.to.hsl = function() {
  var t = Oi(arguments);
  return t.length < 4 || t[3] === 1 ? "hsl(" + t[0] + ", " + t[1] + "%, " + t[2] + "%)" : "hsla(" + t[0] + ", " + t[1] + "%, " + t[2] + "%, " + t[3] + ")";
};
gt.to.hwb = function() {
  var t = Oi(arguments), e = "";
  return t.length >= 4 && t[3] !== 1 && (e = ", " + t[3]), "hwb(" + t[0] + ", " + t[1] + "%, " + t[2] + "%" + e + ")";
};
gt.to.keyword = function(t) {
  return op[t.slice(0, 3)];
};
function hn(t, e, n) {
  return Math.min(Math.max(e, t), n);
}
function Ki(t) {
  var e = Math.round(t).toString(16).toUpperCase();
  return e.length < 2 ? "0" + e : e;
}
var D2 = rp.exports, A2 = {
  aliceblue: [240, 248, 255],
  antiquewhite: [250, 235, 215],
  aqua: [0, 255, 255],
  aquamarine: [127, 255, 212],
  azure: [240, 255, 255],
  beige: [245, 245, 220],
  bisque: [255, 228, 196],
  black: [0, 0, 0],
  blanchedalmond: [255, 235, 205],
  blue: [0, 0, 255],
  blueviolet: [138, 43, 226],
  brown: [165, 42, 42],
  burlywood: [222, 184, 135],
  cadetblue: [95, 158, 160],
  chartreuse: [127, 255, 0],
  chocolate: [210, 105, 30],
  coral: [255, 127, 80],
  cornflowerblue: [100, 149, 237],
  cornsilk: [255, 248, 220],
  crimson: [220, 20, 60],
  cyan: [0, 255, 255],
  darkblue: [0, 0, 139],
  darkcyan: [0, 139, 139],
  darkgoldenrod: [184, 134, 11],
  darkgray: [169, 169, 169],
  darkgreen: [0, 100, 0],
  darkgrey: [169, 169, 169],
  darkkhaki: [189, 183, 107],
  darkmagenta: [139, 0, 139],
  darkolivegreen: [85, 107, 47],
  darkorange: [255, 140, 0],
  darkorchid: [153, 50, 204],
  darkred: [139, 0, 0],
  darksalmon: [233, 150, 122],
  darkseagreen: [143, 188, 143],
  darkslateblue: [72, 61, 139],
  darkslategray: [47, 79, 79],
  darkslategrey: [47, 79, 79],
  darkturquoise: [0, 206, 209],
  darkviolet: [148, 0, 211],
  deeppink: [255, 20, 147],
  deepskyblue: [0, 191, 255],
  dimgray: [105, 105, 105],
  dimgrey: [105, 105, 105],
  dodgerblue: [30, 144, 255],
  firebrick: [178, 34, 34],
  floralwhite: [255, 250, 240],
  forestgreen: [34, 139, 34],
  fuchsia: [255, 0, 255],
  gainsboro: [220, 220, 220],
  ghostwhite: [248, 248, 255],
  gold: [255, 215, 0],
  goldenrod: [218, 165, 32],
  gray: [128, 128, 128],
  green: [0, 128, 0],
  greenyellow: [173, 255, 47],
  grey: [128, 128, 128],
  honeydew: [240, 255, 240],
  hotpink: [255, 105, 180],
  indianred: [205, 92, 92],
  indigo: [75, 0, 130],
  ivory: [255, 255, 240],
  khaki: [240, 230, 140],
  lavender: [230, 230, 250],
  lavenderblush: [255, 240, 245],
  lawngreen: [124, 252, 0],
  lemonchiffon: [255, 250, 205],
  lightblue: [173, 216, 230],
  lightcoral: [240, 128, 128],
  lightcyan: [224, 255, 255],
  lightgoldenrodyellow: [250, 250, 210],
  lightgray: [211, 211, 211],
  lightgreen: [144, 238, 144],
  lightgrey: [211, 211, 211],
  lightpink: [255, 182, 193],
  lightsalmon: [255, 160, 122],
  lightseagreen: [32, 178, 170],
  lightskyblue: [135, 206, 250],
  lightslategray: [119, 136, 153],
  lightslategrey: [119, 136, 153],
  lightsteelblue: [176, 196, 222],
  lightyellow: [255, 255, 224],
  lime: [0, 255, 0],
  limegreen: [50, 205, 50],
  linen: [250, 240, 230],
  magenta: [255, 0, 255],
  maroon: [128, 0, 0],
  mediumaquamarine: [102, 205, 170],
  mediumblue: [0, 0, 205],
  mediumorchid: [186, 85, 211],
  mediumpurple: [147, 112, 219],
  mediumseagreen: [60, 179, 113],
  mediumslateblue: [123, 104, 238],
  mediumspringgreen: [0, 250, 154],
  mediumturquoise: [72, 209, 204],
  mediumvioletred: [199, 21, 133],
  midnightblue: [25, 25, 112],
  mintcream: [245, 255, 250],
  mistyrose: [255, 228, 225],
  moccasin: [255, 228, 181],
  navajowhite: [255, 222, 173],
  navy: [0, 0, 128],
  oldlace: [253, 245, 230],
  olive: [128, 128, 0],
  olivedrab: [107, 142, 35],
  orange: [255, 165, 0],
  orangered: [255, 69, 0],
  orchid: [218, 112, 214],
  palegoldenrod: [238, 232, 170],
  palegreen: [152, 251, 152],
  paleturquoise: [175, 238, 238],
  palevioletred: [219, 112, 147],
  papayawhip: [255, 239, 213],
  peachpuff: [255, 218, 185],
  peru: [205, 133, 63],
  pink: [255, 192, 203],
  plum: [221, 160, 221],
  powderblue: [176, 224, 230],
  purple: [128, 0, 128],
  rebeccapurple: [102, 51, 153],
  red: [255, 0, 0],
  rosybrown: [188, 143, 143],
  royalblue: [65, 105, 225],
  saddlebrown: [139, 69, 19],
  salmon: [250, 128, 114],
  sandybrown: [244, 164, 96],
  seagreen: [46, 139, 87],
  seashell: [255, 245, 238],
  sienna: [160, 82, 45],
  silver: [192, 192, 192],
  skyblue: [135, 206, 235],
  slateblue: [106, 90, 205],
  slategray: [112, 128, 144],
  slategrey: [112, 128, 144],
  snow: [255, 250, 250],
  springgreen: [0, 255, 127],
  steelblue: [70, 130, 180],
  tan: [210, 180, 140],
  teal: [0, 128, 128],
  thistle: [216, 191, 216],
  tomato: [255, 99, 71],
  turquoise: [64, 224, 208],
  violet: [238, 130, 238],
  wheat: [245, 222, 179],
  white: [255, 255, 255],
  whitesmoke: [245, 245, 245],
  yellow: [255, 255, 0],
  yellowgreen: [154, 205, 50]
};
const di = A2, ap = {};
for (const t of Object.keys(di))
  ap[di[t]] = t;
const me = {
  rgb: { channels: 3, labels: "rgb" },
  hsl: { channels: 3, labels: "hsl" },
  hsv: { channels: 3, labels: "hsv" },
  hwb: { channels: 3, labels: "hwb" },
  cmyk: { channels: 4, labels: "cmyk" },
  xyz: { channels: 3, labels: "xyz" },
  lab: { channels: 3, labels: "lab" },
  lch: { channels: 3, labels: "lch" },
  hex: { channels: 1, labels: ["hex"] },
  keyword: { channels: 1, labels: ["keyword"] },
  ansi16: { channels: 1, labels: ["ansi16"] },
  ansi256: { channels: 1, labels: ["ansi256"] },
  hcg: { channels: 3, labels: ["h", "c", "g"] },
  apple: { channels: 3, labels: ["r16", "g16", "b16"] },
  gray: { channels: 1, labels: ["gray"] }
};
var lp = me;
for (const t of Object.keys(me)) {
  if (!("channels" in me[t]))
    throw new Error("missing channels property: " + t);
  if (!("labels" in me[t]))
    throw new Error("missing channel labels property: " + t);
  if (me[t].labels.length !== me[t].channels)
    throw new Error("channel and label counts mismatch: " + t);
  const { channels: e, labels: n } = me[t];
  delete me[t].channels, delete me[t].labels, Object.defineProperty(me[t], "channels", { value: e }), Object.defineProperty(me[t], "labels", { value: n });
}
me.rgb.hsl = function(t) {
  const e = t[0] / 255, n = t[1] / 255, r = t[2] / 255, i = Math.min(e, n, r), f = Math.max(e, n, r), g = f - i;
  let l, s;
  f === i ? l = 0 : e === f ? l = (n - r) / g : n === f ? l = 2 + (r - e) / g : r === f && (l = 4 + (e - n) / g), l = Math.min(l * 60, 360), l < 0 && (l += 360);
  const a = (i + f) / 2;
  return f === i ? s = 0 : a <= 0.5 ? s = g / (f + i) : s = g / (2 - f - i), [l, s * 100, a * 100];
};
me.rgb.hsv = function(t) {
  let e, n, r, i, f;
  const g = t[0] / 255, l = t[1] / 255, s = t[2] / 255, a = Math.max(g, l, s), h = a - Math.min(g, l, s), o = function(u) {
    return (a - u) / 6 / h + 1 / 2;
  };
  return h === 0 ? (i = 0, f = 0) : (f = h / a, e = o(g), n = o(l), r = o(s), g === a ? i = r - n : l === a ? i = 1 / 3 + e - r : s === a && (i = 2 / 3 + n - e), i < 0 ? i += 1 : i > 1 && (i -= 1)), [
    i * 360,
    f * 100,
    a * 100
  ];
};
me.rgb.hwb = function(t) {
  const e = t[0], n = t[1];
  let r = t[2];
  const i = me.rgb.hsl(t)[0], f = 1 / 255 * Math.min(e, Math.min(n, r));
  return r = 1 - 1 / 255 * Math.max(e, Math.max(n, r)), [i, f * 100, r * 100];
};
me.rgb.cmyk = function(t) {
  const e = t[0] / 255, n = t[1] / 255, r = t[2] / 255, i = Math.min(1 - e, 1 - n, 1 - r), f = (1 - e - i) / (1 - i) || 0, g = (1 - n - i) / (1 - i) || 0, l = (1 - r - i) / (1 - i) || 0;
  return [f * 100, g * 100, l * 100, i * 100];
};
function P2(t, e) {
  return (t[0] - e[0]) ** 2 + (t[1] - e[1]) ** 2 + (t[2] - e[2]) ** 2;
}
me.rgb.keyword = function(t) {
  const e = ap[t];
  if (e)
    return e;
  let n = 1 / 0, r;
  for (const i of Object.keys(di)) {
    const f = di[i], g = P2(t, f);
    g < n && (n = g, r = i);
  }
  return r;
};
me.keyword.rgb = function(t) {
  return di[t];
};
me.rgb.xyz = function(t) {
  let e = t[0] / 255, n = t[1] / 255, r = t[2] / 255;
  e = e > 0.04045 ? ((e + 0.055) / 1.055) ** 2.4 : e / 12.92, n = n > 0.04045 ? ((n + 0.055) / 1.055) ** 2.4 : n / 12.92, r = r > 0.04045 ? ((r + 0.055) / 1.055) ** 2.4 : r / 12.92;
  const i = e * 0.4124 + n * 0.3576 + r * 0.1805, f = e * 0.2126 + n * 0.7152 + r * 0.0722, g = e * 0.0193 + n * 0.1192 + r * 0.9505;
  return [i * 100, f * 100, g * 100];
};
me.rgb.lab = function(t) {
  const e = me.rgb.xyz(t);
  let n = e[0], r = e[1], i = e[2];
  n /= 95.047, r /= 100, i /= 108.883, n = n > 8856e-6 ? n ** (1 / 3) : 7.787 * n + 16 / 116, r = r > 8856e-6 ? r ** (1 / 3) : 7.787 * r + 16 / 116, i = i > 8856e-6 ? i ** (1 / 3) : 7.787 * i + 16 / 116;
  const f = 116 * r - 16, g = 500 * (n - r), l = 200 * (r - i);
  return [f, g, l];
};
me.hsl.rgb = function(t) {
  const e = t[0] / 360, n = t[1] / 100, r = t[2] / 100;
  let i, f, g;
  if (n === 0)
    return g = r * 255, [g, g, g];
  r < 0.5 ? i = r * (1 + n) : i = r + n - r * n;
  const l = 2 * r - i, s = [0, 0, 0];
  for (let a = 0; a < 3; a++)
    f = e + 1 / 3 * -(a - 1), f < 0 && f++, f > 1 && f--, 6 * f < 1 ? g = l + (i - l) * 6 * f : 2 * f < 1 ? g = i : 3 * f < 2 ? g = l + (i - l) * (2 / 3 - f) * 6 : g = l, s[a] = g * 255;
  return s;
};
me.hsl.hsv = function(t) {
  const e = t[0];
  let n = t[1] / 100, r = t[2] / 100, i = n;
  const f = Math.max(r, 0.01);
  r *= 2, n *= r <= 1 ? r : 2 - r, i *= f <= 1 ? f : 2 - f;
  const g = (r + n) / 2, l = r === 0 ? 2 * i / (f + i) : 2 * n / (r + n);
  return [e, l * 100, g * 100];
};
me.hsv.rgb = function(t) {
  const e = t[0] / 60, n = t[1] / 100;
  let r = t[2] / 100;
  const i = Math.floor(e) % 6, f = e - Math.floor(e), g = 255 * r * (1 - n), l = 255 * r * (1 - n * f), s = 255 * r * (1 - n * (1 - f));
  switch (r *= 255, i) {
    case 0:
      return [r, s, g];
    case 1:
      return [l, r, g];
    case 2:
      return [g, r, s];
    case 3:
      return [g, l, r];
    case 4:
      return [s, g, r];
    case 5:
      return [r, g, l];
  }
};
me.hsv.hsl = function(t) {
  const e = t[0], n = t[1] / 100, r = t[2] / 100, i = Math.max(r, 0.01);
  let f, g;
  g = (2 - n) * r;
  const l = (2 - n) * i;
  return f = n * i, f /= l <= 1 ? l : 2 - l, f = f || 0, g /= 2, [e, f * 100, g * 100];
};
me.hwb.rgb = function(t) {
  const e = t[0] / 360;
  let n = t[1] / 100, r = t[2] / 100;
  const i = n + r;
  let f;
  i > 1 && (n /= i, r /= i);
  const g = Math.floor(6 * e), l = 1 - r;
  f = 6 * e - g, g & 1 && (f = 1 - f);
  const s = n + f * (l - n);
  let a, h, o;
  switch (g) {
    default:
    case 6:
    case 0:
      a = l, h = s, o = n;
      break;
    case 1:
      a = s, h = l, o = n;
      break;
    case 2:
      a = n, h = l, o = s;
      break;
    case 3:
      a = n, h = s, o = l;
      break;
    case 4:
      a = s, h = n, o = l;
      break;
    case 5:
      a = l, h = n, o = s;
      break;
  }
  return [a * 255, h * 255, o * 255];
};
me.cmyk.rgb = function(t) {
  const e = t[0] / 100, n = t[1] / 100, r = t[2] / 100, i = t[3] / 100, f = 1 - Math.min(1, e * (1 - i) + i), g = 1 - Math.min(1, n * (1 - i) + i), l = 1 - Math.min(1, r * (1 - i) + i);
  return [f * 255, g * 255, l * 255];
};
me.xyz.rgb = function(t) {
  const e = t[0] / 100, n = t[1] / 100, r = t[2] / 100;
  let i, f, g;
  return i = e * 3.2406 + n * -1.5372 + r * -0.4986, f = e * -0.9689 + n * 1.8758 + r * 0.0415, g = e * 0.0557 + n * -0.204 + r * 1.057, i = i > 31308e-7 ? 1.055 * i ** (1 / 2.4) - 0.055 : i * 12.92, f = f > 31308e-7 ? 1.055 * f ** (1 / 2.4) - 0.055 : f * 12.92, g = g > 31308e-7 ? 1.055 * g ** (1 / 2.4) - 0.055 : g * 12.92, i = Math.min(Math.max(0, i), 1), f = Math.min(Math.max(0, f), 1), g = Math.min(Math.max(0, g), 1), [i * 255, f * 255, g * 255];
};
me.xyz.lab = function(t) {
  let e = t[0], n = t[1], r = t[2];
  e /= 95.047, n /= 100, r /= 108.883, e = e > 8856e-6 ? e ** (1 / 3) : 7.787 * e + 16 / 116, n = n > 8856e-6 ? n ** (1 / 3) : 7.787 * n + 16 / 116, r = r > 8856e-6 ? r ** (1 / 3) : 7.787 * r + 16 / 116;
  const i = 116 * n - 16, f = 500 * (e - n), g = 200 * (n - r);
  return [i, f, g];
};
me.lab.xyz = function(t) {
  const e = t[0], n = t[1], r = t[2];
  let i, f, g;
  f = (e + 16) / 116, i = n / 500 + f, g = f - r / 200;
  const l = f ** 3, s = i ** 3, a = g ** 3;
  return f = l > 8856e-6 ? l : (f - 16 / 116) / 7.787, i = s > 8856e-6 ? s : (i - 16 / 116) / 7.787, g = a > 8856e-6 ? a : (g - 16 / 116) / 7.787, i *= 95.047, f *= 100, g *= 108.883, [i, f, g];
};
me.lab.lch = function(t) {
  const e = t[0], n = t[1], r = t[2];
  let i;
  i = Math.atan2(r, n) * 360 / 2 / Math.PI, i < 0 && (i += 360);
  const g = Math.sqrt(n * n + r * r);
  return [e, g, i];
};
me.lch.lab = function(t) {
  const e = t[0], n = t[1], i = t[2] / 360 * 2 * Math.PI, f = n * Math.cos(i), g = n * Math.sin(i);
  return [e, f, g];
};
me.rgb.ansi16 = function(t, e = null) {
  const [n, r, i] = t;
  let f = e === null ? me.rgb.hsv(t)[2] : e;
  if (f = Math.round(f / 50), f === 0)
    return 30;
  let g = 30 + (Math.round(i / 255) << 2 | Math.round(r / 255) << 1 | Math.round(n / 255));
  return f === 2 && (g += 60), g;
};
me.hsv.ansi16 = function(t) {
  return me.rgb.ansi16(me.hsv.rgb(t), t[2]);
};
me.rgb.ansi256 = function(t) {
  const e = t[0], n = t[1], r = t[2];
  return e === n && n === r ? e < 8 ? 16 : e > 248 ? 231 : Math.round((e - 8) / 247 * 24) + 232 : 16 + 36 * Math.round(e / 255 * 5) + 6 * Math.round(n / 255 * 5) + Math.round(r / 255 * 5);
};
me.ansi16.rgb = function(t) {
  let e = t % 10;
  if (e === 0 || e === 7)
    return t > 50 && (e += 3.5), e = e / 10.5 * 255, [e, e, e];
  const n = (~~(t > 50) + 1) * 0.5, r = (e & 1) * n * 255, i = (e >> 1 & 1) * n * 255, f = (e >> 2 & 1) * n * 255;
  return [r, i, f];
};
me.ansi256.rgb = function(t) {
  if (t >= 232) {
    const f = (t - 232) * 10 + 8;
    return [f, f, f];
  }
  t -= 16;
  let e;
  const n = Math.floor(t / 36) / 5 * 255, r = Math.floor((e = t % 36) / 6) / 5 * 255, i = e % 6 / 5 * 255;
  return [n, r, i];
};
me.rgb.hex = function(t) {
  const n = (((Math.round(t[0]) & 255) << 16) + ((Math.round(t[1]) & 255) << 8) + (Math.round(t[2]) & 255)).toString(16).toUpperCase();
  return "000000".substring(n.length) + n;
};
me.hex.rgb = function(t) {
  const e = t.toString(16).match(/[a-f0-9]{6}|[a-f0-9]{3}/i);
  if (!e)
    return [0, 0, 0];
  let n = e[0];
  e[0].length === 3 && (n = n.split("").map((l) => l + l).join(""));
  const r = parseInt(n, 16), i = r >> 16 & 255, f = r >> 8 & 255, g = r & 255;
  return [i, f, g];
};
me.rgb.hcg = function(t) {
  const e = t[0] / 255, n = t[1] / 255, r = t[2] / 255, i = Math.max(Math.max(e, n), r), f = Math.min(Math.min(e, n), r), g = i - f;
  let l, s;
  return g < 1 ? l = f / (1 - g) : l = 0, g <= 0 ? s = 0 : i === e ? s = (n - r) / g % 6 : i === n ? s = 2 + (r - e) / g : s = 4 + (e - n) / g, s /= 6, s %= 1, [s * 360, g * 100, l * 100];
};
me.hsl.hcg = function(t) {
  const e = t[1] / 100, n = t[2] / 100, r = n < 0.5 ? 2 * e * n : 2 * e * (1 - n);
  let i = 0;
  return r < 1 && (i = (n - 0.5 * r) / (1 - r)), [t[0], r * 100, i * 100];
};
me.hsv.hcg = function(t) {
  const e = t[1] / 100, n = t[2] / 100, r = e * n;
  let i = 0;
  return r < 1 && (i = (n - r) / (1 - r)), [t[0], r * 100, i * 100];
};
me.hcg.rgb = function(t) {
  const e = t[0] / 360, n = t[1] / 100, r = t[2] / 100;
  if (n === 0)
    return [r * 255, r * 255, r * 255];
  const i = [0, 0, 0], f = e % 1 * 6, g = f % 1, l = 1 - g;
  let s = 0;
  switch (Math.floor(f)) {
    case 0:
      i[0] = 1, i[1] = g, i[2] = 0;
      break;
    case 1:
      i[0] = l, i[1] = 1, i[2] = 0;
      break;
    case 2:
      i[0] = 0, i[1] = 1, i[2] = g;
      break;
    case 3:
      i[0] = 0, i[1] = l, i[2] = 1;
      break;
    case 4:
      i[0] = g, i[1] = 0, i[2] = 1;
      break;
    default:
      i[0] = 1, i[1] = 0, i[2] = l;
  }
  return s = (1 - n) * r, [
    (n * i[0] + s) * 255,
    (n * i[1] + s) * 255,
    (n * i[2] + s) * 255
  ];
};
me.hcg.hsv = function(t) {
  const e = t[1] / 100, n = t[2] / 100, r = e + n * (1 - e);
  let i = 0;
  return r > 0 && (i = e / r), [t[0], i * 100, r * 100];
};
me.hcg.hsl = function(t) {
  const e = t[1] / 100, r = t[2] / 100 * (1 - e) + 0.5 * e;
  let i = 0;
  return r > 0 && r < 0.5 ? i = e / (2 * r) : r >= 0.5 && r < 1 && (i = e / (2 * (1 - r))), [t[0], i * 100, r * 100];
};
me.hcg.hwb = function(t) {
  const e = t[1] / 100, n = t[2] / 100, r = e + n * (1 - e);
  return [t[0], (r - e) * 100, (1 - r) * 100];
};
me.hwb.hcg = function(t) {
  const e = t[1] / 100, r = 1 - t[2] / 100, i = r - e;
  let f = 0;
  return i < 1 && (f = (r - i) / (1 - i)), [t[0], i * 100, f * 100];
};
me.apple.rgb = function(t) {
  return [t[0] / 65535 * 255, t[1] / 65535 * 255, t[2] / 65535 * 255];
};
me.rgb.apple = function(t) {
  return [t[0] / 255 * 65535, t[1] / 255 * 65535, t[2] / 255 * 65535];
};
me.gray.rgb = function(t) {
  return [t[0] / 100 * 255, t[0] / 100 * 255, t[0] / 100 * 255];
};
me.gray.hsl = function(t) {
  return [0, 0, t[0]];
};
me.gray.hsv = me.gray.hsl;
me.gray.hwb = function(t) {
  return [0, 100, t[0]];
};
me.gray.cmyk = function(t) {
  return [0, 0, 0, t[0]];
};
me.gray.lab = function(t) {
  return [t[0], 0, 0];
};
me.gray.hex = function(t) {
  const e = Math.round(t[0] / 100 * 255) & 255, r = ((e << 16) + (e << 8) + e).toString(16).toUpperCase();
  return "000000".substring(r.length) + r;
};
me.rgb.gray = function(t) {
  return [(t[0] + t[1] + t[2]) / 3 / 255 * 100];
};
const ys = lp;
function M2() {
  const t = {}, e = Object.keys(ys);
  for (let n = e.length, r = 0; r < n; r++)
    t[e[r]] = {
      // http://jsperf.com/1-vs-infinity
      // micro-opt, but this is simple.
      distance: -1,
      parent: null
    };
  return t;
}
function F2(t) {
  const e = M2(), n = [t];
  for (e[t].distance = 0; n.length; ) {
    const r = n.pop(), i = Object.keys(ys[r]);
    for (let f = i.length, g = 0; g < f; g++) {
      const l = i[g], s = e[l];
      s.distance === -1 && (s.distance = e[r].distance + 1, s.parent = r, n.unshift(l));
    }
  }
  return e;
}
function I2(t, e) {
  return function(n) {
    return e(t(n));
  };
}
function R2(t, e) {
  const n = [e[t].parent, t];
  let r = ys[e[t].parent][t], i = e[t].parent;
  for (; e[i].parent; )
    n.unshift(e[i].parent), r = I2(ys[e[i].parent][i], r), i = e[i].parent;
  return r.conversion = n, r;
}
var L2 = function(t) {
  const e = F2(t), n = {}, r = Object.keys(e);
  for (let i = r.length, f = 0; f < i; f++) {
    const g = r[f];
    e[g].parent !== null && (n[g] = R2(g, e));
  }
  return n;
};
const Pa = lp, B2 = L2, ur = {}, z2 = Object.keys(Pa);
function N2(t) {
  const e = function(...n) {
    const r = n[0];
    return r == null ? r : (r.length > 1 && (n = r), t(n));
  };
  return "conversion" in t && (e.conversion = t.conversion), e;
}
function j2(t) {
  const e = function(...n) {
    const r = n[0];
    if (r == null)
      return r;
    r.length > 1 && (n = r);
    const i = t(n);
    if (typeof i == "object")
      for (let f = i.length, g = 0; g < f; g++)
        i[g] = Math.round(i[g]);
    return i;
  };
  return "conversion" in t && (e.conversion = t.conversion), e;
}
z2.forEach((t) => {
  ur[t] = {}, Object.defineProperty(ur[t], "channels", { value: Pa[t].channels }), Object.defineProperty(ur[t], "labels", { value: Pa[t].labels });
  const e = B2(t);
  Object.keys(e).forEach((r) => {
    const i = e[r];
    ur[t][r] = j2(i), ur[t][r].raw = N2(i);
  });
});
var $2 = ur;
const hr = D2, pt = $2, cp = [
  // To be honest, I don't really feel like keyword belongs in color convert, but eh.
  "keyword",
  // Gray conflicts with some method names, and has its own method defined.
  "gray",
  // Shouldn't really be in color-convert either...
  "hex"
], Ma = {};
for (const t of Object.keys(pt))
  Ma[[...pt[t].labels].sort().join("")] = t;
const ws = {};
function Ke(t, e) {
  if (!(this instanceof Ke))
    return new Ke(t, e);
  if (e && e in cp && (e = null), e && !(e in pt))
    throw new Error("Unknown model: " + e);
  let n, r;
  if (t == null)
    this.model = "rgb", this.color = [0, 0, 0], this.valpha = 1;
  else if (t instanceof Ke)
    this.model = t.model, this.color = [...t.color], this.valpha = t.valpha;
  else if (typeof t == "string") {
    const i = hr.get(t);
    if (i === null)
      throw new Error("Unable to parse color from string: " + t);
    this.model = i.model, r = pt[this.model].channels, this.color = i.value.slice(0, r), this.valpha = typeof i.value[r] == "number" ? i.value[r] : 1;
  } else if (t.length > 0) {
    this.model = e || "rgb", r = pt[this.model].channels;
    const i = Array.prototype.slice.call(t, 0, r);
    this.color = Fa(i, r), this.valpha = typeof t[r] == "number" ? t[r] : 1;
  } else if (typeof t == "number")
    this.model = "rgb", this.color = [
      t >> 16 & 255,
      t >> 8 & 255,
      t & 255
    ], this.valpha = 1;
  else {
    this.valpha = 1;
    const i = Object.keys(t);
    "alpha" in t && (i.splice(i.indexOf("alpha"), 1), this.valpha = typeof t.alpha == "number" ? t.alpha : 0);
    const f = i.sort().join("");
    if (!(f in Ma))
      throw new Error("Unable to parse color from object: " + JSON.stringify(t));
    this.model = Ma[f];
    const { labels: g } = pt[this.model], l = [];
    for (n = 0; n < g.length; n++)
      l.push(t[g[n]]);
    this.color = Fa(l);
  }
  if (ws[this.model])
    for (r = pt[this.model].channels, n = 0; n < r; n++) {
      const i = ws[this.model][n];
      i && (this.color[n] = i(this.color[n]));
    }
  this.valpha = Math.max(0, Math.min(1, this.valpha)), Object.freeze && Object.freeze(this);
}
Ke.prototype = {
  toString() {
    return this.string();
  },
  toJSON() {
    return this[this.model]();
  },
  string(t) {
    let e = this.model in hr.to ? this : this.rgb();
    e = e.round(typeof t == "number" ? t : 1);
    const n = e.valpha === 1 ? e.color : [...e.color, this.valpha];
    return hr.to[e.model](n);
  },
  percentString(t) {
    const e = this.rgb().round(typeof t == "number" ? t : 1), n = e.valpha === 1 ? e.color : [...e.color, this.valpha];
    return hr.to.rgb.percent(n);
  },
  array() {
    return this.valpha === 1 ? [...this.color] : [...this.color, this.valpha];
  },
  object() {
    const t = {}, { channels: e } = pt[this.model], { labels: n } = pt[this.model];
    for (let r = 0; r < e; r++)
      t[n[r]] = this.color[r];
    return this.valpha !== 1 && (t.alpha = this.valpha), t;
  },
  unitArray() {
    const t = this.rgb().color;
    return t[0] /= 255, t[1] /= 255, t[2] /= 255, this.valpha !== 1 && t.push(this.valpha), t;
  },
  unitObject() {
    const t = this.rgb().object();
    return t.r /= 255, t.g /= 255, t.b /= 255, this.valpha !== 1 && (t.alpha = this.valpha), t;
  },
  round(t) {
    return t = Math.max(t || 0, 0), new Ke([...this.color.map(H2(t)), this.valpha], this.model);
  },
  alpha(t) {
    return t !== void 0 ? new Ke([...this.color, Math.max(0, Math.min(1, t))], this.model) : this.valpha;
  },
  // Rgb
  red: je("rgb", 0, Ye(255)),
  green: je("rgb", 1, Ye(255)),
  blue: je("rgb", 2, Ye(255)),
  hue: je(["hsl", "hsv", "hsl", "hwb", "hcg"], 0, (t) => (t % 360 + 360) % 360),
  saturationl: je("hsl", 1, Ye(100)),
  lightness: je("hsl", 2, Ye(100)),
  saturationv: je("hsv", 1, Ye(100)),
  value: je("hsv", 2, Ye(100)),
  chroma: je("hcg", 1, Ye(100)),
  gray: je("hcg", 2, Ye(100)),
  white: je("hwb", 1, Ye(100)),
  wblack: je("hwb", 2, Ye(100)),
  cyan: je("cmyk", 0, Ye(100)),
  magenta: je("cmyk", 1, Ye(100)),
  yellow: je("cmyk", 2, Ye(100)),
  black: je("cmyk", 3, Ye(100)),
  x: je("xyz", 0, Ye(95.047)),
  y: je("xyz", 1, Ye(100)),
  z: je("xyz", 2, Ye(108.833)),
  l: je("lab", 0, Ye(100)),
  a: je("lab", 1),
  b: je("lab", 2),
  keyword(t) {
    return t !== void 0 ? new Ke(t) : pt[this.model].keyword(this.color);
  },
  hex(t) {
    return t !== void 0 ? new Ke(t) : hr.to.hex(this.rgb().round().color);
  },
  hexa(t) {
    if (t !== void 0)
      return new Ke(t);
    const e = this.rgb().round().color;
    let n = Math.round(this.valpha * 255).toString(16).toUpperCase();
    return n.length === 1 && (n = "0" + n), hr.to.hex(e) + n;
  },
  rgbNumber() {
    const t = this.rgb().color;
    return (t[0] & 255) << 16 | (t[1] & 255) << 8 | t[2] & 255;
  },
  luminosity() {
    const t = this.rgb().color, e = [];
    for (const [n, r] of t.entries()) {
      const i = r / 255;
      e[n] = i <= 0.04045 ? i / 12.92 : ((i + 0.055) / 1.055) ** 2.4;
    }
    return 0.2126 * e[0] + 0.7152 * e[1] + 0.0722 * e[2];
  },
  contrast(t) {
    const e = this.luminosity(), n = t.luminosity();
    return e > n ? (e + 0.05) / (n + 0.05) : (n + 0.05) / (e + 0.05);
  },
  level(t) {
    const e = this.contrast(t);
    return e >= 7 ? "AAA" : e >= 4.5 ? "AA" : "";
  },
  isDark() {
    const t = this.rgb().color;
    return (t[0] * 2126 + t[1] * 7152 + t[2] * 722) / 1e4 < 128;
  },
  isLight() {
    return !this.isDark();
  },
  negate() {
    const t = this.rgb();
    for (let e = 0; e < 3; e++)
      t.color[e] = 255 - t.color[e];
    return t;
  },
  lighten(t) {
    const e = this.hsl();
    return e.color[2] += e.color[2] * t, e;
  },
  darken(t) {
    const e = this.hsl();
    return e.color[2] -= e.color[2] * t, e;
  },
  saturate(t) {
    const e = this.hsl();
    return e.color[1] += e.color[1] * t, e;
  },
  desaturate(t) {
    const e = this.hsl();
    return e.color[1] -= e.color[1] * t, e;
  },
  whiten(t) {
    const e = this.hwb();
    return e.color[1] += e.color[1] * t, e;
  },
  blacken(t) {
    const e = this.hwb();
    return e.color[2] += e.color[2] * t, e;
  },
  grayscale() {
    const t = this.rgb().color, e = t[0] * 0.3 + t[1] * 0.59 + t[2] * 0.11;
    return Ke.rgb(e, e, e);
  },
  fade(t) {
    return this.alpha(this.valpha - this.valpha * t);
  },
  opaquer(t) {
    return this.alpha(this.valpha + this.valpha * t);
  },
  rotate(t) {
    const e = this.hsl();
    let n = e.color[0];
    return n = (n + t) % 360, n = n < 0 ? 360 + n : n, e.color[0] = n, e;
  },
  mix(t, e) {
    if (!t || !t.rgb)
      throw new Error('Argument to "mix" was not a Color instance, but rather an instance of ' + typeof t);
    const n = t.rgb(), r = this.rgb(), i = e === void 0 ? 0.5 : e, f = 2 * i - 1, g = n.alpha() - r.alpha(), l = ((f * g === -1 ? f : (f + g) / (1 + f * g)) + 1) / 2, s = 1 - l;
    return Ke.rgb(
      l * n.red() + s * r.red(),
      l * n.green() + s * r.green(),
      l * n.blue() + s * r.blue(),
      n.alpha() * i + r.alpha() * (1 - i)
    );
  }
};
for (const t of Object.keys(pt)) {
  if (cp.includes(t))
    continue;
  const { channels: e } = pt[t];
  Ke.prototype[t] = function(...n) {
    return this.model === t ? new Ke(this) : n.length > 0 ? new Ke(n, t) : new Ke([...W2(pt[this.model][t].raw(this.color)), this.valpha], t);
  }, Ke[t] = function(...n) {
    let r = n[0];
    return typeof r == "number" && (r = Fa(n, e)), new Ke(r, t);
  };
}
function V2(t, e) {
  return Number(t.toFixed(e));
}
function H2(t) {
  return function(e) {
    return V2(e, t);
  };
}
function je(t, e, n) {
  t = Array.isArray(t) ? t : [t];
  for (const r of t)
    (ws[r] || (ws[r] = []))[e] = n;
  return t = t[0], function(r) {
    let i;
    return r !== void 0 ? (n && (r = n(r)), i = this[t](), i.color[e] = r, i) : (i = this[t]().color[e], n && (i = n(i)), i);
  };
}
function Ye(t) {
  return function(e) {
    return Math.max(0, Math.min(t, e));
  };
}
function W2(t) {
  return Array.isArray(t) ? t : [t];
}
function Fa(t, e) {
  for (let n = 0; n < e; n++)
    typeof t[n] != "number" && (t[n] = 0);
  return t;
}
var U2 = Ke;
const X2 = /* @__PURE__ */ ki(U2);
function Y2(t) {
  const e = t.isDark ? Sa.find((i) => i.isDark) : Sa.find((i) => !i.isDark), n = {
    ...e,
    ...t,
    colors: {
      ...e == null ? void 0 : e.colors,
      ...t.colors
    }
  }, r = Object.entries(n.colors).map(
    ([i, f]) => [i, G2(f)]
  );
  return {
    id: n.name,
    name: n.name,
    values: Object.fromEntries(r),
    is_dark: n.isDark
  };
}
function G2(t) {
  return t.endsWith("%") || t.split(" ").length === 3 ? t : X2(t).rgb().array().slice(0, 3).join(" ");
}
let Un = typeof document < "u" ? document.getElementById("root") ?? document.body : void 0, gr = typeof document < "u" ? document.documentElement : void 0;
function K2(t) {
  Un = t, gr = t;
}
function q2(t, e) {
  gr == null || gr.style.setProperty(t, e);
}
function Z2(t) {
  Object.entries(t.values).forEach(([e, n]) => {
    q2(e, n);
  }), t.is_dark ? gr.classList.add("dark") : gr.classList.remove("dark");
}
const to = Ml()((t) => ({
  // set bootstrap data that was provided with initial request from backend
  data: typeof window < "u" && window.bootstrapData ? Ou(window.bootstrapData) : null,
  setData: (e) => {
    const n = typeof e == "string" ? Ou(e) : e;
    t({ data: n });
  },
  mergeData: (e) => {
    t((n) => ({ data: { ...n.data, ...e } }));
  }
})), J2 = () => to.getState().data;
to.getState().setData;
const Q2 = to.getState().mergeData;
function Ou(t) {
  return typeof t == "string" ? JSON.parse(t) : t;
}
const Du = {
  top: 0,
  right: 0,
  bottom: 0,
  left: 0,
  width: 0,
  height: 0
}, ue = Ml()(
  zw(
    np((t, e) => ({
      editor: null,
      fabric: null,
      config: $d,
      zoom: 1,
      dirty: !1,
      original: {
        width: 1,
        height: 1
      },
      stageSize: Du,
      canvasSize: Du,
      canvasRef: null,
      activeTool: null,
      activeToolOverlay: null,
      loading: !1,
      openPanels: {
        newImage: !1,
        history: !1,
        objects: !1,
        export: !1
      },
      ...f2(t, e),
      ...b2(t, e),
      ...d2(t, e),
      ...p2(t, e),
      ...y2(t, e),
      ...w2(t, e),
      ...x2(t, e),
      // actions
      setZoom: (n) => t((r) => {
        r.zoom = n;
      }),
      setOriginal: (n, r) => t((i) => {
        i.original = { width: n, height: r };
      }),
      setDirty: (n) => t((r) => {
        r.dirty = n;
      }),
      toggleLoading: (n) => t((r) => {
        r.loading = n;
      }),
      setStageSize: (n) => t((r) => {
        r.stageSize = n;
      }),
      setCanvasSize: (n) => t((r) => {
        r.canvasSize = n;
      }),
      setActiveTool: (n, r) => {
        t((i) => {
          i.activeTool = n, i.activeToolOverlay = r;
        });
      },
      setConfig: (n) => t((r) => {
        var a, h;
        const i = h2(n, e().config);
        r.config = i;
        const f = i.activeLanguage || "en", g = (a = i.languages) == null ? void 0 : a[f], l = (((h = i.ui) == null ? void 0 : h.themes) || []).map(
          (o) => Y2(o)
        ), s = l.find(
          (o) => {
            var u;
            return o.id === ((u = i.ui) == null ? void 0 : u.activeTheme);
          }
        );
        s && Z2(s), Q2({
          i18n: { language: f, name: f, id: 0, lines: g },
          themes: {
            all: l
          }
        });
      }),
      togglePanel: (n, r) => t((i) => {
        i.openPanels[n] = r ?? !i.openPanels[n];
      }),
      applyChanges: async () => {
        var f;
        const n = e().activeTool;
        if (!n)
          return;
        const r = e()[n], i = await ((f = r == null ? void 0 : r.apply) == null ? void 0 : f.call(r));
        t((g) => {
          g.dirty = !1, g.activeTool = null, g.activeToolOverlay = null;
        }), i !== !1 && e().editor.tools.history.addHistoryItem({ name: n }), r == null || r.reset();
      },
      cancelChanges: async () => {
        const n = e().activeTool;
        if (!n)
          return;
        const r = e().dirty;
        t((f) => {
          f.dirty = !1, f.activeTool = null, f.activeToolOverlay = null;
        }), r && await e().editor.tools.history.reload();
        const i = e()[n];
        i == null || i.reset();
      },
      reset: () => {
        e().editor.tools.transform.resetStraightenAnchor(), t({
          activeTool: null,
          activeToolOverlay: null,
          zoom: 1,
          dirty: !1,
          loading: !1,
          openPanels: {
            newImage: !1,
            history: !1,
            objects: !1,
            export: !1
          }
        }), e().history.reset(), e().objects.reset(), e().filter.reset(), e().crop.reset(), e().frame.reset(), e().resize.reset(), e().corners.reset();
      }
    }))
  )
);
function O() {
  return ue.getState();
}
function R() {
  return O().editor.tools;
}
function he() {
  return O().fabric;
}
function Ia(t) {
  var n, r, i, f, g;
  R().canvas.clear(), R().frame.remove();
  const e = !((n = O().config.ui) != null && n.visible);
  return O().setConfig({ image: void 0, blankCanvasSize: void 0, ...t }), O().reset(), (r = O().config.ui) != null && r.defaultTool && O().setActiveTool((i = O().config.ui) == null ? void 0 : i.defaultTool, null), e && ((g = (f = O().config).onOpen) == null || g.call(f)), new Promise((l) => setTimeout(l));
}
async function no(t) {
  return (await fetch(t)).json();
}
const Zn = {
  selectable: !1,
  evented: !1,
  lockMovementX: !0,
  lockMovementY: !0,
  lockRotation: !0,
  lockScalingX: !0,
  lockScalingY: !0,
  lockUniScaling: !0,
  hasControls: !1,
  hasBorders: !1,
  hasRotatingPoint: !1,
  strokeWidth: 0
};
function xs(t = []) {
  var r;
  t = [
    ...Object.keys(Zn),
    "crossOrigin",
    "name",
    "displayName",
    "data",
    ...t
  ];
  const e = he().toJSON(
    t
  );
  e.objects = e.objects.filter((i) => !i.data.pixieInternal).map((i) => (i.type === "image" && O().config.crossOrigin && (i.crossOrigin = "anonymous"), Tn(i) && (i.selectable = !0, i.lockMovementX = !1, i.lockMovementY = !1, i.lockUniScaling = !1), { ...i, data: i.data ? { ...i.data } : {} }));
  const n = R().frame.active.config ? {
    name: R().frame.active.config.name,
    sizePercent: R().frame.active.currentSizeInPercent
  } : null;
  return {
    canvas: e,
    editor: {
      frame: n,
      // fonts: tools().text.getUsedFonts(),
      zoom: O().zoom,
      activeObjectId: ((r = O().objects.active) == null ? void 0 : r.id) || null
    },
    canvasWidth: O().original.width,
    canvasHeight: O().original.height
  };
}
function Rl(t = null) {
  if (O().dirty)
    return;
  R().zoom.fitToScreen();
  const [e, n] = up(
    he().getActiveObject()
  );
  t ? O().setActiveTool(t, e === t ? n : null) : O().setActiveTool(e, n);
}
function up(t) {
  switch (t == null ? void 0 : t.name) {
    case Ve.Text:
      return [Me.TEXT, Et.Text];
    case Ve.Sticker:
      return [Me.STICKERS, Et.ActiveObject];
    case Ve.Image:
      return [null, Et.ActiveObject];
    case Ve.Shape:
      return [Me.SHAPES, Et.ActiveObject];
    default:
      return [null, null];
  }
}
const ex = `/*! tailwindcss v3.3.2 | MIT License | https://tailwindcss.com*/.pi *,.pi :after,.pi :before{border-color:rgb(var(--be-foreground-base)/var(--be-divider-opacity));border-style:solid;border-width:0;box-sizing:border-box}.pi :after,.pi :before{--tw-content:""}.pi hr{border-top-width:1px;color:inherit;height:0}.pi abbr:where([title]){-webkit-text-decoration:underline dotted;text-decoration:underline dotted}.pi h1,.pi h2,.pi h3,.pi h4,.pi h5,.pi h6{font-size:inherit;font-weight:inherit}.pi a{color:inherit;text-decoration:inherit}.pi b,.pi strong{font-weight:bolder}.pi code,.pi kbd,.pi pre,.pi samp{font-family:ui-monospace,SFMono-Regular,Menlo,Monaco,Consolas,Liberation Mono,Courier New,monospace;font-size:1em}.pi small{font-size:80%}.pi sub,.pi sup{font-size:75%;line-height:0;position:relative;vertical-align:baseline}.pi sub{bottom:-.25em}.pi sup{top:-.5em}.pi table{border-collapse:collapse;border-color:inherit;text-indent:0}.pi button,.pi input,.pi optgroup,.pi select,.pi textarea{color:inherit;font-family:inherit;font-size:100%;font-weight:inherit;line-height:inherit;margin:0;padding:0}.pi button,.pi select{text-transform:none}.pi [type=button],.pi [type=reset],.pi [type=submit],.pi button{-webkit-appearance:button;background-color:transparent;background-image:none}.pi :-moz-focusring{outline:auto}.pi :-moz-ui-invalid{box-shadow:none}.pi progress{vertical-align:baseline}.pi ::-webkit-inner-spin-button,.pi ::-webkit-outer-spin-button{height:auto}.pi [type=search]{-webkit-appearance:textfield;outline-offset:-2px}.pi ::-webkit-search-decoration{-webkit-appearance:none}.pi ::-webkit-file-upload-button{-webkit-appearance:button;font:inherit}.pi summary{display:list-item}.pi blockquote,.pi dd,.pi dl,.pi figure,.pi h1,.pi h2,.pi h3,.pi h4,.pi h5,.pi h6,.pi hr,.pi p,.pi pre{margin:0}.pi fieldset{margin:0;padding:0}.pi legend{padding:0}.pi menu,.pi ol,.pi ul{list-style:none;margin:0;padding:0}.pi textarea{resize:vertical}.pi input::-moz-placeholder,.pi textarea::-moz-placeholder{color:#9ca3af;opacity:1}.pi input::placeholder,.pi textarea::placeholder{color:#9ca3af;opacity:1}.pi [role=button],.pi button{cursor:pointer}.pi :disabled{cursor:default}.pi audio,.pi canvas,.pi embed,.pi iframe,.pi img,.pi object,.pi svg,.pi video{display:block;vertical-align:middle}.pi img,.pi video{height:auto;max-width:100%}.pi [hidden]{display:none}.pi *,.pi :after,.pi :before{--tw-border-spacing-x:0;--tw-border-spacing-y:0;--tw-translate-x:0;--tw-translate-y:0;--tw-rotate:0;--tw-skew-x:0;--tw-skew-y:0;--tw-scale-x:1;--tw-scale-y:1;--tw-pan-x: ;--tw-pan-y: ;--tw-pinch-zoom: ;--tw-scroll-snap-strictness:proximity;--tw-gradient-from-position: ;--tw-gradient-via-position: ;--tw-gradient-to-position: ;--tw-ordinal: ;--tw-slashed-zero: ;--tw-numeric-figure: ;--tw-numeric-spacing: ;--tw-numeric-fraction: ;--tw-ring-inset: ;--tw-ring-offset-width:0px;--tw-ring-offset-color:#fff;--tw-ring-color:rgba(147,197,253,.5);--tw-ring-offset-shadow:0 0 #0000;--tw-ring-shadow:0 0 #0000;--tw-shadow:0 0 #0000;--tw-shadow-colored:0 0 #0000;--tw-blur: ;--tw-brightness: ;--tw-contrast: ;--tw-grayscale: ;--tw-hue-rotate: ;--tw-invert: ;--tw-saturate: ;--tw-sepia: ;--tw-drop-shadow: ;--tw-backdrop-blur: ;--tw-backdrop-brightness: ;--tw-backdrop-contrast: ;--tw-backdrop-grayscale: ;--tw-backdrop-hue-rotate: ;--tw-backdrop-invert: ;--tw-backdrop-opacity: ;--tw-backdrop-saturate: ;--tw-backdrop-sepia: }.pi ::backdrop{--tw-border-spacing-x:0;--tw-border-spacing-y:0;--tw-translate-x:0;--tw-translate-y:0;--tw-rotate:0;--tw-skew-x:0;--tw-skew-y:0;--tw-scale-x:1;--tw-scale-y:1;--tw-pan-x: ;--tw-pan-y: ;--tw-pinch-zoom: ;--tw-scroll-snap-strictness:proximity;--tw-gradient-from-position: ;--tw-gradient-via-position: ;--tw-gradient-to-position: ;--tw-ordinal: ;--tw-slashed-zero: ;--tw-numeric-figure: ;--tw-numeric-spacing: ;--tw-numeric-fraction: ;--tw-ring-inset: ;--tw-ring-offset-width:0px;--tw-ring-offset-color:#fff;--tw-ring-color:rgba(147,197,253,.5);--tw-ring-offset-shadow:0 0 #0000;--tw-ring-shadow:0 0 #0000;--tw-shadow:0 0 #0000;--tw-shadow-colored:0 0 #0000;--tw-blur: ;--tw-brightness: ;--tw-contrast: ;--tw-grayscale: ;--tw-hue-rotate: ;--tw-invert: ;--tw-saturate: ;--tw-sepia: ;--tw-drop-shadow: ;--tw-backdrop-blur: ;--tw-backdrop-brightness: ;--tw-backdrop-contrast: ;--tw-backdrop-grayscale: ;--tw-backdrop-hue-rotate: ;--tw-backdrop-invert: ;--tw-backdrop-opacity: ;--tw-backdrop-saturate: ;--tw-backdrop-sepia: }.pi .\\!container{width:100%!important}.pi .container{width:100%}@media (min-width:640px){.pi .\\!container{max-width:640px!important}.pi .container{max-width:640px}}@media (min-width:768px){.pi .\\!container{max-width:768px!important}.pi .container{max-width:768px}}@media (min-width:1024px){.pi .\\!container{max-width:1024px!important}.pi .container{max-width:1024px}}@media (min-width:1280px){.pi .\\!container{max-width:1280px!important}.pi .container{max-width:1280px}}@media (min-width:1536px){.pi .\\!container{max-width:1536px!important}.pi .container{max-width:1536px}}.pi .sr-only{height:1px;margin:-1px;overflow:hidden;padding:0;position:absolute;width:1px;clip:rect(0,0,0,0);border-width:0;white-space:nowrap}.pi .pointer-events-none{pointer-events:none}.pi .pointer-events-auto{pointer-events:auto}.pi .\\!visible{visibility:visible!important}.pi .visible{visibility:visible}.pi .invisible{visibility:hidden}.pi .collapse{visibility:collapse}.pi .static{position:static}.pi .fixed{position:fixed}.pi .absolute{position:absolute}.pi .relative{position:relative}.pi .inset-0{top:0;right:0;bottom:0;left:0}.pi .inset-x-0{left:0;right:0}.pi .-bottom-10{bottom:-10px}.pi .-bottom-20{bottom:-20px}.pi .-bottom-5{bottom:-5px}.pi .-left-5{left:-5px}.pi .-left-8{left:-8px}.pi .-left-80{left:-80px}.pi .-right-5{right:-5px}.pi .-top-144{top:-144px}.pi .-top-40{top:-40px}.pi .-top-5{top:-5px}.pi .bottom-0{bottom:0}.pi .bottom-20{bottom:20px}.pi .left-0{left:0}.pi .left-1\\/2{left:50%}.pi .left-20{left:20px}.pi .right-0{right:0}.pi .right-16{right:16px}.pi .right-2{right:2px}.pi .right-20{right:20px}.pi .right-4{right:4px}.pi .top-0{top:0}.pi .top-1\\/2{top:50%}.pi .top-2{top:2px}.pi .isolate{isolation:isolate}.pi .z-10{z-index:10}.pi .z-20{z-index:20}.pi .z-50{z-index:50}.pi .z-cropzone{z-index:10}.pi .z-loading-indicator{z-index:50}.pi .z-modal{z-index:110}.pi .z-navbar{z-index:40}.pi .z-obj-box{z-index:20}.pi .z-popover{z-index:130}.pi .z-toast{z-index:160}.pi .z-tool-overlay{z-index:30}.pi .z-tooltip{z-index:150}.pi .z-tray{z-index:120}.pi .m-auto{margin:auto}.pi .mx-20{margin-left:20px;margin-right:20px}.pi .mx-8{margin-left:8px;margin-right:8px}.pi .mx-auto{margin-left:auto;margin-right:auto}.pi .my-20{margin-bottom:20px;margin-top:20px}.pi .my-4{margin-bottom:4px;margin-top:4px}.pi .my-6{margin-bottom:6px;margin-top:6px}.pi .my-8{margin-bottom:8px;margin-top:8px}.pi .my-auto{margin-bottom:auto;margin-top:auto}.pi .-ml-1{margin-left:-1px}.pi .-ml-10{margin-left:-10px}.pi .-ml-12{margin-left:-12px}.pi .-ml-3{margin-left:-3px}.pi .-ml-4{margin-left:-4px}.pi .-ml-6{margin-left:-6px}.pi .-mr-4{margin-right:-4px}.pi .-mr-8{margin-right:-8px}.pi .mb-1{margin-bottom:1px}.pi .mb-10{margin-bottom:10px}.pi .mb-16{margin-bottom:16px}.pi .mb-2{margin-bottom:2px}.pi .mb-20{margin-bottom:20px}.pi .mb-24{margin-bottom:24px}.pi .mb-4{margin-bottom:4px}.pi .mb-6{margin-bottom:6px}.pi .mb-8{margin-bottom:8px}.pi .ml-10{margin-left:10px}.pi .ml-12{margin-left:12px}.pi .ml-4{margin-left:4px}.pi .ml-6{margin-left:6px}.pi .ml-8{margin-left:8px}.pi .ml-auto{margin-left:auto}.pi .mr-10{margin-right:10px}.pi .mr-16{margin-right:16px}.pi .mr-20{margin-right:20px}.pi .mr-4{margin-right:4px}.pi .mr-5{margin-right:5px}.pi .mr-6{margin-right:6px}.pi .mr-8{margin-right:8px}.pi .mr-auto{margin-right:auto}.pi .mt-0{margin-top:0}.pi .mt-10{margin-top:10px}.pi .mt-14{margin-top:14px}.pi .mt-20{margin-top:20px}.pi .mt-24{margin-top:24px}.pi .mt-4{margin-top:4px}.pi .mt-6{margin-top:6px}.pi .box-content{box-sizing:content-box}.pi .block{display:block}.pi .inline-block{display:inline-block}.pi .inline{display:inline}.pi .flex{display:flex}.pi .inline-flex{display:inline-flex}.pi .grid{display:grid}.pi .contents{display:contents}.pi .hidden{display:none}.pi .aspect-square{aspect-ratio:1/1}.pi .h-1{height:1px}.pi .h-12{height:12px}.pi .h-128{height:128px}.pi .h-14{height:14px}.pi .h-16{height:16px}.pi .h-18{height:18px}.pi .h-2{height:2px}.pi .h-2\\/4{height:50%}.pi .h-20{height:20px}.pi .h-22{height:22px}.pi .h-24{height:24px}.pi .h-26{height:26px}.pi .h-28{height:28px}.pi .h-3{height:3px}.pi .h-30{height:30px}.pi .h-32{height:32px}.pi .h-36{height:36px}.pi .h-38{height:2.375rem}.pi .h-4{height:4px}.pi .h-40{height:40px}.pi .h-42{height:42px}.pi .h-48{height:48px}.pi .h-50{height:50px}.pi .h-56{height:56px}.pi .h-6{height:6px}.pi .h-60{height:60px}.pi .h-64{height:64px}.pi .h-68{height:68px}.pi .h-8{height:8px}.pi .h-80{height:80px}.pi .h-84{height:84px}.pi .h-92{height:92px}.pi .h-\\[54px\\]{height:54px}.pi .h-font{height:1em}.pi .h-full{height:100%}.pi .h-px{height:1px}.pi .h-screen{height:100dvh}.pi .max-h-100{max-height:6.25rem}.pi .max-h-\\[calc\\(100\\%-40px\\)\\]{max-height:calc(100% - 40px)}.pi .max-h-\\[calc\\(100vh-90px\\)\\]{max-height:calc(100vh - 90px)}.pi .max-h-dialog{max-height:calc(var(--be-viewport-height, 100vh)*.9)}.pi .max-h-full{max-height:100%}.pi .max-h-inherit{max-height:inherit}.pi .max-h-tray{max-height:calc(var(--be-viewport-height, 100vh)*.9)}.pi .min-h-24{min-height:24px}.pi .min-h-30{min-height:30px}.pi .min-h-36{min-height:36px}.pi .min-h-42{min-height:42px}.pi .min-h-50{min-height:50px}.pi .min-h-60{min-height:60px}.pi .min-h-86{min-height:86px}.pi .\\!w-auto{width:auto!important}.pi .w-1\\/2{width:50%}.pi .w-110{width:110px}.pi .w-12{width:12px}.pi .w-1280{width:80rem}.pi .w-14{width:14px}.pi .w-144{width:144px}.pi .w-16{width:16px}.pi .w-18{width:18px}.pi .w-2{width:2px}.pi .w-20{width:20px}.pi .w-22{width:22px}.pi .w-224{width:224px}.pi .w-24{width:24px}.pi .w-256{width:256px}.pi .w-26{width:26px}.pi .w-28{width:28px}.pi .w-280{width:17.5rem}.pi .w-30{width:30px}.pi .w-32{width:32px}.pi .w-320{width:320px}.pi .w-36{width:36px}.pi .w-38{width:2.375rem}.pi .w-384{width:384px}.pi .w-40{width:40px}.pi .w-42{width:42px}.pi .w-440{width:27.5rem}.pi .w-46{width:2.875rem}.pi .w-50{width:50px}.pi .w-56{width:56px}.pi .w-60{width:60px}.pi .w-620{width:38.75rem}.pi .w-64{width:64px}.pi .w-68{width:68px}.pi .w-780{width:48.75rem}.pi .w-8{width:8px}.pi .w-80{width:80px}.pi .w-850{width:53.125rem}.pi .w-96{width:96px}.pi .w-\\[4ch\\]{width:4ch}.pi .w-auto{width:auto}.pi .w-font{width:1em}.pi .w-full{width:100%}.pi .w-max{width:-moz-max-content;width:max-content}.pi .w-min{width:-moz-min-content;width:min-content}.pi .w-px{width:1px}.pi .w-screen{width:100vw}.pi .min-w-0{min-width:0}.pi .min-w-128{min-width:128px}.pi .min-w-180{min-width:11.25rem}.pi .min-w-192{min-width:192px}.pi .min-w-288{min-width:288px}.pi .min-w-30{min-width:30px}.pi .min-w-4{min-width:4px}.pi .min-w-42{min-width:42px}.pi .min-w-92{min-width:92px}.pi .min-w-min{min-width:-moz-min-content;min-width:min-content}.pi .max-w-112{max-width:112px}.pi .max-w-240{max-width:240px}.pi .max-w-288{max-width:288px}.pi .max-w-320{max-width:320px}.pi .max-w-375{max-width:375px}.pi .max-w-500{max-width:31.25rem}.pi .max-w-\\[90\\%\\]{max-width:90%}.pi .max-w-\\[calc\\(100\\%-40px\\)\\]{max-width:calc(100% - 40px)}.pi .max-w-\\[calc\\(100vw-90px\\)\\]{max-width:calc(100vw - 90px)}.pi .max-w-dialog{max-width:calc(var(--be-viewport-width, 100vw)*.9)}.pi .max-w-full{max-width:100%}.pi .max-w-max{max-width:-moz-max-content;max-width:max-content}.pi .flex-\\[1_1_60px\\]{flex:1 1 60px}.pi .flex-auto{flex:1 1 auto}.pi .flex-shrink-0,.pi .shrink-0{flex-shrink:0}.pi .origin-\\[0_55\\%\\]{transform-origin:0 55%}.pi .origin-\\[100\\%\\]{transform-origin:100%}.pi .-translate-x-1\\/2{--tw-translate-x:-50%}.pi .-translate-x-1\\/2,.pi .-translate-y-1\\/2{transform:translate(var(--tw-translate-x),var(--tw-translate-y)) rotate(var(--tw-rotate)) skew(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y))}.pi .-translate-y-1\\/2{--tw-translate-y:-50%}.pi .rotate-0{--tw-rotate:0deg}.pi .rotate-0,.pi .rotate-180{transform:translate(var(--tw-translate-x),var(--tw-translate-y)) rotate(var(--tw-rotate)) skew(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y))}.pi .rotate-180{--tw-rotate:180deg}.pi .rotate-45{--tw-rotate:45deg}.pi .rotate-45,.pi .rotate-90{transform:translate(var(--tw-translate-x),var(--tw-translate-y)) rotate(var(--tw-rotate)) skew(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y))}.pi .rotate-90{--tw-rotate:90deg}.pi .scale-y-\\[0\\.6\\]{--tw-scale-y:.6}.pi .scale-y-\\[0\\.6\\],.pi .transform{transform:translate(var(--tw-translate-x),var(--tw-translate-y)) rotate(var(--tw-rotate)) skew(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y))}.pi .cursor-default{cursor:default}.pi .cursor-move{cursor:move}.pi .cursor-nesw-resize{cursor:nesw-resize}.pi .cursor-not-allowed{cursor:not-allowed}.pi .cursor-nwse-resize{cursor:nwse-resize}.pi .cursor-pointer{cursor:pointer}.pi .cursor-se-resize{cursor:se-resize}.pi .cursor-sw-resize{cursor:sw-resize}.pi .touch-none{touch-action:none}.pi .select-none{-webkit-user-select:none;-moz-user-select:none;user-select:none}.pi .resize{resize:both}.pi .appearance-none{-webkit-appearance:none;-moz-appearance:none;appearance:none}.pi .grid-cols-5-min-content{grid-template-columns:repeat(5,min-content)}.pi .flex-row{flex-direction:row}.pi .flex-col{flex-direction:column}.pi .flex-col-reverse{flex-direction:column-reverse}.pi .flex-wrap{flex-wrap:wrap}.pi .flex-nowrap{flex-wrap:nowrap}.pi .items-start{align-items:flex-start}.pi .items-end{align-items:flex-end}.pi .items-center{align-items:center}.pi .items-stretch{align-items:stretch}.pi .justify-start{justify-content:flex-start}.pi .justify-center{justify-content:center}.pi .justify-between{justify-content:space-between}.pi .gap-10{gap:10px}.pi .gap-14{gap:14px}.pi .gap-16{gap:16px}.pi .gap-18{gap:18px}.pi .gap-20{gap:20px}.pi .gap-36{gap:36px}.pi .gap-4{gap:4px}.pi .gap-40{gap:40px}.pi .gap-6{gap:6px}.pi .gap-8{gap:8px}.pi .space-y-10>:not([hidden])~:not([hidden]){--tw-space-y-reverse:0;margin-bottom:calc(10px*var(--tw-space-y-reverse));margin-top:calc(10px*(1 - var(--tw-space-y-reverse)))}.pi .overflow-auto{overflow:auto}.pi .overflow-hidden{overflow:hidden}.pi .overflow-x-auto{overflow-x:auto}.pi .overflow-y-auto{overflow-y:auto}.pi .overflow-x-hidden{overflow-x:hidden}.pi .overflow-y-hidden{overflow-y:hidden}.pi .overscroll-contain{overscroll-behavior:contain}.pi .truncate{overflow:hidden;white-space:nowrap}.pi .overflow-ellipsis,.pi .text-ellipsis,.pi .truncate{text-overflow:ellipsis}.pi .whitespace-normal{white-space:normal}.pi .whitespace-nowrap{white-space:nowrap}.pi .break-words{overflow-wrap:break-word}.pi .rounded{border-radius:4px}.pi .rounded-2xl{border-radius:16px}.pi .rounded-3xl{border-radius:24px}.pi .rounded-button{border-radius:var(--be-button-radius,.25rem)}.pi .rounded-full{border-radius:9999px}.pi .rounded-input{border-radius:var(--be-input-radius,.25rem)}.pi .rounded-lg{border-radius:8px}.pi .rounded-md{border-radius:6px}.pi .rounded-none{border-radius:0}.pi .rounded-panel{border-radius:var(--be-panel-radius,.25rem)}.pi .rounded-xl{border-radius:12px}.pi .rounded-l{border-bottom-left-radius:4px;border-top-left-radius:4px}.pi .rounded-l-full{border-bottom-left-radius:9999px;border-top-left-radius:9999px}.pi .rounded-l-input{border-bottom-left-radius:var(--be-input-radius,.25rem);border-top-left-radius:var(--be-input-radius,.25rem)}.pi .rounded-l-none{border-bottom-left-radius:0;border-top-left-radius:0}.pi .rounded-r-full{border-bottom-right-radius:9999px;border-top-right-radius:9999px}.pi .rounded-r-input{border-bottom-right-radius:var(--be-input-radius,.25rem);border-top-right-radius:var(--be-input-radius,.25rem)}.pi .rounded-r-none{border-bottom-right-radius:0;border-top-right-radius:0}.pi .rounded-t{border-top-left-radius:4px;border-top-right-radius:4px}.pi .rounded-bl-none{border-bottom-left-radius:0}.pi .rounded-br-none{border-bottom-right-radius:0}.pi .rounded-tl-none{border-top-left-radius:0}.pi .rounded-tr-none{border-top-right-radius:0}.pi .border{border-width:1px}.pi .border-2{border-width:2px}.pi .border-4{border-width:4px}.pi .border-\\[3px\\]{border-width:3px}.pi .border-y{border-top-width:1px}.pi .border-b,.pi .border-y{border-bottom-width:1px}.pi .border-b-4{border-bottom-width:4px}.pi .border-l{border-left-width:1px}.pi .border-l-4{border-left-width:4px}.pi .border-r{border-right-width:1px}.pi .border-r-4{border-right-width:4px}.pi .border-t{border-top-width:1px}.pi .border-t-4{border-top-width:4px}.pi .border-dotted{border-style:dotted}.pi .border-none{border-style:none}.pi .border-background{--tw-border-opacity:1;border-color:rgb(var(--be-background)/var(--tw-border-opacity))}.pi .border-bg-alt{--tw-border-opacity:1;border-color:rgb(var(--be-background-alt)/var(--tw-border-opacity))}.pi .border-chip{--tw-border-opacity:1;border-color:rgb(var(--be-background-chip)/var(--tw-border-opacity))}.pi .border-danger{--tw-border-opacity:1;border-color:rgb(239 68 68/var(--tw-border-opacity))}.pi .border-danger\\/50{border-color:#ef444480}.pi .border-divider{border-color:rgb(var(--be-foreground-base)/var(--be-divider-opacity))}.pi .border-paper{--tw-border-opacity:1;border-color:rgb(var(--be-paper)/var(--tw-border-opacity))}.pi .border-positive\\/50{border-color:#22c55e80}.pi .border-primary{--tw-border-opacity:1;border-color:rgb(var(--be-primary)/var(--tw-border-opacity))}.pi .border-primary\\/50{border-color:rgb(var(--be-primary)/.5)}.pi .border-text-muted{border-color:rgb(var(--be-foreground-base)/var(--be-text-muted-opacity))}.pi .border-transparent{border-color:transparent}.pi .border-white{--tw-border-opacity:1;border-color:rgb(255 255 255/var(--tw-border-opacity))}.pi .border-white\\/50{border-color:#ffffff80}.pi .border-b-bg{--tw-border-opacity:1;border-bottom-color:rgb(var(--be-background)/var(--tw-border-opacity))}.pi .border-b-transparent{border-bottom-color:transparent}.pi .border-r-transparent{border-right-color:transparent}.pi .bg{--tw-bg-opacity:1;background-color:rgb(var(--be-background)/var(--tw-bg-opacity))}.pi .bg-alt{--tw-bg-opacity:1;background-color:rgb(var(--be-background-alt)/var(--tw-bg-opacity))}.pi .bg-background{--tw-bg-opacity:1;background-color:rgb(var(--be-background)/var(--tw-bg-opacity))}.pi .bg-background\\/70{background-color:rgb(var(--be-background)/.7)}.pi .bg-background\\/80{background-color:rgb(var(--be-background)/.8)}.pi .bg-black\\/50{background-color:#00000080}.pi .bg-black\\/80{background-color:#000c}.pi .bg-chip{--tw-bg-opacity:1;background-color:rgb(var(--be-background-chip)/var(--tw-bg-opacity))}.pi .bg-controls{--tw-bg-opacity:1;background-color:rgb(50 50 50/var(--tw-bg-opacity))}.pi .bg-danger{--tw-bg-opacity:1;background-color:rgb(239 68 68/var(--tw-bg-opacity))}.pi .bg-danger-lighter{--tw-bg-opacity:1;background-color:rgb(254 202 202/var(--tw-bg-opacity))}.pi .bg-divider{background-color:rgb(var(--be-foreground-base)/var(--be-divider-opacity))}.pi .bg-fg-base\\/4{background-color:rgb(var(--be-foreground-base)/4%)}.pi .bg-focus{background-color:rgb(var(--be-foreground-base)/var(--be-focus-opacity))}.pi .bg-inherit{background-color:inherit}.pi .bg-paper{--tw-bg-opacity:1;background-color:rgb(var(--be-paper)/var(--tw-bg-opacity))}.pi .bg-positive{--tw-bg-opacity:1;background-color:rgb(34 197 94/var(--tw-bg-opacity))}.pi .bg-positive-lighter{--tw-bg-opacity:1;background-color:rgb(187 247 208/var(--tw-bg-opacity))}.pi .bg-primary{--tw-bg-opacity:1;background-color:rgb(var(--be-primary)/var(--tw-bg-opacity))}.pi .bg-primary-dark{--tw-bg-opacity:1;background-color:rgb(var(--be-primary-dark)/var(--tw-bg-opacity))}.pi .bg-primary-light{--tw-bg-opacity:1;background-color:rgb(var(--be-primary-light)/var(--tw-bg-opacity))}.pi .bg-primary\\/focus{background-color:rgb(var(--be-primary)/var(--be-focus-opacity))}.pi .bg-primary\\/selected{background-color:rgb(var(--be-primary)/var(--be-selected-opacity))}.pi .bg-slider-disabled{--tw-bg-opacity:1;background-color:rgb(189 189 189/var(--tw-bg-opacity))}.pi .bg-slider-disabled\\/60{background-color:#bdbdbd99}.pi .bg-toast{--tw-bg-opacity:1;background-color:rgb(50 50 50/var(--tw-bg-opacity))}.pi .bg-transparent{background-color:transparent}.pi .bg-warning{--tw-bg-opacity:1;background-color:rgb(243 164 50/var(--tw-bg-opacity))}.pi .bg-white{--tw-bg-opacity:1;background-color:rgb(255 255 255/var(--tw-bg-opacity))}.pi .bg-white\\/50{background-color:#ffffff80}.pi .bg-opacity-95{--tw-bg-opacity:.95}.pi .bg-no-repeat{background-repeat:no-repeat}.pi .fill-current{fill:currentColor}.pi .fill-transparent{fill:transparent}.pi .stroke-current{stroke:currentColor}.pi .object-contain{-o-object-fit:contain;object-fit:contain}.pi .object-cover{-o-object-fit:cover;object-fit:cover}.pi .p-0{padding:0}.pi .p-10{padding:10px}.pi .p-14{padding:14px}.pi .p-16{padding:16px}.pi .p-18{padding:18px}.pi .p-2{padding:2px}.pi .p-20{padding:20px}.pi .p-4{padding:4px}.pi .p-40{padding:40px}.pi .p-6{padding:6px}.pi .p-8{padding:8px}.pi .px-10{padding-left:10px;padding-right:10px}.pi .px-12{padding-left:12px;padding-right:12px}.pi .px-14{padding-left:14px;padding-right:14px}.pi .px-16{padding-left:16px;padding-right:16px}.pi .px-18{padding-left:18px;padding-right:18px}.pi .px-20{padding-left:20px;padding-right:20px}.pi .px-22{padding-left:22px;padding-right:22px}.pi .px-24{padding-left:24px;padding-right:24px}.pi .px-26{padding-left:26px;padding-right:26px}.pi .px-32{padding-left:32px;padding-right:32px}.pi .px-4{padding-left:4px;padding-right:4px}.pi .px-5vw{padding-left:5vw;padding-right:5vw}.pi .px-6{padding-left:6px;padding-right:6px}.pi .px-8{padding-left:8px;padding-right:8px}.pi .py-10{padding-bottom:10px;padding-top:10px}.pi .py-12{padding-bottom:12px;padding-top:12px}.pi .py-14{padding-bottom:14px;padding-top:14px}.pi .py-2{padding-bottom:2px;padding-top:2px}.pi .py-20{padding-bottom:20px;padding-top:20px}.pi .py-3{padding-bottom:3px;padding-top:3px}.pi .py-4{padding-bottom:4px;padding-top:4px}.pi .py-5{padding-bottom:5px;padding-top:5px}.pi .py-6{padding-bottom:6px;padding-top:6px}.pi .py-8{padding-bottom:8px;padding-top:8px}.pi .py-\\[9px\\]{padding-bottom:9px;padding-top:9px}.pi .pb-10{padding-bottom:10px}.pi .pb-12{padding-bottom:12px}.pi .pb-14{padding-bottom:14px}.pi .pb-16{padding-bottom:16px}.pi .pb-18{padding-bottom:18px}.pi .pb-20{padding-bottom:20px}.pi .pb-4{padding-bottom:4px}.pi .pb-8{padding-bottom:8px}.pi .pb-safe-area{padding-bottom:env(safe-area-inset-bottom)}.pi .pl-10{padding-left:10px}.pi .pl-12{padding-left:12px}.pi .pl-14{padding-left:14px}.pi .pl-16{padding-left:16px}.pi .pl-18{padding-left:18px}.pi .pl-28{padding-left:28px}.pi .pl-46{padding-left:2.875rem}.pi .pl-54{padding-left:3.375rem}.pi .pl-8{padding-left:8px}.pi .pr-10{padding-right:10px}.pi .pr-12{padding-right:12px}.pi .pr-18{padding-right:18px}.pi .pr-24{padding-right:24px}.pi .pr-28{padding-right:28px}.pi .pr-46{padding-right:2.875rem}.pi .pr-54{padding-right:3.375rem}.pi .pr-6{padding-right:6px}.pi .pr-8{padding-right:8px}.pi .pt-10{padding-top:10px}.pi .pt-12{padding-top:12px}.pi .pt-14{padding-top:14px}.pi .pt-16{padding-top:16px}.pi .pt-20{padding-top:20px}.pi .pt-24{padding-top:24px}.pi .pt-4{padding-top:4px}.pi .pt-40{padding-top:40px}.pi .pt-6{padding-top:6px}.pi .text-left{text-align:left}.pi .text-center{text-align:center}.pi .text-right{text-align:right}.pi .align-middle{vertical-align:middle}.pi .text-base{font-size:16px;line-height:24px}.pi .text-lg{font-size:18px;line-height:28px}.pi .text-sm{font-size:14px;line-height:20px}.pi .text-xl{font-size:20px;line-height:28px}.pi .text-xs{font-size:12px;line-height:16px}.pi .font-bold{font-weight:700}.pi .font-medium{font-weight:500}.pi .font-semibold{font-weight:600}.pi .uppercase{text-transform:uppercase}.pi .capitalize{text-transform:capitalize}.pi .italic{font-style:italic}.pi .tabular-nums{--tw-numeric-spacing:tabular-nums;font-variant-numeric:var(--tw-ordinal) var(--tw-slashed-zero) var(--tw-numeric-figure) var(--tw-numeric-spacing) var(--tw-numeric-fraction)}.pi .leading-5{line-height:1.25rem}.pi .leading-none{line-height:1}.pi .tracking-wide{letter-spacing:.025em}.pi .\\!text{color:rgb(var(--be-foreground-base)/var(--be-text-main-opacity))!important}.pi .text{color:rgb(var(--be-foreground-base)/var(--be-text-main-opacity))}.pi .text-black{--tw-text-opacity:1;color:rgb(0 0 0/var(--tw-text-opacity))}.pi .text-black\\/30{color:#0000004d}.pi .text-danger{--tw-text-opacity:1;color:rgb(239 68 68/var(--tw-text-opacity))}.pi .text-danger-darker{--tw-text-opacity:1;color:rgb(153 27 27/var(--tw-text-opacity))}.pi .text-disabled{color:rgb(var(--be-foreground-base)/var(--be-disabled-fg-opacity))}.pi .text-link{--tw-text-opacity:1;color:rgb(var(--be-link-color,var(--be-primary))/var(--tw-text-opacity))}.pi .text-main{color:rgb(var(--be-foreground-base)/var(--be-text-main-opacity))}.pi .text-muted{color:rgb(var(--be-foreground-base)/var(--be-text-muted-opacity))}.pi .text-on-primary{--tw-text-opacity:1;color:rgb(var(--be-on-primary)/var(--tw-text-opacity))}.pi .text-positive{--tw-text-opacity:1;color:rgb(34 197 94/var(--tw-text-opacity))}.pi .text-positive-darker{--tw-text-opacity:1;color:rgb(22 101 52/var(--tw-text-opacity))}.pi .text-primary{--tw-text-opacity:1;color:rgb(var(--be-primary)/var(--tw-text-opacity))}.pi .text-white{--tw-text-opacity:1;color:rgb(255 255 255/var(--tw-text-opacity))}.pi .underline{text-decoration-line:underline}.pi .no-underline{text-decoration-line:none}.pi .caret-transparent{caret-color:transparent}.pi .opacity-0{opacity:0}.pi .opacity-100{opacity:1}.pi .opacity-70{opacity:.7}.pi .opacity-80{opacity:.8}.pi .opacity-90{opacity:.9}.pi .shadow{--tw-shadow:0 1px 3px 0 rgba(0,0,0,.1),0 1px 2px -1px rgba(0,0,0,.1);--tw-shadow-colored:0 1px 3px 0 var(--tw-shadow-color),0 1px 2px -1px var(--tw-shadow-color)}.pi .shadow,.pi .shadow-2xl{box-shadow:var(--tw-ring-offset-shadow,0 0 #0000),var(--tw-ring-shadow,0 0 #0000),var(--tw-shadow)}.pi .shadow-2xl{--tw-shadow:0 25px 50px -12px rgba(0,0,0,.25);--tw-shadow-colored:0 25px 50px -12px var(--tw-shadow-color)}.pi .shadow-lg{--tw-shadow:0 10px 15px -3px rgba(0,0,0,.1),0 4px 6px -4px rgba(0,0,0,.1);--tw-shadow-colored:0 10px 15px -3px var(--tw-shadow-color),0 4px 6px -4px var(--tw-shadow-color)}.pi .shadow-lg,.pi .shadow-md{box-shadow:var(--tw-ring-offset-shadow,0 0 #0000),var(--tw-ring-shadow,0 0 #0000),var(--tw-shadow)}.pi .shadow-md{--tw-shadow:0 4px 6px -1px rgba(0,0,0,.1),0 2px 4px -2px rgba(0,0,0,.1);--tw-shadow-colored:0 4px 6px -1px var(--tw-shadow-color),0 2px 4px -2px var(--tw-shadow-color)}.pi .shadow-sm{--tw-shadow:0 1px 2px 0 rgba(0,0,0,.05);--tw-shadow-colored:0 1px 2px 0 var(--tw-shadow-color)}.pi .shadow-sm,.pi .shadow-xl{box-shadow:var(--tw-ring-offset-shadow,0 0 #0000),var(--tw-ring-shadow,0 0 #0000),var(--tw-shadow)}.pi .shadow-xl{--tw-shadow:0 20px 25px -5px rgba(0,0,0,.1),0 8px 10px -6px rgba(0,0,0,.1);--tw-shadow-colored:0 20px 25px -5px var(--tw-shadow-color),0 8px 10px -6px var(--tw-shadow-color)}.pi .outline-none{outline:2px solid transparent;outline-offset:2px}.pi .outline{outline-color:rgb(var(--be-primary-lighter)/1);outline-style:solid;outline-width:2px}.pi .ring{--tw-ring-offset-shadow:var(--tw-ring-inset) 0 0 0 var(--tw-ring-offset-width) var(--tw-ring-offset-color);--tw-ring-shadow:var(--tw-ring-inset) 0 0 0 calc(4px + var(--tw-ring-offset-width)) var(--tw-ring-color);box-shadow:var(--tw-ring-offset-shadow),var(--tw-ring-shadow),var(--tw-shadow,0 0 #0000)}.pi .ring-inset{--tw-ring-inset:inset}.pi .blur{--tw-blur:blur(8px)}.pi .blur,.pi .grayscale{filter:var(--tw-blur) var(--tw-brightness) var(--tw-contrast) var(--tw-grayscale) var(--tw-hue-rotate) var(--tw-invert) var(--tw-saturate) var(--tw-sepia) var(--tw-drop-shadow)}.pi .grayscale{--tw-grayscale:grayscale(100%)}.pi .invert{--tw-invert:invert(100%)}.pi .invert,.pi .sepia{filter:var(--tw-blur) var(--tw-brightness) var(--tw-contrast) var(--tw-grayscale) var(--tw-hue-rotate) var(--tw-invert) var(--tw-saturate) var(--tw-sepia) var(--tw-drop-shadow)}.pi .sepia{--tw-sepia:sepia(100%)}.pi .filter{filter:var(--tw-blur) var(--tw-brightness) var(--tw-contrast) var(--tw-grayscale) var(--tw-hue-rotate) var(--tw-invert) var(--tw-saturate) var(--tw-sepia) var(--tw-drop-shadow)}.pi .backdrop-blur-sm{--tw-backdrop-blur:blur(4px);-webkit-backdrop-filter:var(--tw-backdrop-blur) var(--tw-backdrop-brightness) var(--tw-backdrop-contrast) var(--tw-backdrop-grayscale) var(--tw-backdrop-hue-rotate) var(--tw-backdrop-invert) var(--tw-backdrop-opacity) var(--tw-backdrop-saturate) var(--tw-backdrop-sepia);backdrop-filter:var(--tw-backdrop-blur) var(--tw-backdrop-brightness) var(--tw-backdrop-contrast) var(--tw-backdrop-grayscale) var(--tw-backdrop-hue-rotate) var(--tw-backdrop-invert) var(--tw-backdrop-opacity) var(--tw-backdrop-saturate) var(--tw-backdrop-sepia)}.pi .transition{transition-duration:.15s;transition-property:color,background-color,border-color,text-decoration-color,fill,stroke,opacity,box-shadow,transform,filter,-webkit-backdrop-filter;transition-property:color,background-color,border-color,text-decoration-color,fill,stroke,opacity,box-shadow,transform,filter,backdrop-filter;transition-property:color,background-color,border-color,text-decoration-color,fill,stroke,opacity,box-shadow,transform,filter,backdrop-filter,-webkit-backdrop-filter;transition-timing-function:cubic-bezier(.4,0,.2,1)}.pi .transition-all{transition-duration:.15s;transition-property:all;transition-timing-function:cubic-bezier(.4,0,.2,1)}.pi .transition-button{transition-duration:.15s;transition-property:background-color,box-shadow,border-color,color;transition-timing-function:cubic-bezier(.4,0,.2,1)}.pi .transition-colors{transition-duration:.15s;transition-property:color,background-color,border-color,text-decoration-color,fill,stroke;transition-timing-function:cubic-bezier(.4,0,.2,1)}.pi .transition-opacity{transition-duration:.15s;transition-property:opacity;transition-timing-function:cubic-bezier(.4,0,.2,1)}.pi .transition-shadow{transition-duration:.15s;transition-property:box-shadow;transition-timing-function:cubic-bezier(.4,0,.2,1)}.pi .transition-transform{transition-duration:.15s;transition-property:transform;transition-timing-function:cubic-bezier(.4,0,.2,1)}.pi .transition-width{transition-duration:.15s;transition-property:width;transition-timing-function:cubic-bezier(.4,0,.2,1)}.pi .duration-100{transition-duration:.1s}.pi .duration-200{transition-duration:.2s}.pi .will-change-transform{will-change:transform}.pi .icon-2xs{font-size:.75rem}.pi .icon-xs{font-size:1rem}.pi .icon-sm{font-size:1.25rem}.pi .icon-md{font-size:1.5rem}.pi .icon-lg{font-size:2.1875rem}.pi .icon-xl{font-size:2.6875rem}.pi .no-tap-highlight{-webkit-tap-highlight-color:transparent}@media only screen and (min-device-width:768px){.pi .tiny-scrollbar{scrollbar-color:rgba(0,0,0,.2) transparent;scrollbar-width:thin}.pi .tiny-scrollbar::-webkit-scrollbar{background-color:transparent;height:6px;width:6px}.pi .tiny-scrollbar::-webkit-scrollbar-thumb{background-color:rgb(var(--be-foreground-base)/.2);border-radius:10px}.pi .tiny-scrollbar::-webkit-scrollbar-track-piece:start{background:transparent}.pi .tiny-scrollbar::-webkit-scrollbar-track-piece:end{background:transparent}}.pi .hide-scrollbar{-ms-overflow-style:none;scrollbar-width:none}.pi .hide-scrollbar::-webkit-scrollbar{background:transparent;display:none;height:0;width:0}.pi .svg-icon{display:inline-block;flex-shrink:0;-webkit-user-select:none;-moz-user-select:none;user-select:none;fill:currentColor;transition-duration:.15s;transition-property:transform,fill;transition-timing-function:cubic-bezier(.4,0,.2,1)}.pi .cropzone:not(.moving) .cropzone-transition{transition-duration:.15s;transition-property:all;transition-timing-function:cubic-bezier(.4,0,.2,1)}.pi .first-letter\\:capitalize:first-letter{text-transform:capitalize}.pi .file\\:mr-10::file-selector-button{margin-right:10px}.pi .file\\:h-24::file-selector-button{height:24px}.pi .file\\:rounded::file-selector-button{border-radius:4px}.pi .file\\:border-none::file-selector-button{border-style:none}.pi .file\\:bg-primary::file-selector-button{--tw-bg-opacity:1;background-color:rgb(var(--be-primary)/var(--tw-bg-opacity))}.pi .file\\:px-10::file-selector-button{padding-left:10px;padding-right:10px}.pi .file\\:text-sm::file-selector-button{font-size:14px;line-height:20px}.pi .file\\:font-semibold::file-selector-button{font-weight:600}.pi .file\\:text-on-primary::file-selector-button{--tw-text-opacity:1;color:rgb(var(--be-on-primary)/var(--tw-text-opacity))}.pi .before\\:z-10:before{content:var(--tw-content);z-index:10}.pi .before\\:block:before{content:var(--tw-content);display:block}.pi .before\\:h-12:before{content:var(--tw-content);height:12px}.pi .before\\:h-14:before{content:var(--tw-content);height:14px}.pi .before\\:h-18:before{content:var(--tw-content);height:18px}.pi .before\\:h-22:before{content:var(--tw-content);height:22px}.pi .before\\:h-28:before{content:var(--tw-content);height:28px}.pi .before\\:h-full:before{content:var(--tw-content);height:100%}.pi .before\\:w-12:before{content:var(--tw-content);width:12px}.pi .before\\:w-14:before{content:var(--tw-content);width:14px}.pi .before\\:w-18:before{content:var(--tw-content);width:18px}.pi .before\\:w-22:before{content:var(--tw-content);width:22px}.pi .before\\:w-28:before{content:var(--tw-content);width:28px}.pi .before\\:w-full:before{content:var(--tw-content);width:100%}.pi .before\\:translate-x-2:before{--tw-translate-x:2px}.pi .before\\:scale-10:before,.pi .before\\:translate-x-2:before{content:var(--tw-content);transform:translate(var(--tw-translate-x),var(--tw-translate-y)) rotate(var(--tw-rotate)) skew(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y))}.pi .before\\:scale-10:before{--tw-scale-x:.1;--tw-scale-y:.1}.pi .before\\:rounded-3xl:before{border-radius:24px;content:var(--tw-content)}.pi .before\\:rounded-full:before{border-radius:9999px;content:var(--tw-content)}.pi .before\\:border:before{border-width:1px;content:var(--tw-content)}.pi .before\\:bg-primary:before{content:var(--tw-content);--tw-bg-opacity:1;background-color:rgb(var(--be-primary)/var(--tw-bg-opacity))}.pi .before\\:bg-white:before{content:var(--tw-content);--tw-bg-opacity:1;background-color:rgb(255 255 255/var(--tw-bg-opacity))}.pi .before\\:opacity-0:before{content:var(--tw-content);opacity:0}.pi .before\\:transition:before{content:var(--tw-content);transition-duration:.15s;transition-property:color,background-color,border-color,text-decoration-color,fill,stroke,opacity,box-shadow,transform,filter,-webkit-backdrop-filter;transition-property:color,background-color,border-color,text-decoration-color,fill,stroke,opacity,box-shadow,transform,filter,backdrop-filter;transition-property:color,background-color,border-color,text-decoration-color,fill,stroke,opacity,box-shadow,transform,filter,backdrop-filter,-webkit-backdrop-filter;transition-timing-function:cubic-bezier(.4,0,.2,1)}.pi .before\\:transition-transform:before{content:var(--tw-content);transition-duration:.15s;transition-property:transform;transition-timing-function:cubic-bezier(.4,0,.2,1)}.pi .before\\:duration-200:before{content:var(--tw-content);transition-duration:.2s}.pi .after\\:pointer-events-none:after{content:var(--tw-content);pointer-events:none}.pi .after\\:absolute:after{content:var(--tw-content);position:absolute}.pi .after\\:inset-0:after{content:var(--tw-content);top:0;right:0;bottom:0;left:0}.pi .checked\\:border-danger:checked{--tw-border-opacity:1;border-color:rgb(239 68 68/var(--tw-border-opacity))}.pi .checked\\:border-primary:checked{--tw-border-opacity:1;border-color:rgb(var(--be-primary)/var(--tw-border-opacity))}.pi .checked\\:bg-danger:checked{--tw-bg-opacity:1;background-color:rgb(239 68 68/var(--tw-bg-opacity))}.pi .checked\\:bg-primary:checked{--tw-bg-opacity:1;background-color:rgb(var(--be-primary)/var(--tw-bg-opacity))}.pi .checked\\:before\\:translate-x-14:checked:before{--tw-translate-x:14px}.pi .checked\\:before\\:translate-x-14:checked:before,.pi .checked\\:before\\:translate-x-20:checked:before{content:var(--tw-content);transform:translate(var(--tw-translate-x),var(--tw-translate-y)) rotate(var(--tw-rotate)) skew(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y))}.pi .checked\\:before\\:translate-x-20:checked:before{--tw-translate-x:20px}.pi .checked\\:before\\:translate-x-24:checked:before{--tw-translate-x:24px}.pi .checked\\:before\\:translate-x-24:checked:before,.pi .checked\\:before\\:translate-x-30:checked:before{content:var(--tw-content);transform:translate(var(--tw-translate-x),var(--tw-translate-y)) rotate(var(--tw-rotate)) skew(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y))}.pi .checked\\:before\\:translate-x-30:checked:before{--tw-translate-x:30px}.pi .checked\\:before\\:translate-x-36:checked:before{--tw-translate-x:36px}.pi .checked\\:before\\:scale-\\[\\.65\\]:checked:before,.pi .checked\\:before\\:translate-x-36:checked:before{content:var(--tw-content);transform:translate(var(--tw-translate-x),var(--tw-translate-y)) rotate(var(--tw-rotate)) skew(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y))}.pi .checked\\:before\\:scale-\\[\\.65\\]:checked:before{--tw-scale-x:.65;--tw-scale-y:.65}.pi .checked\\:before\\:border-white:checked:before{content:var(--tw-content);--tw-border-opacity:1;border-color:rgb(255 255 255/var(--tw-border-opacity))}.pi .checked\\:before\\:opacity-100:checked:before{content:var(--tw-content);opacity:1}.pi .focus-within\\:border-primary\\/60:focus-within{border-color:rgb(var(--be-primary)/.6)}.pi .focus-within\\:ring:focus-within{--tw-ring-offset-shadow:var(--tw-ring-inset) 0 0 0 var(--tw-ring-offset-width) var(--tw-ring-offset-color);--tw-ring-shadow:var(--tw-ring-inset) 0 0 0 calc(4px + var(--tw-ring-offset-width)) var(--tw-ring-color);box-shadow:var(--tw-ring-offset-shadow),var(--tw-ring-shadow),var(--tw-shadow,0 0 #0000)}.pi .focus-within\\:ring-primary\\/focus:focus-within{--tw-ring-color:rgb(var(--be-primary)/var(--be-focus-opacity))}.pi .hover\\:scale-110:hover{--tw-scale-x:1.1;--tw-scale-y:1.1;transform:translate(var(--tw-translate-x),var(--tw-translate-y)) rotate(var(--tw-rotate)) skew(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y))}.pi .hover\\:border-chip\\/90:hover{border-color:rgb(var(--be-background-chip)/.9)}.pi .hover\\:border-danger:hover{--tw-border-opacity:1;border-color:rgb(239 68 68/var(--tw-border-opacity))}.pi .hover\\:border-danger\\/90:hover{border-color:#ef4444e6}.pi .hover\\:border-paper\\/90:hover{border-color:rgb(var(--be-paper)/.9)}.pi .hover\\:border-positive:hover{--tw-border-opacity:1;border-color:rgb(34 197 94/var(--tw-border-opacity))}.pi .hover\\:border-primary:hover{--tw-border-opacity:1;border-color:rgb(var(--be-primary)/var(--tw-border-opacity))}.pi .hover\\:border-primary-dark:hover{--tw-border-opacity:1;border-color:rgb(var(--be-primary-dark)/var(--tw-border-opacity))}.pi .hover\\:bg-chip\\/90:hover{background-color:rgb(var(--be-background-chip)/.9)}.pi .hover\\:bg-danger\\/4:hover{background-color:#ef44440a}.pi .hover\\:bg-danger\\/90:hover{background-color:#ef4444e6}.pi .hover\\:bg-fg-base\\/15:hover{background-color:rgb(var(--be-foreground-base)/15%)}.pi .hover\\:bg-hover:hover{background-color:rgb(var(--be-foreground-base)/var(--be-hover-opacity))}.pi .hover\\:bg-paper\\/90:hover{background-color:rgb(var(--be-paper)/.9)}.pi .hover\\:bg-positive\\/4:hover{background-color:#22c55e0a}.pi .hover\\:bg-primary-dark:hover{--tw-bg-opacity:1;background-color:rgb(var(--be-primary-dark)/var(--tw-bg-opacity))}.pi .hover\\:bg-primary\\/4:hover{background-color:rgb(var(--be-primary)/4%)}.pi .hover\\:bg-primary\\/focus:hover{background-color:rgb(var(--be-primary)/var(--be-focus-opacity))}.pi .hover\\:bg-primary\\/hover:hover{background-color:rgb(var(--be-primary)/var(--be-hover-opacity))}.pi .hover\\:bg-white:hover{--tw-bg-opacity:1;background-color:rgb(255 255 255/var(--tw-bg-opacity))}.pi .hover\\:bg-white\\/20:hover{background-color:#fff3}.pi .hover\\:bg-white\\/hover:hover{background-color:rgb(255 255 255/var(--be-hover-opacity))}.pi .hover\\:text-main:hover{color:rgb(var(--be-foreground-base)/var(--be-text-main-opacity))}.pi .hover\\:text-primary-dark:hover{--tw-text-opacity:1;color:rgb(var(--be-primary-dark)/var(--tw-text-opacity))}.pi .hover\\:underline:hover{text-decoration-line:underline}.pi .hover\\:shadow-md:hover{--tw-shadow:0 4px 6px -1px rgba(0,0,0,.1),0 2px 4px -2px rgba(0,0,0,.1);--tw-shadow-colored:0 4px 6px -1px var(--tw-shadow-color),0 2px 4px -2px var(--tw-shadow-color);box-shadow:var(--tw-ring-offset-shadow,0 0 #0000),var(--tw-ring-shadow,0 0 #0000),var(--tw-shadow)}.pi .before\\:hover\\:bg-primary-dark:hover:before{content:var(--tw-content);--tw-bg-opacity:1;background-color:rgb(var(--be-primary-dark)/var(--tw-bg-opacity))}.pi .hover\\:after\\:bg-black\\/5:hover:after{background-color:#0000000d;content:var(--tw-content)}.pi .checked\\:hover\\:border-primary-dark:hover:checked{--tw-border-opacity:1;border-color:rgb(var(--be-primary-dark)/var(--tw-border-opacity))}.pi .focus\\:border-danger\\/60:focus{border-color:#ef444499}.pi .focus\\:border-primary\\/60:focus{border-color:rgb(var(--be-primary)/.6)}.pi .focus\\:bg-primary:focus{--tw-bg-opacity:1;background-color:rgb(var(--be-primary)/var(--tw-bg-opacity))}.pi .focus\\:text-on-primary:focus{--tw-text-opacity:1;color:rgb(var(--be-on-primary)/var(--tw-text-opacity))}.pi .focus\\:outline-none:focus{outline:2px solid transparent;outline-offset:2px}.pi .focus\\:ring:focus{--tw-ring-offset-shadow:var(--tw-ring-inset) 0 0 0 var(--tw-ring-offset-width) var(--tw-ring-offset-color);--tw-ring-shadow:var(--tw-ring-inset) 0 0 0 calc(4px + var(--tw-ring-offset-width)) var(--tw-ring-color);box-shadow:var(--tw-ring-offset-shadow),var(--tw-ring-shadow),var(--tw-shadow,0 0 #0000)}.pi .focus\\:ring-danger\\/focus:focus{--tw-ring-color:rgb(239 68 68/var(--be-focus-opacity))}.pi .focus\\:ring-primary\\/focus:focus{--tw-ring-color:rgb(var(--be-primary)/var(--be-focus-opacity))}.pi .focus\\:after\\:bg-black\\/10:focus:after{background-color:#0000001a;content:var(--tw-content)}.pi .focus-visible\\:bg-primary\\/focus:focus-visible{background-color:rgb(var(--be-primary)/var(--be-focus-opacity))}.pi .focus-visible\\:outline:focus-visible{outline-color:rgb(var(--be-primary-lighter)/1);outline-style:solid;outline-width:2px}.pi .focus-visible\\:outline-primary-light:focus-visible{outline-color:rgb(var(--be-primary-light)/1)}.pi .focus-visible\\:ring:focus-visible{--tw-ring-offset-shadow:var(--tw-ring-inset) 0 0 0 var(--tw-ring-offset-width) var(--tw-ring-offset-color);--tw-ring-shadow:var(--tw-ring-inset) 0 0 0 calc(4px + var(--tw-ring-offset-width)) var(--tw-ring-color);box-shadow:var(--tw-ring-offset-shadow),var(--tw-ring-shadow),var(--tw-shadow,0 0 #0000)}.pi .focus-visible\\:ring-2:focus-visible{--tw-ring-offset-shadow:var(--tw-ring-inset) 0 0 0 var(--tw-ring-offset-width) var(--tw-ring-offset-color);--tw-ring-shadow:var(--tw-ring-inset) 0 0 0 calc(2px + var(--tw-ring-offset-width)) var(--tw-ring-color);box-shadow:var(--tw-ring-offset-shadow),var(--tw-ring-shadow),var(--tw-shadow,0 0 #0000)}.pi .focus-visible\\:ring-offset-2:focus-visible{--tw-ring-offset-width:2px}.pi .disabled\\:pointer-events-none:disabled{pointer-events:none}.pi .disabled\\:cursor-default:disabled{cursor:default}.pi .disabled\\:border-disabled-bg:disabled{border-color:rgb(var(--be-foreground-base)/var(--be-disabled-bg-opacity))}.pi .disabled\\:border-disabled-fg:disabled{border-color:rgb(var(--be-foreground-base)/var(--be-disabled-fg-opacity))}.pi .disabled\\:border-transparent:disabled{border-color:transparent}.pi .disabled\\:border-white\\/70:disabled{border-color:#ffffffb3}.pi .disabled\\:border-r-transparent:disabled{border-right-color:transparent}.pi .disabled\\:bg-disabled:disabled{background-color:rgb(var(--be-foreground-base)/var(--be-disabled-bg-opacity))}.pi .disabled\\:bg-transparent:disabled{background-color:transparent}.pi .disabled\\:text-disabled:disabled{color:rgb(var(--be-foreground-base)/var(--be-disabled-fg-opacity))}.pi .disabled\\:text-white\\/70:disabled{color:#ffffffb3}.pi .disabled\\:shadow-none:disabled{--tw-shadow:0 0 #0000;--tw-shadow-colored:0 0 #0000;box-shadow:var(--tw-ring-offset-shadow,0 0 #0000),var(--tw-ring-shadow,0 0 #0000),var(--tw-shadow)}.pi .disabled\\:before\\:bg-disabled-fg:disabled:before{background-color:rgb(var(--be-foreground-base)/var(--be-disabled-fg-opacity));content:var(--tw-content)}.pi :is(.dark .dark\\:bg-chip){--tw-bg-opacity:1;background-color:rgb(var(--be-background-chip)/var(--tw-bg-opacity))}.pi :is(.dark .dark\\:text-white\\/50){color:#ffffff80}.pi :is(.dark .dark\\:checked\\:border-primary-dark:checked){--tw-border-opacity:1;border-color:rgb(var(--be-primary-dark)/var(--tw-border-opacity))}.pi :is(.dark .dark\\:checked\\:bg-primary-dark:checked){--tw-bg-opacity:1;background-color:rgb(var(--be-primary-dark)/var(--tw-bg-opacity))}@media (min-width:640px){.pi .sm\\:text-sm{font-size:14px;line-height:20px}}@media (min-width:768px){.pi .md\\:text-lg{font-size:18px;line-height:28px}}.pi .\\[\\&\\>\\.tree-label\\]\\:focus-visible\\:ring:focus-visible>.tree-label{--tw-ring-offset-shadow:var(--tw-ring-inset) 0 0 0 var(--tw-ring-offset-width) var(--tw-ring-offset-color);--tw-ring-shadow:var(--tw-ring-inset) 0 0 0 calc(4px + var(--tw-ring-offset-width)) var(--tw-ring-color);box-shadow:var(--tw-ring-offset-shadow),var(--tw-ring-shadow),var(--tw-shadow,0 0 #0000)}.pi .\\[\\&\\>\\.tree-label\\]\\:focus-visible\\:ring-2:focus-visible>.tree-label{--tw-ring-offset-shadow:var(--tw-ring-inset) 0 0 0 var(--tw-ring-offset-width) var(--tw-ring-offset-color);--tw-ring-shadow:var(--tw-ring-inset) 0 0 0 calc(2px + var(--tw-ring-offset-width)) var(--tw-ring-color);box-shadow:var(--tw-ring-offset-shadow),var(--tw-ring-shadow),var(--tw-shadow,0 0 #0000)}.pi .\\[\\&\\>\\.tree-label\\]\\:focus-visible\\:ring-inset:focus-visible>.tree-label{--tw-ring-inset:inset}
`, tx = "useandom-26T198340PX75pxJACKVERYMINDBUSHWOLF_GQZbfghjklqvwyzrict";
let hp = (t = 21) => {
  let e = "", n = crypto.getRandomValues(new Uint8Array(t));
  for (; t--; )
    e += tx[n[t] & 63];
  return e;
};
class nx {
  constructor(e, n) {
    Te(this, "timerId");
    Te(this, "createdAt", 0);
    this.callback = e, this.remaining = n, this.resume();
  }
  pause() {
    clearTimeout(this.timerId), this.remaining -= Date.now() - this.createdAt;
  }
  resume() {
    this.createdAt = Date.now(), this.timerId && clearTimeout(this.timerId), this.timerId = setTimeout(this.callback, this.remaining);
  }
  clear() {
    clearTimeout(this.timerId);
  }
}
const rx = 1;
function ix(t) {
  switch (t) {
    case "danger":
      return 8e3;
    case "loading":
      return 0;
    default:
      return 3e3;
  }
}
const fp = Ml()(
  np((t, e) => ({
    toasts: [],
    add: (n, r) => {
      const i = e().toasts.length + 1 - rx;
      i > 0 && t((h) => {
        h.toasts.splice(0, i);
      });
      const f = (r == null ? void 0 : r.id) || hp(6), g = (r == null ? void 0 : r.type) || "positive", l = (r == null ? void 0 : r.duration) ?? ix(g), s = {
        timer: l > 0 ? new nx(() => e().remove(f), l) : null,
        message: n,
        ...r,
        id: f,
        type: g,
        position: (r == null ? void 0 : r.position) || "bottom-center",
        duration: l,
        disableExitAnimation: r == null ? void 0 : r.disableExitAnimation,
        disableEnterAnimation: r == null ? void 0 : r.disableEnterAnimation
      }, a = e().toasts.findIndex((h) => h.id === s.id);
      a > -1 ? t((h) => {
        h.toasts[a] = s;
      }) : t((h) => {
        h.toasts.push(s);
      });
    },
    remove: (n) => {
      const r = e().toasts.filter((i) => {
        var f;
        return n === i.id ? ((f = i.timer) == null || f.clear(), !1) : !0;
      });
      t((i) => {
        i.toasts = r;
      });
    }
  }))
);
function Er() {
  return fp.getState();
}
function Fr(t, e) {
  Er().add(t, e);
}
Fr.danger = (t, e) => {
  Er().add(t, { ...e, type: "danger" });
};
Fr.positive = (t, e) => {
  Er().add(t, { ...e, type: "positive" });
};
Fr.loading = (t, e) => {
  Er().add(t, { ...e, type: "loading" });
};
const dp = Gn({
  transformPagePoint: (t) => t,
  isStatic: !1,
  reducedMotion: "never"
}), ro = Gn({}), Ll = Gn(null), io = typeof document < "u", Bl = io ? Ci : Se, zl = Gn({ strict: !1 }), Nl = (t) => t.replace(/([a-z])([A-Z])/g, "$1-$2").toLowerCase(), sx = "framerAppearId", pp = "data-" + Nl(sx);
function ox(t, e, n, r) {
  const { visualElement: i } = ze(ro), f = ze(zl), g = ze(Ll), l = ze(dp).reducedMotion, s = de();
  r = r || f.renderer, !s.current && r && (s.current = r(t, {
    visualState: e,
    parent: i,
    props: n,
    presenceContext: g,
    blockInitialAnimation: g ? g.initial === !1 : !1,
    reducedMotionConfig: l
  }));
  const a = s.current;
  Df(() => {
    a && a.update(n, g);
  });
  const h = de(!!(n[pp] && !window.HandoffComplete));
  return Bl(() => {
    a && (a.render(), h.current && a.animationState && a.animationState.animateChanges());
  }), Se(() => {
    a && (a.updateFeatures(), !h.current && a.animationState && a.animationState.animateChanges(), h.current && (h.current = !1, window.HandoffComplete = !0));
  }), a;
}
function gp(t) {
  return t && typeof t == "object" && Object.prototype.hasOwnProperty.call(t, "current");
}
function ax(t, e, n) {
  return Oe(
    (r) => {
      r && t.mount && t.mount(r), e && (r ? e.mount(r) : e.unmount()), n && (typeof n == "function" ? n(r) : gp(n) && (n.current = r));
    },
    /**
     * Only pass a new ref callback to React if we've received a visual element
     * factory. Otherwise we'll be mounting/remounting every time externalRef
     * or other dependencies change.
     */
    [e]
  );
}
function pi(t) {
  return typeof t == "string" || Array.isArray(t);
}
function so(t) {
  return t !== null && typeof t == "object" && typeof t.start == "function";
}
const jl = [
  "animate",
  "whileInView",
  "whileFocus",
  "whileHover",
  "whileTap",
  "whileDrag",
  "exit"
], $l = ["initial", ...jl];
function oo(t) {
  return so(t.animate) || $l.some((e) => pi(t[e]));
}
function mp(t) {
  return !!(oo(t) || t.variants);
}
function lx(t, e) {
  if (oo(t)) {
    const { initial: n, animate: r } = t;
    return {
      initial: n === !1 || pi(n) ? n : void 0,
      animate: pi(r) ? r : void 0
    };
  }
  return t.inherit !== !1 ? e : {};
}
function cx(t) {
  const { initial: e, animate: n } = lx(t, ze(ro));
  return He(() => ({ initial: e, animate: n }), [Au(e), Au(n)]);
}
function Au(t) {
  return Array.isArray(t) ? t.join(" ") : t;
}
const Pu = {
  animation: [
    "animate",
    "variants",
    "whileHover",
    "whileTap",
    "exit",
    "whileInView",
    "whileFocus",
    "whileDrag"
  ],
  exit: ["exit"],
  drag: ["drag", "dragControls"],
  focus: ["whileFocus"],
  hover: ["whileHover", "onHoverStart", "onHoverEnd"],
  tap: ["whileTap", "onTap", "onTapStart", "onTapCancel"],
  pan: ["onPan", "onPanStart", "onPanSessionStart", "onPanEnd"],
  inView: ["whileInView", "onViewportEnter", "onViewportLeave"],
  layout: ["layout", "layoutId"]
}, gi = {};
for (const t in Pu)
  gi[t] = {
    isEnabled: (e) => Pu[t].some((n) => !!e[n])
  };
function Ra(t) {
  for (const e in t)
    gi[e] = {
      ...gi[e],
      ...t[e]
    };
}
const vp = Gn({}), ux = Gn({}), hx = Symbol.for("motionComponentSymbol");
function fx({ preloadedFeatures: t, createVisualElement: e, useRender: n, useVisualState: r, Component: i }) {
  t && Ra(t);
  function f(l, s) {
    let a;
    const h = {
      ...ze(dp),
      ...l,
      layoutId: dx(l)
    }, { isStatic: o } = h, u = cx(l), c = r(l, o);
    if (!o && io) {
      u.visualElement = ox(i, c, h, e);
      const d = ze(ux), m = ze(zl).strict;
      u.visualElement && (a = u.visualElement.loadFeatures(
        // Note: Pass the full new combined props to correctly re-render dynamic feature components.
        h,
        m,
        t,
        d
      ));
    }
    return ge.createElement(
      ro.Provider,
      { value: u },
      a && u.visualElement ? ge.createElement(a, { visualElement: u.visualElement, ...h }) : null,
      n(i, l, ax(c, u.visualElement, s), c, o, u.visualElement)
    );
  }
  const g = Je(f);
  return g[hx] = i, g;
}
function dx({ layoutId: t }) {
  const e = ze(vp).id;
  return e && t !== void 0 ? e + "-" + t : t;
}
function px(t) {
  function e(r, i = {}) {
    return fx(t(r, i));
  }
  if (typeof Proxy > "u")
    return e;
  const n = /* @__PURE__ */ new Map();
  return new Proxy(e, {
    /**
     * Called when `motion` is referenced with a prop: `motion.div`, `motion.input` etc.
     * The prop name is passed through as `key` and we can use that to generate a `motion`
     * DOM component with that name.
     */
    get: (r, i) => (n.has(i) || n.set(i, e(i)), n.get(i))
  });
}
const gx = [
  "animate",
  "circle",
  "defs",
  "desc",
  "ellipse",
  "g",
  "image",
  "line",
  "filter",
  "marker",
  "mask",
  "metadata",
  "path",
  "pattern",
  "polygon",
  "polyline",
  "rect",
  "stop",
  "switch",
  "symbol",
  "svg",
  "text",
  "tspan",
  "use",
  "view"
];
function Vl(t) {
  return (
    /**
     * If it's not a string, it's a custom React component. Currently we only support
     * HTML custom React components.
     */
    typeof t != "string" || /**
     * If it contains a dash, the element is a custom HTML webcomponent.
     */
    t.includes("-") ? !1 : (
      /**
       * If it's in our list of lowercase SVG tags, it's an SVG component
       */
      !!(gx.indexOf(t) > -1 || /**
       * If it contains a capital letter, it's an SVG component
       */
      /[A-Z]/.test(t))
    )
  );
}
const mx = {}, Di = [
  "transformPerspective",
  "x",
  "y",
  "z",
  "translateX",
  "translateY",
  "translateZ",
  "scale",
  "scaleX",
  "scaleY",
  "rotate",
  "rotateX",
  "rotateY",
  "rotateZ",
  "skew",
  "skewX",
  "skewY"
], Jn = new Set(Di);
function bp(t, { layout: e, layoutId: n }) {
  return Jn.has(t) || t.startsWith("origin") || (e || n !== void 0) && (!!mx[t] || t === "opacity");
}
const Ct = (t) => !!(t && t.getVelocity), vx = {
  x: "translateX",
  y: "translateY",
  z: "translateZ",
  transformPerspective: "perspective"
}, bx = Di.length;
function yx(t, { enableHardwareAcceleration: e = !0, allowTransformNone: n = !0 }, r, i) {
  let f = "";
  for (let g = 0; g < bx; g++) {
    const l = Di[g];
    if (t[l] !== void 0) {
      const s = vx[l] || l;
      f += `${s}(${t[l]}) `;
    }
  }
  return e && !t.z && (f += "translateZ(0)"), f = f.trim(), i ? f = i(t, r ? "" : f) : n && r && (f = "none"), f;
}
const yp = (t) => (e) => typeof e == "string" && e.startsWith(t), wp = yp("--"), La = yp("var(--"), wx = /var\s*\(\s*--[\w-]+(\s*,\s*(?:(?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)+)?\s*\)/g, xx = (t, e) => e && typeof t == "number" ? e.transform(t) : t, kr = (t, e, n) => Math.min(Math.max(n, t), e), Qn = {
  test: (t) => typeof t == "number",
  parse: parseFloat,
  transform: (t) => t
}, ti = {
  ...Qn,
  transform: (t) => kr(0, 1, t)
}, qi = {
  ...Qn,
  default: 1
}, ni = (t) => Math.round(t * 1e5) / 1e5, ao = /(-)?([\d]*\.?[\d])+/g, xp = /(#[0-9a-f]{3,8}|(rgb|hsl)a?\((-?[\d\.]+%?[,\s]+){2}(-?[\d\.]+%?)\s*[\,\/]?\s*[\d\.]*%?\))/gi, Cx = /^(#[0-9a-f]{3,8}|(rgb|hsl)a?\((-?[\d\.]+%?[,\s]+){2}(-?[\d\.]+%?)\s*[\,\/]?\s*[\d\.]*%?\))$/i;
function Ai(t) {
  return typeof t == "string";
}
const Pi = (t) => ({
  test: (e) => Ai(e) && e.endsWith(t) && e.split(" ").length === 1,
  parse: parseFloat,
  transform: (e) => `${e}${t}`
}), on = Pi("deg"), mr = Pi("%"), Ce = Pi("px"), _x = Pi("vh"), Sx = Pi("vw"), Mu = {
  ...mr,
  parse: (t) => mr.parse(t) / 100,
  transform: (t) => mr.transform(t * 100)
}, Fu = {
  ...Qn,
  transform: Math.round
}, Cp = {
  // Border props
  borderWidth: Ce,
  borderTopWidth: Ce,
  borderRightWidth: Ce,
  borderBottomWidth: Ce,
  borderLeftWidth: Ce,
  borderRadius: Ce,
  radius: Ce,
  borderTopLeftRadius: Ce,
  borderTopRightRadius: Ce,
  borderBottomRightRadius: Ce,
  borderBottomLeftRadius: Ce,
  // Positioning props
  width: Ce,
  maxWidth: Ce,
  height: Ce,
  maxHeight: Ce,
  size: Ce,
  top: Ce,
  right: Ce,
  bottom: Ce,
  left: Ce,
  // Spacing props
  padding: Ce,
  paddingTop: Ce,
  paddingRight: Ce,
  paddingBottom: Ce,
  paddingLeft: Ce,
  margin: Ce,
  marginTop: Ce,
  marginRight: Ce,
  marginBottom: Ce,
  marginLeft: Ce,
  // Transform props
  rotate: on,
  rotateX: on,
  rotateY: on,
  rotateZ: on,
  scale: qi,
  scaleX: qi,
  scaleY: qi,
  scaleZ: qi,
  skew: on,
  skewX: on,
  skewY: on,
  distance: Ce,
  translateX: Ce,
  translateY: Ce,
  translateZ: Ce,
  x: Ce,
  y: Ce,
  z: Ce,
  perspective: Ce,
  transformPerspective: Ce,
  opacity: ti,
  originX: Mu,
  originY: Mu,
  originZ: Ce,
  // Misc
  zIndex: Fu,
  // SVG
  fillOpacity: ti,
  strokeOpacity: ti,
  numOctaves: Fu
};
function Hl(t, e, n, r) {
  const { style: i, vars: f, transform: g, transformOrigin: l } = t;
  let s = !1, a = !1, h = !0;
  for (const o in e) {
    const u = e[o];
    if (wp(o)) {
      f[o] = u;
      continue;
    }
    const c = Cp[o], d = xx(u, c);
    if (Jn.has(o)) {
      if (s = !0, g[o] = d, !h)
        continue;
      u !== (c.default || 0) && (h = !1);
    } else
      o.startsWith("origin") ? (a = !0, l[o] = d) : i[o] = d;
  }
  if (e.transform || (s || r ? i.transform = yx(t.transform, n, h, r) : i.transform && (i.transform = "none")), a) {
    const { originX: o = "50%", originY: u = "50%", originZ: c = 0 } = l;
    i.transformOrigin = `${o} ${u} ${c}`;
  }
}
const Wl = () => ({
  style: {},
  transform: {},
  transformOrigin: {},
  vars: {}
});
function _p(t, e, n) {
  for (const r in e)
    !Ct(e[r]) && !bp(r, n) && (t[r] = e[r]);
}
function Tx({ transformTemplate: t }, e, n) {
  return He(() => {
    const r = Wl();
    return Hl(r, e, { enableHardwareAcceleration: !n }, t), Object.assign({}, r.vars, r.style);
  }, [e]);
}
function Ex(t, e, n) {
  const r = t.style || {}, i = {};
  return _p(i, r, t), Object.assign(i, Tx(t, e, n)), t.transformValues ? t.transformValues(i) : i;
}
function kx(t, e, n) {
  const r = {}, i = Ex(t, e, n);
  return t.drag && t.dragListener !== !1 && (r.draggable = !1, i.userSelect = i.WebkitUserSelect = i.WebkitTouchCallout = "none", i.touchAction = t.drag === !0 ? "none" : `pan-${t.drag === "x" ? "y" : "x"}`), t.tabIndex === void 0 && (t.onTap || t.onTapStart || t.whileTap) && (r.tabIndex = 0), r.style = i, r;
}
const Ox = /* @__PURE__ */ new Set([
  "animate",
  "exit",
  "variants",
  "initial",
  "style",
  "values",
  "variants",
  "transition",
  "transformTemplate",
  "transformValues",
  "custom",
  "inherit",
  "onBeforeLayoutMeasure",
  "onAnimationStart",
  "onAnimationComplete",
  "onUpdate",
  "onDragStart",
  "onDrag",
  "onDragEnd",
  "onMeasureDragConstraints",
  "onDirectionLock",
  "onDragTransitionEnd",
  "_dragX",
  "_dragY",
  "onHoverStart",
  "onHoverEnd",
  "onViewportEnter",
  "onViewportLeave",
  "globalTapTarget",
  "ignoreStrict",
  "viewport"
]);
function Cs(t) {
  return t.startsWith("while") || t.startsWith("drag") && t !== "draggable" || t.startsWith("layout") || t.startsWith("onTap") || t.startsWith("onPan") || t.startsWith("onLayout") || Ox.has(t);
}
let Sp = (t) => !Cs(t);
function Dx(t) {
  t && (Sp = (e) => e.startsWith("on") ? !Cs(e) : t(e));
}
try {
  Dx(require("@emotion/is-prop-valid").default);
} catch {
}
function Ax(t, e, n) {
  const r = {};
  for (const i in t)
    i === "values" && typeof t.values == "object" || (Sp(i) || n === !0 && Cs(i) || !e && !Cs(i) || // If trying to use native HTML drag events, forward drag listeners
    t.draggable && i.startsWith("onDrag")) && (r[i] = t[i]);
  return r;
}
function Iu(t, e, n) {
  return typeof t == "string" ? t : Ce.transform(e + n * t);
}
function Px(t, e, n) {
  const r = Iu(e, t.x, t.width), i = Iu(n, t.y, t.height);
  return `${r} ${i}`;
}
const Mx = {
  offset: "stroke-dashoffset",
  array: "stroke-dasharray"
}, Fx = {
  offset: "strokeDashoffset",
  array: "strokeDasharray"
};
function Ix(t, e, n = 1, r = 0, i = !0) {
  t.pathLength = 1;
  const f = i ? Mx : Fx;
  t[f.offset] = Ce.transform(-r);
  const g = Ce.transform(e), l = Ce.transform(n);
  t[f.array] = `${g} ${l}`;
}
function Ul(t, {
  attrX: e,
  attrY: n,
  attrScale: r,
  originX: i,
  originY: f,
  pathLength: g,
  pathSpacing: l = 1,
  pathOffset: s = 0,
  // This is object creation, which we try to avoid per-frame.
  ...a
}, h, o, u) {
  if (Hl(t, a, h, u), o) {
    t.style.viewBox && (t.attrs.viewBox = t.style.viewBox);
    return;
  }
  t.attrs = t.style, t.style = {};
  const { attrs: c, style: d, dimensions: m } = t;
  c.transform && (m && (d.transform = c.transform), delete c.transform), m && (i !== void 0 || f !== void 0 || d.transform) && (d.transformOrigin = Px(m, i !== void 0 ? i : 0.5, f !== void 0 ? f : 0.5)), e !== void 0 && (c.x = e), n !== void 0 && (c.y = n), r !== void 0 && (c.scale = r), g !== void 0 && Ix(c, g, l, s, !1);
}
const Tp = () => ({
  ...Wl(),
  attrs: {}
}), Xl = (t) => typeof t == "string" && t.toLowerCase() === "svg";
function Rx(t, e, n, r) {
  const i = He(() => {
    const f = Tp();
    return Ul(f, e, { enableHardwareAcceleration: !1 }, Xl(r), t.transformTemplate), {
      ...f.attrs,
      style: { ...f.style }
    };
  }, [e]);
  if (t.style) {
    const f = {};
    _p(f, t.style, t), i.style = { ...f, ...i.style };
  }
  return i;
}
function Lx(t = !1) {
  return (n, r, i, { latestValues: f }, g) => {
    const s = (Vl(n) ? Rx : kx)(r, f, g, n), h = {
      ...Ax(r, typeof n == "string", t),
      ...s,
      ref: i
    }, { children: o } = r, u = He(() => Ct(o) ? o.get() : o, [o]);
    return Bv(n, {
      ...h,
      children: u
    });
  };
}
function Ep(t, { style: e, vars: n }, r, i) {
  Object.assign(t.style, e, i && i.getProjectionStyles(r));
  for (const f in n)
    t.style.setProperty(f, n[f]);
}
const kp = /* @__PURE__ */ new Set([
  "baseFrequency",
  "diffuseConstant",
  "kernelMatrix",
  "kernelUnitLength",
  "keySplines",
  "keyTimes",
  "limitingConeAngle",
  "markerHeight",
  "markerWidth",
  "numOctaves",
  "targetX",
  "targetY",
  "surfaceScale",
  "specularConstant",
  "specularExponent",
  "stdDeviation",
  "tableValues",
  "viewBox",
  "gradientTransform",
  "pathLength",
  "startOffset",
  "textLength",
  "lengthAdjust"
]);
function Op(t, e, n, r) {
  Ep(t, e, void 0, r);
  for (const i in e.attrs)
    t.setAttribute(kp.has(i) ? i : Nl(i), e.attrs[i]);
}
function Yl(t, e) {
  const { style: n } = t, r = {};
  for (const i in n)
    (Ct(n[i]) || e.style && Ct(e.style[i]) || bp(i, t)) && (r[i] = n[i]);
  return r;
}
function Dp(t, e) {
  const n = Yl(t, e);
  for (const r in t)
    if (Ct(t[r]) || Ct(e[r])) {
      const i = Di.indexOf(r) !== -1 ? "attr" + r.charAt(0).toUpperCase() + r.substring(1) : r;
      n[i] = t[r];
    }
  return n;
}
function Gl(t, e, n, r = {}, i = {}) {
  return typeof e == "function" && (e = e(n !== void 0 ? n : t.custom, r, i)), typeof e == "string" && (e = t.variants && t.variants[e]), typeof e == "function" && (e = e(n !== void 0 ? n : t.custom, r, i)), e;
}
function Ap(t) {
  const e = de(null);
  return e.current === null && (e.current = t()), e.current;
}
const _s = (t) => Array.isArray(t), Bx = (t) => !!(t && typeof t == "object" && t.mix && t.toValue), zx = (t) => _s(t) ? t[t.length - 1] || 0 : t;
function Nx(t) {
  const e = Ct(t) ? t.get() : t;
  return Bx(e) ? e.toValue() : e;
}
function jx({ scrapeMotionValuesFromProps: t, createRenderState: e, onMount: n }, r, i, f) {
  const g = {
    latestValues: $x(r, i, f, t),
    renderState: e()
  };
  return n && (g.mount = (l) => n(r, l, g)), g;
}
const Pp = (t) => (e, n) => {
  const r = ze(ro), i = ze(Ll), f = () => jx(t, e, r, i);
  return n ? f() : Ap(f);
};
function $x(t, e, n, r) {
  const i = {}, f = r(t, {});
  for (const u in f)
    i[u] = Nx(f[u]);
  let { initial: g, animate: l } = t;
  const s = oo(t), a = mp(t);
  e && a && !s && t.inherit !== !1 && (g === void 0 && (g = e.initial), l === void 0 && (l = e.animate));
  let h = n ? n.initial === !1 : !1;
  h = h || g === !1;
  const o = h ? l : g;
  return o && typeof o != "boolean" && !so(o) && (Array.isArray(o) ? o : [o]).forEach((c) => {
    const d = Gl(t, c);
    if (!d)
      return;
    const { transitionEnd: m, transition: p, ...v } = d;
    for (const b in v) {
      let y = v[b];
      if (Array.isArray(y)) {
        const w = h ? y.length - 1 : 0;
        y = y[w];
      }
      y !== null && (i[b] = y);
    }
    for (const b in m)
      i[b] = m[b];
  }), i;
}
const tt = (t) => t;
class Ru {
  constructor() {
    this.order = [], this.scheduled = /* @__PURE__ */ new Set();
  }
  add(e) {
    if (!this.scheduled.has(e))
      return this.scheduled.add(e), this.order.push(e), !0;
  }
  remove(e) {
    const n = this.order.indexOf(e);
    n !== -1 && (this.order.splice(n, 1), this.scheduled.delete(e));
  }
  clear() {
    this.order.length = 0, this.scheduled.clear();
  }
}
function Vx(t) {
  let e = new Ru(), n = new Ru(), r = 0, i = !1, f = !1;
  const g = /* @__PURE__ */ new WeakSet(), l = {
    /**
     * Schedule a process to run on the next frame.
     */
    schedule: (s, a = !1, h = !1) => {
      const o = h && i, u = o ? e : n;
      return a && g.add(s), u.add(s) && o && i && (r = e.order.length), s;
    },
    /**
     * Cancel the provided callback from running on the next frame.
     */
    cancel: (s) => {
      n.remove(s), g.delete(s);
    },
    /**
     * Execute all schedule callbacks.
     */
    process: (s) => {
      if (i) {
        f = !0;
        return;
      }
      if (i = !0, [e, n] = [n, e], n.clear(), r = e.order.length, r)
        for (let a = 0; a < r; a++) {
          const h = e.order[a];
          h(s), g.has(h) && (l.schedule(h), t());
        }
      i = !1, f && (f = !1, l.process(s));
    }
  };
  return l;
}
const Zi = [
  "prepare",
  "read",
  "update",
  "preRender",
  "render",
  "postRender"
], Hx = 40;
function Wx(t, e) {
  let n = !1, r = !0;
  const i = {
    delta: 0,
    timestamp: 0,
    isProcessing: !1
  }, f = Zi.reduce((o, u) => (o[u] = Vx(() => n = !0), o), {}), g = (o) => f[o].process(i), l = () => {
    const o = performance.now();
    n = !1, i.delta = r ? 1e3 / 60 : Math.max(Math.min(o - i.timestamp, Hx), 1), i.timestamp = o, i.isProcessing = !0, Zi.forEach(g), i.isProcessing = !1, n && e && (r = !1, t(l));
  }, s = () => {
    n = !0, r = !0, i.isProcessing || t(l);
  };
  return { schedule: Zi.reduce((o, u) => {
    const c = f[u];
    return o[u] = (d, m = !1, p = !1) => (n || s(), c.schedule(d, m, p)), o;
  }, {}), cancel: (o) => Zi.forEach((u) => f[u].cancel(o)), state: i, steps: f };
}
const { schedule: rt, cancel: Ss, state: Ba, steps: VA } = Wx(typeof requestAnimationFrame < "u" ? requestAnimationFrame : tt, !0), Ux = {
  useVisualState: Pp({
    scrapeMotionValuesFromProps: Dp,
    createRenderState: Tp,
    onMount: (t, e, { renderState: n, latestValues: r }) => {
      rt.read(() => {
        try {
          n.dimensions = typeof e.getBBox == "function" ? e.getBBox() : e.getBoundingClientRect();
        } catch {
          n.dimensions = {
            x: 0,
            y: 0,
            width: 0,
            height: 0
          };
        }
      }), rt.render(() => {
        Ul(n, r, { enableHardwareAcceleration: !1 }, Xl(e.tagName), t.transformTemplate), Op(e, n);
      });
    }
  })
}, Xx = {
  useVisualState: Pp({
    scrapeMotionValuesFromProps: Yl,
    createRenderState: Wl
  })
};
function Yx(t, { forwardMotionProps: e = !1 }, n, r) {
  return {
    ...Vl(t) ? Ux : Xx,
    preloadedFeatures: n,
    useRender: Lx(e),
    createVisualElement: r,
    Component: t
  };
}
function In(t, e, n, r = { passive: !0 }) {
  return t.addEventListener(e, n, r), () => t.removeEventListener(e, n);
}
const Gx = (t) => t.pointerType === "mouse" ? typeof t.button != "number" || t.button <= 0 : t.isPrimary !== !1;
function Mp(t, e = "page") {
  return {
    point: {
      x: t[e + "X"],
      y: t[e + "Y"]
    }
  };
}
const Kx = (t) => (e) => Gx(e) && t(e, Mp(e));
function ls(t, e, n, r) {
  return In(t, e, Kx(n), r);
}
const qx = (t, e) => (n) => e(t(n)), Bn = (...t) => t.reduce(qx);
function Fp(t) {
  let e = null;
  return () => {
    const n = () => {
      e = null;
    };
    return e === null ? (e = t, n) : !1;
  };
}
const Lu = Fp("dragHorizontal"), Bu = Fp("dragVertical");
function Zx(t) {
  let e = !1;
  if (t === "y")
    e = Bu();
  else if (t === "x")
    e = Lu();
  else {
    const n = Lu(), r = Bu();
    n && r ? e = () => {
      n(), r();
    } : (n && n(), r && r());
  }
  return e;
}
function Ip() {
  const t = Zx(!0);
  return t ? (t(), !1) : !0;
}
class Ir {
  constructor(e) {
    this.isMounted = !1, this.node = e;
  }
  update() {
  }
}
function zu(t, e) {
  const n = "pointer" + (e ? "enter" : "leave"), r = "onHover" + (e ? "Start" : "End"), i = (f, g) => {
    if (f.pointerType === "touch" || Ip())
      return;
    const l = t.getProps();
    t.animationState && l.whileHover && t.animationState.setActive("whileHover", e), l[r] && rt.update(() => l[r](f, g));
  };
  return ls(t.current, n, i, {
    passive: !t.getProps()[r]
  });
}
class Jx extends Ir {
  mount() {
    this.unmount = Bn(zu(this.node, !0), zu(this.node, !1));
  }
  unmount() {
  }
}
class Qx extends Ir {
  constructor() {
    super(...arguments), this.isActive = !1;
  }
  onFocus() {
    let e = !1;
    try {
      e = this.node.current.matches(":focus-visible");
    } catch {
      e = !0;
    }
    !e || !this.node.animationState || (this.node.animationState.setActive("whileFocus", !0), this.isActive = !0);
  }
  onBlur() {
    !this.isActive || !this.node.animationState || (this.node.animationState.setActive("whileFocus", !1), this.isActive = !1);
  }
  mount() {
    this.unmount = Bn(In(this.node.current, "focus", () => this.onFocus()), In(this.node.current, "blur", () => this.onBlur()));
  }
  unmount() {
  }
}
const Rp = (t, e) => e ? t === e ? !0 : Rp(t, e.parentElement) : !1;
function Ro(t, e) {
  if (!e)
    return;
  const n = new PointerEvent("pointer" + t);
  e(n, Mp(n));
}
class eC extends Ir {
  constructor() {
    super(...arguments), this.removeStartListeners = tt, this.removeEndListeners = tt, this.removeAccessibleListeners = tt, this.startPointerPress = (e, n) => {
      if (this.isPressing)
        return;
      this.removeEndListeners();
      const r = this.node.getProps(), f = ls(window, "pointerup", (l, s) => {
        if (!this.checkPressEnd())
          return;
        const { onTap: a, onTapCancel: h, globalTapTarget: o } = this.node.getProps();
        rt.update(() => {
          !o && !Rp(this.node.current, l.target) ? h && h(l, s) : a && a(l, s);
        });
      }, { passive: !(r.onTap || r.onPointerUp) }), g = ls(window, "pointercancel", (l, s) => this.cancelPress(l, s), { passive: !(r.onTapCancel || r.onPointerCancel) });
      this.removeEndListeners = Bn(f, g), this.startPress(e, n);
    }, this.startAccessiblePress = () => {
      const e = (f) => {
        if (f.key !== "Enter" || this.isPressing)
          return;
        const g = (l) => {
          l.key !== "Enter" || !this.checkPressEnd() || Ro("up", (s, a) => {
            const { onTap: h } = this.node.getProps();
            h && rt.update(() => h(s, a));
          });
        };
        this.removeEndListeners(), this.removeEndListeners = In(this.node.current, "keyup", g), Ro("down", (l, s) => {
          this.startPress(l, s);
        });
      }, n = In(this.node.current, "keydown", e), r = () => {
        this.isPressing && Ro("cancel", (f, g) => this.cancelPress(f, g));
      }, i = In(this.node.current, "blur", r);
      this.removeAccessibleListeners = Bn(n, i);
    };
  }
  startPress(e, n) {
    this.isPressing = !0;
    const { onTapStart: r, whileTap: i } = this.node.getProps();
    i && this.node.animationState && this.node.animationState.setActive("whileTap", !0), r && rt.update(() => r(e, n));
  }
  checkPressEnd() {
    return this.removeEndListeners(), this.isPressing = !1, this.node.getProps().whileTap && this.node.animationState && this.node.animationState.setActive("whileTap", !1), !Ip();
  }
  cancelPress(e, n) {
    if (!this.checkPressEnd())
      return;
    const { onTapCancel: r } = this.node.getProps();
    r && rt.update(() => r(e, n));
  }
  mount() {
    const e = this.node.getProps(), n = ls(e.globalTapTarget ? window : this.node.current, "pointerdown", this.startPointerPress, { passive: !(e.onTapStart || e.onPointerStart) }), r = In(this.node.current, "focus", this.startAccessiblePress);
    this.removeStartListeners = Bn(n, r);
  }
  unmount() {
    this.removeStartListeners(), this.removeEndListeners(), this.removeAccessibleListeners();
  }
}
const za = /* @__PURE__ */ new WeakMap(), Lo = /* @__PURE__ */ new WeakMap(), tC = (t) => {
  const e = za.get(t.target);
  e && e(t);
}, nC = (t) => {
  t.forEach(tC);
};
function rC({ root: t, ...e }) {
  const n = t || document;
  Lo.has(n) || Lo.set(n, {});
  const r = Lo.get(n), i = JSON.stringify(e);
  return r[i] || (r[i] = new IntersectionObserver(nC, { root: t, ...e })), r[i];
}
function iC(t, e, n) {
  const r = rC(e);
  return za.set(t, n), r.observe(t), () => {
    za.delete(t), r.unobserve(t);
  };
}
const sC = {
  some: 0,
  all: 1
};
class oC extends Ir {
  constructor() {
    super(...arguments), this.hasEnteredView = !1, this.isInView = !1;
  }
  startObserver() {
    this.unmount();
    const { viewport: e = {} } = this.node.getProps(), { root: n, margin: r, amount: i = "some", once: f } = e, g = {
      root: n ? n.current : void 0,
      rootMargin: r,
      threshold: typeof i == "number" ? i : sC[i]
    }, l = (s) => {
      const { isIntersecting: a } = s;
      if (this.isInView === a || (this.isInView = a, f && !a && this.hasEnteredView))
        return;
      a && (this.hasEnteredView = !0), this.node.animationState && this.node.animationState.setActive("whileInView", a);
      const { onViewportEnter: h, onViewportLeave: o } = this.node.getProps(), u = a ? h : o;
      u && u(s);
    };
    return iC(this.node.current, g, l);
  }
  mount() {
    this.startObserver();
  }
  update() {
    if (typeof IntersectionObserver > "u")
      return;
    const { props: e, prevProps: n } = this.node;
    ["amount", "margin", "root"].some(aC(e, n)) && this.startObserver();
  }
  unmount() {
  }
}
function aC({ viewport: t = {} }, { viewport: e = {} } = {}) {
  return (n) => t[n] !== e[n];
}
const lC = {
  inView: {
    Feature: oC
  },
  tap: {
    Feature: eC
  },
  focus: {
    Feature: Qx
  },
  hover: {
    Feature: Jx
  }
};
function Lp(t, e) {
  if (!Array.isArray(e))
    return !1;
  const n = e.length;
  if (n !== t.length)
    return !1;
  for (let r = 0; r < n; r++)
    if (e[r] !== t[r])
      return !1;
  return !0;
}
function cC(t) {
  const e = {};
  return t.values.forEach((n, r) => e[r] = n.get()), e;
}
function uC(t) {
  const e = {};
  return t.values.forEach((n, r) => e[r] = n.getVelocity()), e;
}
function lo(t, e, n) {
  const r = t.getProps();
  return Gl(r, e, n !== void 0 ? n : r.custom, cC(t), uC(t));
}
let hC = tt, Kl = tt;
const zn = (t) => t * 1e3, fn = (t) => t / 1e3, fC = {
  current: !1
}, Bp = (t) => Array.isArray(t) && typeof t[0] == "number";
function zp(t) {
  return !!(!t || typeof t == "string" && Np[t] || Bp(t) || Array.isArray(t) && t.every(zp));
}
const Zr = ([t, e, n, r]) => `cubic-bezier(${t}, ${e}, ${n}, ${r})`, Np = {
  linear: "linear",
  ease: "ease",
  easeIn: "ease-in",
  easeOut: "ease-out",
  easeInOut: "ease-in-out",
  circIn: Zr([0, 0.65, 0.55, 1]),
  circOut: Zr([0.55, 0, 1, 0.45]),
  backIn: Zr([0.31, 0.01, 0.66, -0.59]),
  backOut: Zr([0.33, 1.53, 0.69, 0.99])
};
function jp(t) {
  if (t)
    return Bp(t) ? Zr(t) : Array.isArray(t) ? t.map(jp) : Np[t];
}
function dC(t, e, n, { delay: r = 0, duration: i, repeat: f = 0, repeatType: g = "loop", ease: l, times: s } = {}) {
  const a = { [e]: n };
  s && (a.offset = s);
  const h = jp(l);
  return Array.isArray(h) && (a.easing = h), t.animate(a, {
    delay: r,
    duration: i,
    easing: Array.isArray(h) ? "linear" : h,
    fill: "both",
    iterations: f + 1,
    direction: g === "reverse" ? "alternate" : "normal"
  });
}
function pC(t, { repeat: e, repeatType: n = "loop" }) {
  const r = e && n !== "loop" && e % 2 === 1 ? 0 : t.length - 1;
  return t[r];
}
const $p = (t, e, n) => (((1 - 3 * n + 3 * e) * t + (3 * n - 6 * e)) * t + 3 * e) * t, gC = 1e-7, mC = 12;
function vC(t, e, n, r, i) {
  let f, g, l = 0;
  do
    g = e + (n - e) / 2, f = $p(g, r, i) - t, f > 0 ? n = g : e = g;
  while (Math.abs(f) > gC && ++l < mC);
  return g;
}
function Mi(t, e, n, r) {
  if (t === e && n === r)
    return tt;
  const i = (f) => vC(f, 0, 1, t, n);
  return (f) => f === 0 || f === 1 ? f : $p(i(f), e, r);
}
const bC = Mi(0.42, 0, 1, 1), yC = Mi(0, 0, 0.58, 1), Vp = Mi(0.42, 0, 0.58, 1), wC = (t) => Array.isArray(t) && typeof t[0] != "number", Hp = (t) => (e) => e <= 0.5 ? t(2 * e) / 2 : (2 - t(2 * (1 - e))) / 2, Wp = (t) => (e) => 1 - t(1 - e), ql = (t) => 1 - Math.sin(Math.acos(t)), xC = Wp(ql), CC = Hp(ql), Up = Mi(0.33, 1.53, 0.69, 0.99), Zl = Wp(Up), _C = Hp(Zl), SC = (t) => (t *= 2) < 1 ? 0.5 * Zl(t) : 0.5 * (2 - Math.pow(2, -10 * (t - 1))), TC = {
  linear: tt,
  easeIn: bC,
  easeInOut: Vp,
  easeOut: yC,
  circIn: ql,
  circInOut: CC,
  circOut: xC,
  backIn: Zl,
  backInOut: _C,
  backOut: Up,
  anticipate: SC
}, Nu = (t) => {
  if (Array.isArray(t)) {
    Kl(t.length === 4);
    const [e, n, r, i] = t;
    return Mi(e, n, r, i);
  } else if (typeof t == "string")
    return TC[t];
  return t;
}, Jl = (t, e) => (n) => !!(Ai(n) && Cx.test(n) && n.startsWith(t) || e && Object.prototype.hasOwnProperty.call(n, e)), Xp = (t, e, n) => (r) => {
  if (!Ai(r))
    return r;
  const [i, f, g, l] = r.match(ao);
  return {
    [t]: parseFloat(i),
    [e]: parseFloat(f),
    [n]: parseFloat(g),
    alpha: l !== void 0 ? parseFloat(l) : 1
  };
}, EC = (t) => kr(0, 255, t), Bo = {
  ...Qn,
  transform: (t) => Math.round(EC(t))
}, Rn = {
  test: Jl("rgb", "red"),
  parse: Xp("red", "green", "blue"),
  transform: ({ red: t, green: e, blue: n, alpha: r = 1 }) => "rgba(" + Bo.transform(t) + ", " + Bo.transform(e) + ", " + Bo.transform(n) + ", " + ni(ti.transform(r)) + ")"
};
function kC(t) {
  let e = "", n = "", r = "", i = "";
  return t.length > 5 ? (e = t.substring(1, 3), n = t.substring(3, 5), r = t.substring(5, 7), i = t.substring(7, 9)) : (e = t.substring(1, 2), n = t.substring(2, 3), r = t.substring(3, 4), i = t.substring(4, 5), e += e, n += n, r += r, i += i), {
    red: parseInt(e, 16),
    green: parseInt(n, 16),
    blue: parseInt(r, 16),
    alpha: i ? parseInt(i, 16) / 255 : 1
  };
}
const Na = {
  test: Jl("#"),
  parse: kC,
  transform: Rn.transform
}, dr = {
  test: Jl("hsl", "hue"),
  parse: Xp("hue", "saturation", "lightness"),
  transform: ({ hue: t, saturation: e, lightness: n, alpha: r = 1 }) => "hsla(" + Math.round(t) + ", " + mr.transform(ni(e)) + ", " + mr.transform(ni(n)) + ", " + ni(ti.transform(r)) + ")"
}, lt = {
  test: (t) => Rn.test(t) || Na.test(t) || dr.test(t),
  parse: (t) => Rn.test(t) ? Rn.parse(t) : dr.test(t) ? dr.parse(t) : Na.parse(t),
  transform: (t) => Ai(t) ? t : t.hasOwnProperty("red") ? Rn.transform(t) : dr.transform(t)
}, co = (t, e, n) => -n * t + n * e + t;
function zo(t, e, n) {
  return n < 0 && (n += 1), n > 1 && (n -= 1), n < 1 / 6 ? t + (e - t) * 6 * n : n < 1 / 2 ? e : n < 2 / 3 ? t + (e - t) * (2 / 3 - n) * 6 : t;
}
function OC({ hue: t, saturation: e, lightness: n, alpha: r }) {
  t /= 360, e /= 100, n /= 100;
  let i = 0, f = 0, g = 0;
  if (!e)
    i = f = g = n;
  else {
    const l = n < 0.5 ? n * (1 + e) : n + e - n * e, s = 2 * n - l;
    i = zo(s, l, t + 1 / 3), f = zo(s, l, t), g = zo(s, l, t - 1 / 3);
  }
  return {
    red: Math.round(i * 255),
    green: Math.round(f * 255),
    blue: Math.round(g * 255),
    alpha: r
  };
}
const No = (t, e, n) => {
  const r = t * t;
  return Math.sqrt(Math.max(0, n * (e * e - r) + r));
}, DC = [Na, Rn, dr], AC = (t) => DC.find((e) => e.test(t));
function ju(t) {
  const e = AC(t);
  let n = e.parse(t);
  return e === dr && (n = OC(n)), n;
}
const Yp = (t, e) => {
  const n = ju(t), r = ju(e), i = { ...n };
  return (f) => (i.red = No(n.red, r.red, f), i.green = No(n.green, r.green, f), i.blue = No(n.blue, r.blue, f), i.alpha = co(n.alpha, r.alpha, f), Rn.transform(i));
};
function PC(t) {
  var e, n;
  return isNaN(t) && Ai(t) && (((e = t.match(ao)) === null || e === void 0 ? void 0 : e.length) || 0) + (((n = t.match(xp)) === null || n === void 0 ? void 0 : n.length) || 0) > 0;
}
const Gp = {
  regex: wx,
  countKey: "Vars",
  token: "${v}",
  parse: tt
}, Kp = {
  regex: xp,
  countKey: "Colors",
  token: "${c}",
  parse: lt.parse
}, qp = {
  regex: ao,
  countKey: "Numbers",
  token: "${n}",
  parse: Qn.parse
};
function jo(t, { regex: e, countKey: n, token: r, parse: i }) {
  const f = t.tokenised.match(e);
  f && (t["num" + n] = f.length, t.tokenised = t.tokenised.replace(e, r), t.values.push(...f.map(i)));
}
function Ts(t) {
  const e = t.toString(), n = {
    value: e,
    tokenised: e,
    values: [],
    numVars: 0,
    numColors: 0,
    numNumbers: 0
  };
  return n.value.includes("var(--") && jo(n, Gp), jo(n, Kp), jo(n, qp), n;
}
function Zp(t) {
  return Ts(t).values;
}
function Jp(t) {
  const { values: e, numColors: n, numVars: r, tokenised: i } = Ts(t), f = e.length;
  return (g) => {
    let l = i;
    for (let s = 0; s < f; s++)
      s < r ? l = l.replace(Gp.token, g[s]) : s < r + n ? l = l.replace(Kp.token, lt.transform(g[s])) : l = l.replace(qp.token, ni(g[s]));
    return l;
  };
}
const MC = (t) => typeof t == "number" ? 0 : t;
function FC(t) {
  const e = Zp(t);
  return Jp(t)(e.map(MC));
}
const Rr = {
  test: PC,
  parse: Zp,
  createTransformer: Jp,
  getAnimatableNone: FC
}, Qp = (t, e) => (n) => `${n > 0 ? e : t}`;
function eg(t, e) {
  return typeof t == "number" ? (n) => co(t, e, n) : lt.test(t) ? Yp(t, e) : t.startsWith("var(") ? Qp(t, e) : ng(t, e);
}
const tg = (t, e) => {
  const n = [...t], r = n.length, i = t.map((f, g) => eg(f, e[g]));
  return (f) => {
    for (let g = 0; g < r; g++)
      n[g] = i[g](f);
    return n;
  };
}, IC = (t, e) => {
  const n = { ...t, ...e }, r = {};
  for (const i in n)
    t[i] !== void 0 && e[i] !== void 0 && (r[i] = eg(t[i], e[i]));
  return (i) => {
    for (const f in r)
      n[f] = r[f](i);
    return n;
  };
}, ng = (t, e) => {
  const n = Rr.createTransformer(e), r = Ts(t), i = Ts(e);
  return r.numVars === i.numVars && r.numColors === i.numColors && r.numNumbers >= i.numNumbers ? Bn(tg(r.values, i.values), n) : Qp(t, e);
}, rg = (t, e, n) => {
  const r = e - t;
  return r === 0 ? 1 : (n - t) / r;
}, $u = (t, e) => (n) => co(t, e, n);
function RC(t) {
  return typeof t == "number" ? $u : typeof t == "string" ? lt.test(t) ? Yp : ng : Array.isArray(t) ? tg : typeof t == "object" ? IC : $u;
}
function LC(t, e, n) {
  const r = [], i = n || RC(t[0]), f = t.length - 1;
  for (let g = 0; g < f; g++) {
    let l = i(t[g], t[g + 1]);
    if (e) {
      const s = Array.isArray(e) ? e[g] || tt : e;
      l = Bn(s, l);
    }
    r.push(l);
  }
  return r;
}
function ig(t, e, { clamp: n = !0, ease: r, mixer: i } = {}) {
  const f = t.length;
  if (Kl(f === e.length), f === 1)
    return () => e[0];
  t[0] > t[f - 1] && (t = [...t].reverse(), e = [...e].reverse());
  const g = LC(e, r, i), l = g.length, s = (a) => {
    let h = 0;
    if (l > 1)
      for (; h < t.length - 2 && !(a < t[h + 1]); h++)
        ;
    const o = rg(t[h], t[h + 1], a);
    return g[h](o);
  };
  return n ? (a) => s(kr(t[0], t[f - 1], a)) : s;
}
function BC(t, e) {
  const n = t[t.length - 1];
  for (let r = 1; r <= e; r++) {
    const i = rg(0, e, r);
    t.push(co(n, 1, i));
  }
}
function zC(t) {
  const e = [0];
  return BC(e, t.length - 1), e;
}
function NC(t, e) {
  return t.map((n) => n * e);
}
function jC(t, e) {
  return t.map(() => e || Vp).splice(0, t.length - 1);
}
function Es({ duration: t = 300, keyframes: e, times: n, ease: r = "easeInOut" }) {
  const i = wC(r) ? r.map(Nu) : Nu(r), f = {
    done: !1,
    value: e[0]
  }, g = NC(
    // Only use the provided offsets if they're the correct length
    // TODO Maybe we should warn here if there's a length mismatch
    n && n.length === e.length ? n : zC(e),
    t
  ), l = ig(g, e, {
    ease: Array.isArray(i) ? i : jC(e, i)
  });
  return {
    calculatedDuration: t,
    next: (s) => (f.value = l(s), f.done = s >= t, f)
  };
}
function sg(t, e) {
  return e ? t * (1e3 / e) : 0;
}
const $C = 5;
function og(t, e, n) {
  const r = Math.max(e - $C, 0);
  return sg(n - t(r), e - r);
}
const $o = 1e-3, VC = 0.01, Vu = 10, HC = 0.05, WC = 1;
function UC({ duration: t = 800, bounce: e = 0.25, velocity: n = 0, mass: r = 1 }) {
  let i, f;
  hC(t <= zn(Vu));
  let g = 1 - e;
  g = kr(HC, WC, g), t = kr(VC, Vu, fn(t)), g < 1 ? (i = (a) => {
    const h = a * g, o = h * t, u = h - n, c = ja(a, g), d = Math.exp(-o);
    return $o - u / c * d;
  }, f = (a) => {
    const o = a * g * t, u = o * n + n, c = Math.pow(g, 2) * Math.pow(a, 2) * t, d = Math.exp(-o), m = ja(Math.pow(a, 2), g);
    return (-i(a) + $o > 0 ? -1 : 1) * ((u - c) * d) / m;
  }) : (i = (a) => {
    const h = Math.exp(-a * t), o = (a - n) * t + 1;
    return -$o + h * o;
  }, f = (a) => {
    const h = Math.exp(-a * t), o = (n - a) * (t * t);
    return h * o;
  });
  const l = 5 / t, s = YC(i, f, l);
  if (t = zn(t), isNaN(s))
    return {
      stiffness: 100,
      damping: 10,
      duration: t
    };
  {
    const a = Math.pow(s, 2) * r;
    return {
      stiffness: a,
      damping: g * 2 * Math.sqrt(r * a),
      duration: t
    };
  }
}
const XC = 12;
function YC(t, e, n) {
  let r = n;
  for (let i = 1; i < XC; i++)
    r = r - t(r) / e(r);
  return r;
}
function ja(t, e) {
  return t * Math.sqrt(1 - e * e);
}
const GC = ["duration", "bounce"], KC = ["stiffness", "damping", "mass"];
function Hu(t, e) {
  return e.some((n) => t[n] !== void 0);
}
function qC(t) {
  let e = {
    velocity: 0,
    stiffness: 100,
    damping: 10,
    mass: 1,
    isResolvedFromDuration: !1,
    ...t
  };
  if (!Hu(t, KC) && Hu(t, GC)) {
    const n = UC(t);
    e = {
      ...e,
      ...n,
      mass: 1
    }, e.isResolvedFromDuration = !0;
  }
  return e;
}
function ag({ keyframes: t, restDelta: e, restSpeed: n, ...r }) {
  const i = t[0], f = t[t.length - 1], g = { done: !1, value: i }, { stiffness: l, damping: s, mass: a, duration: h, velocity: o, isResolvedFromDuration: u } = qC({
    ...r,
    velocity: -fn(r.velocity || 0)
  }), c = o || 0, d = s / (2 * Math.sqrt(l * a)), m = f - i, p = fn(Math.sqrt(l / a)), v = Math.abs(m) < 5;
  n || (n = v ? 0.01 : 2), e || (e = v ? 5e-3 : 0.5);
  let b;
  if (d < 1) {
    const y = ja(p, d);
    b = (w) => {
      const C = Math.exp(-d * p * w);
      return f - C * ((c + d * p * m) / y * Math.sin(y * w) + m * Math.cos(y * w));
    };
  } else if (d === 1)
    b = (y) => f - Math.exp(-p * y) * (m + (c + p * m) * y);
  else {
    const y = p * Math.sqrt(d * d - 1);
    b = (w) => {
      const C = Math.exp(-d * p * w), _ = Math.min(y * w, 300);
      return f - C * ((c + d * p * m) * Math.sinh(_) + y * m * Math.cosh(_)) / y;
    };
  }
  return {
    calculatedDuration: u && h || null,
    next: (y) => {
      const w = b(y);
      if (u)
        g.done = y >= h;
      else {
        let C = c;
        y !== 0 && (d < 1 ? C = og(b, y, w) : C = 0);
        const _ = Math.abs(C) <= n, S = Math.abs(f - w) <= e;
        g.done = _ && S;
      }
      return g.value = g.done ? f : w, g;
    }
  };
}
function Wu({ keyframes: t, velocity: e = 0, power: n = 0.8, timeConstant: r = 325, bounceDamping: i = 10, bounceStiffness: f = 500, modifyTarget: g, min: l, max: s, restDelta: a = 0.5, restSpeed: h }) {
  const o = t[0], u = {
    done: !1,
    value: o
  }, c = (k) => l !== void 0 && k < l || s !== void 0 && k > s, d = (k) => l === void 0 ? s : s === void 0 || Math.abs(l - k) < Math.abs(s - k) ? l : s;
  let m = n * e;
  const p = o + m, v = g === void 0 ? p : g(p);
  v !== p && (m = v - o);
  const b = (k) => -m * Math.exp(-k / r), y = (k) => v + b(k), w = (k) => {
    const I = b(k), L = y(k);
    u.done = Math.abs(I) <= a, u.value = u.done ? v : L;
  };
  let C, _;
  const S = (k) => {
    c(u.value) && (C = k, _ = ag({
      keyframes: [u.value, d(u.value)],
      velocity: og(y, k, u.value),
      damping: i,
      stiffness: f,
      restDelta: a,
      restSpeed: h
    }));
  };
  return S(0), {
    calculatedDuration: null,
    next: (k) => {
      let I = !1;
      return !_ && C === void 0 && (I = !0, w(k), S(k)), C !== void 0 && k > C ? _.next(k - C) : (!I && w(k), u);
    }
  };
}
const ZC = (t) => {
  const e = ({ timestamp: n }) => t(n);
  return {
    start: () => rt.update(e, !0),
    stop: () => Ss(e),
    /**
     * If we're processing this frame we can use the
     * framelocked timestamp to keep things in sync.
     */
    now: () => Ba.isProcessing ? Ba.timestamp : performance.now()
  };
}, Uu = 2e4;
function Xu(t) {
  let e = 0;
  const n = 50;
  let r = t.next(e);
  for (; !r.done && e < Uu; )
    e += n, r = t.next(e);
  return e >= Uu ? 1 / 0 : e;
}
const JC = {
  decay: Wu,
  inertia: Wu,
  tween: Es,
  keyframes: Es,
  spring: ag
};
function ks({ autoplay: t = !0, delay: e = 0, driver: n = ZC, keyframes: r, type: i = "keyframes", repeat: f = 0, repeatDelay: g = 0, repeatType: l = "loop", onPlay: s, onStop: a, onComplete: h, onUpdate: o, ...u }) {
  let c = 1, d = !1, m, p;
  const v = () => {
    p = new Promise((A) => {
      m = A;
    });
  };
  v();
  let b;
  const y = JC[i] || Es;
  let w;
  y !== Es && typeof r[0] != "number" && (w = ig([0, 100], r, {
    clamp: !1
  }), r = [0, 100]);
  const C = y({ ...u, keyframes: r });
  let _;
  l === "mirror" && (_ = y({
    ...u,
    keyframes: [...r].reverse(),
    velocity: -(u.velocity || 0)
  }));
  let S = "idle", k = null, I = null, L = null;
  C.calculatedDuration === null && f && (C.calculatedDuration = Xu(C));
  const { calculatedDuration: j } = C;
  let G = 1 / 0, te = 1 / 0;
  j !== null && (G = j + g, te = G * (f + 1) - g);
  let W = 0;
  const q = (A) => {
    if (I === null)
      return;
    c > 0 && (I = Math.min(I, A)), c < 0 && (I = Math.min(A - te / c, I)), k !== null ? W = k : W = Math.round(A - I) * c;
    const M = W - e * (c >= 0 ? 1 : -1), $ = c >= 0 ? M < 0 : M > te;
    W = Math.max(M, 0), S === "finished" && k === null && (W = te);
    let D = W, E = C;
    if (f) {
      const V = Math.min(W, te) / G;
      let J = Math.floor(V), ee = V % 1;
      !ee && V >= 1 && (ee = 1), ee === 1 && J--, J = Math.min(J, f + 1), !!(J % 2) && (l === "reverse" ? (ee = 1 - ee, g && (ee -= g / G)) : l === "mirror" && (E = _)), D = kr(0, 1, ee) * G;
    }
    const F = $ ? { done: !1, value: r[0] } : E.next(D);
    w && (F.value = w(F.value));
    let { done: N } = F;
    !$ && j !== null && (N = c >= 0 ? W >= te : W <= 0);
    const H = k === null && (S === "finished" || S === "running" && N);
    return o && o(F.value), H && re(), F;
  }, K = () => {
    b && b.stop(), b = void 0;
  }, ne = () => {
    S = "idle", K(), m(), v(), I = L = null;
  }, re = () => {
    S = "finished", h && h(), K(), m();
  }, T = () => {
    if (d)
      return;
    b || (b = n(q));
    const A = b.now();
    s && s(), k !== null ? I = A - k : (!I || S === "finished") && (I = A), S === "finished" && v(), L = I, k = null, S = "running", b.start();
  };
  t && T();
  const P = {
    then(A, M) {
      return p.then(A, M);
    },
    get time() {
      return fn(W);
    },
    set time(A) {
      A = zn(A), W = A, k !== null || !b || c === 0 ? k = A : I = b.now() - A / c;
    },
    get duration() {
      const A = C.calculatedDuration === null ? Xu(C) : C.calculatedDuration;
      return fn(A);
    },
    get speed() {
      return c;
    },
    set speed(A) {
      A === c || !b || (c = A, P.time = fn(W));
    },
    get state() {
      return S;
    },
    play: T,
    pause: () => {
      S = "paused", k = W;
    },
    stop: () => {
      d = !0, S !== "idle" && (S = "idle", a && a(), ne());
    },
    cancel: () => {
      L !== null && q(L), ne();
    },
    complete: () => {
      S = "finished";
    },
    sample: (A) => (I = 0, q(A))
  };
  return P;
}
function QC(t) {
  let e;
  return () => (e === void 0 && (e = t()), e);
}
const e_ = QC(() => Object.hasOwnProperty.call(Element.prototype, "animate")), t_ = /* @__PURE__ */ new Set([
  "opacity",
  "clipPath",
  "filter",
  "transform",
  "backgroundColor"
]), Ji = 10, n_ = 2e4, r_ = (t, e) => e.type === "spring" || t === "backgroundColor" || !zp(e.ease);
function i_(t, e, { onUpdate: n, onComplete: r, ...i }) {
  if (!(e_() && t_.has(e) && !i.repeatDelay && i.repeatType !== "mirror" && i.damping !== 0 && i.type !== "inertia"))
    return !1;
  let g = !1, l, s, a = !1;
  const h = () => {
    s = new Promise((y) => {
      l = y;
    });
  };
  h();
  let { keyframes: o, duration: u = 300, ease: c, times: d } = i;
  if (r_(e, i)) {
    const y = ks({
      ...i,
      repeat: 0,
      delay: 0
    });
    let w = { done: !1, value: o[0] };
    const C = [];
    let _ = 0;
    for (; !w.done && _ < n_; )
      w = y.sample(_), C.push(w.value), _ += Ji;
    d = void 0, o = C, u = _ - Ji, c = "linear";
  }
  const m = dC(t.owner.current, e, o, {
    ...i,
    duration: u,
    /**
     * This function is currently not called if ease is provided
     * as a function so the cast is safe.
     *
     * However it would be possible for a future refinement to port
     * in easing pregeneration from Motion One for browsers that
     * support the upcoming `linear()` easing function.
     */
    ease: c,
    times: d
  }), p = () => {
    a = !1, m.cancel();
  }, v = () => {
    a = !0, rt.update(p), l(), h();
  };
  return m.onfinish = () => {
    a || (t.set(pC(o, i)), r && r(), v());
  }, {
    then(y, w) {
      return s.then(y, w);
    },
    attachTimeline(y) {
      return m.timeline = y, m.onfinish = null, tt;
    },
    get time() {
      return fn(m.currentTime || 0);
    },
    set time(y) {
      m.currentTime = zn(y);
    },
    get speed() {
      return m.playbackRate;
    },
    set speed(y) {
      m.playbackRate = y;
    },
    get duration() {
      return fn(u);
    },
    play: () => {
      g || (m.play(), Ss(p));
    },
    pause: () => m.pause(),
    stop: () => {
      if (g = !0, m.playState === "idle")
        return;
      const { currentTime: y } = m;
      if (y) {
        const w = ks({
          ...i,
          autoplay: !1
        });
        t.setWithVelocity(w.sample(y - Ji).value, w.sample(y).value, Ji);
      }
      v();
    },
    complete: () => {
      a || m.finish();
    },
    cancel: v
  };
}
function s_({ keyframes: t, delay: e, onUpdate: n, onComplete: r }) {
  const i = () => (n && n(t[t.length - 1]), r && r(), {
    time: 0,
    speed: 1,
    duration: 0,
    play: tt,
    pause: tt,
    stop: tt,
    then: (f) => (f(), Promise.resolve()),
    cancel: tt,
    complete: tt
  });
  return e ? ks({
    keyframes: [0, 1],
    duration: 0,
    delay: e,
    onComplete: i
  }) : i();
}
const o_ = {
  type: "spring",
  stiffness: 500,
  damping: 25,
  restSpeed: 10
}, a_ = (t) => ({
  type: "spring",
  stiffness: 550,
  damping: t === 0 ? 2 * Math.sqrt(550) : 30,
  restSpeed: 10
}), l_ = {
  type: "keyframes",
  duration: 0.8
}, c_ = {
  type: "keyframes",
  ease: [0.25, 0.1, 0.35, 1],
  duration: 0.3
}, u_ = (t, { keyframes: e }) => e.length > 2 ? l_ : Jn.has(t) ? t.startsWith("scale") ? a_(e[1]) : o_ : c_, $a = (t, e) => t === "zIndex" ? !1 : !!(typeof e == "number" || Array.isArray(e) || typeof e == "string" && // It's animatable if we have a string
(Rr.test(e) || e === "0") && // And it contains numbers and/or colors
!e.startsWith("url(")), h_ = /* @__PURE__ */ new Set(["brightness", "contrast", "saturate", "opacity"]);
function f_(t) {
  const [e, n] = t.slice(0, -1).split("(");
  if (e === "drop-shadow")
    return t;
  const [r] = n.match(ao) || [];
  if (!r)
    return t;
  const i = n.replace(r, "");
  let f = h_.has(e) ? 1 : 0;
  return r !== n && (f *= 100), e + "(" + f + i + ")";
}
const d_ = /([a-z-]*)\(.*?\)/g, Va = {
  ...Rr,
  getAnimatableNone: (t) => {
    const e = t.match(d_);
    return e ? e.map(f_).join(" ") : t;
  }
}, p_ = {
  ...Cp,
  // Color props
  color: lt,
  backgroundColor: lt,
  outlineColor: lt,
  fill: lt,
  stroke: lt,
  // Border props
  borderColor: lt,
  borderTopColor: lt,
  borderRightColor: lt,
  borderBottomColor: lt,
  borderLeftColor: lt,
  filter: Va,
  WebkitFilter: Va
}, Ql = (t) => p_[t];
function lg(t, e) {
  let n = Ql(t);
  return n !== Va && (n = Rr), n.getAnimatableNone ? n.getAnimatableNone(e) : void 0;
}
const cg = (t) => /^0[^.\s]+$/.test(t);
function g_(t) {
  if (typeof t == "number")
    return t === 0;
  if (t !== null)
    return t === "none" || t === "0" || cg(t);
}
function m_(t, e, n, r) {
  const i = $a(e, n);
  let f;
  Array.isArray(n) ? f = [...n] : f = [null, n];
  const g = r.from !== void 0 ? r.from : t.get();
  let l;
  const s = [];
  for (let a = 0; a < f.length; a++)
    f[a] === null && (f[a] = a === 0 ? g : f[a - 1]), g_(f[a]) && s.push(a), typeof f[a] == "string" && f[a] !== "none" && f[a] !== "0" && (l = f[a]);
  if (i && s.length && l)
    for (let a = 0; a < s.length; a++) {
      const h = s[a];
      f[h] = lg(e, l);
    }
  return f;
}
function v_({ when: t, delay: e, delayChildren: n, staggerChildren: r, staggerDirection: i, repeat: f, repeatType: g, repeatDelay: l, from: s, elapsed: a, ...h }) {
  return !!Object.keys(h).length;
}
function ug(t, e) {
  return t[e] || t.default || t;
}
const b_ = {
  skipAnimations: !1
}, y_ = (t, e, n, r = {}) => (i) => {
  const f = ug(r, t) || {}, g = f.delay || r.delay || 0;
  let { elapsed: l = 0 } = r;
  l = l - zn(g);
  const s = m_(e, t, n, f), a = s[0], h = s[s.length - 1], o = $a(t, a), u = $a(t, h);
  let c = {
    keyframes: s,
    velocity: e.getVelocity(),
    ease: "easeOut",
    ...f,
    delay: -l,
    onUpdate: (d) => {
      e.set(d), f.onUpdate && f.onUpdate(d);
    },
    onComplete: () => {
      i(), f.onComplete && f.onComplete();
    }
  };
  if (v_(f) || (c = {
    ...c,
    ...u_(t, c)
  }), c.duration && (c.duration = zn(c.duration)), c.repeatDelay && (c.repeatDelay = zn(c.repeatDelay)), !o || !u || fC.current || f.type === !1 || b_.skipAnimations)
    return s_(c);
  if (
    /**
     * If this is a handoff animation, the optimised animation will be running via
     * WAAPI. Therefore, this animation must be JS to ensure it runs "under" the
     * optimised animation.
     */
    !r.isHandoff && e.owner && e.owner.current instanceof HTMLElement && /**
     * If we're outputting values to onUpdate then we can't use WAAPI as there's
     * no way to read the value from WAAPI every frame.
     */
    !e.owner.getProps().onUpdate
  ) {
    const d = i_(e, t, c);
    if (d)
      return d;
  }
  return ks(c);
};
function Os(t) {
  return !!(Ct(t) && t.add);
}
const hg = (t) => /^\-?\d*\.?\d+$/.test(t);
function w_(t, e) {
  t.indexOf(e) === -1 && t.push(e);
}
function x_(t, e) {
  const n = t.indexOf(e);
  n > -1 && t.splice(n, 1);
}
class fg {
  constructor() {
    this.subscriptions = [];
  }
  add(e) {
    return w_(this.subscriptions, e), () => x_(this.subscriptions, e);
  }
  notify(e, n, r) {
    const i = this.subscriptions.length;
    if (i)
      if (i === 1)
        this.subscriptions[0](e, n, r);
      else
        for (let f = 0; f < i; f++) {
          const g = this.subscriptions[f];
          g && g(e, n, r);
        }
  }
  getSize() {
    return this.subscriptions.length;
  }
  clear() {
    this.subscriptions.length = 0;
  }
}
const C_ = (t) => !isNaN(parseFloat(t));
class __ {
  /**
   * @param init - The initiating value
   * @param config - Optional configuration options
   *
   * -  `transformer`: A function to transform incoming values with.
   *
   * @internal
   */
  constructor(e, n = {}) {
    this.version = "10.18.0", this.timeDelta = 0, this.lastUpdated = 0, this.canTrackVelocity = !1, this.events = {}, this.updateAndNotify = (r, i = !0) => {
      this.prev = this.current, this.current = r;
      const { delta: f, timestamp: g } = Ba;
      this.lastUpdated !== g && (this.timeDelta = f, this.lastUpdated = g, rt.postRender(this.scheduleVelocityCheck)), this.prev !== this.current && this.events.change && this.events.change.notify(this.current), this.events.velocityChange && this.events.velocityChange.notify(this.getVelocity()), i && this.events.renderRequest && this.events.renderRequest.notify(this.current);
    }, this.scheduleVelocityCheck = () => rt.postRender(this.velocityCheck), this.velocityCheck = ({ timestamp: r }) => {
      r !== this.lastUpdated && (this.prev = this.current, this.events.velocityChange && this.events.velocityChange.notify(this.getVelocity()));
    }, this.hasAnimated = !1, this.prev = this.current = e, this.canTrackVelocity = C_(this.current), this.owner = n.owner;
  }
  /**
   * Adds a function that will be notified when the `MotionValue` is updated.
   *
   * It returns a function that, when called, will cancel the subscription.
   *
   * When calling `onChange` inside a React component, it should be wrapped with the
   * `useEffect` hook. As it returns an unsubscribe function, this should be returned
   * from the `useEffect` function to ensure you don't add duplicate subscribers..
   *
   * ```jsx
   * export const MyComponent = () => {
   *   const x = useMotionValue(0)
   *   const y = useMotionValue(0)
   *   const opacity = useMotionValue(1)
   *
   *   useEffect(() => {
   *     function updateOpacity() {
   *       const maxXY = Math.max(x.get(), y.get())
   *       const newOpacity = transform(maxXY, [0, 100], [1, 0])
   *       opacity.set(newOpacity)
   *     }
   *
   *     const unsubscribeX = x.on("change", updateOpacity)
   *     const unsubscribeY = y.on("change", updateOpacity)
   *
   *     return () => {
   *       unsubscribeX()
   *       unsubscribeY()
   *     }
   *   }, [])
   *
   *   return <motion.div style={{ x }} />
   * }
   * ```
   *
   * @param subscriber - A function that receives the latest value.
   * @returns A function that, when called, will cancel this subscription.
   *
   * @deprecated
   */
  onChange(e) {
    return this.on("change", e);
  }
  on(e, n) {
    this.events[e] || (this.events[e] = new fg());
    const r = this.events[e].add(n);
    return e === "change" ? () => {
      r(), rt.read(() => {
        this.events.change.getSize() || this.stop();
      });
    } : r;
  }
  clearListeners() {
    for (const e in this.events)
      this.events[e].clear();
  }
  /**
   * Attaches a passive effect to the `MotionValue`.
   *
   * @internal
   */
  attach(e, n) {
    this.passiveEffect = e, this.stopPassiveEffect = n;
  }
  /**
   * Sets the state of the `MotionValue`.
   *
   * @remarks
   *
   * ```jsx
   * const x = useMotionValue(0)
   * x.set(10)
   * ```
   *
   * @param latest - Latest value to set.
   * @param render - Whether to notify render subscribers. Defaults to `true`
   *
   * @public
   */
  set(e, n = !0) {
    !n || !this.passiveEffect ? this.updateAndNotify(e, n) : this.passiveEffect(e, this.updateAndNotify);
  }
  setWithVelocity(e, n, r) {
    this.set(n), this.prev = e, this.timeDelta = r;
  }
  /**
   * Set the state of the `MotionValue`, stopping any active animations,
   * effects, and resets velocity to `0`.
   */
  jump(e) {
    this.updateAndNotify(e), this.prev = e, this.stop(), this.stopPassiveEffect && this.stopPassiveEffect();
  }
  /**
   * Returns the latest state of `MotionValue`
   *
   * @returns - The latest state of `MotionValue`
   *
   * @public
   */
  get() {
    return this.current;
  }
  /**
   * @public
   */
  getPrevious() {
    return this.prev;
  }
  /**
   * Returns the latest velocity of `MotionValue`
   *
   * @returns - The latest velocity of `MotionValue`. Returns `0` if the state is non-numerical.
   *
   * @public
   */
  getVelocity() {
    return this.canTrackVelocity ? (
      // These casts could be avoided if parseFloat would be typed better
      sg(parseFloat(this.current) - parseFloat(this.prev), this.timeDelta)
    ) : 0;
  }
  /**
   * Registers a new animation to control this `MotionValue`. Only one
   * animation can drive a `MotionValue` at one time.
   *
   * ```jsx
   * value.start()
   * ```
   *
   * @param animation - A function that starts the provided animation
   *
   * @internal
   */
  start(e) {
    return this.stop(), new Promise((n) => {
      this.hasAnimated = !0, this.animation = e(n), this.events.animationStart && this.events.animationStart.notify();
    }).then(() => {
      this.events.animationComplete && this.events.animationComplete.notify(), this.clearAnimation();
    });
  }
  /**
   * Stop the currently active animation.
   *
   * @public
   */
  stop() {
    this.animation && (this.animation.stop(), this.events.animationCancel && this.events.animationCancel.notify()), this.clearAnimation();
  }
  /**
   * Returns `true` if this value is currently animating.
   *
   * @public
   */
  isAnimating() {
    return !!this.animation;
  }
  clearAnimation() {
    delete this.animation;
  }
  /**
   * Destroy and clean up subscribers to this `MotionValue`.
   *
   * The `MotionValue` hooks like `useMotionValue` and `useTransform` automatically
   * handle the lifecycle of the returned `MotionValue`, so this method is only necessary if you've manually
   * created a `MotionValue` via the `motionValue` function.
   *
   * @public
   */
  destroy() {
    this.clearListeners(), this.stop(), this.stopPassiveEffect && this.stopPassiveEffect();
  }
}
function mi(t, e) {
  return new __(t, e);
}
const dg = (t) => (e) => e.test(t), S_ = {
  test: (t) => t === "auto",
  parse: (t) => t
}, pg = [Qn, Ce, mr, on, Sx, _x, S_], Wr = (t) => pg.find(dg(t)), T_ = [...pg, lt, Rr], E_ = (t) => T_.find(dg(t));
function k_(t, e, n) {
  t.hasValue(e) ? t.getValue(e).set(n) : t.addValue(e, mi(n));
}
function O_(t, e) {
  const n = lo(t, e);
  let { transitionEnd: r = {}, transition: i = {}, ...f } = n ? t.makeTargetAnimatable(n, !1) : {};
  f = { ...f, ...r };
  for (const g in f) {
    const l = zx(f[g]);
    k_(t, g, l);
  }
}
function D_(t, e, n) {
  var r, i;
  const f = Object.keys(e).filter((l) => !t.hasValue(l)), g = f.length;
  if (g)
    for (let l = 0; l < g; l++) {
      const s = f[l], a = e[s];
      let h = null;
      Array.isArray(a) && (h = a[0]), h === null && (h = (i = (r = n[s]) !== null && r !== void 0 ? r : t.readValue(s)) !== null && i !== void 0 ? i : e[s]), h != null && (typeof h == "string" && (hg(h) || cg(h)) ? h = parseFloat(h) : !E_(h) && Rr.test(a) && (h = lg(s, a)), t.addValue(s, mi(h, { owner: t })), n[s] === void 0 && (n[s] = h), h !== null && t.setBaseTarget(s, h));
    }
}
function A_(t, e) {
  return e ? (e[t] || e.default || e).from : void 0;
}
function P_(t, e, n) {
  const r = {};
  for (const i in t) {
    const f = A_(i, e);
    if (f !== void 0)
      r[i] = f;
    else {
      const g = n.getValue(i);
      g && (r[i] = g.get());
    }
  }
  return r;
}
function M_({ protectedKeys: t, needsAnimating: e }, n) {
  const r = t.hasOwnProperty(n) && e[n] !== !0;
  return e[n] = !1, r;
}
function F_(t, e) {
  const n = t.get();
  if (Array.isArray(e)) {
    for (let r = 0; r < e.length; r++)
      if (e[r] !== n)
        return !0;
  } else
    return n !== e;
}
function gg(t, e, { delay: n = 0, transitionOverride: r, type: i } = {}) {
  let { transition: f = t.getDefaultTransition(), transitionEnd: g, ...l } = t.makeTargetAnimatable(e);
  const s = t.getValue("willChange");
  r && (f = r);
  const a = [], h = i && t.animationState && t.animationState.getState()[i];
  for (const o in l) {
    const u = t.getValue(o), c = l[o];
    if (!u || c === void 0 || h && M_(h, o))
      continue;
    const d = {
      delay: n,
      elapsed: 0,
      ...ug(f || {}, o)
    };
    if (window.HandoffAppearAnimations) {
      const v = t.getProps()[pp];
      if (v) {
        const b = window.HandoffAppearAnimations(v, o, u, rt);
        b !== null && (d.elapsed = b, d.isHandoff = !0);
      }
    }
    let m = !d.isHandoff && !F_(u, c);
    if (d.type === "spring" && (u.getVelocity() || d.velocity) && (m = !1), u.animation && (m = !1), m)
      continue;
    u.start(y_(o, u, c, t.shouldReduceMotion && Jn.has(o) ? { type: !1 } : d));
    const p = u.animation;
    Os(s) && (s.add(o), p.then(() => s.remove(o))), a.push(p);
  }
  return g && Promise.all(a).then(() => {
    g && O_(t, g);
  }), a;
}
function Ha(t, e, n = {}) {
  const r = lo(t, e, n.custom);
  let { transition: i = t.getDefaultTransition() || {} } = r || {};
  n.transitionOverride && (i = n.transitionOverride);
  const f = r ? () => Promise.all(gg(t, r, n)) : () => Promise.resolve(), g = t.variantChildren && t.variantChildren.size ? (s = 0) => {
    const { delayChildren: a = 0, staggerChildren: h, staggerDirection: o } = i;
    return I_(t, e, a + s, h, o, n);
  } : () => Promise.resolve(), { when: l } = i;
  if (l) {
    const [s, a] = l === "beforeChildren" ? [f, g] : [g, f];
    return s().then(() => a());
  } else
    return Promise.all([f(), g(n.delay)]);
}
function I_(t, e, n = 0, r = 0, i = 1, f) {
  const g = [], l = (t.variantChildren.size - 1) * r, s = i === 1 ? (a = 0) => a * r : (a = 0) => l - a * r;
  return Array.from(t.variantChildren).sort(R_).forEach((a, h) => {
    a.notify("AnimationStart", e), g.push(Ha(a, e, {
      ...f,
      delay: n + s(h)
    }).then(() => a.notify("AnimationComplete", e)));
  }), Promise.all(g);
}
function R_(t, e) {
  return t.sortNodePosition(e);
}
function L_(t, e, n = {}) {
  t.notify("AnimationStart", e);
  let r;
  if (Array.isArray(e)) {
    const i = e.map((f) => Ha(t, f, n));
    r = Promise.all(i);
  } else if (typeof e == "string")
    r = Ha(t, e, n);
  else {
    const i = typeof e == "function" ? lo(t, e, n.custom) : e;
    r = Promise.all(gg(t, i, n));
  }
  return r.then(() => t.notify("AnimationComplete", e));
}
const B_ = [...jl].reverse(), z_ = jl.length;
function N_(t) {
  return (e) => Promise.all(e.map(({ animation: n, options: r }) => L_(t, n, r)));
}
function j_(t) {
  let e = N_(t);
  const n = V_();
  let r = !0;
  const i = (s, a) => {
    const h = lo(t, a);
    if (h) {
      const { transition: o, transitionEnd: u, ...c } = h;
      s = { ...s, ...c, ...u };
    }
    return s;
  };
  function f(s) {
    e = s(t);
  }
  function g(s, a) {
    const h = t.getProps(), o = t.getVariantContext(!0) || {}, u = [], c = /* @__PURE__ */ new Set();
    let d = {}, m = 1 / 0;
    for (let v = 0; v < z_; v++) {
      const b = B_[v], y = n[b], w = h[b] !== void 0 ? h[b] : o[b], C = pi(w), _ = b === a ? y.isActive : null;
      _ === !1 && (m = v);
      let S = w === o[b] && w !== h[b] && C;
      if (S && r && t.manuallyAnimateOnMount && (S = !1), y.protectedKeys = { ...d }, // If it isn't active and hasn't *just* been set as inactive
      !y.isActive && _ === null || // If we didn't and don't have any defined prop for this animation type
      !w && !y.prevProp || // Or if the prop doesn't define an animation
      so(w) || typeof w == "boolean")
        continue;
      let I = $_(y.prevProp, w) || // If we're making this variant active, we want to always make it active
      b === a && y.isActive && !S && C || // If we removed a higher-priority variant (i is in reverse order)
      v > m && C, L = !1;
      const j = Array.isArray(w) ? w : [w];
      let G = j.reduce(i, {});
      _ === !1 && (G = {});
      const { prevResolvedValues: te = {} } = y, W = {
        ...te,
        ...G
      }, q = (K) => {
        I = !0, c.has(K) && (L = !0, c.delete(K)), y.needsAnimating[K] = !0;
      };
      for (const K in W) {
        const ne = G[K], re = te[K];
        if (d.hasOwnProperty(K))
          continue;
        let T = !1;
        _s(ne) && _s(re) ? T = !Lp(ne, re) : T = ne !== re, T ? ne !== void 0 ? q(K) : c.add(K) : ne !== void 0 && c.has(K) ? q(K) : y.protectedKeys[K] = !0;
      }
      y.prevProp = w, y.prevResolvedValues = G, y.isActive && (d = { ...d, ...G }), r && t.blockInitialAnimation && (I = !1), I && (!S || L) && u.push(...j.map((K) => ({
        animation: K,
        options: { type: b, ...s }
      })));
    }
    if (c.size) {
      const v = {};
      c.forEach((b) => {
        const y = t.getBaseTarget(b);
        y !== void 0 && (v[b] = y);
      }), u.push({ animation: v });
    }
    let p = !!u.length;
    return r && (h.initial === !1 || h.initial === h.animate) && !t.manuallyAnimateOnMount && (p = !1), r = !1, p ? e(u) : Promise.resolve();
  }
  function l(s, a, h) {
    var o;
    if (n[s].isActive === a)
      return Promise.resolve();
    (o = t.variantChildren) === null || o === void 0 || o.forEach((c) => {
      var d;
      return (d = c.animationState) === null || d === void 0 ? void 0 : d.setActive(s, a);
    }), n[s].isActive = a;
    const u = g(h, s);
    for (const c in n)
      n[c].protectedKeys = {};
    return u;
  }
  return {
    animateChanges: g,
    setActive: l,
    setAnimateFunction: f,
    getState: () => n
  };
}
function $_(t, e) {
  return typeof e == "string" ? e !== t : Array.isArray(e) ? !Lp(e, t) : !1;
}
function On(t = !1) {
  return {
    isActive: t,
    protectedKeys: {},
    needsAnimating: {},
    prevResolvedValues: {}
  };
}
function V_() {
  return {
    animate: On(!0),
    whileInView: On(),
    whileHover: On(),
    whileTap: On(),
    whileDrag: On(),
    whileFocus: On(),
    exit: On()
  };
}
class H_ extends Ir {
  /**
   * We dynamically generate the AnimationState manager as it contains a reference
   * to the underlying animation library. We only want to load that if we load this,
   * so people can optionally code split it out using the `m` component.
   */
  constructor(e) {
    super(e), e.animationState || (e.animationState = j_(e));
  }
  updateAnimationControlsSubscription() {
    const { animate: e } = this.node.getProps();
    this.unmount(), so(e) && (this.unmount = e.subscribe(this.node));
  }
  /**
   * Subscribe any provided AnimationControls to the component's VisualElement
   */
  mount() {
    this.updateAnimationControlsSubscription();
  }
  update() {
    const { animate: e } = this.node.getProps(), { animate: n } = this.node.prevProps || {};
    e !== n && this.updateAnimationControlsSubscription();
  }
  unmount() {
  }
}
let W_ = 0;
class U_ extends Ir {
  constructor() {
    super(...arguments), this.id = W_++;
  }
  update() {
    if (!this.node.presenceContext)
      return;
    const { isPresent: e, onExitComplete: n, custom: r } = this.node.presenceContext, { isPresent: i } = this.node.prevPresenceContext || {};
    if (!this.node.animationState || e === i)
      return;
    const f = this.node.animationState.setActive("exit", !e, { custom: r ?? this.node.getProps().custom });
    n && !e && f.then(() => n(this.id));
  }
  mount() {
    const { register: e } = this.node.presenceContext || {};
    e && (this.unmount = e(this.id));
  }
  unmount() {
  }
}
const X_ = {
  animation: {
    Feature: H_
  },
  exit: {
    Feature: U_
  }
}, Yu = () => ({ min: 0, max: 0 }), mg = () => ({
  x: Yu(),
  y: Yu()
});
function Y_({ top: t, left: e, right: n, bottom: r }) {
  return {
    x: { min: e, max: n },
    y: { min: t, max: r }
  };
}
function G_(t, e) {
  if (!e)
    return t;
  const n = e({ x: t.left, y: t.top }), r = e({ x: t.right, y: t.bottom });
  return {
    top: n.y,
    left: n.x,
    bottom: r.y,
    right: r.x
  };
}
function K_(t, e) {
  return Y_(G_(t.getBoundingClientRect(), e));
}
const q_ = /var\((--[a-zA-Z0-9-_]+),? ?([a-zA-Z0-9 ()%#.,-]+)?\)/;
function Z_(t) {
  const e = q_.exec(t);
  if (!e)
    return [,];
  const [, n, r] = e;
  return [n, r];
}
function Wa(t, e, n = 1) {
  const [r, i] = Z_(t);
  if (!r)
    return;
  const f = window.getComputedStyle(e).getPropertyValue(r);
  if (f) {
    const g = f.trim();
    return hg(g) ? parseFloat(g) : g;
  } else
    return La(i) ? Wa(i, e, n + 1) : i;
}
function J_(t, { ...e }, n) {
  const r = t.current;
  if (!(r instanceof Element))
    return { target: e, transitionEnd: n };
  n && (n = { ...n }), t.values.forEach((i) => {
    const f = i.get();
    if (!La(f))
      return;
    const g = Wa(f, r);
    g && i.set(g);
  });
  for (const i in e) {
    const f = e[i];
    if (!La(f))
      continue;
    const g = Wa(f, r);
    g && (e[i] = g, n || (n = {}), n[i] === void 0 && (n[i] = f));
  }
  return { target: e, transitionEnd: n };
}
const Q_ = /* @__PURE__ */ new Set([
  "width",
  "height",
  "top",
  "left",
  "right",
  "bottom",
  "x",
  "y",
  "translateX",
  "translateY"
]), vg = (t) => Q_.has(t), eS = (t) => Object.keys(t).some(vg), Gu = (t) => t === Qn || t === Ce, Ku = (t, e) => parseFloat(t.split(", ")[e]), qu = (t, e) => (n, { transform: r }) => {
  if (r === "none" || !r)
    return 0;
  const i = r.match(/^matrix3d\((.+)\)$/);
  if (i)
    return Ku(i[1], e);
  {
    const f = r.match(/^matrix\((.+)\)$/);
    return f ? Ku(f[1], t) : 0;
  }
}, tS = /* @__PURE__ */ new Set(["x", "y", "z"]), nS = Di.filter((t) => !tS.has(t));
function rS(t) {
  const e = [];
  return nS.forEach((n) => {
    const r = t.getValue(n);
    r !== void 0 && (e.push([n, r.get()]), r.set(n.startsWith("scale") ? 1 : 0));
  }), e.length && t.render(), e;
}
const Or = {
  // Dimensions
  width: ({ x: t }, { paddingLeft: e = "0", paddingRight: n = "0" }) => t.max - t.min - parseFloat(e) - parseFloat(n),
  height: ({ y: t }, { paddingTop: e = "0", paddingBottom: n = "0" }) => t.max - t.min - parseFloat(e) - parseFloat(n),
  top: (t, { top: e }) => parseFloat(e),
  left: (t, { left: e }) => parseFloat(e),
  bottom: ({ y: t }, { top: e }) => parseFloat(e) + (t.max - t.min),
  right: ({ x: t }, { left: e }) => parseFloat(e) + (t.max - t.min),
  // Transform
  x: qu(4, 13),
  y: qu(5, 14)
};
Or.translateX = Or.x;
Or.translateY = Or.y;
const iS = (t, e, n) => {
  const r = e.measureViewportBox(), i = e.current, f = getComputedStyle(i), { display: g } = f, l = {};
  g === "none" && e.setStaticValue("display", t.display || "block"), n.forEach((a) => {
    l[a] = Or[a](r, f);
  }), e.render();
  const s = e.measureViewportBox();
  return n.forEach((a) => {
    const h = e.getValue(a);
    h && h.jump(l[a]), t[a] = Or[a](s, f);
  }), t;
}, sS = (t, e, n = {}, r = {}) => {
  e = { ...e }, r = { ...r };
  const i = Object.keys(e).filter(vg);
  let f = [], g = !1;
  const l = [];
  if (i.forEach((s) => {
    const a = t.getValue(s);
    if (!t.hasValue(s))
      return;
    let h = n[s], o = Wr(h);
    const u = e[s];
    let c;
    if (_s(u)) {
      const d = u.length, m = u[0] === null ? 1 : 0;
      h = u[m], o = Wr(h);
      for (let p = m; p < d && u[p] !== null; p++)
        c ? Kl(Wr(u[p]) === c) : c = Wr(u[p]);
    } else
      c = Wr(u);
    if (o !== c)
      if (Gu(o) && Gu(c)) {
        const d = a.get();
        typeof d == "string" && a.set(parseFloat(d)), typeof u == "string" ? e[s] = parseFloat(u) : Array.isArray(u) && c === Ce && (e[s] = u.map(parseFloat));
      } else
        o != null && o.transform && (c != null && c.transform) && (h === 0 || u === 0) ? h === 0 ? a.set(c.transform(h)) : e[s] = o.transform(u) : (g || (f = rS(t), g = !0), l.push(s), r[s] = r[s] !== void 0 ? r[s] : e[s], a.jump(u));
  }), l.length) {
    const s = l.indexOf("height") >= 0 ? window.pageYOffset : null, a = iS(e, t, l);
    return f.length && f.forEach(([h, o]) => {
      t.getValue(h).set(o);
    }), t.render(), io && s !== null && window.scrollTo({ top: s }), { target: a, transitionEnd: r };
  } else
    return { target: e, transitionEnd: r };
};
function oS(t, e, n, r) {
  return eS(e) ? sS(t, e, n, r) : { target: e, transitionEnd: r };
}
const aS = (t, e, n, r) => {
  const i = J_(t, e, r);
  return e = i.target, r = i.transitionEnd, oS(t, e, n, r);
}, Ua = { current: null }, bg = { current: !1 };
function lS() {
  if (bg.current = !0, !!io)
    if (window.matchMedia) {
      const t = window.matchMedia("(prefers-reduced-motion)"), e = () => Ua.current = t.matches;
      t.addListener(e), e();
    } else
      Ua.current = !1;
}
function cS(t, e, n) {
  const { willChange: r } = e;
  for (const i in e) {
    const f = e[i], g = n[i];
    if (Ct(f))
      t.addValue(i, f), Os(r) && r.add(i);
    else if (Ct(g))
      t.addValue(i, mi(f, { owner: t })), Os(r) && r.remove(i);
    else if (g !== f)
      if (t.hasValue(i)) {
        const l = t.getValue(i);
        !l.hasAnimated && l.set(f);
      } else {
        const l = t.getStaticValue(i);
        t.addValue(i, mi(l !== void 0 ? l : f, { owner: t }));
      }
  }
  for (const i in n)
    e[i] === void 0 && t.removeValue(i);
  return e;
}
const Zu = /* @__PURE__ */ new WeakMap(), yg = Object.keys(gi), uS = yg.length, Ju = [
  "AnimationStart",
  "AnimationComplete",
  "Update",
  "BeforeLayoutMeasure",
  "LayoutMeasure",
  "LayoutAnimationStart",
  "LayoutAnimationComplete"
], hS = $l.length;
class fS {
  constructor({ parent: e, props: n, presenceContext: r, reducedMotionConfig: i, visualState: f }, g = {}) {
    this.current = null, this.children = /* @__PURE__ */ new Set(), this.isVariantNode = !1, this.isControllingVariants = !1, this.shouldReduceMotion = null, this.values = /* @__PURE__ */ new Map(), this.features = {}, this.valueSubscriptions = /* @__PURE__ */ new Map(), this.prevMotionValues = {}, this.events = {}, this.propEventSubscriptions = {}, this.notifyUpdate = () => this.notify("Update", this.latestValues), this.render = () => {
      this.current && (this.triggerBuild(), this.renderInstance(this.current, this.renderState, this.props.style, this.projection));
    }, this.scheduleRender = () => rt.render(this.render, !1, !0);
    const { latestValues: l, renderState: s } = f;
    this.latestValues = l, this.baseTarget = { ...l }, this.initialValues = n.initial ? { ...l } : {}, this.renderState = s, this.parent = e, this.props = n, this.presenceContext = r, this.depth = e ? e.depth + 1 : 0, this.reducedMotionConfig = i, this.options = g, this.isControllingVariants = oo(n), this.isVariantNode = mp(n), this.isVariantNode && (this.variantChildren = /* @__PURE__ */ new Set()), this.manuallyAnimateOnMount = !!(e && e.current);
    const { willChange: a, ...h } = this.scrapeMotionValuesFromProps(n, {});
    for (const o in h) {
      const u = h[o];
      l[o] !== void 0 && Ct(u) && (u.set(l[o], !1), Os(a) && a.add(o));
    }
  }
  /**
   * This method takes React props and returns found MotionValues. For example, HTML
   * MotionValues will be found within the style prop, whereas for Three.js within attribute arrays.
   *
   * This isn't an abstract method as it needs calling in the constructor, but it is
   * intended to be one.
   */
  scrapeMotionValuesFromProps(e, n) {
    return {};
  }
  mount(e) {
    this.current = e, Zu.set(e, this), this.projection && !this.projection.instance && this.projection.mount(e), this.parent && this.isVariantNode && !this.isControllingVariants && (this.removeFromVariantTree = this.parent.addVariantChild(this)), this.values.forEach((n, r) => this.bindToMotionValue(r, n)), bg.current || lS(), this.shouldReduceMotion = this.reducedMotionConfig === "never" ? !1 : this.reducedMotionConfig === "always" ? !0 : Ua.current, this.parent && this.parent.children.add(this), this.update(this.props, this.presenceContext);
  }
  unmount() {
    Zu.delete(this.current), this.projection && this.projection.unmount(), Ss(this.notifyUpdate), Ss(this.render), this.valueSubscriptions.forEach((e) => e()), this.removeFromVariantTree && this.removeFromVariantTree(), this.parent && this.parent.children.delete(this);
    for (const e in this.events)
      this.events[e].clear();
    for (const e in this.features)
      this.features[e].unmount();
    this.current = null;
  }
  bindToMotionValue(e, n) {
    const r = Jn.has(e), i = n.on("change", (g) => {
      this.latestValues[e] = g, this.props.onUpdate && rt.update(this.notifyUpdate, !1, !0), r && this.projection && (this.projection.isTransformDirty = !0);
    }), f = n.on("renderRequest", this.scheduleRender);
    this.valueSubscriptions.set(e, () => {
      i(), f();
    });
  }
  sortNodePosition(e) {
    return !this.current || !this.sortInstanceNodePosition || this.type !== e.type ? 0 : this.sortInstanceNodePosition(this.current, e.current);
  }
  loadFeatures({ children: e, ...n }, r, i, f) {
    let g, l;
    for (let s = 0; s < uS; s++) {
      const a = yg[s], { isEnabled: h, Feature: o, ProjectionNode: u, MeasureLayout: c } = gi[a];
      u && (g = u), h(n) && (!this.features[a] && o && (this.features[a] = new o(this)), c && (l = c));
    }
    if ((this.type === "html" || this.type === "svg") && !this.projection && g) {
      this.projection = new g(this.latestValues, this.parent && this.parent.projection);
      const { layoutId: s, layout: a, drag: h, dragConstraints: o, layoutScroll: u, layoutRoot: c } = n;
      this.projection.setOptions({
        layoutId: s,
        layout: a,
        alwaysMeasureLayout: !!h || o && gp(o),
        visualElement: this,
        scheduleRender: () => this.scheduleRender(),
        /**
         * TODO: Update options in an effect. This could be tricky as it'll be too late
         * to update by the time layout animations run.
         * We also need to fix this safeToRemove by linking it up to the one returned by usePresence,
         * ensuring it gets called if there's no potential layout animations.
         *
         */
        animationType: typeof a == "string" ? a : "both",
        initialPromotionConfig: f,
        layoutScroll: u,
        layoutRoot: c
      });
    }
    return l;
  }
  updateFeatures() {
    for (const e in this.features) {
      const n = this.features[e];
      n.isMounted ? n.update() : (n.mount(), n.isMounted = !0);
    }
  }
  triggerBuild() {
    this.build(this.renderState, this.latestValues, this.options, this.props);
  }
  /**
   * Measure the current viewport box with or without transforms.
   * Only measures axis-aligned boxes, rotate and skew must be manually
   * removed with a re-render to work.
   */
  measureViewportBox() {
    return this.current ? this.measureInstanceViewportBox(this.current, this.props) : mg();
  }
  getStaticValue(e) {
    return this.latestValues[e];
  }
  setStaticValue(e, n) {
    this.latestValues[e] = n;
  }
  /**
   * Make a target animatable by Popmotion. For instance, if we're
   * trying to animate width from 100px to 100vw we need to measure 100vw
   * in pixels to determine what we really need to animate to. This is also
   * pluggable to support Framer's custom value types like Color,
   * and CSS variables.
   */
  makeTargetAnimatable(e, n = !0) {
    return this.makeTargetAnimatableFromInstance(e, this.props, n);
  }
  /**
   * Update the provided props. Ensure any newly-added motion values are
   * added to our map, old ones removed, and listeners updated.
   */
  update(e, n) {
    (e.transformTemplate || this.props.transformTemplate) && this.scheduleRender(), this.prevProps = this.props, this.props = e, this.prevPresenceContext = this.presenceContext, this.presenceContext = n;
    for (let r = 0; r < Ju.length; r++) {
      const i = Ju[r];
      this.propEventSubscriptions[i] && (this.propEventSubscriptions[i](), delete this.propEventSubscriptions[i]);
      const f = e["on" + i];
      f && (this.propEventSubscriptions[i] = this.on(i, f));
    }
    this.prevMotionValues = cS(this, this.scrapeMotionValuesFromProps(e, this.prevProps), this.prevMotionValues), this.handleChildMotionValue && this.handleChildMotionValue();
  }
  getProps() {
    return this.props;
  }
  /**
   * Returns the variant definition with a given name.
   */
  getVariant(e) {
    return this.props.variants ? this.props.variants[e] : void 0;
  }
  /**
   * Returns the defined default transition on this component.
   */
  getDefaultTransition() {
    return this.props.transition;
  }
  getTransformPagePoint() {
    return this.props.transformPagePoint;
  }
  getClosestVariantNode() {
    return this.isVariantNode ? this : this.parent ? this.parent.getClosestVariantNode() : void 0;
  }
  getVariantContext(e = !1) {
    if (e)
      return this.parent ? this.parent.getVariantContext() : void 0;
    if (!this.isControllingVariants) {
      const r = this.parent ? this.parent.getVariantContext() || {} : {};
      return this.props.initial !== void 0 && (r.initial = this.props.initial), r;
    }
    const n = {};
    for (let r = 0; r < hS; r++) {
      const i = $l[r], f = this.props[i];
      (pi(f) || f === !1) && (n[i] = f);
    }
    return n;
  }
  /**
   * Add a child visual element to our set of children.
   */
  addVariantChild(e) {
    const n = this.getClosestVariantNode();
    if (n)
      return n.variantChildren && n.variantChildren.add(e), () => n.variantChildren.delete(e);
  }
  /**
   * Add a motion value and bind it to this visual element.
   */
  addValue(e, n) {
    n !== this.values.get(e) && (this.removeValue(e), this.bindToMotionValue(e, n)), this.values.set(e, n), this.latestValues[e] = n.get();
  }
  /**
   * Remove a motion value and unbind any active subscriptions.
   */
  removeValue(e) {
    this.values.delete(e);
    const n = this.valueSubscriptions.get(e);
    n && (n(), this.valueSubscriptions.delete(e)), delete this.latestValues[e], this.removeValueFromRenderState(e, this.renderState);
  }
  /**
   * Check whether we have a motion value for this key
   */
  hasValue(e) {
    return this.values.has(e);
  }
  getValue(e, n) {
    if (this.props.values && this.props.values[e])
      return this.props.values[e];
    let r = this.values.get(e);
    return r === void 0 && n !== void 0 && (r = mi(n, { owner: this }), this.addValue(e, r)), r;
  }
  /**
   * If we're trying to animate to a previously unencountered value,
   * we need to check for it in our state and as a last resort read it
   * directly from the instance (which might have performance implications).
   */
  readValue(e) {
    var n;
    return this.latestValues[e] !== void 0 || !this.current ? this.latestValues[e] : (n = this.getBaseTargetFromProps(this.props, e)) !== null && n !== void 0 ? n : this.readValueFromInstance(this.current, e, this.options);
  }
  /**
   * Set the base target to later animate back to. This is currently
   * only hydrated on creation and when we first read a value.
   */
  setBaseTarget(e, n) {
    this.baseTarget[e] = n;
  }
  /**
   * Find the base target for a value thats been removed from all animation
   * props.
   */
  getBaseTarget(e) {
    var n;
    const { initial: r } = this.props, i = typeof r == "string" || typeof r == "object" ? (n = Gl(this.props, r)) === null || n === void 0 ? void 0 : n[e] : void 0;
    if (r && i !== void 0)
      return i;
    const f = this.getBaseTargetFromProps(this.props, e);
    return f !== void 0 && !Ct(f) ? f : this.initialValues[e] !== void 0 && i === void 0 ? void 0 : this.baseTarget[e];
  }
  on(e, n) {
    return this.events[e] || (this.events[e] = new fg()), this.events[e].add(n);
  }
  notify(e, ...n) {
    this.events[e] && this.events[e].notify(...n);
  }
}
class wg extends fS {
  sortInstanceNodePosition(e, n) {
    return e.compareDocumentPosition(n) & 2 ? 1 : -1;
  }
  getBaseTargetFromProps(e, n) {
    return e.style ? e.style[n] : void 0;
  }
  removeValueFromRenderState(e, { vars: n, style: r }) {
    delete n[e], delete r[e];
  }
  makeTargetAnimatableFromInstance({ transition: e, transitionEnd: n, ...r }, { transformValues: i }, f) {
    let g = P_(r, e || {}, this);
    if (i && (n && (n = i(n)), r && (r = i(r)), g && (g = i(g))), f) {
      D_(this, r, g);
      const l = aS(this, r, g, n);
      n = l.transitionEnd, r = l.target;
    }
    return {
      transition: e,
      transitionEnd: n,
      ...r
    };
  }
}
function dS(t) {
  return window.getComputedStyle(t);
}
class pS extends wg {
  constructor() {
    super(...arguments), this.type = "html";
  }
  readValueFromInstance(e, n) {
    if (Jn.has(n)) {
      const r = Ql(n);
      return r && r.default || 0;
    } else {
      const r = dS(e), i = (wp(n) ? r.getPropertyValue(n) : r[n]) || 0;
      return typeof i == "string" ? i.trim() : i;
    }
  }
  measureInstanceViewportBox(e, { transformPagePoint: n }) {
    return K_(e, n);
  }
  build(e, n, r, i) {
    Hl(e, n, r, i.transformTemplate);
  }
  scrapeMotionValuesFromProps(e, n) {
    return Yl(e, n);
  }
  handleChildMotionValue() {
    this.childSubscription && (this.childSubscription(), delete this.childSubscription);
    const { children: e } = this.props;
    Ct(e) && (this.childSubscription = e.on("change", (n) => {
      this.current && (this.current.textContent = `${n}`);
    }));
  }
  renderInstance(e, n, r, i) {
    Ep(e, n, r, i);
  }
}
class gS extends wg {
  constructor() {
    super(...arguments), this.type = "svg", this.isSVGTag = !1;
  }
  getBaseTargetFromProps(e, n) {
    return e[n];
  }
  readValueFromInstance(e, n) {
    if (Jn.has(n)) {
      const r = Ql(n);
      return r && r.default || 0;
    }
    return n = kp.has(n) ? n : Nl(n), e.getAttribute(n);
  }
  measureInstanceViewportBox() {
    return mg();
  }
  scrapeMotionValuesFromProps(e, n) {
    return Dp(e, n);
  }
  build(e, n, r, i) {
    Ul(e, n, r, this.isSVGTag, i.transformTemplate);
  }
  renderInstance(e, n, r, i) {
    Op(e, n, r, i);
  }
  mount(e) {
    this.isSVGTag = Xl(e.tagName), super.mount(e);
  }
}
const mS = (t, e) => Vl(t) ? new gS(e, { enableHardwareAcceleration: !1 }) : new pS(e, { enableHardwareAcceleration: !0 }), ot = px(Yx);
function xg() {
  const t = de(!1);
  return Bl(() => (t.current = !0, () => {
    t.current = !1;
  }), []), t;
}
function vS() {
  const t = xg(), [e, n] = De(0), r = Oe(() => {
    t.current && n(e + 1);
  }, [e]);
  return [Oe(() => rt.postRender(r), [r]), e];
}
class bS extends ge.Component {
  getSnapshotBeforeUpdate(e) {
    const n = this.props.childRef.current;
    if (n && e.isPresent && !this.props.isPresent) {
      const r = this.props.sizeRef.current;
      r.height = n.offsetHeight || 0, r.width = n.offsetWidth || 0, r.top = n.offsetTop, r.left = n.offsetLeft;
    }
    return null;
  }
  /**
   * Required with getSnapshotBeforeUpdate to stop React complaining.
   */
  componentDidUpdate() {
  }
  render() {
    return this.props.children;
  }
}
function yS({ children: t, isPresent: e }) {
  const n = Pt(), r = de(null), i = de({
    width: 0,
    height: 0,
    top: 0,
    left: 0
  });
  return Df(() => {
    const { width: f, height: g, top: l, left: s } = i.current;
    if (e || !r.current || !f || !g)
      return;
    r.current.dataset.motionPopId = n;
    const a = document.createElement("style");
    return document.head.appendChild(a), a.sheet && a.sheet.insertRule(`
          [data-motion-pop-id="${n}"] {
            position: absolute !important;
            width: ${f}px !important;
            height: ${g}px !important;
            top: ${l}px !important;
            left: ${s}px !important;
          }
        `), () => {
      document.head.removeChild(a);
    };
  }, [e]), ge.createElement(bS, { isPresent: e, childRef: r, sizeRef: i }, ge.cloneElement(t, { ref: r }));
}
const Vo = ({ children: t, initial: e, isPresent: n, onExitComplete: r, custom: i, presenceAffectsLayout: f, mode: g }) => {
  const l = Ap(wS), s = Pt(), a = He(
    () => ({
      id: s,
      initial: e,
      isPresent: n,
      custom: i,
      onExitComplete: (h) => {
        l.set(h, !0);
        for (const o of l.values())
          if (!o)
            return;
        r && r();
      },
      register: (h) => (l.set(h, !1), () => l.delete(h))
    }),
    /**
     * If the presence of a child affects the layout of the components around it,
     * we want to make a new context value to ensure they get re-rendered
     * so they can detect that layout change.
     */
    f ? void 0 : [n]
  );
  return He(() => {
    l.forEach((h, o) => l.set(o, !1));
  }, [n]), ge.useEffect(() => {
    !n && !l.size && r && r();
  }, [n]), g === "popLayout" && (t = ge.createElement(yS, { isPresent: n }, t)), ge.createElement(Ll.Provider, { value: a }, t);
};
function wS() {
  return /* @__PURE__ */ new Map();
}
function xS(t) {
  return Se(() => () => t(), []);
}
const Fn = (t) => t.key || "";
function CS(t, e) {
  t.forEach((n) => {
    const r = Fn(n);
    e.set(r, n);
  });
}
function _S(t) {
  const e = [];
  return mn.forEach(t, (n) => {
    Jt(n) && e.push(n);
  }), e;
}
const tn = ({ children: t, custom: e, initial: n = !0, onExitComplete: r, exitBeforeEnter: i, presenceAffectsLayout: f = !0, mode: g = "sync" }) => {
  const l = ze(vp).forceRender || vS()[0], s = xg(), a = _S(t);
  let h = a;
  const o = de(/* @__PURE__ */ new Map()).current, u = de(h), c = de(/* @__PURE__ */ new Map()).current, d = de(!0);
  if (Bl(() => {
    d.current = !1, CS(a, c), u.current = h;
  }), xS(() => {
    d.current = !0, c.clear(), o.clear();
  }), d.current)
    return ge.createElement(ge.Fragment, null, h.map((b) => ge.createElement(Vo, { key: Fn(b), isPresent: !0, initial: n ? void 0 : !1, presenceAffectsLayout: f, mode: g }, b)));
  h = [...h];
  const m = u.current.map(Fn), p = a.map(Fn), v = m.length;
  for (let b = 0; b < v; b++) {
    const y = m[b];
    p.indexOf(y) === -1 && !o.has(y) && o.set(y, void 0);
  }
  return g === "wait" && o.size && (h = []), o.forEach((b, y) => {
    if (p.indexOf(y) !== -1)
      return;
    const w = c.get(y);
    if (!w)
      return;
    const C = m.indexOf(y);
    let _ = b;
    if (!_) {
      const S = () => {
        o.delete(y);
        const k = Array.from(c.keys()).filter((I) => !p.includes(I));
        if (k.forEach((I) => c.delete(I)), u.current = a.filter((I) => {
          const L = Fn(I);
          return (
            // filter out the node exiting
            L === y || // filter out the leftover children
            k.includes(L)
          );
        }), !o.size) {
          if (s.current === !1)
            return;
          l(), r && r();
        }
      };
      _ = ge.createElement(Vo, { key: Fn(w), isPresent: !1, onExitComplete: S, custom: e, presenceAffectsLayout: f, mode: g }, w), o.set(y, _);
    }
    h.splice(C, 0, _);
  }), h = h.map((b) => {
    const y = b.key;
    return o.has(y) ? b : ge.createElement(Vo, { key: Fn(b), isPresent: !0, presenceAffectsLayout: f, mode: g }, b);
  }), ge.createElement(ge.Fragment, null, o.size ? h : h.map((b) => ut(b)));
};
function SS({ children: t, features: e, strict: n = !1 }) {
  const [, r] = De(!Ho(e)), i = de(void 0);
  if (!Ho(e)) {
    const { renderer: f, ...g } = e;
    i.current = f, Ra(g);
  }
  return Se(() => {
    Ho(e) && e().then(({ renderer: f, ...g }) => {
      Ra(g), i.current = f, r(!0);
    });
  }, []), ge.createElement(zl.Provider, { value: { renderer: i.current, strict: n } }, t);
}
function Ho(t) {
  return typeof t == "function";
}
const TS = {
  renderer: mS,
  ...X_,
  ...lC
}, mt = typeof document < "u" ? ce.useLayoutEffect : () => {
}, Ds = {
  prefix: String(Math.round(Math.random() * 1e10)),
  current: 0
}, Cg = /* @__PURE__ */ ce.createContext(Ds), ES = /* @__PURE__ */ ce.createContext(!1);
let kS = !!(typeof window < "u" && window.document && window.document.createElement), Wo = /* @__PURE__ */ new WeakMap();
function OS(t = !1) {
  let e = ze(Cg), n = de(null);
  if (n.current === null && !t) {
    var r, i;
    let f = (i = ce.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED) === null || i === void 0 || (r = i.ReactCurrentOwner) === null || r === void 0 ? void 0 : r.current;
    if (f) {
      let g = Wo.get(f);
      g == null ? Wo.set(f, {
        id: e.current,
        state: f.memoizedState
      }) : f.memoizedState !== g.state && (e.current = g.id, Wo.delete(f));
    }
    n.current = ++e.current;
  }
  return n.current;
}
function DS(t) {
  let e = ze(Cg);
  e === Ds && !kS && console.warn("When server rendering, you must wrap your application in an <SSRProvider> to ensure consistent ids are generated between the client and server.");
  let n = OS(!!t), r = `react-aria${e.prefix}`;
  return t || `${r}-${n}`;
}
function AS(t) {
  let e = ce.useId(), [n] = De(ec()), r = n ? "react-aria" : `react-aria${Ds.prefix}`;
  return t || `${r}-${e}`;
}
ce.useId;
function PS() {
  return !1;
}
function MS() {
  return !0;
}
function FS(t) {
  return () => {
  };
}
function ec() {
  return typeof ce.useSyncExternalStore == "function" ? ce.useSyncExternalStore(FS, PS, MS) : ze(ES);
}
let Qu = /* @__PURE__ */ new Map();
function IS(t, e) {
  if (t === e)
    return t;
  let n = Qu.get(t);
  if (n)
    return n(e), e;
  let r = Qu.get(e);
  return r ? (r(t), t) : e;
}
function RS(...t) {
  return (...e) => {
    for (let n of t)
      typeof n == "function" && n(...e);
  };
}
const it = (t) => {
  var e;
  return (e = t == null ? void 0 : t.ownerDocument) !== null && e !== void 0 ? e : document;
}, As = (t) => t && "window" in t && t.window === t ? t : it(t).defaultView || window;
function nn(...t) {
  let e = {
    ...t[0]
  };
  for (let n = 1; n < t.length; n++) {
    let r = t[n];
    for (let i in r) {
      let f = e[i], g = r[i];
      typeof f == "function" && typeof g == "function" && // This is a lot faster than a regex.
      i[0] === "o" && i[1] === "n" && i.charCodeAt(2) >= /* 'A' */
      65 && i.charCodeAt(2) <= /* 'Z' */
      90 ? e[i] = RS(f, g) : (i === "className" || i === "UNSAFE_className") && typeof f == "string" && typeof g == "string" ? e[i] = ae(f, g) : i === "id" && f && g ? e.id = IS(f, g) : e[i] = g !== void 0 ? g : f;
    }
  }
  return e;
}
function eh(t) {
  if (LS())
    t.focus({
      preventScroll: !0
    });
  else {
    let e = BS(t);
    t.focus(), zS(e);
  }
}
let Qi = null;
function LS() {
  if (Qi == null) {
    Qi = !1;
    try {
      document.createElement("div").focus({
        get preventScroll() {
          return Qi = !0, !0;
        }
      });
    } catch {
    }
  }
  return Qi;
}
function BS(t) {
  let e = t.parentNode, n = [], r = document.scrollingElement || document.documentElement;
  for (; e instanceof HTMLElement && e !== r; )
    (e.offsetHeight < e.scrollHeight || e.offsetWidth < e.scrollWidth) && n.push({
      element: e,
      scrollTop: e.scrollTop,
      scrollLeft: e.scrollLeft
    }), e = e.parentNode;
  return r instanceof HTMLElement && n.push({
    element: r,
    scrollTop: r.scrollTop,
    scrollLeft: r.scrollLeft
  }), n;
}
function zS(t) {
  for (let { element: e, scrollTop: n, scrollLeft: r } of t)
    e.scrollTop = n, e.scrollLeft = r;
}
function NS(t) {
  var e;
  return typeof window > "u" || window.navigator == null ? !1 : ((e = window.navigator.userAgentData) === null || e === void 0 ? void 0 : e.brands.some((n) => t.test(n.brand))) || t.test(window.navigator.userAgent);
}
function jS(t) {
  var e;
  return typeof window < "u" && window.navigator != null ? t.test(((e = window.navigator.userAgentData) === null || e === void 0 ? void 0 : e.platform) || window.navigator.platform) : !1;
}
function _g() {
  return jS(/^Mac/i);
}
function $S() {
  return NS(/Android/i);
}
let fr = /* @__PURE__ */ new Map(), Xa = /* @__PURE__ */ new Set();
function th() {
  if (typeof window > "u")
    return;
  function t(r) {
    return "propertyName" in r;
  }
  let e = (r) => {
    if (!t(r) || !r.target)
      return;
    let i = fr.get(r.target);
    i || (i = /* @__PURE__ */ new Set(), fr.set(r.target, i), r.target.addEventListener("transitioncancel", n, {
      once: !0
    })), i.add(r.propertyName);
  }, n = (r) => {
    if (!t(r) || !r.target)
      return;
    let i = fr.get(r.target);
    if (i && (i.delete(r.propertyName), i.size === 0 && (r.target.removeEventListener("transitioncancel", n), fr.delete(r.target)), fr.size === 0)) {
      for (let f of Xa)
        f();
      Xa.clear();
    }
  };
  document.body.addEventListener("transitionrun", e), document.body.addEventListener("transitionend", n);
}
typeof document < "u" && (document.readyState !== "loading" ? th() : document.addEventListener("DOMContentLoaded", th));
function VS(t) {
  requestAnimationFrame(() => {
    fr.size === 0 ? t() : Xa.add(t);
  });
}
function tc() {
  let t = de(/* @__PURE__ */ new Map()), e = Oe((i, f, g, l) => {
    let s = l != null && l.once ? (...a) => {
      t.current.delete(g), g(...a);
    } : g;
    t.current.set(g, {
      type: f,
      eventTarget: i,
      fn: s,
      options: l
    }), i.addEventListener(f, g, l);
  }, []), n = Oe((i, f, g, l) => {
    var s;
    let a = ((s = t.current.get(g)) === null || s === void 0 ? void 0 : s.fn) || g;
    i.removeEventListener(f, a, l), t.current.delete(g);
  }, []), r = Oe(() => {
    t.current.forEach((i, f) => {
      n(i.eventTarget, i.type, f, i.options);
    });
  }, [
    n
  ]);
  return Se(() => r, [
    r
  ]), {
    addGlobalListener: e,
    removeGlobalListener: n,
    removeAllGlobalListeners: r
  };
}
function er(t) {
  const e = de(null);
  return He(() => ({
    get current() {
      return e.current;
    },
    set current(n) {
      e.current = n, typeof t == "function" ? t(n) : t && (t.current = n);
    }
  }), [
    t
  ]);
}
let _t = typeof document < "u" && window.visualViewport;
function HS() {
  let t = ec(), [e, n] = De(() => t ? {
    width: 0,
    height: 0
  } : nh());
  return Se(() => {
    let r = () => {
      n((i) => {
        let f = nh();
        return f.width === i.width && f.height === i.height ? i : f;
      });
    };
    return _t ? _t.addEventListener("resize", r) : window.addEventListener("resize", r), () => {
      _t ? _t.removeEventListener("resize", r) : window.removeEventListener("resize", r);
    };
  }, []), e;
}
function nh() {
  return {
    width: _t && (_t == null ? void 0 : _t.width) || window.innerWidth,
    height: _t && (_t == null ? void 0 : _t.height) || window.innerHeight
  };
}
function WS(t) {
  return t.mozInputSource === 0 && t.isTrusted ? !0 : $S() && t.pointerType ? t.type === "click" && t.buttons === 1 : t.detail === 0 && !t.pointerType;
}
function yn(t, e, n) {
  let [r, i] = De(t || e), f = de(t !== void 0), g = t !== void 0;
  Se(() => {
    let a = f.current;
    a !== g && console.warn(`WARN: A component changed from ${a ? "controlled" : "uncontrolled"} to ${g ? "controlled" : "uncontrolled"}.`), f.current = g;
  }, [
    g
  ]);
  let l = g ? t : r, s = Oe((a, ...h) => {
    let o = (u, ...c) => {
      n && (Object.is(l, u) || n(u, ...c)), g || (l = u);
    };
    typeof a == "function" ? (console.warn("We can not support a function callback. See Github Issues for details https://github.com/adobe/react-spectrum/issues/2320"), i((c, ...d) => {
      let m = a(g ? l : c, ...d);
      return o(m, ...h), g ? c : m;
    })) : (g || i(a), o(a, ...h));
  }, [
    g,
    l,
    n
  ]);
  return [
    l,
    s
  ];
}
function Nn(t, e = -1 / 0, n = 1 / 0) {
  return Math.min(Math.max(t, e), n);
}
function es(t, e) {
  let n = t, r = e.toString(), i = r.indexOf("."), f = i >= 0 ? r.length - i : 0;
  if (f > 0) {
    let g = Math.pow(10, f);
    n = Math.round(n * g) / g;
  }
  return n;
}
function US(t, e, n, r) {
  e = Number(e), n = Number(n);
  let i = (t - (isNaN(e) ? 0 : e)) % r, f = es(Math.abs(i) * 2 >= r ? t + Math.sign(i) * (r - Math.abs(i)) : t - i, r);
  return isNaN(e) ? !isNaN(n) && f > n && (f = Math.floor(es(n / r, r)) * r) : f < e ? f = e : !isNaN(n) && f > n && (f = e + Math.floor(es((n - e) / r, r)) * r), f = es(f, r), f;
}
function Xe(t, e, n = 10) {
  const r = Math.pow(n, e);
  return Math.round(t * r) / r;
}
var we = {};
const XS = {}, YS = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  default: XS
}, Symbol.toStringTag, { value: "Module" })), Uo = /* @__PURE__ */ O1(YS);
(function(t) {
  /*! Fabric.js Copyright 2008-2015, Printio (Juriy Zaytsev, Maxim Chernyak) */
  var e = e || { version: "5.3.0" };
  if (t.fabric = e, typeof document < "u" && typeof window < "u")
    document instanceof (typeof HTMLDocument < "u" ? HTMLDocument : Document) ? e.document = document : e.document = document.implementation.createHTMLDocument(""), e.window = window;
  else {
    var n = Uo, r = new n.JSDOM(
      decodeURIComponent("%3C!DOCTYPE%20html%3E%3Chtml%3E%3Chead%3E%3C%2Fhead%3E%3Cbody%3E%3C%2Fbody%3E%3C%2Fhtml%3E"),
      {
        features: {
          FetchExternalResources: ["img"]
        },
        resources: "usable"
      }
    ).window;
    e.document = r.document, e.jsdomImplForWrapper = Uo.implForWrapper, e.nodeCanvas = Uo.Canvas, e.window = r, DOMParser = e.window.DOMParser;
  }
  e.isTouchSupported = "ontouchstart" in e.window || "ontouchstart" in e.document || e.window && e.window.navigator && e.window.navigator.maxTouchPoints > 0, e.isLikelyNode = typeof Buffer < "u" && typeof window > "u", e.SHARED_ATTRIBUTES = [
    "display",
    "transform",
    "fill",
    "fill-opacity",
    "fill-rule",
    "opacity",
    "stroke",
    "stroke-dasharray",
    "stroke-linecap",
    "stroke-dashoffset",
    "stroke-linejoin",
    "stroke-miterlimit",
    "stroke-opacity",
    "stroke-width",
    "id",
    "paint-order",
    "vector-effect",
    "instantiated_by_use",
    "clip-path"
  ], e.DPI = 96, e.reNum = "(?:[-+]?(?:\\d+|\\d*\\.\\d+)(?:[eE][-+]?\\d+)?)", e.commaWsp = "(?:\\s+,?\\s*|,\\s*)", e.rePathCommand = /([-+]?((\d+\.\d+)|((\d+)|(\.\d+)))(?:[eE][-+]?\d+)?)/ig, e.reNonWord = /[ \n\.,;!\?\-]/, e.fontPaths = {}, e.iMatrix = [1, 0, 0, 1, 0, 0], e.svgNS = "http://www.w3.org/2000/svg", e.perfLimitSizeTotal = 2097152, e.maxCacheSideLimit = 4096, e.minCacheSideLimit = 256, e.charWidthsCache = {}, e.textureSize = 2048, e.disableStyleCopyPaste = !1, e.enableGLFiltering = !0, e.devicePixelRatio = e.window.devicePixelRatio || e.window.webkitDevicePixelRatio || e.window.mozDevicePixelRatio || 1, e.browserShadowBlurConstant = 1, e.arcToSegmentsCache = {}, e.boundsOfCurveCache = {}, e.cachesBoundsOfCurve = !0, e.forceGLPutImageData = !1, e.initFilterBackend = function() {
    if (e.enableGLFiltering && e.isWebglSupported && e.isWebglSupported(e.textureSize))
      return console.log("max texture size: " + e.maxTextureSize), new e.WebglFilterBackend({ tileSize: e.textureSize });
    if (e.Canvas2dFilterBackend)
      return new e.Canvas2dFilterBackend();
  }, typeof document < "u" && typeof window < "u" && (window.fabric = e), function() {
    function l(c, d) {
      if (this.__eventListeners[c]) {
        var m = this.__eventListeners[c];
        d ? m[m.indexOf(d)] = !1 : e.util.array.fill(m, !1);
      }
    }
    function s(c, d) {
      if (this.__eventListeners || (this.__eventListeners = {}), arguments.length === 1)
        for (var m in c)
          this.on(m, c[m]);
      else
        this.__eventListeners[c] || (this.__eventListeners[c] = []), this.__eventListeners[c].push(d);
      return this;
    }
    function a(c, d) {
      var m = (function() {
        d.apply(this, arguments), this.off(c, m);
      }).bind(this);
      this.on(c, m);
    }
    function h(c, d) {
      if (arguments.length === 1)
        for (var m in c)
          a.call(this, m, c[m]);
      else
        a.call(this, c, d);
      return this;
    }
    function o(c, d) {
      if (!this.__eventListeners)
        return this;
      if (arguments.length === 0)
        for (c in this.__eventListeners)
          l.call(this, c);
      else if (arguments.length === 1 && typeof arguments[0] == "object")
        for (var m in c)
          l.call(this, m, c[m]);
      else
        l.call(this, c, d);
      return this;
    }
    function u(c, d) {
      if (!this.__eventListeners)
        return this;
      var m = this.__eventListeners[c];
      if (!m)
        return this;
      for (var p = 0, v = m.length; p < v; p++)
        m[p] && m[p].call(this, d || {});
      return this.__eventListeners[c] = m.filter(function(b) {
        return b !== !1;
      }), this;
    }
    e.Observable = {
      fire: u,
      on: s,
      once: h,
      off: o
    };
  }(), e.Collection = {
    _objects: [],
    /**
     * Adds objects to collection, Canvas or Group, then renders canvas
     * (if `renderOnAddRemove` is not `false`).
     * in case of Group no changes to bounding box are made.
     * Objects should be instances of (or inherit from) fabric.Object
     * Use of this function is highly discouraged for groups.
     * you can add a bunch of objects with the add method but then you NEED
     * to run a addWithUpdate call for the Group class or position/bbox will be wrong.
     * @param {...fabric.Object} object Zero or more fabric instances
     * @return {Self} thisArg
     * @chainable
     */
    add: function() {
      if (this._objects.push.apply(this._objects, arguments), this._onObjectAdded)
        for (var l = 0, s = arguments.length; l < s; l++)
          this._onObjectAdded(arguments[l]);
      return this.renderOnAddRemove && this.requestRenderAll(), this;
    },
    /**
     * Inserts an object into collection at specified index, then renders canvas (if `renderOnAddRemove` is not `false`)
     * An object should be an instance of (or inherit from) fabric.Object
     * Use of this function is highly discouraged for groups.
     * you can add a bunch of objects with the insertAt method but then you NEED
     * to run a addWithUpdate call for the Group class or position/bbox will be wrong.
     * @param {Object} object Object to insert
     * @param {Number} index Index to insert object at
     * @param {Boolean} nonSplicing When `true`, no splicing (shifting) of objects occurs
     * @return {Self} thisArg
     * @chainable
     */
    insertAt: function(l, s, a) {
      var h = this._objects;
      return a ? h[s] = l : h.splice(s, 0, l), this._onObjectAdded && this._onObjectAdded(l), this.renderOnAddRemove && this.requestRenderAll(), this;
    },
    /**
     * Removes objects from a collection, then renders canvas (if `renderOnAddRemove` is not `false`)
     * @param {...fabric.Object} object Zero or more fabric instances
     * @return {Self} thisArg
     * @chainable
     */
    remove: function() {
      for (var l = this._objects, s, a = !1, h = 0, o = arguments.length; h < o; h++)
        s = l.indexOf(arguments[h]), s !== -1 && (a = !0, l.splice(s, 1), this._onObjectRemoved && this._onObjectRemoved(arguments[h]));
      return this.renderOnAddRemove && a && this.requestRenderAll(), this;
    },
    /**
     * Executes given function for each object in this group
     * @param {Function} callback
     *                   Callback invoked with current object as first argument,
     *                   index - as second and an array of all objects - as third.
     *                   Callback is invoked in a context of Global Object (e.g. `window`)
     *                   when no `context` argument is given
     *
     * @param {Object} context Context (aka thisObject)
     * @return {Self} thisArg
     * @chainable
     */
    forEachObject: function(l, s) {
      for (var a = this.getObjects(), h = 0, o = a.length; h < o; h++)
        l.call(s, a[h], h, a);
      return this;
    },
    /**
     * Returns an array of children objects of this instance
     * Type parameter introduced in 1.3.10
     * since 2.3.5 this method return always a COPY of the array;
     * @param {String} [type] When specified, only objects of this type are returned
     * @return {Array}
     */
    getObjects: function(l) {
      return typeof l > "u" ? this._objects.concat() : this._objects.filter(function(s) {
        return s.type === l;
      });
    },
    /**
     * Returns object at specified index
     * @param {Number} index
     * @return {Self} thisArg
     */
    item: function(l) {
      return this._objects[l];
    },
    /**
     * Returns true if collection contains no objects
     * @return {Boolean} true if collection is empty
     */
    isEmpty: function() {
      return this._objects.length === 0;
    },
    /**
     * Returns a size of a collection (i.e: length of an array containing its objects)
     * @return {Number} Collection size
     */
    size: function() {
      return this._objects.length;
    },
    /**
     * Returns true if collection contains an object
     * @param {Object} object Object to check against
     * @param {Boolean} [deep=false] `true` to check all descendants, `false` to check only `_objects`
     * @return {Boolean} `true` if collection contains an object
     */
    contains: function(l, s) {
      return this._objects.indexOf(l) > -1 ? !0 : s ? this._objects.some(function(a) {
        return typeof a.contains == "function" && a.contains(l, !0);
      }) : !1;
    },
    /**
     * Returns number representation of a collection complexity
     * @return {Number} complexity
     */
    complexity: function() {
      return this._objects.reduce(function(l, s) {
        return l += s.complexity ? s.complexity() : 0, l;
      }, 0);
    }
  }, e.CommonMethods = {
    /**
     * Sets object's properties from options
     * @param {Object} [options] Options object
     */
    _setOptions: function(l) {
      for (var s in l)
        this.set(s, l[s]);
    },
    /**
     * @private
     * @param {Object} [filler] Options object
     * @param {String} [property] property to set the Gradient to
     */
    _initGradient: function(l, s) {
      l && l.colorStops && !(l instanceof e.Gradient) && this.set(s, new e.Gradient(l));
    },
    /**
     * @private
     * @param {Object} [filler] Options object
     * @param {String} [property] property to set the Pattern to
     * @param {Function} [callback] callback to invoke after pattern load
     */
    _initPattern: function(l, s, a) {
      l && l.source && !(l instanceof e.Pattern) ? this.set(s, new e.Pattern(l, a)) : a && a();
    },
    /**
     * @private
     */
    _setObject: function(l) {
      for (var s in l)
        this._set(s, l[s]);
    },
    /**
     * Sets property to a given value. When changing position/dimension -related properties (left, top, scale, angle, etc.) `set` does not update position of object's borders/controls. If you need to update those, call `setCoords()`.
     * @param {String|Object} key Property name or object (if object, iterate over the object properties)
     * @param {Object|Function} value Property value (if function, the value is passed into it and its return value is used as a new one)
     * @return {fabric.Object} thisArg
     * @chainable
     */
    set: function(l, s) {
      return typeof l == "object" ? this._setObject(l) : this._set(l, s), this;
    },
    _set: function(l, s) {
      this[l] = s;
    },
    /**
     * Toggles specified property from `true` to `false` or from `false` to `true`
     * @param {String} property Property to toggle
     * @return {fabric.Object} thisArg
     * @chainable
     */
    toggle: function(l) {
      var s = this.get(l);
      return typeof s == "boolean" && this.set(l, !s), this;
    },
    /**
     * Basic getter
     * @param {String} property Property name
     * @return {*} value of a property
     */
    get: function(l) {
      return this[l];
    }
  }, function(l) {
    var s = Math.sqrt, a = Math.atan2, h = Math.pow, o = Math.PI / 180, u = Math.PI / 2;
    e.util = {
      /**
       * Calculate the cos of an angle, avoiding returning floats for known results
       * @static
       * @memberOf fabric.util
       * @param {Number} angle the angle in radians or in degree
       * @return {Number}
       */
      cos: function(c) {
        if (c === 0)
          return 1;
        c < 0 && (c = -c);
        var d = c / u;
        switch (d) {
          case 1:
          case 3:
            return 0;
          case 2:
            return -1;
        }
        return Math.cos(c);
      },
      /**
       * Calculate the sin of an angle, avoiding returning floats for known results
       * @static
       * @memberOf fabric.util
       * @param {Number} angle the angle in radians or in degree
       * @return {Number}
       */
      sin: function(c) {
        if (c === 0)
          return 0;
        var d = c / u, m = 1;
        switch (c < 0 && (m = -1), d) {
          case 1:
            return m;
          case 2:
            return 0;
          case 3:
            return -m;
        }
        return Math.sin(c);
      },
      /**
       * Removes value from an array.
       * Presence of value (and its position in an array) is determined via `Array.prototype.indexOf`
       * @static
       * @memberOf fabric.util
       * @param {Array} array
       * @param {*} value
       * @return {Array} original array
       */
      removeFromArray: function(c, d) {
        var m = c.indexOf(d);
        return m !== -1 && c.splice(m, 1), c;
      },
      /**
       * Returns random number between 2 specified ones.
       * @static
       * @memberOf fabric.util
       * @param {Number} min lower limit
       * @param {Number} max upper limit
       * @return {Number} random value (between min and max)
       */
      getRandomInt: function(c, d) {
        return Math.floor(Math.random() * (d - c + 1)) + c;
      },
      /**
       * Transforms degrees to radians.
       * @static
       * @memberOf fabric.util
       * @param {Number} degrees value in degrees
       * @return {Number} value in radians
       */
      degreesToRadians: function(c) {
        return c * o;
      },
      /**
       * Transforms radians to degrees.
       * @static
       * @memberOf fabric.util
       * @param {Number} radians value in radians
       * @return {Number} value in degrees
       */
      radiansToDegrees: function(c) {
        return c / o;
      },
      /**
       * Rotates `point` around `origin` with `radians`
       * @static
       * @memberOf fabric.util
       * @param {fabric.Point} point The point to rotate
       * @param {fabric.Point} origin The origin of the rotation
       * @param {Number} radians The radians of the angle for the rotation
       * @return {fabric.Point} The new rotated point
       */
      rotatePoint: function(c, d, m) {
        var p = new e.Point(c.x - d.x, c.y - d.y), v = e.util.rotateVector(p, m);
        return new e.Point(v.x, v.y).addEquals(d);
      },
      /**
       * Rotates `vector` with `radians`
       * @static
       * @memberOf fabric.util
       * @param {Object} vector The vector to rotate (x and y)
       * @param {Number} radians The radians of the angle for the rotation
       * @return {Object} The new rotated point
       */
      rotateVector: function(c, d) {
        var m = e.util.sin(d), p = e.util.cos(d), v = c.x * p - c.y * m, b = c.x * m + c.y * p;
        return {
          x: v,
          y: b
        };
      },
      /**
       * Creates a vetor from points represented as a point
       * @static
       * @memberOf fabric.util
       *
       * @typedef {Object} Point
       * @property {number} x
       * @property {number} y
       *
       * @param {Point} from
       * @param {Point} to
       * @returns {Point} vector
       */
      createVector: function(c, d) {
        return new e.Point(d.x - c.x, d.y - c.y);
      },
      /**
       * Calculates angle between 2 vectors using dot product
       * @static
       * @memberOf fabric.util
       * @param {Point} a
       * @param {Point} b
       * @returns the angle in radian between the vectors
       */
      calcAngleBetweenVectors: function(c, d) {
        return Math.acos((c.x * d.x + c.y * d.y) / (Math.hypot(c.x, c.y) * Math.hypot(d.x, d.y)));
      },
      /**
       * @static
       * @memberOf fabric.util
       * @param {Point} v
       * @returns {Point} vector representing the unit vector of pointing to the direction of `v`
       */
      getHatVector: function(c) {
        return new e.Point(c.x, c.y).multiply(1 / Math.hypot(c.x, c.y));
      },
      /**
       * @static
       * @memberOf fabric.util
       * @param {Point} A
       * @param {Point} B
       * @param {Point} C
       * @returns {{ vector: Point, angle: number }} vector representing the bisector of A and A's angle
       */
      getBisector: function(c, d, m) {
        var p = e.util.createVector(c, d), v = e.util.createVector(c, m), b = e.util.calcAngleBetweenVectors(p, v), y = e.util.calcAngleBetweenVectors(e.util.rotateVector(p, b), v), w = b * (y === 0 ? 1 : -1) / 2;
        return {
          vector: e.util.getHatVector(e.util.rotateVector(p, w)),
          angle: b
        };
      },
      /**
       * Project stroke width on points returning 2 projections for each point as follows:
       * - `miter`: 2 points corresponding to the outer boundary and the inner boundary of stroke.
       * - `bevel`: 2 points corresponding to the bevel boundaries, tangent to the bisector.
       * - `round`: same as `bevel`
       * Used to calculate object's bounding box
       * @static
       * @memberOf fabric.util
       * @param {Point[]} points
       * @param {Object} options
       * @param {number} options.strokeWidth
       * @param {'miter'|'bevel'|'round'} options.strokeLineJoin
       * @param {number} options.strokeMiterLimit https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stroke-miterlimit
       * @param {boolean} options.strokeUniform
       * @param {number} options.scaleX
       * @param {number} options.scaleY
       * @param {boolean} [openPath] whether the shape is open or not, affects the calculations of the first and last points
       * @returns {fabric.Point[]} array of size 2n/4n of all suspected points
       */
      projectStrokeOnPoints: function(c, d, m) {
        var p = [], v = d.strokeWidth / 2, b = d.strokeUniform ? new e.Point(1 / d.scaleX, 1 / d.scaleY) : new e.Point(1, 1), y = function(w) {
          var C = v / Math.hypot(w.x, w.y);
          return new e.Point(w.x * C * b.x, w.y * C * b.y);
        };
        return c.length <= 1 || c.forEach(function(w, C) {
          var _ = new e.Point(w.x, w.y), S, k;
          C === 0 ? (k = c[C + 1], S = m ? y(e.util.createVector(k, _)).addEquals(_) : c[c.length - 1]) : C === c.length - 1 ? (S = c[C - 1], k = m ? y(e.util.createVector(S, _)).addEquals(_) : c[0]) : (S = c[C - 1], k = c[C + 1]);
          var I = e.util.getBisector(_, S, k), L = I.vector, j = I.angle, G, te;
          if (d.strokeLineJoin === "miter" && (G = -v / Math.sin(j / 2), te = new e.Point(
            L.x * G * b.x,
            L.y * G * b.y
          ), Math.hypot(te.x, te.y) / v <= d.strokeMiterLimit)) {
            p.push(_.add(te)), p.push(_.subtract(te));
            return;
          }
          G = -v * Math.SQRT2, te = new e.Point(
            L.x * G * b.x,
            L.y * G * b.y
          ), p.push(_.add(te)), p.push(_.subtract(te));
        }), p;
      },
      /**
       * Apply transform t to point p
       * @static
       * @memberOf fabric.util
       * @param  {fabric.Point} p The point to transform
       * @param  {Array} t The transform
       * @param  {Boolean} [ignoreOffset] Indicates that the offset should not be applied
       * @return {fabric.Point} The transformed point
       */
      transformPoint: function(c, d, m) {
        return m ? new e.Point(
          d[0] * c.x + d[2] * c.y,
          d[1] * c.x + d[3] * c.y
        ) : new e.Point(
          d[0] * c.x + d[2] * c.y + d[4],
          d[1] * c.x + d[3] * c.y + d[5]
        );
      },
      /**
       * Returns coordinates of points's bounding rectangle (left, top, width, height)
       * @param {Array} points 4 points array
       * @param {Array} [transform] an array of 6 numbers representing a 2x3 transform matrix
       * @return {Object} Object with left, top, width, height properties
       */
      makeBoundingBoxFromPoints: function(c, d) {
        if (d)
          for (var m = 0; m < c.length; m++)
            c[m] = e.util.transformPoint(c[m], d);
        var p = [c[0].x, c[1].x, c[2].x, c[3].x], v = e.util.array.min(p), b = e.util.array.max(p), y = b - v, w = [c[0].y, c[1].y, c[2].y, c[3].y], C = e.util.array.min(w), _ = e.util.array.max(w), S = _ - C;
        return {
          left: v,
          top: C,
          width: y,
          height: S
        };
      },
      /**
       * Invert transformation t
       * @static
       * @memberOf fabric.util
       * @param {Array} t The transform
       * @return {Array} The inverted transform
       */
      invertTransform: function(c) {
        var d = 1 / (c[0] * c[3] - c[1] * c[2]), m = [d * c[3], -d * c[1], -d * c[2], d * c[0]], p = e.util.transformPoint({ x: c[4], y: c[5] }, m, !0);
        return m[4] = -p.x, m[5] = -p.y, m;
      },
      /**
       * A wrapper around Number#toFixed, which contrary to native method returns number, not string.
       * @static
       * @memberOf fabric.util
       * @param {Number|String} number number to operate on
       * @param {Number} fractionDigits number of fraction digits to "leave"
       * @return {Number}
       */
      toFixed: function(c, d) {
        return parseFloat(Number(c).toFixed(d));
      },
      /**
       * Converts from attribute value to pixel value if applicable.
       * Returns converted pixels or original value not converted.
       * @param {Number|String} value number to operate on
       * @param {Number} fontSize
       * @return {Number|String}
       */
      parseUnit: function(c, d) {
        var m = /\D{0,2}$/.exec(c), p = parseFloat(c);
        switch (d || (d = e.Text.DEFAULT_SVG_FONT_SIZE), m[0]) {
          case "mm":
            return p * e.DPI / 25.4;
          case "cm":
            return p * e.DPI / 2.54;
          case "in":
            return p * e.DPI;
          case "pt":
            return p * e.DPI / 72;
          case "pc":
            return p * e.DPI / 72 * 12;
          case "em":
            return p * d;
          default:
            return p;
        }
      },
      /**
       * Function which always returns `false`.
       * @static
       * @memberOf fabric.util
       * @return {Boolean}
       */
      falseFunction: function() {
        return !1;
      },
      /**
       * Returns klass "Class" object of given namespace
       * @memberOf fabric.util
       * @param {String} type Type of object (eg. 'circle')
       * @param {String} namespace Namespace to get klass "Class" object from
       * @return {Object} klass "Class"
       */
      getKlass: function(c, d) {
        return c = e.util.string.camelize(c.charAt(0).toUpperCase() + c.slice(1)), e.util.resolveNamespace(d)[c];
      },
      /**
       * Returns array of attributes for given svg that fabric parses
       * @memberOf fabric.util
       * @param {String} type Type of svg element (eg. 'circle')
       * @return {Array} string names of supported attributes
       */
      getSvgAttributes: function(c) {
        var d = [
          "instantiated_by_use",
          "style",
          "id",
          "class"
        ];
        switch (c) {
          case "linearGradient":
            d = d.concat(["x1", "y1", "x2", "y2", "gradientUnits", "gradientTransform"]);
            break;
          case "radialGradient":
            d = d.concat(["gradientUnits", "gradientTransform", "cx", "cy", "r", "fx", "fy", "fr"]);
            break;
          case "stop":
            d = d.concat(["offset", "stop-color", "stop-opacity"]);
            break;
        }
        return d;
      },
      /**
       * Returns object of given namespace
       * @memberOf fabric.util
       * @param {String} namespace Namespace string e.g. 'fabric.Image.filter' or 'fabric'
       * @return {Object} Object for given namespace (default fabric)
       */
      resolveNamespace: function(c) {
        if (!c)
          return e;
        var d = c.split("."), m = d.length, p, v = l || e.window;
        for (p = 0; p < m; ++p)
          v = v[d[p]];
        return v;
      },
      /**
       * Loads image element from given url and passes it to a callback
       * @memberOf fabric.util
       * @param {String} url URL representing an image
       * @param {Function} callback Callback; invoked with loaded image
       * @param {*} [context] Context to invoke callback in
       * @param {Object} [crossOrigin] crossOrigin value to set image element to
       */
      loadImage: function(c, d, m, p) {
        if (!c) {
          d && d.call(m, c);
          return;
        }
        var v = e.util.createImage(), b = function() {
          d && d.call(m, v, !1), v = v.onload = v.onerror = null;
        };
        v.onload = b, v.onerror = function() {
          e.log("Error loading " + v.src), d && d.call(m, null, !0), v = v.onload = v.onerror = null;
        }, c.indexOf("data") !== 0 && p !== void 0 && p !== null && (v.crossOrigin = p), c.substring(0, 14) === "data:image/svg" && (v.onload = null, e.util.loadImageInDom(v, b)), v.src = c;
      },
      /**
       * Attaches SVG image with data: URL to the dom
       * @memberOf fabric.util
       * @param {Object} img Image object with data:image/svg src
       * @param {Function} callback Callback; invoked with loaded image
       * @return {Object} DOM element (div containing the SVG image)
       */
      loadImageInDom: function(c, d) {
        var m = e.document.createElement("div");
        m.style.width = m.style.height = "1px", m.style.left = m.style.top = "-100%", m.style.position = "absolute", m.appendChild(c), e.document.querySelector("body").appendChild(m), c.onload = function() {
          d(), m.parentNode.removeChild(m), m = null;
        };
      },
      /**
       * Creates corresponding fabric instances from their object representations
       * @static
       * @memberOf fabric.util
       * @param {Array} objects Objects to enliven
       * @param {Function} callback Callback to invoke when all objects are created
       * @param {String} namespace Namespace to get klass "Class" object from
       * @param {Function} reviver Method for further parsing of object elements,
       * called after each fabric object created.
       */
      enlivenObjects: function(c, d, m, p) {
        c = c || [];
        var v = [], b = 0, y = c.length;
        function w() {
          ++b === y && d && d(v.filter(function(C) {
            return C;
          }));
        }
        if (!y) {
          d && d(v);
          return;
        }
        c.forEach(function(C, _) {
          if (!C || !C.type) {
            w();
            return;
          }
          var S = e.util.getKlass(C.type, m);
          S.fromObject(C, function(k, I) {
            I || (v[_] = k), p && p(C, k, I), w();
          });
        });
      },
      /**
       * Creates corresponding fabric instances residing in an object, e.g. `clipPath`
       * @see {@link fabric.Object.ENLIVEN_PROPS}
       * @param {Object} object
       * @param {Object} [context] assign enlived props to this object (pass null to skip this)
       * @param {(objects:fabric.Object[]) => void} callback
       */
      enlivenObjectEnlivables: function(c, d, m) {
        var p = e.Object.ENLIVEN_PROPS.filter(function(v) {
          return !!c[v];
        });
        e.util.enlivenObjects(p.map(function(v) {
          return c[v];
        }), function(v) {
          var b = {};
          p.forEach(function(y, w) {
            b[y] = v[w], d && (d[y] = v[w]);
          }), m && m(b);
        });
      },
      /**
       * Create and wait for loading of patterns
       * @static
       * @memberOf fabric.util
       * @param {Array} patterns Objects to enliven
       * @param {Function} callback Callback to invoke when all objects are created
       * called after each fabric object created.
       */
      enlivenPatterns: function(c, d) {
        c = c || [];
        function m() {
          ++v === b && d && d(p);
        }
        var p = [], v = 0, b = c.length;
        if (!b) {
          d && d(p);
          return;
        }
        c.forEach(function(y, w) {
          y && y.source ? new e.Pattern(y, function(C) {
            p[w] = C, m();
          }) : (p[w] = y, m());
        });
      },
      /**
       * Groups SVG elements (usually those retrieved from SVG document)
       * @static
       * @memberOf fabric.util
       * @param {Array} elements SVG elements to group
       * @param {Object} [options] Options object
       * @param {String} path Value to set sourcePath to
       * @return {fabric.Object|fabric.Group}
       */
      groupSVGElements: function(c, d, m) {
        var p;
        return c && c.length === 1 ? (typeof m < "u" && (c[0].sourcePath = m), c[0]) : (d && (d.width && d.height ? d.centerPoint = {
          x: d.width / 2,
          y: d.height / 2
        } : (delete d.width, delete d.height)), p = new e.Group(c, d), typeof m < "u" && (p.sourcePath = m), p);
      },
      /**
       * Populates an object with properties of another object
       * @static
       * @memberOf fabric.util
       * @param {Object} source Source object
       * @param {Object} destination Destination object
       * @return {Array} properties Properties names to include
       */
      populateWithProperties: function(c, d, m) {
        if (m && Array.isArray(m))
          for (var p = 0, v = m.length; p < v; p++)
            m[p] in c && (d[m[p]] = c[m[p]]);
      },
      /**
       * Creates canvas element
       * @static
       * @memberOf fabric.util
       * @return {CanvasElement} initialized canvas element
       */
      createCanvasElement: function() {
        return e.document.createElement("canvas");
      },
      /**
       * Creates a canvas element that is a copy of another and is also painted
       * @param {CanvasElement} canvas to copy size and content of
       * @static
       * @memberOf fabric.util
       * @return {CanvasElement} initialized canvas element
       */
      copyCanvasElement: function(c) {
        var d = e.util.createCanvasElement();
        return d.width = c.width, d.height = c.height, d.getContext("2d").drawImage(c, 0, 0), d;
      },
      /**
       * since 2.6.0 moved from canvas instance to utility.
       * @param {CanvasElement} canvasEl to copy size and content of
       * @param {String} format 'jpeg' or 'png', in some browsers 'webp' is ok too
       * @param {Number} quality <= 1 and > 0
       * @static
       * @memberOf fabric.util
       * @return {String} data url
       */
      toDataURL: function(c, d, m) {
        return c.toDataURL("image/" + d, m);
      },
      /**
       * Creates image element (works on client and node)
       * @static
       * @memberOf fabric.util
       * @return {HTMLImageElement} HTML image element
       */
      createImage: function() {
        return e.document.createElement("img");
      },
      /**
       * Multiply matrix A by matrix B to nest transformations
       * @static
       * @memberOf fabric.util
       * @param  {Array} a First transformMatrix
       * @param  {Array} b Second transformMatrix
       * @param  {Boolean} is2x2 flag to multiply matrices as 2x2 matrices
       * @return {Array} The product of the two transform matrices
       */
      multiplyTransformMatrices: function(c, d, m) {
        return [
          c[0] * d[0] + c[2] * d[1],
          c[1] * d[0] + c[3] * d[1],
          c[0] * d[2] + c[2] * d[3],
          c[1] * d[2] + c[3] * d[3],
          m ? 0 : c[0] * d[4] + c[2] * d[5] + c[4],
          m ? 0 : c[1] * d[4] + c[3] * d[5] + c[5]
        ];
      },
      /**
       * Decomposes standard 2x3 matrix into transform components
       * @static
       * @memberOf fabric.util
       * @param  {Array} a transformMatrix
       * @return {Object} Components of transform
       */
      qrDecompose: function(c) {
        var d = a(c[1], c[0]), m = h(c[0], 2) + h(c[1], 2), p = s(m), v = (c[0] * c[3] - c[2] * c[1]) / p, b = a(c[0] * c[2] + c[1] * c[3], m);
        return {
          angle: d / o,
          scaleX: p,
          scaleY: v,
          skewX: b / o,
          skewY: 0,
          translateX: c[4],
          translateY: c[5]
        };
      },
      /**
       * Returns a transform matrix starting from an object of the same kind of
       * the one returned from qrDecompose, useful also if you want to calculate some
       * transformations from an object that is not enlived yet
       * @static
       * @memberOf fabric.util
       * @param  {Object} options
       * @param  {Number} [options.angle] angle in degrees
       * @return {Number[]} transform matrix
       */
      calcRotateMatrix: function(c) {
        if (!c.angle)
          return e.iMatrix.concat();
        var d = e.util.degreesToRadians(c.angle), m = e.util.cos(d), p = e.util.sin(d);
        return [m, p, -p, m, 0, 0];
      },
      /**
       * Returns a transform matrix starting from an object of the same kind of
       * the one returned from qrDecompose, useful also if you want to calculate some
       * transformations from an object that is not enlived yet.
       * is called DimensionsTransformMatrix because those properties are the one that influence
       * the size of the resulting box of the object.
       * @static
       * @memberOf fabric.util
       * @param  {Object} options
       * @param  {Number} [options.scaleX]
       * @param  {Number} [options.scaleY]
       * @param  {Boolean} [options.flipX]
       * @param  {Boolean} [options.flipY]
       * @param  {Number} [options.skewX]
       * @param  {Number} [options.skewY]
       * @return {Number[]} transform matrix
       */
      calcDimensionsMatrix: function(c) {
        var d = typeof c.scaleX > "u" ? 1 : c.scaleX, m = typeof c.scaleY > "u" ? 1 : c.scaleY, p = [
          c.flipX ? -d : d,
          0,
          0,
          c.flipY ? -m : m,
          0,
          0
        ], v = e.util.multiplyTransformMatrices, b = e.util.degreesToRadians;
        return c.skewX && (p = v(
          p,
          [1, 0, Math.tan(b(c.skewX)), 1],
          !0
        )), c.skewY && (p = v(
          p,
          [1, Math.tan(b(c.skewY)), 0, 1],
          !0
        )), p;
      },
      /**
       * Returns a transform matrix starting from an object of the same kind of
       * the one returned from qrDecompose, useful also if you want to calculate some
       * transformations from an object that is not enlived yet
       * @static
       * @memberOf fabric.util
       * @param  {Object} options
       * @param  {Number} [options.angle]
       * @param  {Number} [options.scaleX]
       * @param  {Number} [options.scaleY]
       * @param  {Boolean} [options.flipX]
       * @param  {Boolean} [options.flipY]
       * @param  {Number} [options.skewX]
       * @param  {Number} [options.skewX]
       * @param  {Number} [options.translateX]
       * @param  {Number} [options.translateY]
       * @return {Number[]} transform matrix
       */
      composeMatrix: function(c) {
        var d = [1, 0, 0, 1, c.translateX || 0, c.translateY || 0], m = e.util.multiplyTransformMatrices;
        return c.angle && (d = m(d, e.util.calcRotateMatrix(c))), (c.scaleX !== 1 || c.scaleY !== 1 || c.skewX || c.skewY || c.flipX || c.flipY) && (d = m(d, e.util.calcDimensionsMatrix(c))), d;
      },
      /**
       * reset an object transform state to neutral. Top and left are not accounted for
       * @static
       * @memberOf fabric.util
       * @param  {fabric.Object} target object to transform
       */
      resetObjectTransform: function(c) {
        c.scaleX = 1, c.scaleY = 1, c.skewX = 0, c.skewY = 0, c.flipX = !1, c.flipY = !1, c.rotate(0);
      },
      /**
       * Extract Object transform values
       * @static
       * @memberOf fabric.util
       * @param  {fabric.Object} target object to read from
       * @return {Object} Components of transform
       */
      saveObjectTransform: function(c) {
        return {
          scaleX: c.scaleX,
          scaleY: c.scaleY,
          skewX: c.skewX,
          skewY: c.skewY,
          angle: c.angle,
          left: c.left,
          flipX: c.flipX,
          flipY: c.flipY,
          top: c.top
        };
      },
      /**
       * Returns true if context has transparent pixel
       * at specified location (taking tolerance into account)
       * @param {CanvasRenderingContext2D} ctx context
       * @param {Number} x x coordinate
       * @param {Number} y y coordinate
       * @param {Number} tolerance Tolerance
       */
      isTransparent: function(c, d, m, p) {
        p > 0 && (d > p ? d -= p : d = 0, m > p ? m -= p : m = 0);
        var v = !0, b, y, w = c.getImageData(d, m, p * 2 || 1, p * 2 || 1), C = w.data.length;
        for (b = 3; b < C && (y = w.data[b], v = y <= 0, v !== !1); b += 4)
          ;
        return w = null, v;
      },
      /**
       * Parse preserveAspectRatio attribute from element
       * @param {string} attribute to be parsed
       * @return {Object} an object containing align and meetOrSlice attribute
       */
      parsePreserveAspectRatioAttribute: function(c) {
        var d = "meet", m = "Mid", p = "Mid", v = c.split(" "), b;
        return v && v.length && (d = v.pop(), d !== "meet" && d !== "slice" ? (b = d, d = "meet") : v.length && (b = v.pop())), m = b !== "none" ? b.slice(1, 4) : "none", p = b !== "none" ? b.slice(5, 8) : "none", {
          meetOrSlice: d,
          alignX: m,
          alignY: p
        };
      },
      /**
       * Clear char widths cache for the given font family or all the cache if no
       * fontFamily is specified.
       * Use it if you know you are loading fonts in a lazy way and you are not waiting
       * for custom fonts to load properly when adding text objects to the canvas.
       * If a text object is added when its own font is not loaded yet, you will get wrong
       * measurement and so wrong bounding boxes.
       * After the font cache is cleared, either change the textObject text content or call
       * initDimensions() to trigger a recalculation
       * @memberOf fabric.util
       * @param {String} [fontFamily] font family to clear
       */
      clearFabricFontCache: function(c) {
        c = (c || "").toLowerCase(), c ? e.charWidthsCache[c] && delete e.charWidthsCache[c] : e.charWidthsCache = {};
      },
      /**
       * Given current aspect ratio, determines the max width and height that can
       * respect the total allowed area for the cache.
       * @memberOf fabric.util
       * @param {Number} ar aspect ratio
       * @param {Number} maximumArea Maximum area you want to achieve
       * @return {Object.x} Limited dimensions by X
       * @return {Object.y} Limited dimensions by Y
       */
      limitDimsByArea: function(c, d) {
        var m = Math.sqrt(d * c), p = Math.floor(d / m);
        return { x: Math.floor(m), y: p };
      },
      capValue: function(c, d, m) {
        return Math.max(c, Math.min(d, m));
      },
      /**
       * Finds the scale for the object source to fit inside the object destination,
       * keeping aspect ratio intact.
       * respect the total allowed area for the cache.
       * @memberOf fabric.util
       * @param {Object | fabric.Object} source
       * @param {Number} source.height natural unscaled height of the object
       * @param {Number} source.width natural unscaled width of the object
       * @param {Object | fabric.Object} destination
       * @param {Number} destination.height natural unscaled height of the object
       * @param {Number} destination.width natural unscaled width of the object
       * @return {Number} scale factor to apply to source to fit into destination
       */
      findScaleToFit: function(c, d) {
        return Math.min(d.width / c.width, d.height / c.height);
      },
      /**
       * Finds the scale for the object source to cover entirely the object destination,
       * keeping aspect ratio intact.
       * respect the total allowed area for the cache.
       * @memberOf fabric.util
       * @param {Object | fabric.Object} source
       * @param {Number} source.height natural unscaled height of the object
       * @param {Number} source.width natural unscaled width of the object
       * @param {Object | fabric.Object} destination
       * @param {Number} destination.height natural unscaled height of the object
       * @param {Number} destination.width natural unscaled width of the object
       * @return {Number} scale factor to apply to source to cover destination
       */
      findScaleToCover: function(c, d) {
        return Math.max(d.width / c.width, d.height / c.height);
      },
      /**
       * given an array of 6 number returns something like `"matrix(...numbers)"`
       * @memberOf fabric.util
       * @param {Array} transform an array with 6 numbers
       * @return {String} transform matrix for svg
       * @return {Object.y} Limited dimensions by Y
       */
      matrixToSVG: function(c) {
        return "matrix(" + c.map(function(d) {
          return e.util.toFixed(d, e.Object.NUM_FRACTION_DIGITS);
        }).join(" ") + ")";
      },
      /**
       * given an object and a transform, apply the inverse transform to the object,
       * this is equivalent to remove from that object that transformation, so that
       * added in a space with the removed transform, the object will be the same as before.
       * Removing from an object a transform that scale by 2 is like scaling it by 1/2.
       * Removing from an object a transfrom that rotate by 30deg is like rotating by 30deg
       * in the opposite direction.
       * This util is used to add objects inside transformed groups or nested groups.
       * @memberOf fabric.util
       * @param {fabric.Object} object the object you want to transform
       * @param {Array} transform the destination transform
       */
      removeTransformFromObject: function(c, d) {
        var m = e.util.invertTransform(d), p = e.util.multiplyTransformMatrices(m, c.calcOwnMatrix());
        e.util.applyTransformToObject(c, p);
      },
      /**
       * given an object and a transform, apply the transform to the object.
       * this is equivalent to change the space where the object is drawn.
       * Adding to an object a transform that scale by 2 is like scaling it by 2.
       * This is used when removing an object from an active selection for example.
       * @memberOf fabric.util
       * @param {fabric.Object} object the object you want to transform
       * @param {Array} transform the destination transform
       */
      addTransformToObject: function(c, d) {
        e.util.applyTransformToObject(
          c,
          e.util.multiplyTransformMatrices(d, c.calcOwnMatrix())
        );
      },
      /**
       * discard an object transform state and apply the one from the matrix.
       * @memberOf fabric.util
       * @param {fabric.Object} object the object you want to transform
       * @param {Array} transform the destination transform
       */
      applyTransformToObject: function(c, d) {
        var m = e.util.qrDecompose(d), p = new e.Point(m.translateX, m.translateY);
        c.flipX = !1, c.flipY = !1, c.set("scaleX", m.scaleX), c.set("scaleY", m.scaleY), c.skewX = m.skewX, c.skewY = m.skewY, c.angle = m.angle, c.setPositionByOrigin(p, "center", "center");
      },
      /**
       * given a width and height, return the size of the bounding box
       * that can contains the box with width/height with applied transform
       * described in options.
       * Use to calculate the boxes around objects for controls.
       * @memberOf fabric.util
       * @param {Number} width
       * @param {Number} height
       * @param {Object} options
       * @param {Number} options.scaleX
       * @param {Number} options.scaleY
       * @param {Number} options.skewX
       * @param {Number} options.skewY
       * @return {Object.x} width of containing
       * @return {Object.y} height of containing
       */
      sizeAfterTransform: function(c, d, m) {
        var p = c / 2, v = d / 2, b = [
          {
            x: -p,
            y: -v
          },
          {
            x: p,
            y: -v
          },
          {
            x: -p,
            y: v
          },
          {
            x: p,
            y: v
          }
        ], y = e.util.calcDimensionsMatrix(m), w = e.util.makeBoundingBoxFromPoints(b, y);
        return {
          x: w.width,
          y: w.height
        };
      },
      /**
       * Merges 2 clip paths into one visually equal clip path
       *
       * **IMPORTANT**:\
       * Does **NOT** clone the arguments, clone them proir if necessary.
       *
       * Creates a wrapper (group) that contains one clip path and is clipped by the other so content is kept where both overlap.
       * Use this method if both the clip paths may have nested clip paths of their own, so assigning one to the other's clip path property is not possible.
       *
       * In order to handle the `inverted` property we follow logic described in the following cases:\
       * **(1)** both clip paths are inverted - the clip paths pass the inverted prop to the wrapper and loose it themselves.\
       * **(2)** one is inverted and the other isn't - the wrapper shouldn't become inverted and the inverted clip path must clip the non inverted one to produce an identical visual effect.\
       * **(3)** both clip paths are not inverted - wrapper and clip paths remain unchanged.
       *
       * @memberOf fabric.util
       * @param {fabric.Object} c1
       * @param {fabric.Object} c2
       * @returns {fabric.Object} merged clip path
       */
      mergeClipPaths: function(c, d) {
        var m = c, p = d;
        m.inverted && !p.inverted && (m = d, p = c), e.util.applyTransformToObject(
          p,
          e.util.multiplyTransformMatrices(
            e.util.invertTransform(m.calcTransformMatrix()),
            p.calcTransformMatrix()
          )
        );
        var v = m.inverted && p.inverted;
        return v && (m.inverted = p.inverted = !1), new e.Group([m], { clipPath: p, inverted: v });
      },
      /**
       * @memberOf fabric.util
       * @param {Object} prevStyle first style to compare
       * @param {Object} thisStyle second style to compare
       * @param {boolean} forTextSpans whether to check overline, underline, and line-through properties
       * @return {boolean} true if the style changed
       */
      hasStyleChanged: function(c, d, m) {
        return m = m || !1, c.fill !== d.fill || c.stroke !== d.stroke || c.strokeWidth !== d.strokeWidth || c.fontSize !== d.fontSize || c.fontFamily !== d.fontFamily || c.fontWeight !== d.fontWeight || c.fontStyle !== d.fontStyle || c.textBackgroundColor !== d.textBackgroundColor || c.deltaY !== d.deltaY || m && (c.overline !== d.overline || c.underline !== d.underline || c.linethrough !== d.linethrough);
      },
      /**
       * Returns the array form of a text object's inline styles property with styles grouped in ranges
       * rather than per character. This format is less verbose, and is better suited for storage
       * so it is used in serialization (not during runtime).
       * @memberOf fabric.util
       * @param {object} styles per character styles for a text object
       * @param {String} text the text string that the styles are applied to
       * @return {{start: number, end: number, style: object}[]}
       */
      stylesToArray: function(m, d) {
        for (var m = e.util.object.clone(m, !0), p = d.split(`
`), v = -1, b = {}, y = [], w = 0; w < p.length; w++) {
          if (!m[w]) {
            v += p[w].length;
            continue;
          }
          for (var C = 0; C < p[w].length; C++) {
            v++;
            var _ = m[w][C];
            if (_ && Object.keys(_).length > 0) {
              var S = e.util.hasStyleChanged(b, _, !0);
              S ? y.push({
                start: v,
                end: v + 1,
                style: _
              }) : y[y.length - 1].end++;
            }
            b = _ || {};
          }
        }
        return y;
      },
      /**
       * Returns the object form of the styles property with styles that are assigned per
       * character rather than grouped by range. This format is more verbose, and is
       * only used during runtime (not for serialization/storage)
       * @memberOf fabric.util
       * @param {Array} styles the serialized form of a text object's styles
       * @param {String} text the text string that the styles are applied to
       * @return {Object}
       */
      stylesFromArray: function(c, d) {
        if (!Array.isArray(c))
          return c;
        for (var m = d.split(`
`), p = -1, v = 0, b = {}, y = 0; y < m.length; y++)
          for (var w = 0; w < m[y].length; w++)
            p++, c[v] && c[v].start <= p && p < c[v].end && (b[y] = b[y] || {}, b[y][w] = Object.assign({}, c[v].style), p === c[v].end - 1 && v++);
        return b;
      }
    };
  }(t), function() {
    var l = Array.prototype.join, s = {
      m: 2,
      l: 2,
      h: 1,
      v: 1,
      c: 6,
      s: 4,
      q: 4,
      t: 2,
      a: 7
    }, a = {
      m: "l",
      M: "L"
    };
    function h(T, P, A, M, $, D, E, F, N, H, V) {
      var J = e.util.cos(T), ee = e.util.sin(T), le = e.util.cos(P), U = e.util.sin(P), B = A * $ * le - M * D * U + E, X = M * $ * le + A * D * U + F, Q = H + N * (-A * $ * ee - M * D * J), z = V + N * (-M * $ * ee + A * D * J), Y = B + N * (A * $ * U + M * D * le), se = X + N * (M * $ * U - A * D * le);
      return [
        "C",
        Q,
        z,
        Y,
        se,
        B,
        X
      ];
    }
    function o(T, P, A, M, $, D, E) {
      var F = Math.PI, N = E * F / 180, H = e.util.sin(N), V = e.util.cos(N), J = 0, ee = 0;
      A = Math.abs(A), M = Math.abs(M);
      var le = -V * T * 0.5 - H * P * 0.5, U = -V * P * 0.5 + H * T * 0.5, B = A * A, X = M * M, Q = U * U, z = le * le, Y = B * X - B * Q - X * z, se = 0;
      if (Y < 0) {
        var ve = Math.sqrt(1 - Y / (B * X));
        A *= ve, M *= ve;
      } else
        se = ($ === D ? -1 : 1) * Math.sqrt(Y / (B * Q + X * z));
      var pe = se * A * U / M, Z = -se * M * le / A, fe = V * pe - H * Z + T * 0.5, xe = H * pe + V * Z + P * 0.5, Ee = u(1, 0, (le - pe) / A, (U - Z) / M), Re = u((le - pe) / A, (U - Z) / M, (-le - pe) / A, (-U - Z) / M);
      D === 0 && Re > 0 ? Re -= 2 * F : D === 1 && Re < 0 && (Re += 2 * F);
      for (var Pe = Math.ceil(Math.abs(Re / F * 2)), at = [], We = Re / Pe, kn = 8 / 3 * Math.sin(We / 4) * Math.sin(We / 4) / Math.sin(We / 2), $r = Ee + We, Mt = 0; Mt < Pe; Mt++)
        at[Mt] = h(Ee, $r, V, H, A, M, fe, xe, kn, J, ee), J = at[Mt][5], ee = at[Mt][6], Ee = $r, $r += We;
      return at;
    }
    function u(T, P, A, M) {
      var $ = Math.atan2(P, T), D = Math.atan2(M, A);
      return D >= $ ? D - $ : 2 * Math.PI - ($ - D);
    }
    function c(T, P, A, M, $, D, E, F) {
      var N;
      if (e.cachesBoundsOfCurve && (N = l.call(arguments), e.boundsOfCurveCache[N]))
        return e.boundsOfCurveCache[N];
      var H = Math.sqrt, V = Math.min, J = Math.max, ee = Math.abs, le = [], U = [[], []], B, X, Q, z, Y, se, ve, pe;
      X = 6 * T - 12 * A + 6 * $, B = -3 * T + 9 * A - 9 * $ + 3 * E, Q = 3 * A - 3 * T;
      for (var Z = 0; Z < 2; ++Z) {
        if (Z > 0 && (X = 6 * P - 12 * M + 6 * D, B = -3 * P + 9 * M - 9 * D + 3 * F, Q = 3 * M - 3 * P), ee(B) < 1e-12) {
          if (ee(X) < 1e-12)
            continue;
          z = -Q / X, 0 < z && z < 1 && le.push(z);
          continue;
        }
        ve = X * X - 4 * Q * B, !(ve < 0) && (pe = H(ve), Y = (-X + pe) / (2 * B), 0 < Y && Y < 1 && le.push(Y), se = (-X - pe) / (2 * B), 0 < se && se < 1 && le.push(se));
      }
      for (var fe, xe, Ee = le.length, Re = Ee, Pe; Ee--; )
        z = le[Ee], Pe = 1 - z, fe = Pe * Pe * Pe * T + 3 * Pe * Pe * z * A + 3 * Pe * z * z * $ + z * z * z * E, U[0][Ee] = fe, xe = Pe * Pe * Pe * P + 3 * Pe * Pe * z * M + 3 * Pe * z * z * D + z * z * z * F, U[1][Ee] = xe;
      U[0][Re] = T, U[1][Re] = P, U[0][Re + 1] = E, U[1][Re + 1] = F;
      var at = [
        {
          x: V.apply(null, U[0]),
          y: V.apply(null, U[1])
        },
        {
          x: J.apply(null, U[0]),
          y: J.apply(null, U[1])
        }
      ];
      return e.cachesBoundsOfCurve && (e.boundsOfCurveCache[N] = at), at;
    }
    function d(T, P, A) {
      for (var M = A[1], $ = A[2], D = A[3], E = A[4], F = A[5], N = A[6], H = A[7], V = o(N - T, H - P, M, $, E, F, D), J = 0, ee = V.length; J < ee; J++)
        V[J][1] += T, V[J][2] += P, V[J][3] += T, V[J][4] += P, V[J][5] += T, V[J][6] += P;
      return V;
    }
    function m(T) {
      var P = 0, A = 0, M = T.length, $ = 0, D = 0, E, F, N, H = [], V, J, ee;
      for (F = 0; F < M; ++F) {
        switch (N = !1, E = T[F].slice(0), E[0]) {
          case "l":
            E[0] = "L", E[1] += P, E[2] += A;
          case "L":
            P = E[1], A = E[2];
            break;
          case "h":
            E[1] += P;
          case "H":
            E[0] = "L", E[2] = A, P = E[1];
            break;
          case "v":
            E[1] += A;
          case "V":
            E[0] = "L", A = E[1], E[1] = P, E[2] = A;
            break;
          case "m":
            E[0] = "M", E[1] += P, E[2] += A;
          case "M":
            P = E[1], A = E[2], $ = E[1], D = E[2];
            break;
          case "c":
            E[0] = "C", E[1] += P, E[2] += A, E[3] += P, E[4] += A, E[5] += P, E[6] += A;
          case "C":
            J = E[3], ee = E[4], P = E[5], A = E[6];
            break;
          case "s":
            E[0] = "S", E[1] += P, E[2] += A, E[3] += P, E[4] += A;
          case "S":
            V === "C" ? (J = 2 * P - J, ee = 2 * A - ee) : (J = P, ee = A), P = E[3], A = E[4], E[0] = "C", E[5] = E[3], E[6] = E[4], E[3] = E[1], E[4] = E[2], E[1] = J, E[2] = ee, J = E[3], ee = E[4];
            break;
          case "q":
            E[0] = "Q", E[1] += P, E[2] += A, E[3] += P, E[4] += A;
          case "Q":
            J = E[1], ee = E[2], P = E[3], A = E[4];
            break;
          case "t":
            E[0] = "T", E[1] += P, E[2] += A;
          case "T":
            V === "Q" ? (J = 2 * P - J, ee = 2 * A - ee) : (J = P, ee = A), E[0] = "Q", P = E[1], A = E[2], E[1] = J, E[2] = ee, E[3] = P, E[4] = A;
            break;
          case "a":
            E[0] = "A", E[6] += P, E[7] += A;
          case "A":
            N = !0, H = H.concat(d(P, A, E)), P = E[6], A = E[7];
            break;
          case "z":
          case "Z":
            P = $, A = D;
            break;
        }
        N || H.push(E), V = E[0];
      }
      return H;
    }
    function p(T, P, A, M) {
      return Math.sqrt((A - T) * (A - T) + (M - P) * (M - P));
    }
    function v(T) {
      return T * T * T;
    }
    function b(T) {
      return 3 * T * T * (1 - T);
    }
    function y(T) {
      return 3 * T * (1 - T) * (1 - T);
    }
    function w(T) {
      return (1 - T) * (1 - T) * (1 - T);
    }
    function C(T, P, A, M, $, D, E, F) {
      return function(N) {
        var H = v(N), V = b(N), J = y(N), ee = w(N);
        return {
          x: E * H + $ * V + A * J + T * ee,
          y: F * H + D * V + M * J + P * ee
        };
      };
    }
    function _(T, P, A, M, $, D, E, F) {
      return function(N) {
        var H = 1 - N, V = 3 * H * H * (A - T) + 6 * H * N * ($ - A) + 3 * N * N * (E - $), J = 3 * H * H * (M - P) + 6 * H * N * (D - M) + 3 * N * N * (F - D);
        return Math.atan2(J, V);
      };
    }
    function S(T) {
      return T * T;
    }
    function k(T) {
      return 2 * T * (1 - T);
    }
    function I(T) {
      return (1 - T) * (1 - T);
    }
    function L(T, P, A, M, $, D) {
      return function(E) {
        var F = S(E), N = k(E), H = I(E);
        return {
          x: $ * F + A * N + T * H,
          y: D * F + M * N + P * H
        };
      };
    }
    function j(T, P, A, M, $, D) {
      return function(E) {
        var F = 1 - E, N = 2 * F * (A - T) + 2 * E * ($ - A), H = 2 * F * (M - P) + 2 * E * (D - M);
        return Math.atan2(H, N);
      };
    }
    function G(T, P, A) {
      var M = { x: P, y: A }, $, D = 0, E;
      for (E = 1; E <= 100; E += 1)
        $ = T(E / 100), D += p(M.x, M.y, $.x, $.y), M = $;
      return D;
    }
    function te(T, P) {
      for (var A = 0, M = 0, $ = T.iterator, D = { x: T.x, y: T.y }, E, F, N = 0.01, H = T.angleFinder, V; M < P && N > 1e-4; )
        E = $(A), V = A, F = p(D.x, D.y, E.x, E.y), F + M > P ? (A -= N, N /= 2) : (D = E, A += N, M += F);
      return E.angle = H(V), E;
    }
    function W(T) {
      for (var P = 0, A = T.length, M, $ = 0, D = 0, E = 0, F = 0, N = [], H, V, J, ee = 0; ee < A; ee++) {
        switch (M = T[ee], V = {
          x: $,
          y: D,
          command: M[0]
        }, M[0]) {
          case "M":
            V.length = 0, E = $ = M[1], F = D = M[2];
            break;
          case "L":
            V.length = p($, D, M[1], M[2]), $ = M[1], D = M[2];
            break;
          case "C":
            H = C(
              $,
              D,
              M[1],
              M[2],
              M[3],
              M[4],
              M[5],
              M[6]
            ), J = _(
              $,
              D,
              M[1],
              M[2],
              M[3],
              M[4],
              M[5],
              M[6]
            ), V.iterator = H, V.angleFinder = J, V.length = G(H, $, D), $ = M[5], D = M[6];
            break;
          case "Q":
            H = L(
              $,
              D,
              M[1],
              M[2],
              M[3],
              M[4]
            ), J = j(
              $,
              D,
              M[1],
              M[2],
              M[3],
              M[4]
            ), V.iterator = H, V.angleFinder = J, V.length = G(H, $, D), $ = M[3], D = M[4];
            break;
          case "Z":
          case "z":
            V.destX = E, V.destY = F, V.length = p($, D, E, F), $ = E, D = F;
            break;
        }
        P += V.length, N.push(V);
      }
      return N.push({ length: P, x: $, y: D }), N;
    }
    function q(T, P, A) {
      A || (A = W(T));
      for (var M = 0; P - A[M].length > 0 && M < A.length - 2; )
        P -= A[M].length, M++;
      var $ = A[M], D = P / $.length, E = $.command, F = T[M], N;
      switch (E) {
        case "M":
          return { x: $.x, y: $.y, angle: 0 };
        case "Z":
        case "z":
          return N = new e.Point($.x, $.y).lerp(
            new e.Point($.destX, $.destY),
            D
          ), N.angle = Math.atan2($.destY - $.y, $.destX - $.x), N;
        case "L":
          return N = new e.Point($.x, $.y).lerp(
            new e.Point(F[1], F[2]),
            D
          ), N.angle = Math.atan2(F[2] - $.y, F[1] - $.x), N;
        case "C":
          return te($, P);
        case "Q":
          return te($, P);
      }
    }
    function K(T) {
      var P = [], A = [], M, $, D = e.rePathCommand, E = "[-+]?(?:\\d*\\.\\d+|\\d+\\.?)(?:[eE][-+]?\\d+)?\\s*", F = "(" + E + ")" + e.commaWsp, N = "([01])" + e.commaWsp + "?", H = F + "?" + F + "?" + F + N + N + F + "?(" + E + ")", V = new RegExp(H, "g"), J, ee, le;
      if (!T || !T.match)
        return P;
      le = T.match(/[mzlhvcsqta][^mzlhvcsqta]*/gi);
      for (var U = 0, B, X = le.length; U < X; U++) {
        M = le[U], ee = M.slice(1).trim(), A.length = 0;
        var Q = M.charAt(0);
        if (B = [Q], Q.toLowerCase() === "a")
          for (var z; z = V.exec(ee); )
            for (var Y = 1; Y < z.length; Y++)
              A.push(z[Y]);
        else
          for (; J = D.exec(ee); )
            A.push(J[0]);
        for (var Y = 0, se = A.length; Y < se; Y++)
          $ = parseFloat(A[Y]), isNaN($) || B.push($);
        var ve = s[Q.toLowerCase()], pe = a[Q] || Q;
        if (B.length - 1 > ve)
          for (var Z = 1, fe = B.length; Z < fe; Z += ve)
            P.push([Q].concat(B.slice(Z, Z + ve))), Q = pe;
        else
          P.push(B);
      }
      return P;
    }
    function ne(T, P) {
      var A = [], M, $ = new e.Point(T[0].x, T[0].y), D = new e.Point(T[1].x, T[1].y), E = T.length, F = 1, N = 0, H = E > 2;
      for (P = P || 0, H && (F = T[2].x < D.x ? -1 : T[2].x === D.x ? 0 : 1, N = T[2].y < D.y ? -1 : T[2].y === D.y ? 0 : 1), A.push(["M", $.x - F * P, $.y - N * P]), M = 1; M < E; M++) {
        if (!$.eq(D)) {
          var V = $.midPointFrom(D);
          A.push(["Q", $.x, $.y, V.x, V.y]);
        }
        $ = T[M], M + 1 < T.length && (D = T[M + 1]);
      }
      return H && (F = $.x > T[M - 2].x ? 1 : $.x === T[M - 2].x ? 0 : -1, N = $.y > T[M - 2].y ? 1 : $.y === T[M - 2].y ? 0 : -1), A.push(["L", $.x + F * P, $.y + N * P]), A;
    }
    function re(T, P, A) {
      return A && (P = e.util.multiplyTransformMatrices(
        P,
        [1, 0, 0, 1, -A.x, -A.y]
      )), T.map(function(M) {
        for (var $ = M.slice(0), D = {}, E = 1; E < M.length - 1; E += 2)
          D.x = M[E], D.y = M[E + 1], D = e.util.transformPoint(D, P), $[E] = D.x, $[E + 1] = D.y;
        return $;
      });
    }
    e.util.joinPath = function(T) {
      return T.map(function(P) {
        return P.join(" ");
      }).join(" ");
    }, e.util.parsePath = K, e.util.makePathSimpler = m, e.util.getSmoothPathFromPoints = ne, e.util.getPathSegmentsInfo = W, e.util.getBoundsOfCurve = c, e.util.getPointOnPath = q, e.util.transformPath = re;
  }(), function() {
    var l = Array.prototype.slice;
    function s(c, d) {
      for (var m = l.call(arguments, 2), p = [], v = 0, b = c.length; v < b; v++)
        p[v] = m.length ? c[v][d].apply(c[v], m) : c[v][d].call(c[v]);
      return p;
    }
    function a(c, d) {
      return u(c, d, function(m, p) {
        return m >= p;
      });
    }
    function h(c, d) {
      return u(c, d, function(m, p) {
        return m < p;
      });
    }
    function o(c, d) {
      for (var m = c.length; m--; )
        c[m] = d;
      return c;
    }
    function u(c, d, m) {
      if (!(!c || c.length === 0)) {
        var p = c.length - 1, v = d ? c[p][d] : c[p];
        if (d)
          for (; p--; )
            m(c[p][d], v) && (v = c[p][d]);
        else
          for (; p--; )
            m(c[p], v) && (v = c[p]);
        return v;
      }
    }
    e.util.array = {
      fill: o,
      invoke: s,
      min: h,
      max: a
    };
  }(), function() {
    function l(a, h, o) {
      if (o)
        if (!e.isLikelyNode && h instanceof Element)
          a = h;
        else if (h instanceof Array) {
          a = [];
          for (var u = 0, c = h.length; u < c; u++)
            a[u] = l({}, h[u], o);
        } else if (h && typeof h == "object")
          for (var d in h)
            d === "canvas" || d === "group" ? a[d] = null : h.hasOwnProperty(d) && (a[d] = l({}, h[d], o));
        else
          a = h;
      else
        for (var d in h)
          a[d] = h[d];
      return a;
    }
    function s(a, h) {
      return l({}, a, h);
    }
    e.util.object = {
      extend: l,
      clone: s
    }, e.util.object.extend(e.util, e.Observable);
  }(), function() {
    function l(u) {
      return u.replace(/-+(.)?/g, function(c, d) {
        return d ? d.toUpperCase() : "";
      });
    }
    function s(u, c) {
      return u.charAt(0).toUpperCase() + (c ? u.slice(1) : u.slice(1).toLowerCase());
    }
    function a(u) {
      return u.replace(/&/g, "&amp;").replace(/"/g, "&quot;").replace(/'/g, "&apos;").replace(/</g, "&lt;").replace(/>/g, "&gt;");
    }
    function h(u) {
      var c = 0, d, m = [];
      for (c = 0, d; c < u.length; c++)
        (d = o(u, c)) !== !1 && m.push(d);
      return m;
    }
    function o(u, c) {
      var d = u.charCodeAt(c);
      if (isNaN(d))
        return "";
      if (d < 55296 || d > 57343)
        return u.charAt(c);
      if (55296 <= d && d <= 56319) {
        if (u.length <= c + 1)
          throw "High surrogate without following low surrogate";
        var m = u.charCodeAt(c + 1);
        if (56320 > m || m > 57343)
          throw "High surrogate without following low surrogate";
        return u.charAt(c) + u.charAt(c + 1);
      }
      if (c === 0)
        throw "Low surrogate without preceding high surrogate";
      var p = u.charCodeAt(c - 1);
      if (55296 > p || p > 56319)
        throw "Low surrogate without preceding high surrogate";
      return !1;
    }
    e.util.string = {
      camelize: l,
      capitalize: s,
      escapeXml: a,
      graphemeSplit: h
    };
  }(), function() {
    var l = Array.prototype.slice, s = function() {
    }, a = function() {
      for (var d in { toString: 1 })
        if (d === "toString")
          return !1;
      return !0;
    }(), h = function(d, m, p) {
      for (var v in m)
        v in d.prototype && typeof d.prototype[v] == "function" && (m[v] + "").indexOf("callSuper") > -1 ? d.prototype[v] = function(b) {
          return function() {
            var y = this.constructor.superclass;
            this.constructor.superclass = p;
            var w = m[b].apply(this, arguments);
            if (this.constructor.superclass = y, b !== "initialize")
              return w;
          };
        }(v) : d.prototype[v] = m[v], a && (m.toString !== Object.prototype.toString && (d.prototype.toString = m.toString), m.valueOf !== Object.prototype.valueOf && (d.prototype.valueOf = m.valueOf));
    };
    function o() {
    }
    function u(d) {
      for (var m = null, p = this; p.constructor.superclass; ) {
        var v = p.constructor.superclass.prototype[d];
        if (p[d] !== v) {
          m = v;
          break;
        }
        p = p.constructor.superclass.prototype;
      }
      return m ? arguments.length > 1 ? m.apply(this, l.call(arguments, 1)) : m.call(this) : console.log("tried to callSuper " + d + ", method not found in prototype chain", this);
    }
    function c() {
      var d = null, m = l.call(arguments, 0);
      typeof m[0] == "function" && (d = m.shift());
      function p() {
        this.initialize.apply(this, arguments);
      }
      p.superclass = d, p.subclasses = [], d && (o.prototype = d.prototype, p.prototype = new o(), d.subclasses.push(p));
      for (var v = 0, b = m.length; v < b; v++)
        h(p, m[v], d);
      return p.prototype.initialize || (p.prototype.initialize = s), p.prototype.constructor = p, p.prototype.callSuper = u, p;
    }
    e.util.createClass = c;
  }(), function() {
    var l = !!e.document.createElement("div").attachEvent, s = ["touchstart", "touchmove", "touchend"];
    e.util.addListener = function(h, o, u, c) {
      h && h.addEventListener(o, u, l ? !1 : c);
    }, e.util.removeListener = function(h, o, u, c) {
      h && h.removeEventListener(o, u, l ? !1 : c);
    };
    function a(h) {
      var o = h.changedTouches;
      return o && o[0] ? o[0] : h;
    }
    e.util.getPointer = function(h) {
      var o = h.target, u = e.util.getScrollLeftTop(o), c = a(h);
      return {
        x: c.clientX + u.left,
        y: c.clientY + u.top
      };
    }, e.util.isTouchEvent = function(h) {
      return s.indexOf(h.type) > -1 || h.pointerType === "touch";
    };
  }(), function() {
    function l(c, d) {
      var m = c.style;
      if (!m)
        return c;
      if (typeof d == "string")
        return c.style.cssText += ";" + d, d.indexOf("opacity") > -1 ? u(c, d.match(/opacity:\s*(\d?\.?\d*)/)[1]) : c;
      for (var p in d)
        if (p === "opacity")
          u(c, d[p]);
        else {
          var v = p === "float" || p === "cssFloat" ? typeof m.styleFloat > "u" ? "cssFloat" : "styleFloat" : p;
          m.setProperty(v, d[p]);
        }
      return c;
    }
    var s = e.document.createElement("div"), a = typeof s.style.opacity == "string", h = typeof s.style.filter == "string", o = /alpha\s*\(\s*opacity\s*=\s*([^\)]+)\)/, u = function(c) {
      return c;
    };
    a ? u = function(c, d) {
      return c.style.opacity = d, c;
    } : h && (u = function(c, d) {
      var m = c.style;
      return c.currentStyle && !c.currentStyle.hasLayout && (m.zoom = 1), o.test(m.filter) ? (d = d >= 0.9999 ? "" : "alpha(opacity=" + d * 100 + ")", m.filter = m.filter.replace(o, d)) : m.filter += " alpha(opacity=" + d * 100 + ")", c;
    }), e.util.setStyle = l;
  }(), function() {
    var l = Array.prototype.slice;
    function s(w) {
      return typeof w == "string" ? e.document.getElementById(w) : w;
    }
    var a, h = function(w) {
      return l.call(w, 0);
    };
    try {
      a = h(e.document.childNodes) instanceof Array;
    } catch {
    }
    a || (h = function(w) {
      for (var C = new Array(w.length), _ = w.length; _--; )
        C[_] = w[_];
      return C;
    });
    function o(w, C) {
      var _ = e.document.createElement(w);
      for (var S in C)
        S === "class" ? _.className = C[S] : S === "for" ? _.htmlFor = C[S] : _.setAttribute(S, C[S]);
      return _;
    }
    function u(w, C) {
      w && (" " + w.className + " ").indexOf(" " + C + " ") === -1 && (w.className += (w.className ? " " : "") + C);
    }
    function c(w, C, _) {
      return typeof C == "string" && (C = o(C, _)), w.parentNode && w.parentNode.replaceChild(C, w), C.appendChild(w), C;
    }
    function d(w) {
      for (var C = 0, _ = 0, S = e.document.documentElement, k = e.document.body || {
        scrollLeft: 0,
        scrollTop: 0
      }; w && (w.parentNode || w.host) && (w = w.parentNode || w.host, w === e.document ? (C = k.scrollLeft || S.scrollLeft || 0, _ = k.scrollTop || S.scrollTop || 0) : (C += w.scrollLeft || 0, _ += w.scrollTop || 0), !(w.nodeType === 1 && w.style.position === "fixed")); )
        ;
      return { left: C, top: _ };
    }
    function m(w) {
      var C, _ = w && w.ownerDocument, S = { left: 0, top: 0 }, k = { left: 0, top: 0 }, I, L = {
        borderLeftWidth: "left",
        borderTopWidth: "top",
        paddingLeft: "left",
        paddingTop: "top"
      };
      if (!_)
        return k;
      for (var j in L)
        k[L[j]] += parseInt(p(w, j), 10) || 0;
      return C = _.documentElement, typeof w.getBoundingClientRect < "u" && (S = w.getBoundingClientRect()), I = d(w), {
        left: S.left + I.left - (C.clientLeft || 0) + k.left,
        top: S.top + I.top - (C.clientTop || 0) + k.top
      };
    }
    var p;
    e.document.defaultView && e.document.defaultView.getComputedStyle ? p = function(w, C) {
      var _ = e.document.defaultView.getComputedStyle(w, null);
      return _ ? _[C] : void 0;
    } : p = function(w, C) {
      var _ = w.style[C];
      return !_ && w.currentStyle && (_ = w.currentStyle[C]), _;
    }, function() {
      var w = e.document.documentElement.style, C = "userSelect" in w ? "userSelect" : "MozUserSelect" in w ? "MozUserSelect" : "WebkitUserSelect" in w ? "WebkitUserSelect" : "KhtmlUserSelect" in w ? "KhtmlUserSelect" : "";
      function _(k) {
        return typeof k.onselectstart < "u" && (k.onselectstart = e.util.falseFunction), C ? k.style[C] = "none" : typeof k.unselectable == "string" && (k.unselectable = "on"), k;
      }
      function S(k) {
        return typeof k.onselectstart < "u" && (k.onselectstart = null), C ? k.style[C] = "" : typeof k.unselectable == "string" && (k.unselectable = ""), k;
      }
      e.util.makeElementUnselectable = _, e.util.makeElementSelectable = S;
    }();
    function v(w) {
      var C = e.jsdomImplForWrapper(w);
      return C._canvas || C._image;
    }
    function b(w) {
      if (e.isLikelyNode) {
        var C = e.jsdomImplForWrapper(w);
        C && (C._image = null, C._canvas = null, C._currentSrc = null, C._attributes = null, C._classList = null);
      }
    }
    function y(w, C) {
      w.imageSmoothingEnabled = w.imageSmoothingEnabled || w.webkitImageSmoothingEnabled || w.mozImageSmoothingEnabled || w.msImageSmoothingEnabled || w.oImageSmoothingEnabled, w.imageSmoothingEnabled = C;
    }
    e.util.setImageSmoothing = y, e.util.getById = s, e.util.toArray = h, e.util.addClass = u, e.util.makeElement = o, e.util.wrapElement = c, e.util.getScrollLeftTop = d, e.util.getElementOffset = m, e.util.getNodeCanvas = v, e.util.cleanUpJsdomNode = b;
  }(), function() {
    function l(h, o) {
      return h + (/\?/.test(h) ? "&" : "?") + o;
    }
    function s() {
    }
    function a(h, o) {
      o || (o = {});
      var u = o.method ? o.method.toUpperCase() : "GET", c = o.onComplete || function() {
      }, d = new e.window.XMLHttpRequest(), m = o.body || o.parameters;
      return d.onreadystatechange = function() {
        d.readyState === 4 && (c(d), d.onreadystatechange = s);
      }, u === "GET" && (m = null, typeof o.parameters == "string" && (h = l(h, o.parameters))), d.open(u, h, !0), (u === "POST" || u === "PUT") && d.setRequestHeader("Content-Type", "application/x-www-form-urlencoded"), d.send(m), d;
    }
    e.util.request = a;
  }(), e.log = console.log, e.warn = console.warn, function() {
    var l = e.util.object.extend, s = e.util.object.clone, a = [];
    e.util.object.extend(a, {
      /**
       * cancel all running animations at the next requestAnimFrame
       * @returns {AnimationContext[]}
       */
      cancelAll: function() {
        var v = this.splice(0);
        return v.forEach(function(b) {
          b.cancel();
        }), v;
      },
      /**
       * cancel all running animations attached to canvas at the next requestAnimFrame
       * @param {fabric.Canvas} canvas
       * @returns {AnimationContext[]}
       */
      cancelByCanvas: function(v) {
        if (!v)
          return [];
        var b = this.filter(function(y) {
          return typeof y.target == "object" && y.target.canvas === v;
        });
        return b.forEach(function(y) {
          y.cancel();
        }), b;
      },
      /**
       * cancel all running animations for target at the next requestAnimFrame
       * @param {*} target
       * @returns {AnimationContext[]}
       */
      cancelByTarget: function(v) {
        var b = this.findAnimationsByTarget(v);
        return b.forEach(function(y) {
          y.cancel();
        }), b;
      },
      /**
       *
       * @param {CancelFunction} cancelFunc the function returned by animate
       * @returns {number}
       */
      findAnimationIndex: function(v) {
        return this.indexOf(this.findAnimation(v));
      },
      /**
       *
       * @param {CancelFunction} cancelFunc the function returned by animate
       * @returns {AnimationContext | undefined} animation's options object
       */
      findAnimation: function(v) {
        return this.find(function(b) {
          return b.cancel === v;
        });
      },
      /**
       *
       * @param {*} target the object that is assigned to the target property of the animation context
       * @returns {AnimationContext[]} array of animation options object associated with target
       */
      findAnimationsByTarget: function(v) {
        return v ? this.filter(function(b) {
          return b.target === v;
        }) : [];
      }
    });
    function h() {
      return !1;
    }
    function o(v, b, y, w) {
      return -y * Math.cos(v / w * (Math.PI / 2)) + y + b;
    }
    function u(v) {
      v || (v = {});
      var b = !1, y, w = function() {
        var C = e.runningAnimations.indexOf(y);
        return C > -1 && e.runningAnimations.splice(C, 1)[0];
      };
      return y = l(s(v), {
        cancel: function() {
          return b = !0, w();
        },
        currentValue: "startValue" in v ? v.startValue : 0,
        completionRate: 0,
        durationRate: 0
      }), e.runningAnimations.push(y), m(function(C) {
        var _ = C || +/* @__PURE__ */ new Date(), S = v.duration || 500, k = _ + S, I, L = v.onChange || h, j = v.abort || h, G = v.onComplete || h, te = v.easing || o, W = "startValue" in v ? v.startValue.length > 0 : !1, q = "startValue" in v ? v.startValue : 0, K = "endValue" in v ? v.endValue : 100, ne = v.byValue || (W ? q.map(function(re, T) {
          return K[T] - q[T];
        }) : K - q);
        v.onStart && v.onStart(), function re(T) {
          I = T || +/* @__PURE__ */ new Date();
          var P = I > k ? S : I - _, A = P / S, M = W ? q.map(function(D, E) {
            return te(P, q[E], ne[E], S);
          }) : te(P, q, ne, S), $ = Math.abs(W ? (M[0] - q[0]) / ne[0] : (M - q) / ne);
          if (y.currentValue = W ? M.slice() : M, y.completionRate = $, y.durationRate = A, !b) {
            if (j(M, $, A)) {
              w();
              return;
            }
            if (I > k) {
              y.currentValue = W ? K.slice() : K, y.completionRate = 1, y.durationRate = 1, L(W ? K.slice() : K, 1, 1), G(K, 1, 1), w();
              return;
            } else
              L(M, $, A), m(re);
          }
        }(_);
      }), y.cancel;
    }
    var c = e.window.requestAnimationFrame || e.window.webkitRequestAnimationFrame || e.window.mozRequestAnimationFrame || e.window.oRequestAnimationFrame || e.window.msRequestAnimationFrame || function(v) {
      return e.window.setTimeout(v, 1e3 / 60);
    }, d = e.window.cancelAnimationFrame || e.window.clearTimeout;
    function m() {
      return c.apply(e.window, arguments);
    }
    function p() {
      return d.apply(e.window, arguments);
    }
    e.util.animate = u, e.util.requestAnimFrame = m, e.util.cancelAnimFrame = p, e.runningAnimations = a;
  }(), function() {
    function l(a, h, o) {
      var u = "rgba(" + parseInt(a[0] + o * (h[0] - a[0]), 10) + "," + parseInt(a[1] + o * (h[1] - a[1]), 10) + "," + parseInt(a[2] + o * (h[2] - a[2]), 10);
      return u += "," + (a && h ? parseFloat(a[3] + o * (h[3] - a[3])) : 1), u += ")", u;
    }
    function s(a, h, o, u) {
      var c = new e.Color(a).getSource(), d = new e.Color(h).getSource(), m = u.onComplete, p = u.onChange;
      return u = u || {}, e.util.animate(e.util.object.extend(u, {
        duration: o || 500,
        startValue: c,
        endValue: d,
        byValue: d,
        easing: function(v, b, y, w) {
          var C = u.colorEasing ? u.colorEasing(v, w) : 1 - Math.cos(v / w * (Math.PI / 2));
          return l(b, y, C);
        },
        // has to take in account for color restoring;
        onComplete: function(v, b, y) {
          if (m)
            return m(
              l(d, d, 0),
              b,
              y
            );
        },
        onChange: function(v, b, y) {
          if (p) {
            if (Array.isArray(v))
              return p(
                l(v, v, 0),
                b,
                y
              );
            p(v, b, y);
          }
        }
      }));
    }
    e.util.animateColor = s;
  }(), function() {
    function l(T, P, A, M) {
      return T < Math.abs(P) ? (T = P, M = A / 4) : P === 0 && T === 0 ? M = A / (2 * Math.PI) * Math.asin(1) : M = A / (2 * Math.PI) * Math.asin(P / T), { a: T, c: P, p: A, s: M };
    }
    function s(T, P, A) {
      return T.a * Math.pow(2, 10 * (P -= 1)) * Math.sin((P * A - T.s) * (2 * Math.PI) / T.p);
    }
    function a(T, P, A, M) {
      return A * ((T = T / M - 1) * T * T + 1) + P;
    }
    function h(T, P, A, M) {
      return T /= M / 2, T < 1 ? A / 2 * T * T * T + P : A / 2 * ((T -= 2) * T * T + 2) + P;
    }
    function o(T, P, A, M) {
      return A * (T /= M) * T * T * T + P;
    }
    function u(T, P, A, M) {
      return -A * ((T = T / M - 1) * T * T * T - 1) + P;
    }
    function c(T, P, A, M) {
      return T /= M / 2, T < 1 ? A / 2 * T * T * T * T + P : -A / 2 * ((T -= 2) * T * T * T - 2) + P;
    }
    function d(T, P, A, M) {
      return A * (T /= M) * T * T * T * T + P;
    }
    function m(T, P, A, M) {
      return A * ((T = T / M - 1) * T * T * T * T + 1) + P;
    }
    function p(T, P, A, M) {
      return T /= M / 2, T < 1 ? A / 2 * T * T * T * T * T + P : A / 2 * ((T -= 2) * T * T * T * T + 2) + P;
    }
    function v(T, P, A, M) {
      return -A * Math.cos(T / M * (Math.PI / 2)) + A + P;
    }
    function b(T, P, A, M) {
      return A * Math.sin(T / M * (Math.PI / 2)) + P;
    }
    function y(T, P, A, M) {
      return -A / 2 * (Math.cos(Math.PI * T / M) - 1) + P;
    }
    function w(T, P, A, M) {
      return T === 0 ? P : A * Math.pow(2, 10 * (T / M - 1)) + P;
    }
    function C(T, P, A, M) {
      return T === M ? P + A : A * (-Math.pow(2, -10 * T / M) + 1) + P;
    }
    function _(T, P, A, M) {
      return T === 0 ? P : T === M ? P + A : (T /= M / 2, T < 1 ? A / 2 * Math.pow(2, 10 * (T - 1)) + P : A / 2 * (-Math.pow(2, -10 * --T) + 2) + P);
    }
    function S(T, P, A, M) {
      return -A * (Math.sqrt(1 - (T /= M) * T) - 1) + P;
    }
    function k(T, P, A, M) {
      return A * Math.sqrt(1 - (T = T / M - 1) * T) + P;
    }
    function I(T, P, A, M) {
      return T /= M / 2, T < 1 ? -A / 2 * (Math.sqrt(1 - T * T) - 1) + P : A / 2 * (Math.sqrt(1 - (T -= 2) * T) + 1) + P;
    }
    function L(T, P, A, M) {
      var $ = 1.70158, D = 0, E = A;
      if (T === 0)
        return P;
      if (T /= M, T === 1)
        return P + A;
      D || (D = M * 0.3);
      var F = l(E, A, D, $);
      return -s(F, T, M) + P;
    }
    function j(T, P, A, M) {
      var $ = 1.70158, D = 0, E = A;
      if (T === 0)
        return P;
      if (T /= M, T === 1)
        return P + A;
      D || (D = M * 0.3);
      var F = l(E, A, D, $);
      return F.a * Math.pow(2, -10 * T) * Math.sin((T * M - F.s) * (2 * Math.PI) / F.p) + F.c + P;
    }
    function G(T, P, A, M) {
      var $ = 1.70158, D = 0, E = A;
      if (T === 0)
        return P;
      if (T /= M / 2, T === 2)
        return P + A;
      D || (D = M * (0.3 * 1.5));
      var F = l(E, A, D, $);
      return T < 1 ? -0.5 * s(F, T, M) + P : F.a * Math.pow(2, -10 * (T -= 1)) * Math.sin((T * M - F.s) * (2 * Math.PI) / F.p) * 0.5 + F.c + P;
    }
    function te(T, P, A, M, $) {
      return $ === void 0 && ($ = 1.70158), A * (T /= M) * T * (($ + 1) * T - $) + P;
    }
    function W(T, P, A, M, $) {
      return $ === void 0 && ($ = 1.70158), A * ((T = T / M - 1) * T * (($ + 1) * T + $) + 1) + P;
    }
    function q(T, P, A, M, $) {
      return $ === void 0 && ($ = 1.70158), T /= M / 2, T < 1 ? A / 2 * (T * T * ((($ *= 1.525) + 1) * T - $)) + P : A / 2 * ((T -= 2) * T * ((($ *= 1.525) + 1) * T + $) + 2) + P;
    }
    function K(T, P, A, M) {
      return A - ne(M - T, 0, A, M) + P;
    }
    function ne(T, P, A, M) {
      return (T /= M) < 1 / 2.75 ? A * (7.5625 * T * T) + P : T < 2 / 2.75 ? A * (7.5625 * (T -= 1.5 / 2.75) * T + 0.75) + P : T < 2.5 / 2.75 ? A * (7.5625 * (T -= 2.25 / 2.75) * T + 0.9375) + P : A * (7.5625 * (T -= 2.625 / 2.75) * T + 0.984375) + P;
    }
    function re(T, P, A, M) {
      return T < M / 2 ? K(T * 2, 0, A, M) * 0.5 + P : ne(T * 2 - M, 0, A, M) * 0.5 + A * 0.5 + P;
    }
    e.util.ease = {
      /**
       * Quadratic easing in
       * @memberOf fabric.util.ease
       */
      easeInQuad: function(T, P, A, M) {
        return A * (T /= M) * T + P;
      },
      /**
       * Quadratic easing out
       * @memberOf fabric.util.ease
       */
      easeOutQuad: function(T, P, A, M) {
        return -A * (T /= M) * (T - 2) + P;
      },
      /**
       * Quadratic easing in and out
       * @memberOf fabric.util.ease
       */
      easeInOutQuad: function(T, P, A, M) {
        return T /= M / 2, T < 1 ? A / 2 * T * T + P : -A / 2 * (--T * (T - 2) - 1) + P;
      },
      /**
       * Cubic easing in
       * @memberOf fabric.util.ease
       */
      easeInCubic: function(T, P, A, M) {
        return A * (T /= M) * T * T + P;
      },
      easeOutCubic: a,
      easeInOutCubic: h,
      easeInQuart: o,
      easeOutQuart: u,
      easeInOutQuart: c,
      easeInQuint: d,
      easeOutQuint: m,
      easeInOutQuint: p,
      easeInSine: v,
      easeOutSine: b,
      easeInOutSine: y,
      easeInExpo: w,
      easeOutExpo: C,
      easeInOutExpo: _,
      easeInCirc: S,
      easeOutCirc: k,
      easeInOutCirc: I,
      easeInElastic: L,
      easeOutElastic: j,
      easeInOutElastic: G,
      easeInBack: te,
      easeOutBack: W,
      easeInOutBack: q,
      easeInBounce: K,
      easeOutBounce: ne,
      easeInOutBounce: re
    };
  }(), function(l) {
    var s = l.fabric || (l.fabric = {}), a = s.util.object.extend, h = s.util.object.clone, o = s.util.toFixed, u = s.util.parseUnit, c = s.util.multiplyTransformMatrices, d = [
      "path",
      "circle",
      "polygon",
      "polyline",
      "ellipse",
      "rect",
      "line",
      "image",
      "text"
    ], m = ["symbol", "image", "marker", "pattern", "view", "svg"], p = ["pattern", "defs", "symbol", "metadata", "clipPath", "mask", "desc"], v = ["symbol", "g", "a", "svg", "clipPath", "defs"], b = {
      cx: "left",
      x: "left",
      r: "radius",
      cy: "top",
      y: "top",
      display: "visible",
      visibility: "visible",
      transform: "transformMatrix",
      "fill-opacity": "fillOpacity",
      "fill-rule": "fillRule",
      "font-family": "fontFamily",
      "font-size": "fontSize",
      "font-style": "fontStyle",
      "font-weight": "fontWeight",
      "letter-spacing": "charSpacing",
      "paint-order": "paintFirst",
      "stroke-dasharray": "strokeDashArray",
      "stroke-dashoffset": "strokeDashOffset",
      "stroke-linecap": "strokeLineCap",
      "stroke-linejoin": "strokeLineJoin",
      "stroke-miterlimit": "strokeMiterLimit",
      "stroke-opacity": "strokeOpacity",
      "stroke-width": "strokeWidth",
      "text-decoration": "textDecoration",
      "text-anchor": "textAnchor",
      opacity: "opacity",
      "clip-path": "clipPath",
      "clip-rule": "clipRule",
      "vector-effect": "strokeUniform",
      "image-rendering": "imageSmoothing"
    }, y = {
      stroke: "strokeOpacity",
      fill: "fillOpacity"
    }, w = "font-size", C = "clip-path";
    s.svgValidTagNamesRegEx = k(d), s.svgViewBoxElementsRegEx = k(m), s.svgInvalidAncestorsRegEx = k(p), s.svgValidParentsRegEx = k(v), s.cssRules = {}, s.gradientDefs = {}, s.clipPaths = {};
    function _(D) {
      return D in b ? b[D] : D;
    }
    function S(D, E, F, N) {
      var H = Array.isArray(E), V;
      if ((D === "fill" || D === "stroke") && E === "none")
        E = "";
      else {
        if (D === "strokeUniform")
          return E === "non-scaling-stroke";
        if (D === "strokeDashArray")
          E === "none" ? E = null : E = E.replace(/,/g, " ").split(/\s+/).map(parseFloat);
        else if (D === "transformMatrix")
          F && F.transformMatrix ? E = c(
            F.transformMatrix,
            s.parseTransformAttribute(E)
          ) : E = s.parseTransformAttribute(E);
        else if (D === "visible")
          E = E !== "none" && E !== "hidden", F && F.visible === !1 && (E = !1);
        else if (D === "opacity")
          E = parseFloat(E), F && typeof F.opacity < "u" && (E *= F.opacity);
        else if (D === "textAnchor")
          E = E === "start" ? "left" : E === "end" ? "right" : "center";
        else if (D === "charSpacing")
          V = u(E, N) / N * 1e3;
        else if (D === "paintFirst") {
          var J = E.indexOf("fill"), ee = E.indexOf("stroke"), E = "fill";
          (J > -1 && ee > -1 && ee < J || J === -1 && ee > -1) && (E = "stroke");
        } else {
          if (D === "href" || D === "xlink:href" || D === "font")
            return E;
          if (D === "imageSmoothing")
            return E === "optimizeQuality";
          V = H ? E.map(u) : u(E, N);
        }
      }
      return !H && isNaN(V) ? E : V;
    }
    function k(D) {
      return new RegExp("^(" + D.join("|") + ")\\b", "i");
    }
    function I(D) {
      for (var E in y)
        if (!(typeof D[y[E]] > "u" || D[E] === "")) {
          if (typeof D[E] > "u") {
            if (!s.Object.prototype[E])
              continue;
            D[E] = s.Object.prototype[E];
          }
          if (D[E].indexOf("url(") !== 0) {
            var F = new s.Color(D[E]);
            D[E] = F.setAlpha(o(F.getAlpha() * D[y[E]], 2)).toRgba();
          }
        }
      return D;
    }
    function L(D, E) {
      var F, N = [], H, V, J;
      for (V = 0, J = E.length; V < J; V++)
        F = E[V], H = D.getElementsByTagName(F), N = N.concat(Array.prototype.slice.call(H));
      return N;
    }
    s.parseTransformAttribute = function() {
      function D(Z, fe) {
        var xe = s.util.cos(fe[0]), Ee = s.util.sin(fe[0]), Re = 0, Pe = 0;
        fe.length === 3 && (Re = fe[1], Pe = fe[2]), Z[0] = xe, Z[1] = Ee, Z[2] = -Ee, Z[3] = xe, Z[4] = Re - (xe * Re - Ee * Pe), Z[5] = Pe - (Ee * Re + xe * Pe);
      }
      function E(Z, fe) {
        var xe = fe[0], Ee = fe.length === 2 ? fe[1] : fe[0];
        Z[0] = xe, Z[3] = Ee;
      }
      function F(Z, fe, xe) {
        Z[xe] = Math.tan(s.util.degreesToRadians(fe[0]));
      }
      function N(Z, fe) {
        Z[4] = fe[0], fe.length === 2 && (Z[5] = fe[1]);
      }
      var H = s.iMatrix, V = s.reNum, J = s.commaWsp, ee = "(?:(skewX)\\s*\\(\\s*(" + V + ")\\s*\\))", le = "(?:(skewY)\\s*\\(\\s*(" + V + ")\\s*\\))", U = "(?:(rotate)\\s*\\(\\s*(" + V + ")(?:" + J + "(" + V + ")" + J + "(" + V + "))?\\s*\\))", B = "(?:(scale)\\s*\\(\\s*(" + V + ")(?:" + J + "(" + V + "))?\\s*\\))", X = "(?:(translate)\\s*\\(\\s*(" + V + ")(?:" + J + "(" + V + "))?\\s*\\))", Q = "(?:(matrix)\\s*\\(\\s*(" + V + ")" + J + "(" + V + ")" + J + "(" + V + ")" + J + "(" + V + ")" + J + "(" + V + ")" + J + "(" + V + ")\\s*\\))", z = "(?:" + Q + "|" + X + "|" + B + "|" + U + "|" + ee + "|" + le + ")", Y = "(?:" + z + "(?:" + J + "*" + z + ")*)", se = "^\\s*(?:" + Y + "?)\\s*$", ve = new RegExp(se), pe = new RegExp(z, "g");
      return function(Z) {
        var fe = H.concat(), xe = [];
        if (!Z || Z && !ve.test(Z))
          return fe;
        Z.replace(pe, function(Re) {
          var Pe = new RegExp(z).exec(Re).filter(function(kn) {
            return !!kn;
          }), at = Pe[1], We = Pe.slice(2).map(parseFloat);
          switch (at) {
            case "translate":
              N(fe, We);
              break;
            case "rotate":
              We[0] = s.util.degreesToRadians(We[0]), D(fe, We);
              break;
            case "scale":
              E(fe, We);
              break;
            case "skewX":
              F(fe, We, 2);
              break;
            case "skewY":
              F(fe, We, 1);
              break;
            case "matrix":
              fe = We;
              break;
          }
          xe.push(fe.concat()), fe = H.concat();
        });
        for (var Ee = xe[0]; xe.length > 1; )
          xe.shift(), Ee = s.util.multiplyTransformMatrices(Ee, xe[0]);
        return Ee;
      };
    }();
    function j(D, E) {
      var F, N;
      D.replace(/;\s*$/, "").split(";").forEach(function(H) {
        var V = H.split(":");
        F = V[0].trim().toLowerCase(), N = V[1].trim(), E[F] = N;
      });
    }
    function G(D, E) {
      var F, N;
      for (var H in D)
        typeof D[H] > "u" || (F = H.toLowerCase(), N = D[H], E[F] = N);
    }
    function te(D, E) {
      var F = {};
      for (var N in s.cssRules[E])
        if (W(D, N.split(" ")))
          for (var H in s.cssRules[E][N])
            F[H] = s.cssRules[E][N][H];
      return F;
    }
    function W(D, E) {
      var F, N = !0;
      return F = K(D, E.pop()), F && E.length && (N = q(D, E)), F && N && E.length === 0;
    }
    function q(D, E) {
      for (var F, N = !0; D.parentNode && D.parentNode.nodeType === 1 && E.length; )
        N && (F = E.pop()), D = D.parentNode, N = K(D, F);
      return E.length === 0;
    }
    function K(D, E) {
      var F = D.nodeName, N = D.getAttribute("class"), H = D.getAttribute("id"), V, J;
      if (V = new RegExp("^" + F, "i"), E = E.replace(V, ""), H && E.length && (V = new RegExp("#" + H + "(?![a-zA-Z\\-]+)", "i"), E = E.replace(V, "")), N && E.length)
        for (N = N.split(" "), J = N.length; J--; )
          V = new RegExp("\\." + N[J] + "(?![a-zA-Z\\-]+)", "i"), E = E.replace(V, "");
      return E.length === 0;
    }
    function ne(D, E) {
      var F;
      if (D.getElementById && (F = D.getElementById(E)), F)
        return F;
      var N, H, V, J = D.getElementsByTagName("*");
      for (H = 0, V = J.length; H < V; H++)
        if (N = J[H], E === N.getAttribute("id"))
          return N;
    }
    function re(D) {
      for (var E = L(D, ["use", "svg:use"]), F = 0; E.length && F < E.length; ) {
        var N = E[F], H = N.getAttribute("xlink:href") || N.getAttribute("href");
        if (H === null)
          return;
        var V = H.slice(1), J = N.getAttribute("x") || 0, ee = N.getAttribute("y") || 0, le = ne(D, V).cloneNode(!0), U = (le.getAttribute("transform") || "") + " translate(" + J + ", " + ee + ")", B, X = E.length, Q, z, Y, se, ve = s.svgNS;
        if (P(le), /^svg$/i.test(le.nodeName)) {
          var pe = le.ownerDocument.createElementNS(ve, "g");
          for (z = 0, Y = le.attributes, se = Y.length; z < se; z++)
            Q = Y.item(z), pe.setAttributeNS(ve, Q.nodeName, Q.nodeValue);
          for (; le.firstChild; )
            pe.appendChild(le.firstChild);
          le = pe;
        }
        for (z = 0, Y = N.attributes, se = Y.length; z < se; z++)
          Q = Y.item(z), !(Q.nodeName === "x" || Q.nodeName === "y" || Q.nodeName === "xlink:href" || Q.nodeName === "href") && (Q.nodeName === "transform" ? U = Q.nodeValue + " " + U : le.setAttribute(Q.nodeName, Q.nodeValue));
        le.setAttribute("transform", U), le.setAttribute("instantiated_by_use", "1"), le.removeAttribute("id"), B = N.parentNode, B.replaceChild(le, N), E.length === X && F++;
      }
    }
    var T = new RegExp(
      "^\\s*(" + s.reNum + "+)\\s*,?\\s*(" + s.reNum + "+)\\s*,?\\s*(" + s.reNum + "+)\\s*,?\\s*(" + s.reNum + "+)\\s*$"
    );
    function P(D) {
      if (!s.svgViewBoxElementsRegEx.test(D.nodeName))
        return {};
      var E = D.getAttribute("viewBox"), F = 1, N = 1, H = 0, V = 0, J, ee, le, U, B = D.getAttribute("width"), X = D.getAttribute("height"), Q = D.getAttribute("x") || 0, z = D.getAttribute("y") || 0, Y = D.getAttribute("preserveAspectRatio") || "", se = !E || !(E = E.match(T)), ve = !B || !X || B === "100%" || X === "100%", pe = se && ve, Z = {}, fe = "", xe = 0, Ee = 0;
      if (Z.width = 0, Z.height = 0, Z.toBeParsed = pe, se && (Q || z) && D.parentNode && D.parentNode.nodeName !== "#document" && (fe = " translate(" + u(Q) + " " + u(z) + ") ", le = (D.getAttribute("transform") || "") + fe, D.setAttribute("transform", le), D.removeAttribute("x"), D.removeAttribute("y")), pe)
        return Z;
      if (se)
        return Z.width = u(B), Z.height = u(X), Z;
      if (H = -parseFloat(E[1]), V = -parseFloat(E[2]), J = parseFloat(E[3]), ee = parseFloat(E[4]), Z.minX = H, Z.minY = V, Z.viewBoxWidth = J, Z.viewBoxHeight = ee, ve ? (Z.width = J, Z.height = ee) : (Z.width = u(B), Z.height = u(X), F = Z.width / J, N = Z.height / ee), Y = s.util.parsePreserveAspectRatioAttribute(Y), Y.alignX !== "none" && (Y.meetOrSlice === "meet" && (N = F = F > N ? N : F), Y.meetOrSlice === "slice" && (N = F = F > N ? F : N), xe = Z.width - J * F, Ee = Z.height - ee * F, Y.alignX === "Mid" && (xe /= 2), Y.alignY === "Mid" && (Ee /= 2), Y.alignX === "Min" && (xe = 0), Y.alignY === "Min" && (Ee = 0)), F === 1 && N === 1 && H === 0 && V === 0 && Q === 0 && z === 0)
        return Z;
      if ((Q || z) && D.parentNode.nodeName !== "#document" && (fe = " translate(" + u(Q) + " " + u(z) + ") "), le = fe + " matrix(" + F + " 0 0 " + N + " " + (H * F + xe) + " " + (V * N + Ee) + ") ", D.nodeName === "svg") {
        for (U = D.ownerDocument.createElementNS(s.svgNS, "g"); D.firstChild; )
          U.appendChild(D.firstChild);
        D.appendChild(U);
      } else
        U = D, U.removeAttribute("x"), U.removeAttribute("y"), le = U.getAttribute("transform") + le;
      return U.setAttribute("transform", le), Z;
    }
    function A(D, E) {
      for (; D && (D = D.parentNode); )
        if (D.nodeName && E.test(D.nodeName.replace("svg:", "")) && !D.getAttribute("instantiated_by_use"))
          return !0;
      return !1;
    }
    s.parseSVGDocument = function(D, E, F, N) {
      if (D) {
        re(D);
        var H = s.Object.__uid++, V, J, ee = P(D), le = s.util.toArray(D.getElementsByTagName("*"));
        if (ee.crossOrigin = N && N.crossOrigin, ee.svgUid = H, le.length === 0 && s.isLikelyNode) {
          le = D.selectNodes('//*[name(.)!="svg"]');
          var U = [];
          for (V = 0, J = le.length; V < J; V++)
            U[V] = le[V];
          le = U;
        }
        var B = le.filter(function(Q) {
          return P(Q), s.svgValidTagNamesRegEx.test(Q.nodeName.replace("svg:", "")) && !A(Q, s.svgInvalidAncestorsRegEx);
        });
        if (!B || B && !B.length) {
          E && E([], {});
          return;
        }
        var X = {};
        le.filter(function(Q) {
          return Q.nodeName.replace("svg:", "") === "clipPath";
        }).forEach(function(Q) {
          var z = Q.getAttribute("id");
          X[z] = s.util.toArray(Q.getElementsByTagName("*")).filter(function(Y) {
            return s.svgValidTagNamesRegEx.test(Y.nodeName.replace("svg:", ""));
          });
        }), s.gradientDefs[H] = s.getGradientDefs(D), s.cssRules[H] = s.getCSSRules(D), s.clipPaths[H] = X, s.parseElements(B, function(Q, z) {
          E && (E(Q, ee, z, le), delete s.gradientDefs[H], delete s.cssRules[H], delete s.clipPaths[H]);
        }, h(ee), F, N);
      }
    };
    function M(D, E) {
      var F = ["gradientTransform", "x1", "x2", "y1", "y2", "gradientUnits", "cx", "cy", "r", "fx", "fy"], N = "xlink:href", H = E.getAttribute(N).slice(1), V = ne(D, H);
      if (V && V.getAttribute(N) && M(D, V), F.forEach(function(ee) {
        V && !E.hasAttribute(ee) && V.hasAttribute(ee) && E.setAttribute(ee, V.getAttribute(ee));
      }), !E.children.length)
        for (var J = V.cloneNode(!0); J.firstChild; )
          E.appendChild(J.firstChild);
      E.removeAttribute(N);
    }
    var $ = new RegExp(
      "(normal|italic)?\\s*(normal|small-caps)?\\s*(normal|bold|bolder|lighter|100|200|300|400|500|600|700|800|900)?\\s*(" + s.reNum + "(?:px|cm|mm|em|pt|pc|in)*)(?:\\/(normal|" + s.reNum + "))?\\s+(.*)"
    );
    a(s, {
      /**
       * Parses a short font declaration, building adding its properties to a style object
       * @static
       * @function
       * @memberOf fabric
       * @param {String} value font declaration
       * @param {Object} oStyle definition
       */
      parseFontDeclaration: function(D, E) {
        var F = D.match($);
        if (F) {
          var N = F[1], H = F[3], V = F[4], J = F[5], ee = F[6];
          N && (E.fontStyle = N), H && (E.fontWeight = isNaN(parseFloat(H)) ? H : parseFloat(H)), V && (E.fontSize = u(V)), ee && (E.fontFamily = ee), J && (E.lineHeight = J === "normal" ? 1 : J);
        }
      },
      /**
       * Parses an SVG document, returning all of the gradient declarations found in it
       * @static
       * @function
       * @memberOf fabric
       * @param {SVGDocument} doc SVG document to parse
       * @return {Object} Gradient definitions; key corresponds to element id, value -- to gradient definition element
       */
      getGradientDefs: function(D) {
        var E = [
          "linearGradient",
          "radialGradient",
          "svg:linearGradient",
          "svg:radialGradient"
        ], F = L(D, E), N, H = 0, V = {};
        for (H = F.length; H--; )
          N = F[H], N.getAttribute("xlink:href") && M(D, N), V[N.getAttribute("id")] = N;
        return V;
      },
      /**
       * Returns an object of attributes' name/value, given element and an array of attribute names;
       * Parses parent "g" nodes recursively upwards.
       * @static
       * @memberOf fabric
       * @param {DOMElement} element Element to parse
       * @param {Array} attributes Array of attributes to parse
       * @return {Object} object containing parsed attributes' names/values
       */
      parseAttributes: function(D, E, F) {
        if (D) {
          var N, H = {}, V, J;
          typeof F > "u" && (F = D.getAttribute("svgUid")), D.parentNode && s.svgValidParentsRegEx.test(D.parentNode.nodeName) && (H = s.parseAttributes(D.parentNode, E, F));
          var ee = E.reduce(function(Y, se) {
            return N = D.getAttribute(se), N && (Y[se] = N), Y;
          }, {}), le = a(
            te(D, F),
            s.parseStyleAttribute(D)
          );
          ee = a(
            ee,
            le
          ), le[C] && D.setAttribute(C, le[C]), V = J = H.fontSize || s.Text.DEFAULT_SVG_FONT_SIZE, ee[w] && (ee[w] = V = u(ee[w], J));
          var U, B, X = {};
          for (var Q in ee)
            U = _(Q), B = S(U, ee[Q], H, V), X[U] = B;
          X && X.font && s.parseFontDeclaration(X.font, X);
          var z = a(H, X);
          return s.svgValidParentsRegEx.test(D.nodeName) ? z : I(z);
        }
      },
      /**
       * Transforms an array of svg elements to corresponding fabric.* instances
       * @static
       * @memberOf fabric
       * @param {Array} elements Array of elements to parse
       * @param {Function} callback Being passed an array of fabric instances (transformed from SVG elements)
       * @param {Object} [options] Options object
       * @param {Function} [reviver] Method for further parsing of SVG elements, called after each fabric object created.
       */
      parseElements: function(D, E, F, N, H) {
        new s.ElementsParser(D, E, F, N, H).parse();
      },
      /**
       * Parses "style" attribute, retuning an object with values
       * @static
       * @memberOf fabric
       * @param {SVGElement} element Element to parse
       * @return {Object} Objects with values parsed from style attribute of an element
       */
      parseStyleAttribute: function(D) {
        var E = {}, F = D.getAttribute("style");
        return F && (typeof F == "string" ? j(F, E) : G(F, E)), E;
      },
      /**
       * Parses "points" attribute, returning an array of values
       * @static
       * @memberOf fabric
       * @param {String} points points attribute string
       * @return {Array} array of points
       */
      parsePointsAttribute: function(D) {
        if (!D)
          return null;
        D = D.replace(/,/g, " ").trim(), D = D.split(/\s+/);
        var E = [], F, N;
        for (F = 0, N = D.length; F < N; F += 2)
          E.push({
            x: parseFloat(D[F]),
            y: parseFloat(D[F + 1])
          });
        return E;
      },
      /**
       * Returns CSS rules for a given SVG document
       * @static
       * @function
       * @memberOf fabric
       * @param {SVGDocument} doc SVG document to parse
       * @return {Object} CSS rules of this document
       */
      getCSSRules: function(D) {
        var E = D.getElementsByTagName("style"), F, N, H = {}, V;
        for (F = 0, N = E.length; F < N; F++) {
          var J = E[F].textContent;
          J = J.replace(/\/\*[\s\S]*?\*\//g, ""), J.trim() !== "" && (V = J.split("}"), V = V.filter(function(ee) {
            return ee.trim();
          }), V.forEach(function(ee) {
            var le = ee.split("{"), U = {}, B = le[1].trim(), X = B.split(";").filter(function(se) {
              return se.trim();
            });
            for (F = 0, N = X.length; F < N; F++) {
              var Q = X[F].split(":"), z = Q[0].trim(), Y = Q[1].trim();
              U[z] = Y;
            }
            ee = le[0].trim(), ee.split(",").forEach(function(se) {
              se = se.replace(/^svg/i, "").trim(), se !== "" && (H[se] ? s.util.object.extend(H[se], U) : H[se] = s.util.object.clone(U));
            });
          }));
        }
        return H;
      },
      /**
       * Takes url corresponding to an SVG document, and parses it into a set of fabric objects.
       * Note that SVG is fetched via XMLHttpRequest, so it needs to conform to SOP (Same Origin Policy)
       * @memberOf fabric
       * @param {String} url
       * @param {Function} callback
       * @param {Function} [reviver] Method for further parsing of SVG elements, called after each fabric object created.
       * @param {Object} [options] Object containing options for parsing
       * @param {String} [options.crossOrigin] crossOrigin crossOrigin setting to use for external resources
       */
      loadSVGFromURL: function(D, E, F, N) {
        D = D.replace(/^\n\s*/, "").trim(), new s.util.request(D, {
          method: "get",
          onComplete: H
        });
        function H(V) {
          var J = V.responseXML;
          if (!J || !J.documentElement)
            return E && E(null), !1;
          s.parseSVGDocument(J.documentElement, function(ee, le, U, B) {
            E && E(ee, le, U, B);
          }, F, N);
        }
      },
      /**
       * Takes string corresponding to an SVG document, and parses it into a set of fabric objects
       * @memberOf fabric
       * @param {String} string
       * @param {Function} callback
       * @param {Function} [reviver] Method for further parsing of SVG elements, called after each fabric object created.
       * @param {Object} [options] Object containing options for parsing
       * @param {String} [options.crossOrigin] crossOrigin crossOrigin setting to use for external resources
       */
      loadSVGFromString: function(D, E, F, N) {
        var H = new s.window.DOMParser(), V = H.parseFromString(D.trim(), "text/xml");
        s.parseSVGDocument(V.documentElement, function(J, ee, le, U) {
          E(J, ee, le, U);
        }, F, N);
      }
    });
  }(t), e.ElementsParser = function(l, s, a, h, o, u) {
    this.elements = l, this.callback = s, this.options = a, this.reviver = h, this.svgUid = a && a.svgUid || 0, this.parsingOptions = o, this.regexUrl = /^url\(['"]?#([^'"]+)['"]?\)/g, this.doc = u;
  }, function(l) {
    l.parse = function() {
      this.instances = new Array(this.elements.length), this.numElements = this.elements.length, this.createObjects();
    }, l.createObjects = function() {
      var s = this;
      this.elements.forEach(function(a, h) {
        a.setAttribute("svgUid", s.svgUid), s.createObject(a, h);
      });
    }, l.findTag = function(s) {
      return e[e.util.string.capitalize(s.tagName.replace("svg:", ""))];
    }, l.createObject = function(s, a) {
      var h = this.findTag(s);
      if (h && h.fromElement)
        try {
          h.fromElement(s, this.createCallback(a, s), this.options);
        } catch (o) {
          e.log(o);
        }
      else
        this.checkIfDone();
    }, l.createCallback = function(s, a) {
      var h = this;
      return function(o) {
        var u;
        h.resolveGradient(o, a, "fill"), h.resolveGradient(o, a, "stroke"), o instanceof e.Image && o._originalElement && (u = o.parsePreserveAspectRatioAttribute(a)), o._removeTransformMatrix(u), h.resolveClipPath(o, a), h.reviver && h.reviver(a, o), h.instances[s] = o, h.checkIfDone();
      };
    }, l.extractPropertyDefinition = function(s, a, h) {
      var o = s[a], u = this.regexUrl;
      if (u.test(o)) {
        u.lastIndex = 0;
        var c = u.exec(o)[1];
        return u.lastIndex = 0, e[h][this.svgUid][c];
      }
    }, l.resolveGradient = function(s, a, h) {
      var o = this.extractPropertyDefinition(s, h, "gradientDefs");
      if (o) {
        var u = a.getAttribute(h + "-opacity"), c = e.Gradient.fromElement(o, s, u, this.options);
        s.set(h, c);
      }
    }, l.createClipPathCallback = function(s, a) {
      return function(h) {
        h._removeTransformMatrix(), h.fillRule = h.clipRule, a.push(h);
      };
    }, l.resolveClipPath = function(s, a) {
      var h = this.extractPropertyDefinition(s, "clipPath", "clipPaths"), o, u, c, d, m, p;
      if (h) {
        d = [], c = e.util.invertTransform(s.calcTransformMatrix());
        for (var v = h[0].parentNode, b = a; b.parentNode && b.getAttribute("clip-path") !== s.clipPath; )
          b = b.parentNode;
        b.parentNode.appendChild(v);
        for (var y = 0; y < h.length; y++)
          o = h[y], u = this.findTag(o), u.fromElement(
            o,
            this.createClipPathCallback(s, d),
            this.options
          );
        d.length === 1 ? h = d[0] : h = new e.Group(d), m = e.util.multiplyTransformMatrices(
          c,
          h.calcTransformMatrix()
        ), h.clipPath && this.resolveClipPath(h, b);
        var p = e.util.qrDecompose(m);
        h.flipX = !1, h.flipY = !1, h.set("scaleX", p.scaleX), h.set("scaleY", p.scaleY), h.angle = p.angle, h.skewX = p.skewX, h.skewY = 0, h.setPositionByOrigin({ x: p.translateX, y: p.translateY }, "center", "center"), s.clipPath = h;
      } else
        delete s.clipPath;
    }, l.checkIfDone = function() {
      --this.numElements === 0 && (this.instances = this.instances.filter(function(s) {
        return s != null;
      }), this.callback(this.instances, this.elements));
    };
  }(e.ElementsParser.prototype), function(l) {
    var s = l.fabric || (l.fabric = {});
    if (s.Point) {
      s.warn("fabric.Point is already defined");
      return;
    }
    s.Point = a;
    function a(h, o) {
      this.x = h, this.y = o;
    }
    a.prototype = /** @lends fabric.Point.prototype */
    {
      type: "point",
      constructor: a,
      /**
       * Adds another point to this one and returns another one
       * @param {fabric.Point} that
       * @return {fabric.Point} new Point instance with added values
       */
      add: function(h) {
        return new a(this.x + h.x, this.y + h.y);
      },
      /**
       * Adds another point to this one
       * @param {fabric.Point} that
       * @return {fabric.Point} thisArg
       * @chainable
       */
      addEquals: function(h) {
        return this.x += h.x, this.y += h.y, this;
      },
      /**
       * Adds value to this point and returns a new one
       * @param {Number} scalar
       * @return {fabric.Point} new Point with added value
       */
      scalarAdd: function(h) {
        return new a(this.x + h, this.y + h);
      },
      /**
       * Adds value to this point
       * @param {Number} scalar
       * @return {fabric.Point} thisArg
       * @chainable
       */
      scalarAddEquals: function(h) {
        return this.x += h, this.y += h, this;
      },
      /**
       * Subtracts another point from this point and returns a new one
       * @param {fabric.Point} that
       * @return {fabric.Point} new Point object with subtracted values
       */
      subtract: function(h) {
        return new a(this.x - h.x, this.y - h.y);
      },
      /**
       * Subtracts another point from this point
       * @param {fabric.Point} that
       * @return {fabric.Point} thisArg
       * @chainable
       */
      subtractEquals: function(h) {
        return this.x -= h.x, this.y -= h.y, this;
      },
      /**
       * Subtracts value from this point and returns a new one
       * @param {Number} scalar
       * @return {fabric.Point}
       */
      scalarSubtract: function(h) {
        return new a(this.x - h, this.y - h);
      },
      /**
       * Subtracts value from this point
       * @param {Number} scalar
       * @return {fabric.Point} thisArg
       * @chainable
       */
      scalarSubtractEquals: function(h) {
        return this.x -= h, this.y -= h, this;
      },
      /**
       * Multiplies this point by a value and returns a new one
       * TODO: rename in scalarMultiply in 2.0
       * @param {Number} scalar
       * @return {fabric.Point}
       */
      multiply: function(h) {
        return new a(this.x * h, this.y * h);
      },
      /**
       * Multiplies this point by a value
       * TODO: rename in scalarMultiplyEquals in 2.0
       * @param {Number} scalar
       * @return {fabric.Point} thisArg
       * @chainable
       */
      multiplyEquals: function(h) {
        return this.x *= h, this.y *= h, this;
      },
      /**
       * Divides this point by a value and returns a new one
       * TODO: rename in scalarDivide in 2.0
       * @param {Number} scalar
       * @return {fabric.Point}
       */
      divide: function(h) {
        return new a(this.x / h, this.y / h);
      },
      /**
       * Divides this point by a value
       * TODO: rename in scalarDivideEquals in 2.0
       * @param {Number} scalar
       * @return {fabric.Point} thisArg
       * @chainable
       */
      divideEquals: function(h) {
        return this.x /= h, this.y /= h, this;
      },
      /**
       * Returns true if this point is equal to another one
       * @param {fabric.Point} that
       * @return {Boolean}
       */
      eq: function(h) {
        return this.x === h.x && this.y === h.y;
      },
      /**
       * Returns true if this point is less than another one
       * @param {fabric.Point} that
       * @return {Boolean}
       */
      lt: function(h) {
        return this.x < h.x && this.y < h.y;
      },
      /**
       * Returns true if this point is less than or equal to another one
       * @param {fabric.Point} that
       * @return {Boolean}
       */
      lte: function(h) {
        return this.x <= h.x && this.y <= h.y;
      },
      /**
      
      	     * Returns true if this point is greater another one
      	     * @param {fabric.Point} that
      	     * @return {Boolean}
      	     */
      gt: function(h) {
        return this.x > h.x && this.y > h.y;
      },
      /**
       * Returns true if this point is greater than or equal to another one
       * @param {fabric.Point} that
       * @return {Boolean}
       */
      gte: function(h) {
        return this.x >= h.x && this.y >= h.y;
      },
      /**
       * Returns new point which is the result of linear interpolation with this one and another one
       * @param {fabric.Point} that
       * @param {Number} t , position of interpolation, between 0 and 1 default 0.5
       * @return {fabric.Point}
       */
      lerp: function(h, o) {
        return typeof o > "u" && (o = 0.5), o = Math.max(Math.min(1, o), 0), new a(this.x + (h.x - this.x) * o, this.y + (h.y - this.y) * o);
      },
      /**
       * Returns distance from this point and another one
       * @param {fabric.Point} that
       * @return {Number}
       */
      distanceFrom: function(h) {
        var o = this.x - h.x, u = this.y - h.y;
        return Math.sqrt(o * o + u * u);
      },
      /**
       * Returns the point between this point and another one
       * @param {fabric.Point} that
       * @return {fabric.Point}
       */
      midPointFrom: function(h) {
        return this.lerp(h);
      },
      /**
       * Returns a new point which is the min of this and another one
       * @param {fabric.Point} that
       * @return {fabric.Point}
       */
      min: function(h) {
        return new a(Math.min(this.x, h.x), Math.min(this.y, h.y));
      },
      /**
       * Returns a new point which is the max of this and another one
       * @param {fabric.Point} that
       * @return {fabric.Point}
       */
      max: function(h) {
        return new a(Math.max(this.x, h.x), Math.max(this.y, h.y));
      },
      /**
       * Returns string representation of this point
       * @return {String}
       */
      toString: function() {
        return this.x + "," + this.y;
      },
      /**
       * Sets x/y of this point
       * @param {Number} x
       * @param {Number} y
       * @chainable
       */
      setXY: function(h, o) {
        return this.x = h, this.y = o, this;
      },
      /**
       * Sets x of this point
       * @param {Number} x
       * @chainable
       */
      setX: function(h) {
        return this.x = h, this;
      },
      /**
       * Sets y of this point
       * @param {Number} y
       * @chainable
       */
      setY: function(h) {
        return this.y = h, this;
      },
      /**
       * Sets x/y of this point from another point
       * @param {fabric.Point} that
       * @chainable
       */
      setFromPoint: function(h) {
        return this.x = h.x, this.y = h.y, this;
      },
      /**
       * Swaps x/y of this point and another point
       * @param {fabric.Point} that
       */
      swap: function(h) {
        var o = this.x, u = this.y;
        this.x = h.x, this.y = h.y, h.x = o, h.y = u;
      },
      /**
       * return a cloned instance of the point
       * @return {fabric.Point}
       */
      clone: function() {
        return new a(this.x, this.y);
      }
    };
  }(t), function(l) {
    var s = l.fabric || (l.fabric = {});
    if (s.Intersection) {
      s.warn("fabric.Intersection is already defined");
      return;
    }
    function a(h) {
      this.status = h, this.points = [];
    }
    s.Intersection = a, s.Intersection.prototype = /** @lends fabric.Intersection.prototype */
    {
      constructor: a,
      /**
       * Appends a point to intersection
       * @param {fabric.Point} point
       * @return {fabric.Intersection} thisArg
       * @chainable
       */
      appendPoint: function(h) {
        return this.points.push(h), this;
      },
      /**
       * Appends points to intersection
       * @param {Array} points
       * @return {fabric.Intersection} thisArg
       * @chainable
       */
      appendPoints: function(h) {
        return this.points = this.points.concat(h), this;
      }
    }, s.Intersection.intersectLineLine = function(h, o, u, c) {
      var d, m = (c.x - u.x) * (h.y - u.y) - (c.y - u.y) * (h.x - u.x), p = (o.x - h.x) * (h.y - u.y) - (o.y - h.y) * (h.x - u.x), v = (c.y - u.y) * (o.x - h.x) - (c.x - u.x) * (o.y - h.y);
      if (v !== 0) {
        var b = m / v, y = p / v;
        0 <= b && b <= 1 && 0 <= y && y <= 1 ? (d = new a("Intersection"), d.appendPoint(new s.Point(h.x + b * (o.x - h.x), h.y + b * (o.y - h.y)))) : d = new a();
      } else
        m === 0 || p === 0 ? d = new a("Coincident") : d = new a("Parallel");
      return d;
    }, s.Intersection.intersectLinePolygon = function(h, o, u) {
      var c = new a(), d = u.length, m, p, v, b;
      for (b = 0; b < d; b++)
        m = u[b], p = u[(b + 1) % d], v = a.intersectLineLine(h, o, m, p), c.appendPoints(v.points);
      return c.points.length > 0 && (c.status = "Intersection"), c;
    }, s.Intersection.intersectPolygonPolygon = function(h, o) {
      var u = new a(), c = h.length, d;
      for (d = 0; d < c; d++) {
        var m = h[d], p = h[(d + 1) % c], v = a.intersectLinePolygon(m, p, o);
        u.appendPoints(v.points);
      }
      return u.points.length > 0 && (u.status = "Intersection"), u;
    }, s.Intersection.intersectPolygonRectangle = function(h, o, u) {
      var c = o.min(u), d = o.max(u), m = new s.Point(d.x, c.y), p = new s.Point(c.x, d.y), v = a.intersectLinePolygon(c, m, h), b = a.intersectLinePolygon(m, d, h), y = a.intersectLinePolygon(d, p, h), w = a.intersectLinePolygon(p, c, h), C = new a();
      return C.appendPoints(v.points), C.appendPoints(b.points), C.appendPoints(y.points), C.appendPoints(w.points), C.points.length > 0 && (C.status = "Intersection"), C;
    };
  }(t), function(l) {
    var s = l.fabric || (l.fabric = {});
    if (s.Color) {
      s.warn("fabric.Color is already defined.");
      return;
    }
    function a(o) {
      o ? this._tryParsingColor(o) : this.setSource([0, 0, 0, 1]);
    }
    s.Color = a, s.Color.prototype = /** @lends fabric.Color.prototype */
    {
      /**
       * @private
       * @param {String|Array} color Color value to parse
       */
      _tryParsingColor: function(o) {
        var u;
        o in a.colorNameMap && (o = a.colorNameMap[o]), o === "transparent" && (u = [255, 255, 255, 0]), u || (u = a.sourceFromHex(o)), u || (u = a.sourceFromRgb(o)), u || (u = a.sourceFromHsl(o)), u || (u = [0, 0, 0, 1]), u && this.setSource(u);
      },
      /**
       * Adapted from <a href="https://rawgithub.com/mjijackson/mjijackson.github.com/master/2008/02/rgb-to-hsl-and-rgb-to-hsv-color-model-conversion-algorithms-in-javascript.html">https://github.com/mjijackson</a>
       * @private
       * @param {Number} r Red color value
       * @param {Number} g Green color value
       * @param {Number} b Blue color value
       * @return {Array} Hsl color
       */
      _rgbToHsl: function(o, u, c) {
        o /= 255, u /= 255, c /= 255;
        var d, m, p, v = s.util.array.max([o, u, c]), b = s.util.array.min([o, u, c]);
        if (p = (v + b) / 2, v === b)
          d = m = 0;
        else {
          var y = v - b;
          switch (m = p > 0.5 ? y / (2 - v - b) : y / (v + b), v) {
            case o:
              d = (u - c) / y + (u < c ? 6 : 0);
              break;
            case u:
              d = (c - o) / y + 2;
              break;
            case c:
              d = (o - u) / y + 4;
              break;
          }
          d /= 6;
        }
        return [
          Math.round(d * 360),
          Math.round(m * 100),
          Math.round(p * 100)
        ];
      },
      /**
       * Returns source of this color (where source is an array representation; ex: [200, 200, 100, 1])
       * @return {Array}
       */
      getSource: function() {
        return this._source;
      },
      /**
       * Sets source of this color (where source is an array representation; ex: [200, 200, 100, 1])
       * @param {Array} source
       */
      setSource: function(o) {
        this._source = o;
      },
      /**
       * Returns color representation in RGB format
       * @return {String} ex: rgb(0-255,0-255,0-255)
       */
      toRgb: function() {
        var o = this.getSource();
        return "rgb(" + o[0] + "," + o[1] + "," + o[2] + ")";
      },
      /**
       * Returns color representation in RGBA format
       * @return {String} ex: rgba(0-255,0-255,0-255,0-1)
       */
      toRgba: function() {
        var o = this.getSource();
        return "rgba(" + o[0] + "," + o[1] + "," + o[2] + "," + o[3] + ")";
      },
      /**
       * Returns color representation in HSL format
       * @return {String} ex: hsl(0-360,0%-100%,0%-100%)
       */
      toHsl: function() {
        var o = this.getSource(), u = this._rgbToHsl(o[0], o[1], o[2]);
        return "hsl(" + u[0] + "," + u[1] + "%," + u[2] + "%)";
      },
      /**
       * Returns color representation in HSLA format
       * @return {String} ex: hsla(0-360,0%-100%,0%-100%,0-1)
       */
      toHsla: function() {
        var o = this.getSource(), u = this._rgbToHsl(o[0], o[1], o[2]);
        return "hsla(" + u[0] + "," + u[1] + "%," + u[2] + "%," + o[3] + ")";
      },
      /**
       * Returns color representation in HEX format
       * @return {String} ex: FF5555
       */
      toHex: function() {
        var o = this.getSource(), u, c, d;
        return u = o[0].toString(16), u = u.length === 1 ? "0" + u : u, c = o[1].toString(16), c = c.length === 1 ? "0" + c : c, d = o[2].toString(16), d = d.length === 1 ? "0" + d : d, u.toUpperCase() + c.toUpperCase() + d.toUpperCase();
      },
      /**
       * Returns color representation in HEXA format
       * @return {String} ex: FF5555CC
       */
      toHexa: function() {
        var o = this.getSource(), u;
        return u = Math.round(o[3] * 255), u = u.toString(16), u = u.length === 1 ? "0" + u : u, this.toHex() + u.toUpperCase();
      },
      /**
       * Gets value of alpha channel for this color
       * @return {Number} 0-1
       */
      getAlpha: function() {
        return this.getSource()[3];
      },
      /**
       * Sets value of alpha channel for this color
       * @param {Number} alpha Alpha value 0-1
       * @return {fabric.Color} thisArg
       */
      setAlpha: function(o) {
        var u = this.getSource();
        return u[3] = o, this.setSource(u), this;
      },
      /**
       * Transforms color to its grayscale representation
       * @return {fabric.Color} thisArg
       */
      toGrayscale: function() {
        var o = this.getSource(), u = parseInt((o[0] * 0.3 + o[1] * 0.59 + o[2] * 0.11).toFixed(0), 10), c = o[3];
        return this.setSource([u, u, u, c]), this;
      },
      /**
       * Transforms color to its black and white representation
       * @param {Number} threshold
       * @return {fabric.Color} thisArg
       */
      toBlackWhite: function(o) {
        var u = this.getSource(), c = (u[0] * 0.3 + u[1] * 0.59 + u[2] * 0.11).toFixed(0), d = u[3];
        return o = o || 127, c = Number(c) < Number(o) ? 0 : 255, this.setSource([c, c, c, d]), this;
      },
      /**
       * Overlays color with another color
       * @param {String|fabric.Color} otherColor
       * @return {fabric.Color} thisArg
       */
      overlayWith: function(o) {
        o instanceof a || (o = new a(o));
        var u = [], c = this.getAlpha(), d = 0.5, m = this.getSource(), p = o.getSource(), v;
        for (v = 0; v < 3; v++)
          u.push(Math.round(m[v] * (1 - d) + p[v] * d));
        return u[3] = c, this.setSource(u), this;
      }
    }, s.Color.reRGBa = /^rgba?\(\s*(\d{1,3}(?:\.\d+)?\%?)\s*,\s*(\d{1,3}(?:\.\d+)?\%?)\s*,\s*(\d{1,3}(?:\.\d+)?\%?)\s*(?:\s*,\s*((?:\d*\.?\d+)?)\s*)?\)$/i, s.Color.reHSLa = /^hsla?\(\s*(\d{1,3})\s*,\s*(\d{1,3}\%)\s*,\s*(\d{1,3}\%)\s*(?:\s*,\s*(\d+(?:\.\d+)?)\s*)?\)$/i, s.Color.reHex = /^#?([0-9a-f]{8}|[0-9a-f]{6}|[0-9a-f]{4}|[0-9a-f]{3})$/i, s.Color.colorNameMap = {
      aliceblue: "#F0F8FF",
      antiquewhite: "#FAEBD7",
      aqua: "#00FFFF",
      aquamarine: "#7FFFD4",
      azure: "#F0FFFF",
      beige: "#F5F5DC",
      bisque: "#FFE4C4",
      black: "#000000",
      blanchedalmond: "#FFEBCD",
      blue: "#0000FF",
      blueviolet: "#8A2BE2",
      brown: "#A52A2A",
      burlywood: "#DEB887",
      cadetblue: "#5F9EA0",
      chartreuse: "#7FFF00",
      chocolate: "#D2691E",
      coral: "#FF7F50",
      cornflowerblue: "#6495ED",
      cornsilk: "#FFF8DC",
      crimson: "#DC143C",
      cyan: "#00FFFF",
      darkblue: "#00008B",
      darkcyan: "#008B8B",
      darkgoldenrod: "#B8860B",
      darkgray: "#A9A9A9",
      darkgrey: "#A9A9A9",
      darkgreen: "#006400",
      darkkhaki: "#BDB76B",
      darkmagenta: "#8B008B",
      darkolivegreen: "#556B2F",
      darkorange: "#FF8C00",
      darkorchid: "#9932CC",
      darkred: "#8B0000",
      darksalmon: "#E9967A",
      darkseagreen: "#8FBC8F",
      darkslateblue: "#483D8B",
      darkslategray: "#2F4F4F",
      darkslategrey: "#2F4F4F",
      darkturquoise: "#00CED1",
      darkviolet: "#9400D3",
      deeppink: "#FF1493",
      deepskyblue: "#00BFFF",
      dimgray: "#696969",
      dimgrey: "#696969",
      dodgerblue: "#1E90FF",
      firebrick: "#B22222",
      floralwhite: "#FFFAF0",
      forestgreen: "#228B22",
      fuchsia: "#FF00FF",
      gainsboro: "#DCDCDC",
      ghostwhite: "#F8F8FF",
      gold: "#FFD700",
      goldenrod: "#DAA520",
      gray: "#808080",
      grey: "#808080",
      green: "#008000",
      greenyellow: "#ADFF2F",
      honeydew: "#F0FFF0",
      hotpink: "#FF69B4",
      indianred: "#CD5C5C",
      indigo: "#4B0082",
      ivory: "#FFFFF0",
      khaki: "#F0E68C",
      lavender: "#E6E6FA",
      lavenderblush: "#FFF0F5",
      lawngreen: "#7CFC00",
      lemonchiffon: "#FFFACD",
      lightblue: "#ADD8E6",
      lightcoral: "#F08080",
      lightcyan: "#E0FFFF",
      lightgoldenrodyellow: "#FAFAD2",
      lightgray: "#D3D3D3",
      lightgrey: "#D3D3D3",
      lightgreen: "#90EE90",
      lightpink: "#FFB6C1",
      lightsalmon: "#FFA07A",
      lightseagreen: "#20B2AA",
      lightskyblue: "#87CEFA",
      lightslategray: "#778899",
      lightslategrey: "#778899",
      lightsteelblue: "#B0C4DE",
      lightyellow: "#FFFFE0",
      lime: "#00FF00",
      limegreen: "#32CD32",
      linen: "#FAF0E6",
      magenta: "#FF00FF",
      maroon: "#800000",
      mediumaquamarine: "#66CDAA",
      mediumblue: "#0000CD",
      mediumorchid: "#BA55D3",
      mediumpurple: "#9370DB",
      mediumseagreen: "#3CB371",
      mediumslateblue: "#7B68EE",
      mediumspringgreen: "#00FA9A",
      mediumturquoise: "#48D1CC",
      mediumvioletred: "#C71585",
      midnightblue: "#191970",
      mintcream: "#F5FFFA",
      mistyrose: "#FFE4E1",
      moccasin: "#FFE4B5",
      navajowhite: "#FFDEAD",
      navy: "#000080",
      oldlace: "#FDF5E6",
      olive: "#808000",
      olivedrab: "#6B8E23",
      orange: "#FFA500",
      orangered: "#FF4500",
      orchid: "#DA70D6",
      palegoldenrod: "#EEE8AA",
      palegreen: "#98FB98",
      paleturquoise: "#AFEEEE",
      palevioletred: "#DB7093",
      papayawhip: "#FFEFD5",
      peachpuff: "#FFDAB9",
      peru: "#CD853F",
      pink: "#FFC0CB",
      plum: "#DDA0DD",
      powderblue: "#B0E0E6",
      purple: "#800080",
      rebeccapurple: "#663399",
      red: "#FF0000",
      rosybrown: "#BC8F8F",
      royalblue: "#4169E1",
      saddlebrown: "#8B4513",
      salmon: "#FA8072",
      sandybrown: "#F4A460",
      seagreen: "#2E8B57",
      seashell: "#FFF5EE",
      sienna: "#A0522D",
      silver: "#C0C0C0",
      skyblue: "#87CEEB",
      slateblue: "#6A5ACD",
      slategray: "#708090",
      slategrey: "#708090",
      snow: "#FFFAFA",
      springgreen: "#00FF7F",
      steelblue: "#4682B4",
      tan: "#D2B48C",
      teal: "#008080",
      thistle: "#D8BFD8",
      tomato: "#FF6347",
      turquoise: "#40E0D0",
      violet: "#EE82EE",
      wheat: "#F5DEB3",
      white: "#FFFFFF",
      whitesmoke: "#F5F5F5",
      yellow: "#FFFF00",
      yellowgreen: "#9ACD32"
    };
    function h(o, u, c) {
      return c < 0 && (c += 1), c > 1 && (c -= 1), c < 1 / 6 ? o + (u - o) * 6 * c : c < 1 / 2 ? u : c < 2 / 3 ? o + (u - o) * (2 / 3 - c) * 6 : o;
    }
    s.Color.fromRgb = function(o) {
      return a.fromSource(a.sourceFromRgb(o));
    }, s.Color.sourceFromRgb = function(o) {
      var u = o.match(a.reRGBa);
      if (u) {
        var c = parseInt(u[1], 10) / (/%$/.test(u[1]) ? 100 : 1) * (/%$/.test(u[1]) ? 255 : 1), d = parseInt(u[2], 10) / (/%$/.test(u[2]) ? 100 : 1) * (/%$/.test(u[2]) ? 255 : 1), m = parseInt(u[3], 10) / (/%$/.test(u[3]) ? 100 : 1) * (/%$/.test(u[3]) ? 255 : 1);
        return [
          parseInt(c, 10),
          parseInt(d, 10),
          parseInt(m, 10),
          u[4] ? parseFloat(u[4]) : 1
        ];
      }
    }, s.Color.fromRgba = a.fromRgb, s.Color.fromHsl = function(o) {
      return a.fromSource(a.sourceFromHsl(o));
    }, s.Color.sourceFromHsl = function(o) {
      var u = o.match(a.reHSLa);
      if (u) {
        var c = (parseFloat(u[1]) % 360 + 360) % 360 / 360, d = parseFloat(u[2]) / (/%$/.test(u[2]) ? 100 : 1), m = parseFloat(u[3]) / (/%$/.test(u[3]) ? 100 : 1), p, v, b;
        if (d === 0)
          p = v = b = m;
        else {
          var y = m <= 0.5 ? m * (d + 1) : m + d - m * d, w = m * 2 - y;
          p = h(w, y, c + 1 / 3), v = h(w, y, c), b = h(w, y, c - 1 / 3);
        }
        return [
          Math.round(p * 255),
          Math.round(v * 255),
          Math.round(b * 255),
          u[4] ? parseFloat(u[4]) : 1
        ];
      }
    }, s.Color.fromHsla = a.fromHsl, s.Color.fromHex = function(o) {
      return a.fromSource(a.sourceFromHex(o));
    }, s.Color.sourceFromHex = function(o) {
      if (o.match(a.reHex)) {
        var u = o.slice(o.indexOf("#") + 1), c = u.length === 3 || u.length === 4, d = u.length === 8 || u.length === 4, m = c ? u.charAt(0) + u.charAt(0) : u.substring(0, 2), p = c ? u.charAt(1) + u.charAt(1) : u.substring(2, 4), v = c ? u.charAt(2) + u.charAt(2) : u.substring(4, 6), b = d ? c ? u.charAt(3) + u.charAt(3) : u.substring(6, 8) : "FF";
        return [
          parseInt(m, 16),
          parseInt(p, 16),
          parseInt(v, 16),
          parseFloat((parseInt(b, 16) / 255).toFixed(2))
        ];
      }
    }, s.Color.fromSource = function(o) {
      var u = new a();
      return u.setSource(o), u;
    };
  }(t), function(l) {
    var s = l.fabric || (l.fabric = {}), a = ["e", "se", "s", "sw", "w", "nw", "n", "ne", "e"], h = ["ns", "nesw", "ew", "nwse"], o = {}, u = "left", c = "top", d = "right", m = "bottom", p = "center", v = {
      top: m,
      bottom: c,
      left: d,
      right: u,
      center: p
    }, b = s.util.radiansToDegrees, y = Math.sign || function(U) {
      return (U > 0) - (U < 0) || +U;
    };
    function w(U, B) {
      var X = U.angle + b(Math.atan2(B.y, B.x)) + 360;
      return Math.round(X % 360 / 45);
    }
    function C(U, B) {
      var X = B.transform.target, Q = X.canvas, z = s.util.object.clone(B);
      z.target = X, Q && Q.fire("object:" + U, z), X.fire(U, B);
    }
    function _(U, B) {
      var X = B.canvas, Q = X.uniScaleKey, z = U[Q];
      return X.uniformScaling && !z || !X.uniformScaling && z;
    }
    function S(U) {
      return U.originX === p && U.originY === p;
    }
    function k(U, B, X) {
      var Q = U.lockScalingX, z = U.lockScalingY;
      return !!(Q && z || !B && (Q || z) && X || Q && B === "x" || z && B === "y");
    }
    function I(U, B, X) {
      var Q = "not-allowed", z = _(U, X), Y = "";
      if (B.x !== 0 && B.y === 0 ? Y = "x" : B.x === 0 && B.y !== 0 && (Y = "y"), k(X, Y, z))
        return Q;
      var se = w(X, B);
      return a[se] + "-resize";
    }
    function L(U, B, X) {
      var Q = "not-allowed";
      if (B.x !== 0 && X.lockSkewingY || B.y !== 0 && X.lockSkewingX)
        return Q;
      var z = w(X, B) % 4;
      return h[z] + "-resize";
    }
    function j(U, B, X) {
      return U[X.canvas.altActionKey] ? o.skewCursorStyleHandler(U, B, X) : o.scaleCursorStyleHandler(U, B, X);
    }
    function G(U, B, X) {
      var Q = U[X.canvas.altActionKey];
      if (B.x === 0)
        return Q ? "skewX" : "scaleY";
      if (B.y === 0)
        return Q ? "skewY" : "scaleX";
    }
    function te(U, B, X) {
      return X.lockRotation ? "not-allowed" : B.cursorStyle;
    }
    function W(U, B, X, Q) {
      return {
        e: U,
        transform: B,
        pointer: {
          x: X,
          y: Q
        }
      };
    }
    function q(U) {
      return function(B, X, Q, z) {
        var Y = X.target, se = Y.getCenterPoint(), ve = Y.translateToOriginPoint(se, X.originX, X.originY), pe = U(B, X, Q, z);
        return Y.setPositionByOrigin(ve, X.originX, X.originY), pe;
      };
    }
    function K(U, B) {
      return function(X, Q, z, Y) {
        var se = B(X, Q, z, Y);
        return se && C(U, W(X, Q, z, Y)), se;
      };
    }
    function ne(U, B, X, Q, z) {
      var Y = U.target, se = Y.controls[U.corner], ve = Y.canvas.getZoom(), pe = Y.padding / ve, Z = Y.toLocalPoint(new s.Point(Q, z), B, X);
      return Z.x >= pe && (Z.x -= pe), Z.x <= -pe && (Z.x += pe), Z.y >= pe && (Z.y -= pe), Z.y <= pe && (Z.y += pe), Z.x -= se.offsetX, Z.y -= se.offsetY, Z;
    }
    function re(U) {
      return U.flipX !== U.flipY;
    }
    function T(U, B, X, Q, z) {
      if (U[B] !== 0) {
        var Y = U._getTransformedDimensions()[Q], se = z / Y * U[X];
        U.set(X, se);
      }
    }
    function P(U, B, X, Q) {
      var z = B.target, Y = z._getTransformedDimensions(0, z.skewY), se = ne(B, B.originX, B.originY, X, Q), ve = Math.abs(se.x * 2) - Y.x, pe = z.skewX, Z;
      ve < 2 ? Z = 0 : (Z = b(
        Math.atan2(ve / z.scaleX, Y.y / z.scaleY)
      ), B.originX === u && B.originY === m && (Z = -Z), B.originX === d && B.originY === c && (Z = -Z), re(z) && (Z = -Z));
      var fe = pe !== Z;
      if (fe) {
        var xe = z._getTransformedDimensions().y;
        z.set("skewX", Z), T(z, "skewY", "scaleY", "y", xe);
      }
      return fe;
    }
    function A(U, B, X, Q) {
      var z = B.target, Y = z._getTransformedDimensions(z.skewX, 0), se = ne(B, B.originX, B.originY, X, Q), ve = Math.abs(se.y * 2) - Y.y, pe = z.skewY, Z;
      ve < 2 ? Z = 0 : (Z = b(
        Math.atan2(ve / z.scaleY, Y.x / z.scaleX)
      ), B.originX === u && B.originY === m && (Z = -Z), B.originX === d && B.originY === c && (Z = -Z), re(z) && (Z = -Z));
      var fe = pe !== Z;
      if (fe) {
        var xe = z._getTransformedDimensions().x;
        z.set("skewY", Z), T(z, "skewX", "scaleX", "x", xe);
      }
      return fe;
    }
    function M(U, B, X, Q) {
      var z = B.target, Y = z.skewX, se, ve = B.originY;
      if (z.lockSkewingX)
        return !1;
      if (Y === 0) {
        var pe = ne(B, p, p, X, Q);
        pe.x > 0 ? se = u : se = d;
      } else
        Y > 0 && (se = ve === c ? u : d), Y < 0 && (se = ve === c ? d : u), re(z) && (se = se === u ? d : u);
      B.originX = se;
      var Z = K("skewing", q(P));
      return Z(U, B, X, Q);
    }
    function $(U, B, X, Q) {
      var z = B.target, Y = z.skewY, se, ve = B.originX;
      if (z.lockSkewingY)
        return !1;
      if (Y === 0) {
        var pe = ne(B, p, p, X, Q);
        pe.y > 0 ? se = c : se = m;
      } else
        Y > 0 && (se = ve === u ? c : m), Y < 0 && (se = ve === u ? m : c), re(z) && (se = se === c ? m : c);
      B.originY = se;
      var Z = K("skewing", q(A));
      return Z(U, B, X, Q);
    }
    function D(U, B, X, Q) {
      var z = B, Y = z.target, se = Y.translateToOriginPoint(Y.getCenterPoint(), z.originX, z.originY);
      if (Y.lockRotation)
        return !1;
      var ve = Math.atan2(z.ey - se.y, z.ex - se.x), pe = Math.atan2(Q - se.y, X - se.x), Z = b(pe - ve + z.theta), fe = !0;
      if (Y.snapAngle > 0) {
        var xe = Y.snapAngle, Ee = Y.snapThreshold || xe, Re = Math.ceil(Z / xe) * xe, Pe = Math.floor(Z / xe) * xe;
        Math.abs(Z - Pe) < Ee ? Z = Pe : Math.abs(Z - Re) < Ee && (Z = Re);
      }
      return Z < 0 && (Z = 360 + Z), Z %= 360, fe = Y.angle !== Z, Y.angle = Z, fe;
    }
    function E(U, B, X, Q, z) {
      z = z || {};
      var Y = B.target, se = Y.lockScalingX, ve = Y.lockScalingY, pe = z.by, Z, fe, xe, Ee, Re = _(U, Y), Pe = k(Y, pe, Re), at, We, kn = B.gestureScale;
      if (Pe)
        return !1;
      if (kn)
        fe = B.scaleX * kn, xe = B.scaleY * kn;
      else {
        if (Z = ne(B, B.originX, B.originY, X, Q), at = pe !== "y" ? y(Z.x) : 1, We = pe !== "x" ? y(Z.y) : 1, B.signX || (B.signX = at), B.signY || (B.signY = We), Y.lockScalingFlip && (B.signX !== at || B.signY !== We))
          return !1;
        if (Ee = Y._getTransformedDimensions(), Re && !pe) {
          var $r = Math.abs(Z.x) + Math.abs(Z.y), Mt = B.original, Mv = Math.abs(Ee.x * Mt.scaleX / Y.scaleX) + Math.abs(Ee.y * Mt.scaleY / Y.scaleY), Fc = $r / Mv;
          fe = Mt.scaleX * Fc, xe = Mt.scaleY * Fc;
        } else
          fe = Math.abs(Z.x * Y.scaleX / Ee.x), xe = Math.abs(Z.y * Y.scaleY / Ee.y);
        S(B) && (fe *= 2, xe *= 2), B.signX !== at && pe !== "y" && (B.originX = v[B.originX], fe *= -1, B.signX = at), B.signY !== We && pe !== "x" && (B.originY = v[B.originY], xe *= -1, B.signY = We);
      }
      var Fv = Y.scaleX, Iv = Y.scaleY;
      return pe ? (pe === "x" && Y.set("scaleX", fe), pe === "y" && Y.set("scaleY", xe)) : (!se && Y.set("scaleX", fe), !ve && Y.set("scaleY", xe)), Fv !== Y.scaleX || Iv !== Y.scaleY;
    }
    function F(U, B, X, Q) {
      return E(U, B, X, Q);
    }
    function N(U, B, X, Q) {
      return E(U, B, X, Q, { by: "x" });
    }
    function H(U, B, X, Q) {
      return E(U, B, X, Q, { by: "y" });
    }
    function V(U, B, X, Q) {
      return U[B.target.canvas.altActionKey] ? o.skewHandlerX(U, B, X, Q) : o.scalingY(U, B, X, Q);
    }
    function J(U, B, X, Q) {
      return U[B.target.canvas.altActionKey] ? o.skewHandlerY(U, B, X, Q) : o.scalingX(U, B, X, Q);
    }
    function ee(U, B, X, Q) {
      var z = B.target, Y = ne(B, B.originX, B.originY, X, Q), se = z.strokeWidth / (z.strokeUniform ? z.scaleX : 1), ve = S(B) ? 2 : 1, pe = z.width, Z = Math.abs(Y.x * ve / z.scaleX) - se;
      return z.set("width", Math.max(Z, 0)), pe !== Z;
    }
    function le(U, B, X, Q) {
      var z = B.target, Y = X - B.offsetX, se = Q - B.offsetY, ve = !z.get("lockMovementX") && z.left !== Y, pe = !z.get("lockMovementY") && z.top !== se;
      return ve && z.set("left", Y), pe && z.set("top", se), (ve || pe) && C("moving", W(U, B, X, Q)), ve || pe;
    }
    o.scaleCursorStyleHandler = I, o.skewCursorStyleHandler = L, o.scaleSkewCursorStyleHandler = j, o.rotationWithSnapping = K("rotating", q(D)), o.scalingEqually = K("scaling", q(F)), o.scalingX = K("scaling", q(N)), o.scalingY = K("scaling", q(H)), o.scalingYOrSkewingX = V, o.scalingXOrSkewingY = J, o.changeWidth = K("resizing", q(ee)), o.skewHandlerX = M, o.skewHandlerY = $, o.dragHandler = le, o.scaleOrSkewActionName = G, o.rotationStyleHandler = te, o.fireEvent = C, o.wrapWithFixedAnchor = q, o.wrapWithFireEvent = K, o.getLocalPoint = ne, s.controlsUtils = o;
  }(t), function(l) {
    var s = l.fabric || (l.fabric = {}), a = s.util.degreesToRadians, h = s.controlsUtils;
    function o(c, d, m, p, v) {
      p = p || {};
      var b = this.sizeX || p.cornerSize || v.cornerSize, y = this.sizeY || p.cornerSize || v.cornerSize, w = typeof p.transparentCorners < "u" ? p.transparentCorners : v.transparentCorners, C = w ? "stroke" : "fill", _ = !w && (p.cornerStrokeColor || v.cornerStrokeColor), S = d, k = m, I;
      c.save(), c.fillStyle = p.cornerColor || v.cornerColor, c.strokeStyle = p.cornerStrokeColor || v.cornerStrokeColor, b > y ? (I = b, c.scale(1, y / b), k = m * b / y) : y > b ? (I = y, c.scale(b / y, 1), S = d * y / b) : I = b, c.lineWidth = 1, c.beginPath(), c.arc(S, k, I / 2, 0, 2 * Math.PI, !1), c[C](), _ && c.stroke(), c.restore();
    }
    function u(c, d, m, p, v) {
      p = p || {};
      var b = this.sizeX || p.cornerSize || v.cornerSize, y = this.sizeY || p.cornerSize || v.cornerSize, w = typeof p.transparentCorners < "u" ? p.transparentCorners : v.transparentCorners, C = w ? "stroke" : "fill", _ = !w && (p.cornerStrokeColor || v.cornerStrokeColor), S = b / 2, k = y / 2;
      c.save(), c.fillStyle = p.cornerColor || v.cornerColor, c.strokeStyle = p.cornerStrokeColor || v.cornerStrokeColor, c.lineWidth = 1, c.translate(d, m), c.rotate(a(v.angle)), c[C + "Rect"](-S, -k, b, y), _ && c.strokeRect(-S, -k, b, y), c.restore();
    }
    h.renderCircleControl = o, h.renderSquareControl = u;
  }(t), function(l) {
    var s = l.fabric || (l.fabric = {});
    function a(h) {
      for (var o in h)
        this[o] = h[o];
    }
    s.Control = a, s.Control.prototype = /** @lends fabric.Control.prototype */
    {
      /**
       * keep track of control visibility.
       * mainly for backward compatibility.
       * if you do not want to see a control, you can remove it
       * from the controlset.
       * @type {Boolean}
       * @default true
       */
      visible: !0,
      /**
       * Name of the action that the control will likely execute.
       * This is optional. FabricJS uses to identify what the user is doing for some
       * extra optimizations. If you are writing a custom control and you want to know
       * somewhere else in the code what is going on, you can use this string here.
       * you can also provide a custom getActionName if your control run multiple actions
       * depending on some external state.
       * default to scale since is the most common, used on 4 corners by default
       * @type {String}
       * @default 'scale'
       */
      actionName: "scale",
      /**
       * Drawing angle of the control.
       * NOT used for now, but name marked as needed for internal logic
       * example: to reuse the same drawing function for different rotated controls
       * @type {Number}
       * @default 0
       */
      angle: 0,
      /**
       * Relative position of the control. X
       * 0,0 is the center of the Object, while -0.5 (left) or 0.5 (right) are the extremities
       * of the bounding box.
       * @type {Number}
       * @default 0
       */
      x: 0,
      /**
       * Relative position of the control. Y
       * 0,0 is the center of the Object, while -0.5 (top) or 0.5 (bottom) are the extremities
       * of the bounding box.
       * @type {Number}
       * @default 0
       */
      y: 0,
      /**
       * Horizontal offset of the control from the defined position. In pixels
       * Positive offset moves the control to the right, negative to the left.
       * It used when you want to have position of control that does not scale with
       * the bounding box. Example: rotation control is placed at x:0, y: 0.5 on
       * the boundindbox, with an offset of 30 pixels vertically. Those 30 pixels will
       * stay 30 pixels no matter how the object is big. Another example is having 2
       * controls in the corner, that stay in the same position when the object scale.
       * of the bounding box.
       * @type {Number}
       * @default 0
       */
      offsetX: 0,
      /**
       * Vertical offset of the control from the defined position. In pixels
       * Positive offset moves the control to the bottom, negative to the top.
       * @type {Number}
       * @default 0
       */
      offsetY: 0,
      /**
       * Sets the length of the control. If null, defaults to object's cornerSize.
       * Expects both sizeX and sizeY to be set when set.
       * @type {?Number}
       * @default null
       */
      sizeX: null,
      /**
       * Sets the height of the control. If null, defaults to object's cornerSize.
       * Expects both sizeX and sizeY to be set when set.
       * @type {?Number}
       * @default null
       */
      sizeY: null,
      /**
       * Sets the length of the touch area of the control. If null, defaults to object's touchCornerSize.
       * Expects both touchSizeX and touchSizeY to be set when set.
       * @type {?Number}
       * @default null
       */
      touchSizeX: null,
      /**
       * Sets the height of the touch area of the control. If null, defaults to object's touchCornerSize.
       * Expects both touchSizeX and touchSizeY to be set when set.
       * @type {?Number}
       * @default null
       */
      touchSizeY: null,
      /**
       * Css cursor style to display when the control is hovered.
       * if the method `cursorStyleHandler` is provided, this property is ignored.
       * @type {String}
       * @default 'crosshair'
       */
      cursorStyle: "crosshair",
      /**
       * If controls has an offsetY or offsetX, draw a line that connects
       * the control to the bounding box
       * @type {Boolean}
       * @default false
       */
      withConnection: !1,
      /**
       * The control actionHandler, provide one to handle action ( control being moved )
       * @param {Event} eventData the native mouse event
       * @param {Object} transformData properties of the current transform
       * @param {Number} x x position of the cursor
       * @param {Number} y y position of the cursor
       * @return {Boolean} true if the action/event modified the object
       */
      actionHandler: function() {
      },
      /**
       * The control handler for mouse down, provide one to handle mouse down on control
       * @param {Event} eventData the native mouse event
       * @param {Object} transformData properties of the current transform
       * @param {Number} x x position of the cursor
       * @param {Number} y y position of the cursor
       * @return {Boolean} true if the action/event modified the object
       */
      mouseDownHandler: function() {
      },
      /**
       * The control mouseUpHandler, provide one to handle an effect on mouse up.
       * @param {Event} eventData the native mouse event
       * @param {Object} transformData properties of the current transform
       * @param {Number} x x position of the cursor
       * @param {Number} y y position of the cursor
       * @return {Boolean} true if the action/event modified the object
       */
      mouseUpHandler: function() {
      },
      /**
       * Returns control actionHandler
       * @param {Event} eventData the native mouse event
       * @param {fabric.Object} fabricObject on which the control is displayed
       * @param {fabric.Control} control control for which the action handler is being asked
       * @return {Function} the action handler
       */
      getActionHandler: function() {
        return this.actionHandler;
      },
      /**
       * Returns control mouseDown handler
       * @param {Event} eventData the native mouse event
       * @param {fabric.Object} fabricObject on which the control is displayed
       * @param {fabric.Control} control control for which the action handler is being asked
       * @return {Function} the action handler
       */
      getMouseDownHandler: function() {
        return this.mouseDownHandler;
      },
      /**
       * Returns control mouseUp handler
       * @param {Event} eventData the native mouse event
       * @param {fabric.Object} fabricObject on which the control is displayed
       * @param {fabric.Control} control control for which the action handler is being asked
       * @return {Function} the action handler
       */
      getMouseUpHandler: function() {
        return this.mouseUpHandler;
      },
      /**
       * Returns control cursorStyle for css using cursorStyle. If you need a more elaborate
       * function you can pass one in the constructor
       * the cursorStyle property
       * @param {Event} eventData the native mouse event
       * @param {fabric.Control} control the current control ( likely this)
       * @param {fabric.Object} object on which the control is displayed
       * @return {String}
       */
      cursorStyleHandler: function(h, o) {
        return o.cursorStyle;
      },
      /**
       * Returns the action name. The basic implementation just return the actionName property.
       * @param {Event} eventData the native mouse event
       * @param {fabric.Control} control the current control ( likely this)
       * @param {fabric.Object} object on which the control is displayed
       * @return {String}
       */
      getActionName: function(h, o) {
        return o.actionName;
      },
      /**
       * Returns controls visibility
       * @param {fabric.Object} object on which the control is displayed
       * @param {String} controlKey key where the control is memorized on the
       * @return {Boolean}
       */
      getVisibility: function(h, o) {
        var u = h._controlsVisibility;
        return u && typeof u[o] < "u" ? u[o] : this.visible;
      },
      /**
       * Sets controls visibility
       * @param {Boolean} visibility for the object
       * @return {Void}
       */
      setVisibility: function(h) {
        this.visible = h;
      },
      positionHandler: function(h, o) {
        var u = s.util.transformPoint({
          x: this.x * h.x + this.offsetX,
          y: this.y * h.y + this.offsetY
        }, o);
        return u;
      },
      /**
       * Returns the coords for this control based on object values.
       * @param {Number} objectAngle angle from the fabric object holding the control
       * @param {Number} objectCornerSize cornerSize from the fabric object holding the control (or touchCornerSize if
       *   isTouch is true)
       * @param {Number} centerX x coordinate where the control center should be
       * @param {Number} centerY y coordinate where the control center should be
       * @param {boolean} isTouch true if touch corner, false if normal corner
       */
      calcCornerCoords: function(h, o, u, c, d) {
        var m, p, v, b, y = d ? this.touchSizeX : this.sizeX, w = d ? this.touchSizeY : this.sizeY;
        if (y && w && y !== w) {
          var C = Math.atan2(w, y), _ = Math.sqrt(y * y + w * w) / 2, S = C - s.util.degreesToRadians(h), k = Math.PI / 2 - C - s.util.degreesToRadians(h);
          m = _ * s.util.cos(S), p = _ * s.util.sin(S), v = _ * s.util.cos(k), b = _ * s.util.sin(k);
        } else {
          var I = y && w ? y : o;
          _ = I * 0.7071067812;
          var S = s.util.degreesToRadians(45 - h);
          m = v = _ * s.util.cos(S), p = b = _ * s.util.sin(S);
        }
        return {
          tl: {
            x: u - b,
            y: c - v
          },
          tr: {
            x: u + m,
            y: c - p
          },
          bl: {
            x: u - m,
            y: c + p
          },
          br: {
            x: u + b,
            y: c + v
          }
        };
      },
      /**
      * Render function for the control.
      * When this function runs the context is unscaled. unrotate. Just retina scaled.
      * all the functions will have to translate to the point left,top before starting Drawing
      * if they want to draw a control where the position is detected.
      * left and top are the result of the positionHandler function
      * @param {RenderingContext2D} ctx the context where the control will be drawn
      * @param {Number} left position of the canvas where we are about to render the control.
      * @param {Number} top position of the canvas where we are about to render the control.
      * @param {Object} styleOverride
      * @param {fabric.Object} fabricObject the object where the control is about to be rendered
      */
      render: function(h, o, u, c, d) {
        switch (c = c || {}, c.cornerStyle || d.cornerStyle) {
          case "circle":
            s.controlsUtils.renderCircleControl.call(this, h, o, u, c, d);
            break;
          default:
            s.controlsUtils.renderSquareControl.call(this, h, o, u, c, d);
        }
      }
    };
  }(t), function() {
    function l(u, c) {
      var d = u.getAttribute("style"), m = u.getAttribute("offset") || 0, p, v, b, y;
      if (m = parseFloat(m) / (/%$/.test(m) ? 100 : 1), m = m < 0 ? 0 : m > 1 ? 1 : m, d) {
        var w = d.split(/\s*;\s*/);
        for (w[w.length - 1] === "" && w.pop(), y = w.length; y--; ) {
          var C = w[y].split(/\s*:\s*/), _ = C[0].trim(), S = C[1].trim();
          _ === "stop-color" ? p = S : _ === "stop-opacity" && (b = S);
        }
      }
      return p || (p = u.getAttribute("stop-color") || "rgb(0,0,0)"), b || (b = u.getAttribute("stop-opacity")), p = new e.Color(p), v = p.getAlpha(), b = isNaN(parseFloat(b)) ? 1 : parseFloat(b), b *= v * c, {
        offset: m,
        color: p.toRgb(),
        opacity: b
      };
    }
    function s(u) {
      return {
        x1: u.getAttribute("x1") || 0,
        y1: u.getAttribute("y1") || 0,
        x2: u.getAttribute("x2") || "100%",
        y2: u.getAttribute("y2") || 0
      };
    }
    function a(u) {
      return {
        x1: u.getAttribute("fx") || u.getAttribute("cx") || "50%",
        y1: u.getAttribute("fy") || u.getAttribute("cy") || "50%",
        r1: 0,
        x2: u.getAttribute("cx") || "50%",
        y2: u.getAttribute("cy") || "50%",
        r2: u.getAttribute("r") || "50%"
      };
    }
    var h = e.util.object.clone;
    e.Gradient = e.util.createClass(
      /** @lends fabric.Gradient.prototype */
      {
        /**
         * Horizontal offset for aligning gradients coming from SVG when outside pathgroups
         * @type Number
         * @default 0
         */
        offsetX: 0,
        /**
         * Vertical offset for aligning gradients coming from SVG when outside pathgroups
         * @type Number
         * @default 0
         */
        offsetY: 0,
        /**
         * A transform matrix to apply to the gradient before painting.
         * Imported from svg gradients, is not applied with the current transform in the center.
         * Before this transform is applied, the origin point is at the top left corner of the object
         * plus the addition of offsetY and offsetX.
         * @type Number[]
         * @default null
         */
        gradientTransform: null,
        /**
         * coordinates units for coords.
         * If `pixels`, the number of coords are in the same unit of width / height.
         * If set as `percentage` the coords are still a number, but 1 means 100% of width
         * for the X and 100% of the height for the y. It can be bigger than 1 and negative.
         * allowed values pixels or percentage.
         * @type String
         * @default 'pixels'
         */
        gradientUnits: "pixels",
        /**
         * Gradient type linear or radial
         * @type String
         * @default 'pixels'
         */
        type: "linear",
        /**
         * Constructor
         * @param {Object} options Options object with type, coords, gradientUnits and colorStops
         * @param {Object} [options.type] gradient type linear or radial
         * @param {Object} [options.gradientUnits] gradient units
         * @param {Object} [options.offsetX] SVG import compatibility
         * @param {Object} [options.offsetY] SVG import compatibility
         * @param {Object[]} options.colorStops contains the colorstops.
         * @param {Object} options.coords contains the coords of the gradient
         * @param {Number} [options.coords.x1] X coordiante of the first point for linear or of the focal point for radial
         * @param {Number} [options.coords.y1] Y coordiante of the first point for linear or of the focal point for radial
         * @param {Number} [options.coords.x2] X coordiante of the second point for linear or of the center point for radial
         * @param {Number} [options.coords.y2] Y coordiante of the second point for linear or of the center point for radial
         * @param {Number} [options.coords.r1] only for radial gradient, radius of the inner circle
         * @param {Number} [options.coords.r2] only for radial gradient, radius of the external circle
         * @return {fabric.Gradient} thisArg
         */
        initialize: function(u) {
          u || (u = {}), u.coords || (u.coords = {});
          var c, d = this;
          Object.keys(u).forEach(function(m) {
            d[m] = u[m];
          }), this.id ? this.id += "_" + e.Object.__uid++ : this.id = e.Object.__uid++, c = {
            x1: u.coords.x1 || 0,
            y1: u.coords.y1 || 0,
            x2: u.coords.x2 || 0,
            y2: u.coords.y2 || 0
          }, this.type === "radial" && (c.r1 = u.coords.r1 || 0, c.r2 = u.coords.r2 || 0), this.coords = c, this.colorStops = u.colorStops.slice();
        },
        /**
         * Adds another colorStop
         * @param {Object} colorStop Object with offset and color
         * @return {fabric.Gradient} thisArg
         */
        addColorStop: function(u) {
          for (var c in u) {
            var d = new e.Color(u[c]);
            this.colorStops.push({
              offset: parseFloat(c),
              color: d.toRgb(),
              opacity: d.getAlpha()
            });
          }
          return this;
        },
        /**
         * Returns object representation of a gradient
         * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output
         * @return {Object}
         */
        toObject: function(u) {
          var c = {
            type: this.type,
            coords: this.coords,
            colorStops: this.colorStops,
            offsetX: this.offsetX,
            offsetY: this.offsetY,
            gradientUnits: this.gradientUnits,
            gradientTransform: this.gradientTransform ? this.gradientTransform.concat() : this.gradientTransform
          };
          return e.util.populateWithProperties(this, c, u), c;
        },
        /* _TO_SVG_START_ */
        /**
         * Returns SVG representation of an gradient
         * @param {Object} object Object to create a gradient for
         * @return {String} SVG representation of an gradient (linear/radial)
         */
        toSVG: function(u, v) {
          var d = h(this.coords, !0), m, p, v = v || {}, b, y, w = h(this.colorStops, !0), C = d.r1 > d.r2, _ = this.gradientTransform ? this.gradientTransform.concat() : e.iMatrix.concat(), S = -this.offsetX, k = -this.offsetY, I = !!v.additionalTransform, L = this.gradientUnits === "pixels" ? "userSpaceOnUse" : "objectBoundingBox";
          if (w.sort(function(q, K) {
            return q.offset - K.offset;
          }), L === "objectBoundingBox" ? (S /= u.width, k /= u.height) : (S += u.width / 2, k += u.height / 2), u.type === "path" && this.gradientUnits !== "percentage" && (S -= u.pathOffset.x, k -= u.pathOffset.y), _[4] -= S, _[5] -= k, y = 'id="SVGID_' + this.id + '" gradientUnits="' + L + '"', y += ' gradientTransform="' + (I ? v.additionalTransform + " " : "") + e.util.matrixToSVG(_) + '" ', this.type === "linear" ? b = [
            "<linearGradient ",
            y,
            ' x1="',
            d.x1,
            '" y1="',
            d.y1,
            '" x2="',
            d.x2,
            '" y2="',
            d.y2,
            `">
`
          ] : this.type === "radial" && (b = [
            "<radialGradient ",
            y,
            ' cx="',
            C ? d.x1 : d.x2,
            '" cy="',
            C ? d.y1 : d.y2,
            '" r="',
            C ? d.r1 : d.r2,
            '" fx="',
            C ? d.x2 : d.x1,
            '" fy="',
            C ? d.y2 : d.y1,
            `">
`
          ]), this.type === "radial") {
            if (C)
              for (w = w.concat(), w.reverse(), m = 0, p = w.length; m < p; m++)
                w[m].offset = 1 - w[m].offset;
            var j = Math.min(d.r1, d.r2);
            if (j > 0) {
              var G = Math.max(d.r1, d.r2), te = j / G;
              for (m = 0, p = w.length; m < p; m++)
                w[m].offset += te * (1 - w[m].offset);
            }
          }
          for (m = 0, p = w.length; m < p; m++) {
            var W = w[m];
            b.push(
              "<stop ",
              'offset="',
              W.offset * 100 + "%",
              '" style="stop-color:',
              W.color,
              typeof W.opacity < "u" ? ";stop-opacity: " + W.opacity : ";",
              `"/>
`
            );
          }
          return b.push(this.type === "linear" ? `</linearGradient>
` : `</radialGradient>
`), b.join("");
        },
        /* _TO_SVG_END_ */
        /**
         * Returns an instance of CanvasGradient
         * @param {CanvasRenderingContext2D} ctx Context to render on
         * @return {CanvasGradient}
         */
        toLive: function(u) {
          var c, d = e.util.object.clone(this.coords), m, p;
          if (this.type) {
            for (this.type === "linear" ? c = u.createLinearGradient(
              d.x1,
              d.y1,
              d.x2,
              d.y2
            ) : this.type === "radial" && (c = u.createRadialGradient(
              d.x1,
              d.y1,
              d.r1,
              d.x2,
              d.y2,
              d.r2
            )), m = 0, p = this.colorStops.length; m < p; m++) {
              var v = this.colorStops[m].color, b = this.colorStops[m].opacity, y = this.colorStops[m].offset;
              typeof b < "u" && (v = new e.Color(v).setAlpha(b).toRgba()), c.addColorStop(y, v);
            }
            return c;
          }
        }
      }
    ), e.util.object.extend(e.Gradient, {
      /* _FROM_SVG_START_ */
      /**
       * Returns {@link fabric.Gradient} instance from an SVG element
       * @static
       * @memberOf fabric.Gradient
       * @param {SVGGradientElement} el SVG gradient element
       * @param {fabric.Object} instance
       * @param {String} opacityAttr A fill-opacity or stroke-opacity attribute to multiply to each stop's opacity.
       * @param {Object} svgOptions an object containing the size of the SVG in order to parse correctly gradients
       * that uses gradientUnits as 'userSpaceOnUse' and percentages.
       * @param {Object.number} viewBoxWidth width part of the viewBox attribute on svg
       * @param {Object.number} viewBoxHeight height part of the viewBox attribute on svg
       * @param {Object.number} width width part of the svg tag if viewBox is not specified
       * @param {Object.number} height height part of the svg tag if viewBox is not specified
       * @return {fabric.Gradient} Gradient instance
       * @see http://www.w3.org/TR/SVG/pservers.html#LinearGradientElement
       * @see http://www.w3.org/TR/SVG/pservers.html#RadialGradientElement
       */
      fromElement: function(u, c, d, m) {
        var p = parseFloat(d) / (/%$/.test(d) ? 100 : 1);
        p = p < 0 ? 0 : p > 1 ? 1 : p, isNaN(p) && (p = 1);
        var v = u.getElementsByTagName("stop"), b, y = u.getAttribute("gradientUnits") === "userSpaceOnUse" ? "pixels" : "percentage", w = u.getAttribute("gradientTransform") || "", C = [], _, S, k = 0, I = 0, L;
        for (u.nodeName === "linearGradient" || u.nodeName === "LINEARGRADIENT" ? (b = "linear", _ = s(u)) : (b = "radial", _ = a(u)), S = v.length; S--; )
          C.push(l(v[S], p));
        L = e.parseTransformAttribute(w), o(c, _, m, y), y === "pixels" && (k = -c.left, I = -c.top);
        var j = new e.Gradient({
          id: u.getAttribute("id"),
          type: b,
          coords: _,
          colorStops: C,
          gradientUnits: y,
          gradientTransform: L,
          offsetX: k,
          offsetY: I
        });
        return j;
      }
      /* _FROM_SVG_END_ */
    });
    function o(u, c, d, m) {
      var p, v;
      Object.keys(c).forEach(function(b) {
        p = c[b], p === "Infinity" ? v = 1 : p === "-Infinity" ? v = 0 : (v = parseFloat(c[b], 10), typeof p == "string" && /^(\d+\.\d+)%|(\d+)%$/.test(p) && (v *= 0.01, m === "pixels" && ((b === "x1" || b === "x2" || b === "r2") && (v *= d.viewBoxWidth || d.width), (b === "y1" || b === "y2") && (v *= d.viewBoxHeight || d.height)))), c[b] = v;
      });
    }
  }(), function() {
    var l = e.util.toFixed;
    e.Pattern = e.util.createClass(
      /** @lends fabric.Pattern.prototype */
      {
        /**
         * Repeat property of a pattern (one of repeat, repeat-x, repeat-y or no-repeat)
         * @type String
         * @default
         */
        repeat: "repeat",
        /**
         * Pattern horizontal offset from object's left/top corner
         * @type Number
         * @default
         */
        offsetX: 0,
        /**
         * Pattern vertical offset from object's left/top corner
         * @type Number
         * @default
         */
        offsetY: 0,
        /**
         * crossOrigin value (one of "", "anonymous", "use-credentials")
         * @see https://developer.mozilla.org/en-US/docs/HTML/CORS_settings_attributes
         * @type String
         * @default
         */
        crossOrigin: "",
        /**
         * transform matrix to change the pattern, imported from svgs.
         * @type Array
         * @default
         */
        patternTransform: null,
        /**
         * Constructor
         * @param {Object} [options] Options object
         * @param {Function} [callback] function to invoke after callback init.
         * @return {fabric.Pattern} thisArg
         */
        initialize: function(s, a) {
          if (s || (s = {}), this.id = e.Object.__uid++, this.setOptions(s), !s.source || s.source && typeof s.source != "string") {
            a && a(this);
            return;
          } else {
            var h = this;
            this.source = e.util.createImage(), e.util.loadImage(s.source, function(o, u) {
              h.source = o, a && a(h, u);
            }, null, this.crossOrigin);
          }
        },
        /**
         * Returns object representation of a pattern
         * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output
         * @return {Object} Object representation of a pattern instance
         */
        toObject: function(s) {
          var a = e.Object.NUM_FRACTION_DIGITS, h, o;
          return typeof this.source.src == "string" ? h = this.source.src : typeof this.source == "object" && this.source.toDataURL && (h = this.source.toDataURL()), o = {
            type: "pattern",
            source: h,
            repeat: this.repeat,
            crossOrigin: this.crossOrigin,
            offsetX: l(this.offsetX, a),
            offsetY: l(this.offsetY, a),
            patternTransform: this.patternTransform ? this.patternTransform.concat() : null
          }, e.util.populateWithProperties(this, o, s), o;
        },
        /* _TO_SVG_START_ */
        /**
         * Returns SVG representation of a pattern
         * @param {fabric.Object} object
         * @return {String} SVG representation of a pattern
         */
        toSVG: function(s) {
          var a = typeof this.source == "function" ? this.source() : this.source, h = a.width / s.width, o = a.height / s.height, u = this.offsetX / s.width, c = this.offsetY / s.height, d = "";
          return (this.repeat === "repeat-x" || this.repeat === "no-repeat") && (o = 1, c && (o += Math.abs(c))), (this.repeat === "repeat-y" || this.repeat === "no-repeat") && (h = 1, u && (h += Math.abs(u))), a.src ? d = a.src : a.toDataURL && (d = a.toDataURL()), '<pattern id="SVGID_' + this.id + '" x="' + u + '" y="' + c + '" width="' + h + '" height="' + o + `">
<image x="0" y="0" width="` + a.width + '" height="' + a.height + '" xlink:href="' + d + `"></image>
</pattern>
`;
        },
        /* _TO_SVG_END_ */
        setOptions: function(s) {
          for (var a in s)
            this[a] = s[a];
        },
        /**
         * Returns an instance of CanvasPattern
         * @param {CanvasRenderingContext2D} ctx Context to create pattern
         * @return {CanvasPattern}
         */
        toLive: function(s) {
          var a = this.source;
          return !a || typeof a.src < "u" && (!a.complete || a.naturalWidth === 0 || a.naturalHeight === 0) ? "" : s.createPattern(a, this.repeat);
        }
      }
    );
  }(), function(l) {
    var s = l.fabric || (l.fabric = {}), a = s.util.toFixed;
    if (s.Shadow) {
      s.warn("fabric.Shadow is already defined.");
      return;
    }
    s.Shadow = s.util.createClass(
      /** @lends fabric.Shadow.prototype */
      {
        /**
         * Shadow color
         * @type String
         * @default
         */
        color: "rgb(0,0,0)",
        /**
         * Shadow blur
         * @type Number
         */
        blur: 0,
        /**
         * Shadow horizontal offset
         * @type Number
         * @default
         */
        offsetX: 0,
        /**
         * Shadow vertical offset
         * @type Number
         * @default
         */
        offsetY: 0,
        /**
         * Whether the shadow should affect stroke operations
         * @type Boolean
         * @default
         */
        affectStroke: !1,
        /**
         * Indicates whether toObject should include default values
         * @type Boolean
         * @default
         */
        includeDefaultValues: !0,
        /**
         * When `false`, the shadow will scale with the object.
         * When `true`, the shadow's offsetX, offsetY, and blur will not be affected by the object's scale.
         * default to false
         * @type Boolean
         * @default
         */
        nonScaling: !1,
        /**
         * Constructor
         * @param {Object|String} [options] Options object with any of color, blur, offsetX, offsetY properties or string (e.g. "rgba(0,0,0,0.2) 2px 2px 10px")
         * @return {fabric.Shadow} thisArg
         */
        initialize: function(h) {
          typeof h == "string" && (h = this._parseShadow(h));
          for (var o in h)
            this[o] = h[o];
          this.id = s.Object.__uid++;
        },
        /**
         * @private
         * @param {String} shadow Shadow value to parse
         * @return {Object} Shadow object with color, offsetX, offsetY and blur
         */
        _parseShadow: function(h) {
          var o = h.trim(), u = s.Shadow.reOffsetsAndBlur.exec(o) || [], c = o.replace(s.Shadow.reOffsetsAndBlur, "") || "rgb(0,0,0)";
          return {
            color: c.trim(),
            offsetX: parseFloat(u[1], 10) || 0,
            offsetY: parseFloat(u[2], 10) || 0,
            blur: parseFloat(u[3], 10) || 0
          };
        },
        /**
         * Returns a string representation of an instance
         * @see http://www.w3.org/TR/css-text-decor-3/#text-shadow
         * @return {String} Returns CSS3 text-shadow declaration
         */
        toString: function() {
          return [this.offsetX, this.offsetY, this.blur, this.color].join("px ");
        },
        /* _TO_SVG_START_ */
        /**
         * Returns SVG representation of a shadow
         * @param {fabric.Object} object
         * @return {String} SVG representation of a shadow
         */
        toSVG: function(h) {
          var o = 40, u = 40, c = s.Object.NUM_FRACTION_DIGITS, d = s.util.rotateVector(
            { x: this.offsetX, y: this.offsetY },
            s.util.degreesToRadians(-h.angle)
          ), m = 20, p = new s.Color(this.color);
          return h.width && h.height && (o = a((Math.abs(d.x) + this.blur) / h.width, c) * 100 + m, u = a((Math.abs(d.y) + this.blur) / h.height, c) * 100 + m), h.flipX && (d.x *= -1), h.flipY && (d.y *= -1), '<filter id="SVGID_' + this.id + '" y="-' + u + '%" height="' + (100 + 2 * u) + '%" x="-' + o + '%" width="' + (100 + 2 * o) + `%" >
	<feGaussianBlur in="SourceAlpha" stdDeviation="` + a(this.blur ? this.blur / 2 : 0, c) + `"></feGaussianBlur>
	<feOffset dx="` + a(d.x, c) + '" dy="' + a(d.y, c) + `" result="oBlur" ></feOffset>
	<feFlood flood-color="` + p.toRgb() + '" flood-opacity="' + p.getAlpha() + `"/>
	<feComposite in2="oBlur" operator="in" />
	<feMerge>
		<feMergeNode></feMergeNode>
		<feMergeNode in="SourceGraphic"></feMergeNode>
	</feMerge>
</filter>
`;
        },
        /* _TO_SVG_END_ */
        /**
         * Returns object representation of a shadow
         * @return {Object} Object representation of a shadow instance
         */
        toObject: function() {
          if (this.includeDefaultValues)
            return {
              color: this.color,
              blur: this.blur,
              offsetX: this.offsetX,
              offsetY: this.offsetY,
              affectStroke: this.affectStroke,
              nonScaling: this.nonScaling
            };
          var h = {}, o = s.Shadow.prototype;
          return ["color", "blur", "offsetX", "offsetY", "affectStroke", "nonScaling"].forEach(function(u) {
            this[u] !== o[u] && (h[u] = this[u]);
          }, this), h;
        }
      }
    ), s.Shadow.reOffsetsAndBlur = /(?:\s|^)(-?\d+(?:\.\d*)?(?:px)?(?:\s?|$))?(-?\d+(?:\.\d*)?(?:px)?(?:\s?|$))?(\d+(?:\.\d*)?(?:px)?)?(?:\s?|$)(?:$|\s)/;
  }(t), function() {
    if (e.StaticCanvas) {
      e.warn("fabric.StaticCanvas is already defined.");
      return;
    }
    var l = e.util.object.extend, s = e.util.getElementOffset, a = e.util.removeFromArray, h = e.util.toFixed, o = e.util.transformPoint, u = e.util.invertTransform, c = e.util.getNodeCanvas, d = e.util.createCanvasElement, m = new Error("Could not initialize `canvas` element");
    e.StaticCanvas = e.util.createClass(
      e.CommonMethods,
      /** @lends fabric.StaticCanvas.prototype */
      {
        /**
         * Constructor
         * @param {HTMLElement | String} el &lt;canvas> element to initialize instance on
         * @param {Object} [options] Options object
         * @return {Object} thisArg
         */
        initialize: function(p, v) {
          v || (v = {}), this.renderAndResetBound = this.renderAndReset.bind(this), this.requestRenderAllBound = this.requestRenderAll.bind(this), this._initStatic(p, v);
        },
        /**
         * Background color of canvas instance.
         * Should be set via {@link fabric.StaticCanvas#setBackgroundColor}.
         * @type {(String|fabric.Pattern)}
         * @default
         */
        backgroundColor: "",
        /**
         * Background image of canvas instance.
         * since 2.4.0 image caching is active, please when putting an image as background, add to the
         * canvas property a reference to the canvas it is on. Otherwise the image cannot detect the zoom
         * vale. As an alternative you can disable image objectCaching
         * @type fabric.Image
         * @default
         */
        backgroundImage: null,
        /**
         * Overlay color of canvas instance.
         * Should be set via {@link fabric.StaticCanvas#setOverlayColor}
         * @since 1.3.9
         * @type {(String|fabric.Pattern)}
         * @default
         */
        overlayColor: "",
        /**
         * Overlay image of canvas instance.
         * since 2.4.0 image caching is active, please when putting an image as overlay, add to the
         * canvas property a reference to the canvas it is on. Otherwise the image cannot detect the zoom
         * vale. As an alternative you can disable image objectCaching
         * @type fabric.Image
         * @default
         */
        overlayImage: null,
        /**
         * Indicates whether toObject/toDatalessObject should include default values
         * if set to false, takes precedence over the object value.
         * @type Boolean
         * @default
         */
        includeDefaultValues: !0,
        /**
         * Indicates whether objects' state should be saved
         * @type Boolean
         * @default
         */
        stateful: !1,
        /**
         * Indicates whether {@link fabric.Collection.add}, {@link fabric.Collection.insertAt} and {@link fabric.Collection.remove},
         * {@link fabric.StaticCanvas.moveTo}, {@link fabric.StaticCanvas.clear} and many more, should also re-render canvas.
         * Disabling this option will not give a performance boost when adding/removing a lot of objects to/from canvas at once
         * since the renders are quequed and executed one per frame.
         * Disabling is suggested anyway and managing the renders of the app manually is not a big effort ( canvas.requestRenderAll() )
         * Left default to true to do not break documentation and old app, fiddles.
         * @type Boolean
         * @default
         */
        renderOnAddRemove: !0,
        /**
         * Indicates whether object controls (borders/controls) are rendered above overlay image
         * @type Boolean
         * @default
         */
        controlsAboveOverlay: !1,
        /**
         * Indicates whether the browser can be scrolled when using a touchscreen and dragging on the canvas
         * @type Boolean
         * @default
         */
        allowTouchScrolling: !1,
        /**
         * Indicates whether this canvas will use image smoothing, this is on by default in browsers
         * @type Boolean
         * @default
         */
        imageSmoothingEnabled: !0,
        /**
         * The transformation (a Canvas 2D API transform matrix) which focuses the viewport
         * @type Array
         * @example <caption>Default transform</caption>
         * canvas.viewportTransform = [1, 0, 0, 1, 0, 0];
         * @example <caption>Scale by 70% and translate toward bottom-right by 50, without skewing</caption>
         * canvas.viewportTransform = [0.7, 0, 0, 0.7, 50, 50];
         * @default
         */
        viewportTransform: e.iMatrix.concat(),
        /**
         * if set to false background image is not affected by viewport transform
         * @since 1.6.3
         * @type Boolean
         * @default
         */
        backgroundVpt: !0,
        /**
         * if set to false overlya image is not affected by viewport transform
         * @since 1.6.3
         * @type Boolean
         * @default
         */
        overlayVpt: !0,
        /**
         * When true, canvas is scaled by devicePixelRatio for better rendering on retina screens
         * @type Boolean
         * @default
         */
        enableRetinaScaling: !0,
        /**
         * Describe canvas element extension over design
         * properties are tl,tr,bl,br.
         * if canvas is not zoomed/panned those points are the four corner of canvas
         * if canvas is viewportTransformed you those points indicate the extension
         * of canvas element in plain untrasformed coordinates
         * The coordinates get updated with @method calcViewportBoundaries.
         * @memberOf fabric.StaticCanvas.prototype
         */
        vptCoords: {},
        /**
         * Based on vptCoords and object.aCoords, skip rendering of objects that
         * are not included in current viewport.
         * May greatly help in applications with crowded canvas and use of zoom/pan
         * If One of the corner of the bounding box of the object is on the canvas
         * the objects get rendered.
         * @memberOf fabric.StaticCanvas.prototype
         * @type Boolean
         * @default
         */
        skipOffscreen: !0,
        /**
         * a fabricObject that, without stroke define a clipping area with their shape. filled in black
         * the clipPath object gets used when the canvas has rendered, and the context is placed in the
         * top left corner of the canvas.
         * clipPath will clip away controls, if you do not want this to happen use controlsAboveOverlay = true
         * @type fabric.Object
         */
        clipPath: void 0,
        /**
         * @private
         * @param {HTMLElement | String} el &lt;canvas> element to initialize instance on
         * @param {Object} [options] Options object
         */
        _initStatic: function(p, v) {
          var b = this.requestRenderAllBound;
          this._objects = [], this._createLowerCanvas(p), this._initOptions(v), this.interactive || this._initRetinaScaling(), v.overlayImage && this.setOverlayImage(v.overlayImage, b), v.backgroundImage && this.setBackgroundImage(v.backgroundImage, b), v.backgroundColor && this.setBackgroundColor(v.backgroundColor, b), v.overlayColor && this.setOverlayColor(v.overlayColor, b), this.calcOffset();
        },
        /**
         * @private
         */
        _isRetinaScaling: function() {
          return e.devicePixelRatio > 1 && this.enableRetinaScaling;
        },
        /**
         * @private
         * @return {Number} retinaScaling if applied, otherwise 1;
         */
        getRetinaScaling: function() {
          return this._isRetinaScaling() ? Math.max(1, e.devicePixelRatio) : 1;
        },
        /**
         * @private
         */
        _initRetinaScaling: function() {
          if (this._isRetinaScaling()) {
            var p = e.devicePixelRatio;
            this.__initRetinaScaling(p, this.lowerCanvasEl, this.contextContainer), this.upperCanvasEl && this.__initRetinaScaling(p, this.upperCanvasEl, this.contextTop);
          }
        },
        __initRetinaScaling: function(p, v, b) {
          v.setAttribute("width", this.width * p), v.setAttribute("height", this.height * p), b.scale(p, p);
        },
        /**
         * Calculates canvas element offset relative to the document
         * This method is also attached as "resize" event handler of window
         * @return {fabric.Canvas} instance
         * @chainable
         */
        calcOffset: function() {
          return this._offset = s(this.lowerCanvasEl), this;
        },
        /**
         * Sets {@link fabric.StaticCanvas#overlayImage|overlay image} for this canvas
         * @param {(fabric.Image|String)} image fabric.Image instance or URL of an image to set overlay to
         * @param {Function} callback callback to invoke when image is loaded and set as an overlay
         * @param {Object} [options] Optional options to set for the {@link fabric.Image|overlay image}.
         * @return {fabric.Canvas} thisArg
         * @chainable
         * @see {@link http://jsfiddle.net/fabricjs/MnzHT/|jsFiddle demo}
         * @example <caption>Normal overlayImage with left/top = 0</caption>
         * canvas.setOverlayImage('http://fabricjs.com/assets/jail_cell_bars.png', canvas.renderAll.bind(canvas), {
         *   // Needed to position overlayImage at 0/0
         *   originX: 'left',
         *   originY: 'top'
         * });
         * @example <caption>overlayImage with different properties</caption>
         * canvas.setOverlayImage('http://fabricjs.com/assets/jail_cell_bars.png', canvas.renderAll.bind(canvas), {
         *   opacity: 0.5,
         *   angle: 45,
         *   left: 400,
         *   top: 400,
         *   originX: 'left',
         *   originY: 'top'
         * });
         * @example <caption>Stretched overlayImage #1 - width/height correspond to canvas width/height</caption>
         * fabric.Image.fromURL('http://fabricjs.com/assets/jail_cell_bars.png', function(img, isError) {
         *    img.set({width: canvas.width, height: canvas.height, originX: 'left', originY: 'top'});
         *    canvas.setOverlayImage(img, canvas.renderAll.bind(canvas));
         * });
         * @example <caption>Stretched overlayImage #2 - width/height correspond to canvas width/height</caption>
         * canvas.setOverlayImage('http://fabricjs.com/assets/jail_cell_bars.png', canvas.renderAll.bind(canvas), {
         *   width: canvas.width,
         *   height: canvas.height,
         *   // Needed to position overlayImage at 0/0
         *   originX: 'left',
         *   originY: 'top'
         * });
         * @example <caption>overlayImage loaded from cross-origin</caption>
         * canvas.setOverlayImage('http://fabricjs.com/assets/jail_cell_bars.png', canvas.renderAll.bind(canvas), {
         *   opacity: 0.5,
         *   angle: 45,
         *   left: 400,
         *   top: 400,
         *   originX: 'left',
         *   originY: 'top',
         *   crossOrigin: 'anonymous'
         * });
         */
        setOverlayImage: function(p, v, b) {
          return this.__setBgOverlayImage("overlayImage", p, v, b);
        },
        /**
         * Sets {@link fabric.StaticCanvas#backgroundImage|background image} for this canvas
         * @param {(fabric.Image|String)} image fabric.Image instance or URL of an image to set background to
         * @param {Function} callback Callback to invoke when image is loaded and set as background
         * @param {Object} [options] Optional options to set for the {@link fabric.Image|background image}.
         * @return {fabric.Canvas} thisArg
         * @chainable
         * @see {@link http://jsfiddle.net/djnr8o7a/28/|jsFiddle demo}
         * @example <caption>Normal backgroundImage with left/top = 0</caption>
         * canvas.setBackgroundImage('http://fabricjs.com/assets/honey_im_subtle.png', canvas.renderAll.bind(canvas), {
         *   // Needed to position backgroundImage at 0/0
         *   originX: 'left',
         *   originY: 'top'
         * });
         * @example <caption>backgroundImage with different properties</caption>
         * canvas.setBackgroundImage('http://fabricjs.com/assets/honey_im_subtle.png', canvas.renderAll.bind(canvas), {
         *   opacity: 0.5,
         *   angle: 45,
         *   left: 400,
         *   top: 400,
         *   originX: 'left',
         *   originY: 'top'
         * });
         * @example <caption>Stretched backgroundImage #1 - width/height correspond to canvas width/height</caption>
         * fabric.Image.fromURL('http://fabricjs.com/assets/honey_im_subtle.png', function(img, isError) {
         *    img.set({width: canvas.width, height: canvas.height, originX: 'left', originY: 'top'});
         *    canvas.setBackgroundImage(img, canvas.renderAll.bind(canvas));
         * });
         * @example <caption>Stretched backgroundImage #2 - width/height correspond to canvas width/height</caption>
         * canvas.setBackgroundImage('http://fabricjs.com/assets/honey_im_subtle.png', canvas.renderAll.bind(canvas), {
         *   width: canvas.width,
         *   height: canvas.height,
         *   // Needed to position backgroundImage at 0/0
         *   originX: 'left',
         *   originY: 'top'
         * });
         * @example <caption>backgroundImage loaded from cross-origin</caption>
         * canvas.setBackgroundImage('http://fabricjs.com/assets/honey_im_subtle.png', canvas.renderAll.bind(canvas), {
         *   opacity: 0.5,
         *   angle: 45,
         *   left: 400,
         *   top: 400,
         *   originX: 'left',
         *   originY: 'top',
         *   crossOrigin: 'anonymous'
         * });
         */
        // TODO: fix stretched examples
        setBackgroundImage: function(p, v, b) {
          return this.__setBgOverlayImage("backgroundImage", p, v, b);
        },
        /**
         * Sets {@link fabric.StaticCanvas#overlayColor|foreground color} for this canvas
         * @param {(String|fabric.Pattern)} overlayColor Color or pattern to set foreground color to
         * @param {Function} callback Callback to invoke when foreground color is set
         * @return {fabric.Canvas} thisArg
         * @chainable
         * @see {@link http://jsfiddle.net/fabricjs/pB55h/|jsFiddle demo}
         * @example <caption>Normal overlayColor - color value</caption>
         * canvas.setOverlayColor('rgba(255, 73, 64, 0.6)', canvas.renderAll.bind(canvas));
         * @example <caption>fabric.Pattern used as overlayColor</caption>
         * canvas.setOverlayColor({
         *   source: 'http://fabricjs.com/assets/escheresque_ste.png'
         * }, canvas.renderAll.bind(canvas));
         * @example <caption>fabric.Pattern used as overlayColor with repeat and offset</caption>
         * canvas.setOverlayColor({
         *   source: 'http://fabricjs.com/assets/escheresque_ste.png',
         *   repeat: 'repeat',
         *   offsetX: 200,
         *   offsetY: 100
         * }, canvas.renderAll.bind(canvas));
         */
        setOverlayColor: function(p, v) {
          return this.__setBgOverlayColor("overlayColor", p, v);
        },
        /**
         * Sets {@link fabric.StaticCanvas#backgroundColor|background color} for this canvas
         * @param {(String|fabric.Pattern)} backgroundColor Color or pattern to set background color to
         * @param {Function} callback Callback to invoke when background color is set
         * @return {fabric.Canvas} thisArg
         * @chainable
         * @see {@link http://jsfiddle.net/fabricjs/hXzvk/|jsFiddle demo}
         * @example <caption>Normal backgroundColor - color value</caption>
         * canvas.setBackgroundColor('rgba(255, 73, 64, 0.6)', canvas.renderAll.bind(canvas));
         * @example <caption>fabric.Pattern used as backgroundColor</caption>
         * canvas.setBackgroundColor({
         *   source: 'http://fabricjs.com/assets/escheresque_ste.png'
         * }, canvas.renderAll.bind(canvas));
         * @example <caption>fabric.Pattern used as backgroundColor with repeat and offset</caption>
         * canvas.setBackgroundColor({
         *   source: 'http://fabricjs.com/assets/escheresque_ste.png',
         *   repeat: 'repeat',
         *   offsetX: 200,
         *   offsetY: 100
         * }, canvas.renderAll.bind(canvas));
         */
        setBackgroundColor: function(p, v) {
          return this.__setBgOverlayColor("backgroundColor", p, v);
        },
        /**
         * @private
         * @param {String} property Property to set ({@link fabric.StaticCanvas#backgroundImage|backgroundImage}
         * or {@link fabric.StaticCanvas#overlayImage|overlayImage})
         * @param {(fabric.Image|String|null)} image fabric.Image instance, URL of an image or null to set background or overlay to
         * @param {Function} callback Callback to invoke when image is loaded and set as background or overlay. The first argument is the created image, the second argument is a flag indicating whether an error occurred or not.
         * @param {Object} [options] Optional options to set for the {@link fabric.Image|image}.
         */
        __setBgOverlayImage: function(p, v, b, y) {
          return typeof v == "string" ? e.util.loadImage(v, function(w, C) {
            if (w) {
              var _ = new e.Image(w, y);
              this[p] = _, _.canvas = this;
            }
            b && b(w, C);
          }, this, y && y.crossOrigin) : (y && v.setOptions(y), this[p] = v, v && (v.canvas = this), b && b(v, !1)), this;
        },
        /**
         * @private
         * @param {String} property Property to set ({@link fabric.StaticCanvas#backgroundColor|backgroundColor}
         * or {@link fabric.StaticCanvas#overlayColor|overlayColor})
         * @param {(Object|String|null)} color Object with pattern information, color value or null
         * @param {Function} [callback] Callback is invoked when color is set
         */
        __setBgOverlayColor: function(p, v, b) {
          return this[p] = v, this._initGradient(v, p), this._initPattern(v, p, b), this;
        },
        /**
         * @private
         */
        _createCanvasElement: function() {
          var p = d();
          if (!p || (p.style || (p.style = {}), typeof p.getContext > "u"))
            throw m;
          return p;
        },
        /**
         * @private
         * @param {Object} [options] Options object
         */
        _initOptions: function(p) {
          var v = this.lowerCanvasEl;
          this._setOptions(p), this.width = this.width || parseInt(v.width, 10) || 0, this.height = this.height || parseInt(v.height, 10) || 0, this.lowerCanvasEl.style && (v.width = this.width, v.height = this.height, v.style.width = this.width + "px", v.style.height = this.height + "px", this.viewportTransform = this.viewportTransform.slice());
        },
        /**
         * Creates a bottom canvas
         * @private
         * @param {HTMLElement} [canvasEl]
         */
        _createLowerCanvas: function(p) {
          p && p.getContext ? this.lowerCanvasEl = p : this.lowerCanvasEl = e.util.getById(p) || this._createCanvasElement(), e.util.addClass(this.lowerCanvasEl, "lower-canvas"), this._originalCanvasStyle = this.lowerCanvasEl.style, this.interactive && this._applyCanvasStyle(this.lowerCanvasEl), this.contextContainer = this.lowerCanvasEl.getContext("2d");
        },
        /**
         * Returns canvas width (in px)
         * @return {Number}
         */
        getWidth: function() {
          return this.width;
        },
        /**
         * Returns canvas height (in px)
         * @return {Number}
         */
        getHeight: function() {
          return this.height;
        },
        /**
         * Sets width of this canvas instance
         * @param {Number|String} value                         Value to set width to
         * @param {Object}        [options]                     Options object
         * @param {Boolean}       [options.backstoreOnly=false] Set the given dimensions only as canvas backstore dimensions
         * @param {Boolean}       [options.cssOnly=false]       Set the given dimensions only as css dimensions
         * @return {fabric.Canvas} instance
         * @chainable true
         */
        setWidth: function(p, v) {
          return this.setDimensions({ width: p }, v);
        },
        /**
         * Sets height of this canvas instance
         * @param {Number|String} value                         Value to set height to
         * @param {Object}        [options]                     Options object
         * @param {Boolean}       [options.backstoreOnly=false] Set the given dimensions only as canvas backstore dimensions
         * @param {Boolean}       [options.cssOnly=false]       Set the given dimensions only as css dimensions
         * @return {fabric.Canvas} instance
         * @chainable true
         */
        setHeight: function(p, v) {
          return this.setDimensions({ height: p }, v);
        },
        /**
         * Sets dimensions (width, height) of this canvas instance. when options.cssOnly flag active you should also supply the unit of measure (px/%/em)
         * @param {Object}        dimensions                    Object with width/height properties
         * @param {Number|String} [dimensions.width]            Width of canvas element
         * @param {Number|String} [dimensions.height]           Height of canvas element
         * @param {Object}        [options]                     Options object
         * @param {Boolean}       [options.backstoreOnly=false] Set the given dimensions only as canvas backstore dimensions
         * @param {Boolean}       [options.cssOnly=false]       Set the given dimensions only as css dimensions
         * @return {fabric.Canvas} thisArg
         * @chainable
         */
        setDimensions: function(p, v) {
          var b;
          v = v || {};
          for (var y in p)
            b = p[y], v.cssOnly || (this._setBackstoreDimension(y, p[y]), b += "px", this.hasLostContext = !0), v.backstoreOnly || this._setCssDimension(y, b);
          return this._isCurrentlyDrawing && this.freeDrawingBrush && this.freeDrawingBrush._setBrushStyles(this.contextTop), this._initRetinaScaling(), this.calcOffset(), v.cssOnly || this.requestRenderAll(), this;
        },
        /**
         * Helper for setting width/height
         * @private
         * @param {String} prop property (width|height)
         * @param {Number} value value to set property to
         * @return {fabric.Canvas} instance
         * @chainable true
         */
        _setBackstoreDimension: function(p, v) {
          return this.lowerCanvasEl[p] = v, this.upperCanvasEl && (this.upperCanvasEl[p] = v), this.cacheCanvasEl && (this.cacheCanvasEl[p] = v), this[p] = v, this;
        },
        /**
         * Helper for setting css width/height
         * @private
         * @param {String} prop property (width|height)
         * @param {String} value value to set property to
         * @return {fabric.Canvas} instance
         * @chainable true
         */
        _setCssDimension: function(p, v) {
          return this.lowerCanvasEl.style[p] = v, this.upperCanvasEl && (this.upperCanvasEl.style[p] = v), this.wrapperEl && (this.wrapperEl.style[p] = v), this;
        },
        /**
         * Returns canvas zoom level
         * @return {Number}
         */
        getZoom: function() {
          return this.viewportTransform[0];
        },
        /**
         * Sets viewport transformation of this canvas instance
         * @param {Array} vpt a Canvas 2D API transform matrix
         * @return {fabric.Canvas} instance
         * @chainable true
         */
        setViewportTransform: function(p) {
          var v = this._activeObject, b = this.backgroundImage, y = this.overlayImage, w, C, _;
          for (this.viewportTransform = p, C = 0, _ = this._objects.length; C < _; C++)
            w = this._objects[C], w.group || w.setCoords(!0);
          return v && v.setCoords(), b && b.setCoords(!0), y && y.setCoords(!0), this.calcViewportBoundaries(), this.renderOnAddRemove && this.requestRenderAll(), this;
        },
        /**
         * Sets zoom level of this canvas instance, the zoom centered around point
         * meaning that following zoom to point with the same point will have the visual
         * effect of the zoom originating from that point. The point won't move.
         * It has nothing to do with canvas center or visual center of the viewport.
         * @param {fabric.Point} point to zoom with respect to
         * @param {Number} value to set zoom to, less than 1 zooms out
         * @return {fabric.Canvas} instance
         * @chainable true
         */
        zoomToPoint: function(p, v) {
          var b = p, y = this.viewportTransform.slice(0);
          p = o(p, u(this.viewportTransform)), y[0] = v, y[3] = v;
          var w = o(p, y);
          return y[4] += b.x - w.x, y[5] += b.y - w.y, this.setViewportTransform(y);
        },
        /**
         * Sets zoom level of this canvas instance
         * @param {Number} value to set zoom to, less than 1 zooms out
         * @return {fabric.Canvas} instance
         * @chainable true
         */
        setZoom: function(p) {
          return this.zoomToPoint(new e.Point(0, 0), p), this;
        },
        /**
         * Pan viewport so as to place point at top left corner of canvas
         * @param {fabric.Point} point to move to
         * @return {fabric.Canvas} instance
         * @chainable true
         */
        absolutePan: function(p) {
          var v = this.viewportTransform.slice(0);
          return v[4] = -p.x, v[5] = -p.y, this.setViewportTransform(v);
        },
        /**
         * Pans viewpoint relatively
         * @param {fabric.Point} point (position vector) to move by
         * @return {fabric.Canvas} instance
         * @chainable true
         */
        relativePan: function(p) {
          return this.absolutePan(new e.Point(
            -p.x - this.viewportTransform[4],
            -p.y - this.viewportTransform[5]
          ));
        },
        /**
         * Returns &lt;canvas> element corresponding to this instance
         * @return {HTMLCanvasElement}
         */
        getElement: function() {
          return this.lowerCanvasEl;
        },
        /**
         * @private
         * @param {fabric.Object} obj Object that was added
         */
        _onObjectAdded: function(p) {
          this.stateful && p.setupState(), p._set("canvas", this), p.setCoords(), this.fire("object:added", { target: p }), p.fire("added");
        },
        /**
         * @private
         * @param {fabric.Object} obj Object that was removed
         */
        _onObjectRemoved: function(p) {
          this.fire("object:removed", { target: p }), p.fire("removed"), delete p.canvas;
        },
        /**
         * Clears specified context of canvas element
         * @param {CanvasRenderingContext2D} ctx Context to clear
         * @return {fabric.Canvas} thisArg
         * @chainable
         */
        clearContext: function(p) {
          return p.clearRect(0, 0, this.width, this.height), this;
        },
        /**
         * Returns context of canvas where objects are drawn
         * @return {CanvasRenderingContext2D}
         */
        getContext: function() {
          return this.contextContainer;
        },
        /**
         * Clears all contexts (background, main, top) of an instance
         * @return {fabric.Canvas} thisArg
         * @chainable
         */
        clear: function() {
          return this.remove.apply(this, this.getObjects()), this.backgroundImage = null, this.overlayImage = null, this.backgroundColor = "", this.overlayColor = "", this._hasITextHandlers && (this.off("mouse:up", this._mouseUpITextHandler), this._iTextInstances = null, this._hasITextHandlers = !1), this.clearContext(this.contextContainer), this.fire("canvas:cleared"), this.renderOnAddRemove && this.requestRenderAll(), this;
        },
        /**
         * Renders the canvas
         * @return {fabric.Canvas} instance
         * @chainable
         */
        renderAll: function() {
          var p = this.contextContainer;
          return this.renderCanvas(p, this._objects), this;
        },
        /**
         * Function created to be instance bound at initialization
         * used in requestAnimationFrame rendering
         * Let the fabricJS call it. If you call it manually you could have more
         * animationFrame stacking on to of each other
         * for an imperative rendering, use canvas.renderAll
         * @private
         * @return {fabric.Canvas} instance
         * @chainable
         */
        renderAndReset: function() {
          this.isRendering = 0, this.renderAll();
        },
        /**
         * Append a renderAll request to next animation frame.
         * unless one is already in progress, in that case nothing is done
         * a boolean flag will avoid appending more.
         * @return {fabric.Canvas} instance
         * @chainable
         */
        requestRenderAll: function() {
          return this.isRendering || (this.isRendering = e.util.requestAnimFrame(this.renderAndResetBound)), this;
        },
        /**
         * Calculate the position of the 4 corner of canvas with current viewportTransform.
         * helps to determinate when an object is in the current rendering viewport using
         * object absolute coordinates ( aCoords )
         * @return {Object} points.tl
         * @chainable
         */
        calcViewportBoundaries: function() {
          var p = {}, v = this.width, b = this.height, y = u(this.viewportTransform);
          return p.tl = o({ x: 0, y: 0 }, y), p.br = o({ x: v, y: b }, y), p.tr = new e.Point(p.br.x, p.tl.y), p.bl = new e.Point(p.tl.x, p.br.y), this.vptCoords = p, p;
        },
        cancelRequestedRender: function() {
          this.isRendering && (e.util.cancelAnimFrame(this.isRendering), this.isRendering = 0);
        },
        /**
         * Renders background, objects, overlay and controls.
         * @param {CanvasRenderingContext2D} ctx
         * @param {Array} objects to render
         * @return {fabric.Canvas} instance
         * @chainable
         */
        renderCanvas: function(p, v) {
          var b = this.viewportTransform, y = this.clipPath;
          this.cancelRequestedRender(), this.calcViewportBoundaries(), this.clearContext(p), e.util.setImageSmoothing(p, this.imageSmoothingEnabled), this.fire("before:render", { ctx: p }), this._renderBackground(p), p.save(), p.transform(b[0], b[1], b[2], b[3], b[4], b[5]), this._renderObjects(p, v), p.restore(), !this.controlsAboveOverlay && this.interactive && this.drawControls(p), y && (y.canvas = this, y.shouldCache(), y._transformDone = !0, y.renderCache({ forClipping: !0 }), this.drawClipPathOnCanvas(p)), this._renderOverlay(p), this.controlsAboveOverlay && this.interactive && this.drawControls(p), this.fire("after:render", { ctx: p });
        },
        /**
         * Paint the cached clipPath on the lowerCanvasEl
         * @param {CanvasRenderingContext2D} ctx Context to render on
         */
        drawClipPathOnCanvas: function(p) {
          var v = this.viewportTransform, b = this.clipPath;
          p.save(), p.transform(v[0], v[1], v[2], v[3], v[4], v[5]), p.globalCompositeOperation = "destination-in", b.transform(p), p.scale(1 / b.zoomX, 1 / b.zoomY), p.drawImage(b._cacheCanvas, -b.cacheTranslationX, -b.cacheTranslationY), p.restore();
        },
        /**
         * @private
         * @param {CanvasRenderingContext2D} ctx Context to render on
         * @param {Array} objects to render
         */
        _renderObjects: function(p, v) {
          var b, y;
          for (b = 0, y = v.length; b < y; ++b)
            v[b] && v[b].render(p);
        },
        /**
         * @private
         * @param {CanvasRenderingContext2D} ctx Context to render on
         * @param {string} property 'background' or 'overlay'
         */
        _renderBackgroundOrOverlay: function(p, v) {
          var b = this[v + "Color"], y = this[v + "Image"], w = this.viewportTransform, C = this[v + "Vpt"];
          if (!(!b && !y)) {
            if (b) {
              p.save(), p.beginPath(), p.moveTo(0, 0), p.lineTo(this.width, 0), p.lineTo(this.width, this.height), p.lineTo(0, this.height), p.closePath(), p.fillStyle = b.toLive ? b.toLive(p, this) : b, C && p.transform(w[0], w[1], w[2], w[3], w[4], w[5]), p.transform(1, 0, 0, 1, b.offsetX || 0, b.offsetY || 0);
              var _ = b.gradientTransform || b.patternTransform;
              _ && p.transform(_[0], _[1], _[2], _[3], _[4], _[5]), p.fill(), p.restore();
            }
            y && (p.save(), C && p.transform(w[0], w[1], w[2], w[3], w[4], w[5]), y.render(p), p.restore());
          }
        },
        /**
         * @private
         * @param {CanvasRenderingContext2D} ctx Context to render on
         */
        _renderBackground: function(p) {
          this._renderBackgroundOrOverlay(p, "background");
        },
        /**
         * @private
         * @param {CanvasRenderingContext2D} ctx Context to render on
         */
        _renderOverlay: function(p) {
          this._renderBackgroundOrOverlay(p, "overlay");
        },
        /**
         * Returns coordinates of a center of canvas.
         * Returned value is an object with top and left properties
         * @return {Object} object with "top" and "left" number values
         * @deprecated migrate to `getCenterPoint`
         */
        getCenter: function() {
          return {
            top: this.height / 2,
            left: this.width / 2
          };
        },
        /**
         * Returns coordinates of a center of canvas.
         * @return {fabric.Point} 
         */
        getCenterPoint: function() {
          return new e.Point(this.width / 2, this.height / 2);
        },
        /**
         * Centers object horizontally in the canvas
         * @param {fabric.Object} object Object to center horizontally
         * @return {fabric.Canvas} thisArg
         */
        centerObjectH: function(p) {
          return this._centerObject(p, new e.Point(this.getCenterPoint().x, p.getCenterPoint().y));
        },
        /**
         * Centers object vertically in the canvas
         * @param {fabric.Object} object Object to center vertically
         * @return {fabric.Canvas} thisArg
         * @chainable
         */
        centerObjectV: function(p) {
          return this._centerObject(p, new e.Point(p.getCenterPoint().x, this.getCenterPoint().y));
        },
        /**
         * Centers object vertically and horizontally in the canvas
         * @param {fabric.Object} object Object to center vertically and horizontally
         * @return {fabric.Canvas} thisArg
         * @chainable
         */
        centerObject: function(p) {
          var v = this.getCenterPoint();
          return this._centerObject(p, v);
        },
        /**
         * Centers object vertically and horizontally in the viewport
         * @param {fabric.Object} object Object to center vertically and horizontally
         * @return {fabric.Canvas} thisArg
         * @chainable
         */
        viewportCenterObject: function(p) {
          var v = this.getVpCenter();
          return this._centerObject(p, v);
        },
        /**
         * Centers object horizontally in the viewport, object.top is unchanged
         * @param {fabric.Object} object Object to center vertically and horizontally
         * @return {fabric.Canvas} thisArg
         * @chainable
         */
        viewportCenterObjectH: function(p) {
          var v = this.getVpCenter();
          return this._centerObject(p, new e.Point(v.x, p.getCenterPoint().y)), this;
        },
        /**
         * Centers object Vertically in the viewport, object.top is unchanged
         * @param {fabric.Object} object Object to center vertically and horizontally
         * @return {fabric.Canvas} thisArg
         * @chainable
         */
        viewportCenterObjectV: function(p) {
          var v = this.getVpCenter();
          return this._centerObject(p, new e.Point(p.getCenterPoint().x, v.y));
        },
        /**
         * Calculate the point in canvas that correspond to the center of actual viewport.
         * @return {fabric.Point} vpCenter, viewport center
         * @chainable
         */
        getVpCenter: function() {
          var p = this.getCenterPoint(), v = u(this.viewportTransform);
          return o(p, v);
        },
        /**
         * @private
         * @param {fabric.Object} object Object to center
         * @param {fabric.Point} center Center point
         * @return {fabric.Canvas} thisArg
         * @chainable
         */
        _centerObject: function(p, v) {
          return p.setPositionByOrigin(v, "center", "center"), p.setCoords(), this.renderOnAddRemove && this.requestRenderAll(), this;
        },
        /**
         * Returns dataless JSON representation of canvas
         * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output
         * @return {String} json string
         */
        toDatalessJSON: function(p) {
          return this.toDatalessObject(p);
        },
        /**
         * Returns object representation of canvas
         * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output
         * @return {Object} object representation of an instance
         */
        toObject: function(p) {
          return this._toObjectMethod("toObject", p);
        },
        /**
         * Returns dataless object representation of canvas
         * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output
         * @return {Object} object representation of an instance
         */
        toDatalessObject: function(p) {
          return this._toObjectMethod("toDatalessObject", p);
        },
        /**
         * @private
         */
        _toObjectMethod: function(p, v) {
          var b = this.clipPath, y = {
            version: e.version,
            objects: this._toObjects(p, v)
          };
          return b && !b.excludeFromExport && (y.clipPath = this._toObject(this.clipPath, p, v)), l(y, this.__serializeBgOverlay(p, v)), e.util.populateWithProperties(this, y, v), y;
        },
        /**
         * @private
         */
        _toObjects: function(p, v) {
          return this._objects.filter(function(b) {
            return !b.excludeFromExport;
          }).map(function(b) {
            return this._toObject(b, p, v);
          }, this);
        },
        /**
         * @private
         */
        _toObject: function(p, v, b) {
          var y;
          this.includeDefaultValues || (y = p.includeDefaultValues, p.includeDefaultValues = !1);
          var w = p[v](b);
          return this.includeDefaultValues || (p.includeDefaultValues = y), w;
        },
        /**
         * @private
         */
        __serializeBgOverlay: function(p, v) {
          var b = {}, y = this.backgroundImage, w = this.overlayImage, C = this.backgroundColor, _ = this.overlayColor;
          return C && C.toObject ? C.excludeFromExport || (b.background = C.toObject(v)) : C && (b.background = C), _ && _.toObject ? _.excludeFromExport || (b.overlay = _.toObject(v)) : _ && (b.overlay = _), y && !y.excludeFromExport && (b.backgroundImage = this._toObject(y, p, v)), w && !w.excludeFromExport && (b.overlayImage = this._toObject(w, p, v)), b;
        },
        /* _TO_SVG_START_ */
        /**
         * When true, getSvgTransform() will apply the StaticCanvas.viewportTransform to the SVG transformation. When true,
         * a zoomed canvas will then produce zoomed SVG output.
         * @type Boolean
         * @default
         */
        svgViewportTransformation: !0,
        /**
         * Returns SVG representation of canvas
         * @function
         * @param {Object} [options] Options object for SVG output
         * @param {Boolean} [options.suppressPreamble=false] If true xml tag is not included
         * @param {Object} [options.viewBox] SVG viewbox object
         * @param {Number} [options.viewBox.x] x-coordinate of viewbox
         * @param {Number} [options.viewBox.y] y-coordinate of viewbox
         * @param {Number} [options.viewBox.width] Width of viewbox
         * @param {Number} [options.viewBox.height] Height of viewbox
         * @param {String} [options.encoding=UTF-8] Encoding of SVG output
         * @param {String} [options.width] desired width of svg with or without units
         * @param {String} [options.height] desired height of svg with or without units
         * @param {Function} [reviver] Method for further parsing of svg elements, called after each fabric object converted into svg representation.
         * @return {String} SVG string
         * @tutorial {@link http://fabricjs.com/fabric-intro-part-3#serialization}
         * @see {@link http://jsfiddle.net/fabricjs/jQ3ZZ/|jsFiddle demo}
         * @example <caption>Normal SVG output</caption>
         * var svg = canvas.toSVG();
         * @example <caption>SVG output without preamble (without &lt;?xml ../>)</caption>
         * var svg = canvas.toSVG({suppressPreamble: true});
         * @example <caption>SVG output with viewBox attribute</caption>
         * var svg = canvas.toSVG({
         *   viewBox: {
         *     x: 100,
         *     y: 100,
         *     width: 200,
         *     height: 300
         *   }
         * });
         * @example <caption>SVG output with different encoding (default: UTF-8)</caption>
         * var svg = canvas.toSVG({encoding: 'ISO-8859-1'});
         * @example <caption>Modify SVG output with reviver function</caption>
         * var svg = canvas.toSVG(null, function(svg) {
         *   return svg.replace('stroke-dasharray: ; stroke-linecap: butt; stroke-linejoin: miter; stroke-miterlimit: 10; ', '');
         * });
         */
        toSVG: function(p, v) {
          p || (p = {}), p.reviver = v;
          var b = [];
          return this._setSVGPreamble(b, p), this._setSVGHeader(b, p), this.clipPath && b.push('<g clip-path="url(#' + this.clipPath.clipPathId + `)" >
`), this._setSVGBgOverlayColor(b, "background"), this._setSVGBgOverlayImage(b, "backgroundImage", v), this._setSVGObjects(b, v), this.clipPath && b.push(`</g>
`), this._setSVGBgOverlayColor(b, "overlay"), this._setSVGBgOverlayImage(b, "overlayImage", v), b.push("</svg>"), b.join("");
        },
        /**
         * @private
         */
        _setSVGPreamble: function(p, v) {
          v.suppressPreamble || p.push(
            '<?xml version="1.0" encoding="',
            v.encoding || "UTF-8",
            `" standalone="no" ?>
`,
            '<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" ',
            `"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
`
          );
        },
        /**
         * @private
         */
        _setSVGHeader: function(p, v) {
          var b = v.width || this.width, y = v.height || this.height, w, C = 'viewBox="0 0 ' + this.width + " " + this.height + '" ', _ = e.Object.NUM_FRACTION_DIGITS;
          v.viewBox ? C = 'viewBox="' + v.viewBox.x + " " + v.viewBox.y + " " + v.viewBox.width + " " + v.viewBox.height + '" ' : this.svgViewportTransformation && (w = this.viewportTransform, C = 'viewBox="' + h(-w[4] / w[0], _) + " " + h(-w[5] / w[3], _) + " " + h(this.width / w[0], _) + " " + h(this.height / w[3], _) + '" '), p.push(
            "<svg ",
            'xmlns="http://www.w3.org/2000/svg" ',
            'xmlns:xlink="http://www.w3.org/1999/xlink" ',
            'version="1.1" ',
            'width="',
            b,
            '" ',
            'height="',
            y,
            '" ',
            C,
            `xml:space="preserve">
`,
            "<desc>Created with Fabric.js ",
            e.version,
            `</desc>
`,
            `<defs>
`,
            this.createSVGFontFacesMarkup(),
            this.createSVGRefElementsMarkup(),
            this.createSVGClipPathMarkup(v),
            `</defs>
`
          );
        },
        createSVGClipPathMarkup: function(p) {
          var v = this.clipPath;
          return v ? (v.clipPathId = "CLIPPATH_" + e.Object.__uid++, '<clipPath id="' + v.clipPathId + `" >
` + this.clipPath.toClipPathSVG(p.reviver) + `</clipPath>
`) : "";
        },
        /**
         * Creates markup containing SVG referenced elements like patterns, gradients etc.
         * @return {String}
         */
        createSVGRefElementsMarkup: function() {
          var p = this, v = ["background", "overlay"].map(function(b) {
            var y = p[b + "Color"];
            if (y && y.toLive) {
              var w = p[b + "Vpt"], C = p.viewportTransform, _ = {
                width: p.width / (w ? C[0] : 1),
                height: p.height / (w ? C[3] : 1)
              };
              return y.toSVG(
                _,
                { additionalTransform: w ? e.util.matrixToSVG(C) : "" }
              );
            }
          });
          return v.join("");
        },
        /**
         * Creates markup containing SVG font faces,
         * font URLs for font faces must be collected by developers
         * and are not extracted from the DOM by fabricjs
         * @param {Array} objects Array of fabric objects
         * @return {String}
         */
        createSVGFontFacesMarkup: function() {
          var p = "", v = {}, b, y, w, C, _, S, k, I, L, j = e.fontPaths, G = [];
          for (this._objects.forEach(function W(q) {
            G.push(q), q._objects && q._objects.forEach(W);
          }), I = 0, L = G.length; I < L; I++)
            if (b = G[I], y = b.fontFamily, !(b.type.indexOf("text") === -1 || v[y] || !j[y]) && (v[y] = !0, !!b.styles)) {
              w = b.styles;
              for (_ in w) {
                C = w[_];
                for (k in C)
                  S = C[k], y = S.fontFamily, !v[y] && j[y] && (v[y] = !0);
              }
            }
          for (var te in v)
            p += [
              `		@font-face {
`,
              "			font-family: '",
              te,
              `';
`,
              "			src: url('",
              j[te],
              `');
`,
              `		}
`
            ].join("");
          return p && (p = [
            '	<style type="text/css">',
            `<![CDATA[
`,
            p,
            "]]>",
            `</style>
`
          ].join("")), p;
        },
        /**
         * @private
         */
        _setSVGObjects: function(p, v) {
          var b, y, w, C = this._objects;
          for (y = 0, w = C.length; y < w; y++)
            b = C[y], !b.excludeFromExport && this._setSVGObject(p, b, v);
        },
        /**
         * @private
         */
        _setSVGObject: function(p, v, b) {
          p.push(v.toSVG(b));
        },
        /**
         * @private
         */
        _setSVGBgOverlayImage: function(p, v, b) {
          this[v] && !this[v].excludeFromExport && this[v].toSVG && p.push(this[v].toSVG(b));
        },
        /**
         * @private
         */
        _setSVGBgOverlayColor: function(p, v) {
          var b = this[v + "Color"], y = this.viewportTransform, w = this.width, C = this.height;
          if (b)
            if (b.toLive) {
              var _ = b.repeat, S = e.util.invertTransform(y), k = this[v + "Vpt"], I = k ? e.util.matrixToSVG(S) : "";
              p.push(
                '<rect transform="' + I + " translate(",
                w / 2,
                ",",
                C / 2,
                ')"',
                ' x="',
                b.offsetX - w / 2,
                '" y="',
                b.offsetY - C / 2,
                '" ',
                'width="',
                _ === "repeat-y" || _ === "no-repeat" ? b.source.width : w,
                '" height="',
                _ === "repeat-x" || _ === "no-repeat" ? b.source.height : C,
                '" fill="url(#SVGID_' + b.id + ')"',
                `></rect>
`
              );
            } else
              p.push(
                '<rect x="0" y="0" width="100%" height="100%" ',
                'fill="',
                b,
                '"',
                `></rect>
`
              );
        },
        /* _TO_SVG_END_ */
        /**
         * Moves an object or the objects of a multiple selection
         * to the bottom of the stack of drawn objects
         * @param {fabric.Object} object Object to send to back
         * @return {fabric.Canvas} thisArg
         * @chainable
         */
        sendToBack: function(p) {
          if (!p)
            return this;
          var v = this._activeObject, b, y, w;
          if (p === v && p.type === "activeSelection")
            for (w = v._objects, b = w.length; b--; )
              y = w[b], a(this._objects, y), this._objects.unshift(y);
          else
            a(this._objects, p), this._objects.unshift(p);
          return this.renderOnAddRemove && this.requestRenderAll(), this;
        },
        /**
         * Moves an object or the objects of a multiple selection
         * to the top of the stack of drawn objects
         * @param {fabric.Object} object Object to send
         * @return {fabric.Canvas} thisArg
         * @chainable
         */
        bringToFront: function(p) {
          if (!p)
            return this;
          var v = this._activeObject, b, y, w;
          if (p === v && p.type === "activeSelection")
            for (w = v._objects, b = 0; b < w.length; b++)
              y = w[b], a(this._objects, y), this._objects.push(y);
          else
            a(this._objects, p), this._objects.push(p);
          return this.renderOnAddRemove && this.requestRenderAll(), this;
        },
        /**
         * Moves an object or a selection down in stack of drawn objects
         * An optional parameter, intersecting allows to move the object in behind
         * the first intersecting object. Where intersection is calculated with
         * bounding box. If no intersection is found, there will not be change in the
         * stack.
         * @param {fabric.Object} object Object to send
         * @param {Boolean} [intersecting] If `true`, send object behind next lower intersecting object
         * @return {fabric.Canvas} thisArg
         * @chainable
         */
        sendBackwards: function(p, v) {
          if (!p)
            return this;
          var b = this._activeObject, y, w, C, _, S, k = 0;
          if (p === b && p.type === "activeSelection")
            for (S = b._objects, y = 0; y < S.length; y++)
              w = S[y], C = this._objects.indexOf(w), C > 0 + k && (_ = C - 1, a(this._objects, w), this._objects.splice(_, 0, w)), k++;
          else
            C = this._objects.indexOf(p), C !== 0 && (_ = this._findNewLowerIndex(p, C, v), a(this._objects, p), this._objects.splice(_, 0, p));
          return this.renderOnAddRemove && this.requestRenderAll(), this;
        },
        /**
         * @private
         */
        _findNewLowerIndex: function(p, v, b) {
          var y, w;
          if (b)
            for (y = v, w = v - 1; w >= 0; --w) {
              var C = p.intersectsWithObject(this._objects[w]) || p.isContainedWithinObject(this._objects[w]) || this._objects[w].isContainedWithinObject(p);
              if (C) {
                y = w;
                break;
              }
            }
          else
            y = v - 1;
          return y;
        },
        /**
         * Moves an object or a selection up in stack of drawn objects
         * An optional parameter, intersecting allows to move the object in front
         * of the first intersecting object. Where intersection is calculated with
         * bounding box. If no intersection is found, there will not be change in the
         * stack.
         * @param {fabric.Object} object Object to send
         * @param {Boolean} [intersecting] If `true`, send object in front of next upper intersecting object
         * @return {fabric.Canvas} thisArg
         * @chainable
         */
        bringForward: function(p, v) {
          if (!p)
            return this;
          var b = this._activeObject, y, w, C, _, S, k = 0;
          if (p === b && p.type === "activeSelection")
            for (S = b._objects, y = S.length; y--; )
              w = S[y], C = this._objects.indexOf(w), C < this._objects.length - 1 - k && (_ = C + 1, a(this._objects, w), this._objects.splice(_, 0, w)), k++;
          else
            C = this._objects.indexOf(p), C !== this._objects.length - 1 && (_ = this._findNewUpperIndex(p, C, v), a(this._objects, p), this._objects.splice(_, 0, p));
          return this.renderOnAddRemove && this.requestRenderAll(), this;
        },
        /**
         * @private
         */
        _findNewUpperIndex: function(p, v, b) {
          var y, w, C;
          if (b)
            for (y = v, w = v + 1, C = this._objects.length; w < C; ++w) {
              var _ = p.intersectsWithObject(this._objects[w]) || p.isContainedWithinObject(this._objects[w]) || this._objects[w].isContainedWithinObject(p);
              if (_) {
                y = w;
                break;
              }
            }
          else
            y = v + 1;
          return y;
        },
        /**
         * Moves an object to specified level in stack of drawn objects
         * @param {fabric.Object} object Object to send
         * @param {Number} index Position to move to
         * @return {fabric.Canvas} thisArg
         * @chainable
         */
        moveTo: function(p, v) {
          return a(this._objects, p), this._objects.splice(v, 0, p), this.renderOnAddRemove && this.requestRenderAll();
        },
        /**
         * Clears a canvas element and dispose objects
         * @return {fabric.Canvas} thisArg
         * @chainable
         */
        dispose: function() {
          return this.isRendering && (e.util.cancelAnimFrame(this.isRendering), this.isRendering = 0), this.forEachObject(function(p) {
            p.dispose && p.dispose();
          }), this._objects = [], this.backgroundImage && this.backgroundImage.dispose && this.backgroundImage.dispose(), this.backgroundImage = null, this.overlayImage && this.overlayImage.dispose && this.overlayImage.dispose(), this.overlayImage = null, this._iTextInstances = null, this.contextContainer = null, this.lowerCanvasEl.classList.remove("lower-canvas"), e.util.setStyle(this.lowerCanvasEl, this._originalCanvasStyle), delete this._originalCanvasStyle, this.lowerCanvasEl.setAttribute("width", this.width), this.lowerCanvasEl.setAttribute("height", this.height), e.util.cleanUpJsdomNode(this.lowerCanvasEl), this.lowerCanvasEl = void 0, this;
        },
        /**
         * Returns a string representation of an instance
         * @return {String} string representation of an instance
         */
        toString: function() {
          return "#<fabric.Canvas (" + this.complexity() + "): { objects: " + this._objects.length + " }>";
        }
      }
    ), l(e.StaticCanvas.prototype, e.Observable), l(e.StaticCanvas.prototype, e.Collection), l(e.StaticCanvas.prototype, e.DataURLExporter), l(
      e.StaticCanvas,
      /** @lends fabric.StaticCanvas */
      {
        /**
         * @static
         * @type String
         * @default
         */
        EMPTY_JSON: '{"objects": [], "background": "white"}',
        /**
         * Provides a way to check support of some of the canvas methods
         * (either those of HTMLCanvasElement itself, or rendering context)
         *
         * @param {String} methodName Method to check support for;
         *                            Could be one of "setLineDash"
         * @return {Boolean | null} `true` if method is supported (or at least exists),
         *                          `null` if canvas element or context can not be initialized
         */
        supports: function(p) {
          var v = d();
          if (!v || !v.getContext)
            return null;
          var b = v.getContext("2d");
          if (!b)
            return null;
          switch (p) {
            case "setLineDash":
              return typeof b.setLineDash < "u";
            default:
              return null;
          }
        }
      }
    ), e.StaticCanvas.prototype.toJSON = e.StaticCanvas.prototype.toObject, e.isLikelyNode && (e.StaticCanvas.prototype.createPNGStream = function() {
      var p = c(this.lowerCanvasEl);
      return p && p.createPNGStream();
    }, e.StaticCanvas.prototype.createJPEGStream = function(p) {
      var v = c(this.lowerCanvasEl);
      return v && v.createJPEGStream(p);
    });
  }(), e.BaseBrush = e.util.createClass(
    /** @lends fabric.BaseBrush.prototype */
    {
      /**
       * Color of a brush
       * @type String
       * @default
       */
      color: "rgb(0, 0, 0)",
      /**
       * Width of a brush, has to be a Number, no string literals
       * @type Number
       * @default
       */
      width: 1,
      /**
       * Shadow object representing shadow of this shape.
       * <b>Backwards incompatibility note:</b> This property replaces "shadowColor" (String), "shadowOffsetX" (Number),
       * "shadowOffsetY" (Number) and "shadowBlur" (Number) since v1.2.12
       * @type fabric.Shadow
       * @default
       */
      shadow: null,
      /**
       * Line endings style of a brush (one of "butt", "round", "square")
       * @type String
       * @default
       */
      strokeLineCap: "round",
      /**
       * Corner style of a brush (one of "bevel", "round", "miter")
       * @type String
       * @default
       */
      strokeLineJoin: "round",
      /**
       * Maximum miter length (used for strokeLineJoin = "miter") of a brush's
       * @type Number
       * @default
       */
      strokeMiterLimit: 10,
      /**
       * Stroke Dash Array.
       * @type Array
       * @default
       */
      strokeDashArray: null,
      /**
       * When `true`, the free drawing is limited to the whiteboard size. Default to false.
       * @type Boolean
       * @default false
      */
      limitedToCanvasSize: !1,
      /**
       * Sets brush styles
       * @private
       * @param {CanvasRenderingContext2D} ctx
       */
      _setBrushStyles: function(l) {
        l.strokeStyle = this.color, l.lineWidth = this.width, l.lineCap = this.strokeLineCap, l.miterLimit = this.strokeMiterLimit, l.lineJoin = this.strokeLineJoin, l.setLineDash(this.strokeDashArray || []);
      },
      /**
       * Sets the transformation on given context
       * @param {RenderingContext2d} ctx context to render on
       * @private
       */
      _saveAndTransform: function(l) {
        var s = this.canvas.viewportTransform;
        l.save(), l.transform(s[0], s[1], s[2], s[3], s[4], s[5]);
      },
      /**
       * Sets brush shadow styles
       * @private
       */
      _setShadow: function() {
        if (this.shadow) {
          var l = this.canvas, s = this.shadow, a = l.contextTop, h = l.getZoom();
          l && l._isRetinaScaling() && (h *= e.devicePixelRatio), a.shadowColor = s.color, a.shadowBlur = s.blur * h, a.shadowOffsetX = s.offsetX * h, a.shadowOffsetY = s.offsetY * h;
        }
      },
      needsFullRender: function() {
        var l = new e.Color(this.color);
        return l.getAlpha() < 1 || !!this.shadow;
      },
      /**
       * Removes brush shadow styles
       * @private
       */
      _resetShadow: function() {
        var l = this.canvas.contextTop;
        l.shadowColor = "", l.shadowBlur = l.shadowOffsetX = l.shadowOffsetY = 0;
      },
      /**
       * Check is pointer is outside canvas boundaries
       * @param {Object} pointer
       * @private
      */
      _isOutSideCanvas: function(l) {
        return l.x < 0 || l.x > this.canvas.getWidth() || l.y < 0 || l.y > this.canvas.getHeight();
      }
    }
  ), function() {
    e.PencilBrush = e.util.createClass(
      e.BaseBrush,
      /** @lends fabric.PencilBrush.prototype */
      {
        /**
         * Discard points that are less than `decimate` pixel distant from each other
         * @type Number
         * @default 0.4
         */
        decimate: 0.4,
        /**
         * Draws a straight line between last recorded point to current pointer
         * Used for `shift` functionality
         *
         * @type boolean
         * @default false
         */
        drawStraightLine: !1,
        /**
         * The event modifier key that makes the brush draw a straight line.
         * If `null` or 'none' or any other string that is not a modifier key the feature is disabled.
         * @type {'altKey' | 'shiftKey' | 'ctrlKey' | 'none' | undefined | null}
         */
        straightLineKey: "shiftKey",
        /**
         * Constructor
         * @param {fabric.Canvas} canvas
         * @return {fabric.PencilBrush} Instance of a pencil brush
         */
        initialize: function(l) {
          this.canvas = l, this._points = [];
        },
        needsFullRender: function() {
          return this.callSuper("needsFullRender") || this._hasStraightLine;
        },
        /**
         * Invoked inside on mouse down and mouse move
         * @param {Object} pointer
         */
        _drawSegment: function(l, s, a) {
          var h = s.midPointFrom(a);
          return l.quadraticCurveTo(s.x, s.y, h.x, h.y), h;
        },
        /**
         * Invoked on mouse down
         * @param {Object} pointer
         */
        onMouseDown: function(l, s) {
          this.canvas._isMainEvent(s.e) && (this.drawStraightLine = s.e[this.straightLineKey], this._prepareForDrawing(l), this._captureDrawingPath(l), this._render());
        },
        /**
         * Invoked on mouse move
         * @param {Object} pointer
         */
        onMouseMove: function(l, s) {
          if (this.canvas._isMainEvent(s.e) && (this.drawStraightLine = s.e[this.straightLineKey], !(this.limitedToCanvasSize === !0 && this._isOutSideCanvas(l)) && this._captureDrawingPath(l) && this._points.length > 1))
            if (this.needsFullRender())
              this.canvas.clearContext(this.canvas.contextTop), this._render();
            else {
              var a = this._points, h = a.length, o = this.canvas.contextTop;
              this._saveAndTransform(o), this.oldEnd && (o.beginPath(), o.moveTo(this.oldEnd.x, this.oldEnd.y)), this.oldEnd = this._drawSegment(o, a[h - 2], a[h - 1], !0), o.stroke(), o.restore();
            }
        },
        /**
         * Invoked on mouse up
         */
        onMouseUp: function(l) {
          return this.canvas._isMainEvent(l.e) ? (this.drawStraightLine = !1, this.oldEnd = void 0, this._finalizeAndAddPath(), !1) : !0;
        },
        /**
         * @private
         * @param {Object} pointer Actual mouse position related to the canvas.
         */
        _prepareForDrawing: function(l) {
          var s = new e.Point(l.x, l.y);
          this._reset(), this._addPoint(s), this.canvas.contextTop.moveTo(s.x, s.y);
        },
        /**
         * @private
         * @param {fabric.Point} point Point to be added to points array
         */
        _addPoint: function(l) {
          return this._points.length > 1 && l.eq(this._points[this._points.length - 1]) ? !1 : (this.drawStraightLine && this._points.length > 1 && (this._hasStraightLine = !0, this._points.pop()), this._points.push(l), !0);
        },
        /**
         * Clear points array and set contextTop canvas style.
         * @private
         */
        _reset: function() {
          this._points = [], this._setBrushStyles(this.canvas.contextTop), this._setShadow(), this._hasStraightLine = !1;
        },
        /**
         * @private
         * @param {Object} pointer Actual mouse position related to the canvas.
         */
        _captureDrawingPath: function(l) {
          var s = new e.Point(l.x, l.y);
          return this._addPoint(s);
        },
        /**
         * Draw a smooth path on the topCanvas using quadraticCurveTo
         * @private
         * @param {CanvasRenderingContext2D} [ctx]
         */
        _render: function(l) {
          var s, a, h = this._points[0], o = this._points[1];
          if (l = l || this.canvas.contextTop, this._saveAndTransform(l), l.beginPath(), this._points.length === 2 && h.x === o.x && h.y === o.y) {
            var u = this.width / 1e3;
            h = new e.Point(h.x, h.y), o = new e.Point(o.x, o.y), h.x -= u, o.x += u;
          }
          for (l.moveTo(h.x, h.y), s = 1, a = this._points.length; s < a; s++)
            this._drawSegment(l, h, o), h = this._points[s], o = this._points[s + 1];
          l.lineTo(h.x, h.y), l.stroke(), l.restore();
        },
        /**
         * Converts points to SVG path
         * @param {Array} points Array of points
         * @return {(string|number)[][]} SVG path commands
         */
        convertPointsToSVGPath: function(l) {
          var s = this.width / 1e3;
          return e.util.getSmoothPathFromPoints(l, s);
        },
        /**
         * @private
         * @param {(string|number)[][]} pathData SVG path commands
         * @returns {boolean}
         */
        _isEmptySVGPath: function(l) {
          var s = e.util.joinPath(l);
          return s === "M 0 0 Q 0 0 0 0 L 0 0";
        },
        /**
         * Creates fabric.Path object to add on canvas
         * @param {(string|number)[][]} pathData Path data
         * @return {fabric.Path} Path to add on canvas
         */
        createPath: function(l) {
          var s = new e.Path(l, {
            fill: null,
            stroke: this.color,
            strokeWidth: this.width,
            strokeLineCap: this.strokeLineCap,
            strokeMiterLimit: this.strokeMiterLimit,
            strokeLineJoin: this.strokeLineJoin,
            strokeDashArray: this.strokeDashArray
          });
          return this.shadow && (this.shadow.affectStroke = !0, s.shadow = new e.Shadow(this.shadow)), s;
        },
        /**
         * Decimate points array with the decimate value
         */
        decimatePoints: function(l, s) {
          if (l.length <= 2)
            return l;
          var a = this.canvas.getZoom(), h = Math.pow(s / a, 2), o, u = l.length - 1, c = l[0], d = [c], m;
          for (o = 1; o < u - 1; o++)
            m = Math.pow(c.x - l[o].x, 2) + Math.pow(c.y - l[o].y, 2), m >= h && (c = l[o], d.push(c));
          return d.push(l[u]), d;
        },
        /**
         * On mouseup after drawing the path on contextTop canvas
         * we use the points captured to create an new fabric path object
         * and add it to the fabric canvas.
         */
        _finalizeAndAddPath: function() {
          var l = this.canvas.contextTop;
          l.closePath(), this.decimate && (this._points = this.decimatePoints(this._points, this.decimate));
          var s = this.convertPointsToSVGPath(this._points);
          if (this._isEmptySVGPath(s)) {
            this.canvas.requestRenderAll();
            return;
          }
          var a = this.createPath(s);
          this.canvas.clearContext(this.canvas.contextTop), this.canvas.fire("before:path:created", { path: a }), this.canvas.add(a), this.canvas.requestRenderAll(), a.setCoords(), this._resetShadow(), this.canvas.fire("path:created", { path: a });
        }
      }
    );
  }(), e.CircleBrush = e.util.createClass(
    e.BaseBrush,
    /** @lends fabric.CircleBrush.prototype */
    {
      /**
       * Width of a brush
       * @type Number
       * @default
       */
      width: 10,
      /**
       * Constructor
       * @param {fabric.Canvas} canvas
       * @return {fabric.CircleBrush} Instance of a circle brush
       */
      initialize: function(l) {
        this.canvas = l, this.points = [];
      },
      /**
       * Invoked inside on mouse down and mouse move
       * @param {Object} pointer
       */
      drawDot: function(l) {
        var s = this.addPoint(l), a = this.canvas.contextTop;
        this._saveAndTransform(a), this.dot(a, s), a.restore();
      },
      dot: function(l, s) {
        l.fillStyle = s.fill, l.beginPath(), l.arc(s.x, s.y, s.radius, 0, Math.PI * 2, !1), l.closePath(), l.fill();
      },
      /**
       * Invoked on mouse down
       */
      onMouseDown: function(l) {
        this.points.length = 0, this.canvas.clearContext(this.canvas.contextTop), this._setShadow(), this.drawDot(l);
      },
      /**
       * Render the full state of the brush
       * @private
       */
      _render: function() {
        var l = this.canvas.contextTop, s, a, h = this.points;
        for (this._saveAndTransform(l), s = 0, a = h.length; s < a; s++)
          this.dot(l, h[s]);
        l.restore();
      },
      /**
       * Invoked on mouse move
       * @param {Object} pointer
       */
      onMouseMove: function(l) {
        this.limitedToCanvasSize === !0 && this._isOutSideCanvas(l) || (this.needsFullRender() ? (this.canvas.clearContext(this.canvas.contextTop), this.addPoint(l), this._render()) : this.drawDot(l));
      },
      /**
       * Invoked on mouse up
       */
      onMouseUp: function() {
        var l = this.canvas.renderOnAddRemove, s, a;
        this.canvas.renderOnAddRemove = !1;
        var h = [];
        for (s = 0, a = this.points.length; s < a; s++) {
          var o = this.points[s], u = new e.Circle({
            radius: o.radius,
            left: o.x,
            top: o.y,
            originX: "center",
            originY: "center",
            fill: o.fill
          });
          this.shadow && (u.shadow = new e.Shadow(this.shadow)), h.push(u);
        }
        var c = new e.Group(h);
        c.canvas = this.canvas, this.canvas.fire("before:path:created", { path: c }), this.canvas.add(c), this.canvas.fire("path:created", { path: c }), this.canvas.clearContext(this.canvas.contextTop), this._resetShadow(), this.canvas.renderOnAddRemove = l, this.canvas.requestRenderAll();
      },
      /**
       * @param {Object} pointer
       * @return {fabric.Point} Just added pointer point
       */
      addPoint: function(l) {
        var s = new e.Point(l.x, l.y), a = e.util.getRandomInt(
          Math.max(0, this.width - 20),
          this.width + 20
        ) / 2, h = new e.Color(this.color).setAlpha(e.util.getRandomInt(0, 100) / 100).toRgba();
        return s.radius = a, s.fill = h, this.points.push(s), s;
      }
    }
  ), e.SprayBrush = e.util.createClass(
    e.BaseBrush,
    /** @lends fabric.SprayBrush.prototype */
    {
      /**
       * Width of a spray
       * @type Number
       * @default
       */
      width: 10,
      /**
       * Density of a spray (number of dots per chunk)
       * @type Number
       * @default
       */
      density: 20,
      /**
       * Width of spray dots
       * @type Number
       * @default
       */
      dotWidth: 1,
      /**
       * Width variance of spray dots
       * @type Number
       * @default
       */
      dotWidthVariance: 1,
      /**
       * Whether opacity of a dot should be random
       * @type Boolean
       * @default
       */
      randomOpacity: !1,
      /**
       * Whether overlapping dots (rectangles) should be removed (for performance reasons)
       * @type Boolean
       * @default
       */
      optimizeOverlapping: !0,
      /**
       * Constructor
       * @param {fabric.Canvas} canvas
       * @return {fabric.SprayBrush} Instance of a spray brush
       */
      initialize: function(l) {
        this.canvas = l, this.sprayChunks = [];
      },
      /**
       * Invoked on mouse down
       * @param {Object} pointer
       */
      onMouseDown: function(l) {
        this.sprayChunks.length = 0, this.canvas.clearContext(this.canvas.contextTop), this._setShadow(), this.addSprayChunk(l), this.render(this.sprayChunkPoints);
      },
      /**
       * Invoked on mouse move
       * @param {Object} pointer
       */
      onMouseMove: function(l) {
        this.limitedToCanvasSize === !0 && this._isOutSideCanvas(l) || (this.addSprayChunk(l), this.render(this.sprayChunkPoints));
      },
      /**
       * Invoked on mouse up
       */
      onMouseUp: function() {
        var l = this.canvas.renderOnAddRemove;
        this.canvas.renderOnAddRemove = !1;
        for (var s = [], a = 0, h = this.sprayChunks.length; a < h; a++)
          for (var o = this.sprayChunks[a], u = 0, c = o.length; u < c; u++) {
            var d = new e.Rect({
              width: o[u].width,
              height: o[u].width,
              left: o[u].x + 1,
              top: o[u].y + 1,
              originX: "center",
              originY: "center",
              fill: this.color
            });
            s.push(d);
          }
        this.optimizeOverlapping && (s = this._getOptimizedRects(s));
        var m = new e.Group(s);
        this.shadow && m.set("shadow", new e.Shadow(this.shadow)), this.canvas.fire("before:path:created", { path: m }), this.canvas.add(m), this.canvas.fire("path:created", { path: m }), this.canvas.clearContext(this.canvas.contextTop), this._resetShadow(), this.canvas.renderOnAddRemove = l, this.canvas.requestRenderAll();
      },
      /**
       * @private
       * @param {Array} rects
       */
      _getOptimizedRects: function(l) {
        var s = {}, a, h, o;
        for (h = 0, o = l.length; h < o; h++)
          a = l[h].left + "" + l[h].top, s[a] || (s[a] = l[h]);
        var u = [];
        for (a in s)
          u.push(s[a]);
        return u;
      },
      /**
       * Render new chunk of spray brush
       */
      render: function(l) {
        var s = this.canvas.contextTop, a, h;
        for (s.fillStyle = this.color, this._saveAndTransform(s), a = 0, h = l.length; a < h; a++) {
          var o = l[a];
          typeof o.opacity < "u" && (s.globalAlpha = o.opacity), s.fillRect(o.x, o.y, o.width, o.width);
        }
        s.restore();
      },
      /**
       * Render all spray chunks
       */
      _render: function() {
        var l = this.canvas.contextTop, s, a;
        for (l.fillStyle = this.color, this._saveAndTransform(l), s = 0, a = this.sprayChunks.length; s < a; s++)
          this.render(this.sprayChunks[s]);
        l.restore();
      },
      /**
       * @param {Object} pointer
       */
      addSprayChunk: function(l) {
        this.sprayChunkPoints = [];
        var s, a, h, o = this.width / 2, u;
        for (u = 0; u < this.density; u++) {
          s = e.util.getRandomInt(l.x - o, l.x + o), a = e.util.getRandomInt(l.y - o, l.y + o), this.dotWidthVariance ? h = e.util.getRandomInt(
            // bottom clamp width to 1
            Math.max(1, this.dotWidth - this.dotWidthVariance),
            this.dotWidth + this.dotWidthVariance
          ) : h = this.dotWidth;
          var c = new e.Point(s, a);
          c.width = h, this.randomOpacity && (c.opacity = e.util.getRandomInt(0, 100) / 100), this.sprayChunkPoints.push(c);
        }
        this.sprayChunks.push(this.sprayChunkPoints);
      }
    }
  ), e.PatternBrush = e.util.createClass(
    e.PencilBrush,
    /** @lends fabric.PatternBrush.prototype */
    {
      getPatternSrc: function() {
        var l = 20, s = 5, a = e.util.createCanvasElement(), h = a.getContext("2d");
        return a.width = a.height = l + s, h.fillStyle = this.color, h.beginPath(), h.arc(l / 2, l / 2, l / 2, 0, Math.PI * 2, !1), h.closePath(), h.fill(), a;
      },
      getPatternSrcFunction: function() {
        return String(this.getPatternSrc).replace("this.color", '"' + this.color + '"');
      },
      /**
       * Creates "pattern" instance property
       * @param {CanvasRenderingContext2D} ctx
       */
      getPattern: function(l) {
        return l.createPattern(this.source || this.getPatternSrc(), "repeat");
      },
      /**
       * Sets brush styles
       * @param {CanvasRenderingContext2D} ctx
       */
      _setBrushStyles: function(l) {
        this.callSuper("_setBrushStyles", l), l.strokeStyle = this.getPattern(l);
      },
      /**
       * Creates path
       */
      createPath: function(l) {
        var s = this.callSuper("createPath", l), a = s._getLeftTopCoords().scalarAdd(s.strokeWidth / 2);
        return s.stroke = new e.Pattern({
          source: this.source || this.getPatternSrcFunction(),
          offsetX: -a.x,
          offsetY: -a.y
        }), s;
      }
    }
  ), function() {
    var l = e.util.getPointer, s = e.util.degreesToRadians, a = e.util.isTouchEvent;
    e.Canvas = e.util.createClass(
      e.StaticCanvas,
      /** @lends fabric.Canvas.prototype */
      {
        /**
         * Constructor
         * @param {HTMLElement | String} el &lt;canvas> element to initialize instance on
         * @param {Object} [options] Options object
         * @return {Object} thisArg
         */
        initialize: function(o, u) {
          u || (u = {}), this.renderAndResetBound = this.renderAndReset.bind(this), this.requestRenderAllBound = this.requestRenderAll.bind(this), this._initStatic(o, u), this._initInteractive(), this._createCacheCanvas();
        },
        /**
         * When true, objects can be transformed by one side (unproportionally)
         * when dragged on the corners that normally would not do that.
         * @type Boolean
         * @default
         * @since fabric 4.0 // changed name and default value
         */
        uniformScaling: !0,
        /**
         * Indicates which key switches uniform scaling.
         * values: 'altKey', 'shiftKey', 'ctrlKey'.
         * If `null` or 'none' or any other string that is not a modifier key
         * feature is disabled.
         * totally wrong named. this sounds like `uniform scaling`
         * if Canvas.uniformScaling is true, pressing this will set it to false
         * and viceversa.
         * @since 1.6.2
         * @type String
         * @default
         */
        uniScaleKey: "shiftKey",
        /**
         * When true, objects use center point as the origin of scale transformation.
         * <b>Backwards incompatibility note:</b> This property replaces "centerTransform" (Boolean).
         * @since 1.3.4
         * @type Boolean
         * @default
         */
        centeredScaling: !1,
        /**
         * When true, objects use center point as the origin of rotate transformation.
         * <b>Backwards incompatibility note:</b> This property replaces "centerTransform" (Boolean).
         * @since 1.3.4
         * @type Boolean
         * @default
         */
        centeredRotation: !1,
        /**
         * Indicates which key enable centered Transform
         * values: 'altKey', 'shiftKey', 'ctrlKey'.
         * If `null` or 'none' or any other string that is not a modifier key
         * feature is disabled feature disabled.
         * @since 1.6.2
         * @type String
         * @default
         */
        centeredKey: "altKey",
        /**
         * Indicates which key enable alternate action on corner
         * values: 'altKey', 'shiftKey', 'ctrlKey'.
         * If `null` or 'none' or any other string that is not a modifier key
         * feature is disabled feature disabled.
         * @since 1.6.2
         * @type String
         * @default
         */
        altActionKey: "shiftKey",
        /**
         * Indicates that canvas is interactive. This property should not be changed.
         * @type Boolean
         * @default
         */
        interactive: !0,
        /**
         * Indicates whether group selection should be enabled
         * @type Boolean
         * @default
         */
        selection: !0,
        /**
         * Indicates which key or keys enable multiple click selection
         * Pass value as a string or array of strings
         * values: 'altKey', 'shiftKey', 'ctrlKey'.
         * If `null` or empty or containing any other string that is not a modifier key
         * feature is disabled.
         * @since 1.6.2
         * @type String|Array
         * @default
         */
        selectionKey: "shiftKey",
        /**
         * Indicates which key enable alternative selection
         * in case of target overlapping with active object
         * values: 'altKey', 'shiftKey', 'ctrlKey'.
         * For a series of reason that come from the general expectations on how
         * things should work, this feature works only for preserveObjectStacking true.
         * If `null` or 'none' or any other string that is not a modifier key
         * feature is disabled.
         * @since 1.6.5
         * @type null|String
         * @default
         */
        altSelectionKey: null,
        /**
         * Color of selection
         * @type String
         * @default
         */
        selectionColor: "rgba(100, 100, 255, 0.3)",
        // blue
        /**
         * Default dash array pattern
         * If not empty the selection border is dashed
         * @type Array
         */
        selectionDashArray: [],
        /**
         * Color of the border of selection (usually slightly darker than color of selection itself)
         * @type String
         * @default
         */
        selectionBorderColor: "rgba(255, 255, 255, 0.3)",
        /**
         * Width of a line used in object/group selection
         * @type Number
         * @default
         */
        selectionLineWidth: 1,
        /**
         * Select only shapes that are fully contained in the dragged selection rectangle.
         * @type Boolean
         * @default
         */
        selectionFullyContained: !1,
        /**
         * Default cursor value used when hovering over an object on canvas
         * @type String
         * @default
         */
        hoverCursor: "move",
        /**
         * Default cursor value used when moving an object on canvas
         * @type String
         * @default
         */
        moveCursor: "move",
        /**
         * Default cursor value used for the entire canvas
         * @type String
         * @default
         */
        defaultCursor: "default",
        /**
         * Cursor value used during free drawing
         * @type String
         * @default
         */
        freeDrawingCursor: "crosshair",
        /**
         * Cursor value used for disabled elements ( corners with disabled action )
         * @type String
         * @since 2.0.0
         * @default
         */
        notAllowedCursor: "not-allowed",
        /**
         * Default element class that's given to wrapper (div) element of canvas
         * @type String
         * @default
         */
        containerClass: "canvas-container",
        /**
         * When true, object detection happens on per-pixel basis rather than on per-bounding-box
         * @type Boolean
         * @default
         */
        perPixelTargetFind: !1,
        /**
         * Number of pixels around target pixel to tolerate (consider active) during object detection
         * @type Number
         * @default
         */
        targetFindTolerance: 0,
        /**
         * When true, target detection is skipped. Target detection will return always undefined.
         * click selection won't work anymore, events will fire with no targets.
         * if something is selected before setting it to true, it will be deselected at the first click.
         * area selection will still work. check the `selection` property too.
         * if you deactivate both, you should look into staticCanvas.
         * @type Boolean
         * @default
         */
        skipTargetFind: !1,
        /**
         * When true, mouse events on canvas (mousedown/mousemove/mouseup) result in free drawing.
         * After mousedown, mousemove creates a shape,
         * and then mouseup finalizes it and adds an instance of `fabric.Path` onto canvas.
         * @tutorial {@link http://fabricjs.com/fabric-intro-part-4#free_drawing}
         * @type Boolean
         * @default
         */
        isDrawingMode: !1,
        /**
         * Indicates whether objects should remain in current stack position when selected.
         * When false objects are brought to top and rendered as part of the selection group
         * @type Boolean
         * @default
         */
        preserveObjectStacking: !1,
        /**
         * Indicates the angle that an object will lock to while rotating.
         * @type Number
         * @since 1.6.7
         * @default
         */
        snapAngle: 0,
        /**
         * Indicates the distance from the snapAngle the rotation will lock to the snapAngle.
         * When `null`, the snapThreshold will default to the snapAngle.
         * @type null|Number
         * @since 1.6.7
         * @default
         */
        snapThreshold: null,
        /**
         * Indicates if the right click on canvas can output the context menu or not
         * @type Boolean
         * @since 1.6.5
         * @default
         */
        stopContextMenu: !1,
        /**
         * Indicates if the canvas can fire right click events
         * @type Boolean
         * @since 1.6.5
         * @default
         */
        fireRightClick: !1,
        /**
         * Indicates if the canvas can fire middle click events
         * @type Boolean
         * @since 1.7.8
         * @default
         */
        fireMiddleClick: !1,
        /**
         * Keep track of the subTargets for Mouse Events
         * @type fabric.Object[]
         */
        targets: [],
        /**
         * When the option is enabled, PointerEvent is used instead of MouseEvent.
         * @type Boolean
         * @default
         */
        enablePointerEvents: !1,
        /**
         * Keep track of the hovered target
         * @type fabric.Object
         * @private
         */
        _hoveredTarget: null,
        /**
         * hold the list of nested targets hovered
         * @type fabric.Object[]
         * @private
         */
        _hoveredTargets: [],
        /**
         * @private
         */
        _initInteractive: function() {
          this._currentTransform = null, this._groupSelector = null, this._initWrapperElement(), this._createUpperCanvas(), this._initEventListeners(), this._initRetinaScaling(), this.freeDrawingBrush = e.PencilBrush && new e.PencilBrush(this), this.calcOffset();
        },
        /**
         * Divides objects in two groups, one to render immediately
         * and one to render as activeGroup.
         * @return {Array} objects to render immediately and pushes the other in the activeGroup.
         */
        _chooseObjectsToRender: function() {
          var o = this.getActiveObjects(), u, c, d;
          if (o.length > 0 && !this.preserveObjectStacking) {
            c = [], d = [];
            for (var m = 0, p = this._objects.length; m < p; m++)
              u = this._objects[m], o.indexOf(u) === -1 ? c.push(u) : d.push(u);
            o.length > 1 && (this._activeObject._objects = d), c.push.apply(c, d);
          } else
            c = this._objects;
          return c;
        },
        /**
         * Renders both the top canvas and the secondary container canvas.
         * @return {fabric.Canvas} instance
         * @chainable
         */
        renderAll: function() {
          this.contextTopDirty && !this._groupSelector && !this.isDrawingMode && (this.clearContext(this.contextTop), this.contextTopDirty = !1), this.hasLostContext && (this.renderTopLayer(this.contextTop), this.hasLostContext = !1);
          var o = this.contextContainer;
          return this.renderCanvas(o, this._chooseObjectsToRender()), this;
        },
        renderTopLayer: function(o) {
          o.save(), this.isDrawingMode && this._isCurrentlyDrawing && (this.freeDrawingBrush && this.freeDrawingBrush._render(), this.contextTopDirty = !0), this.selection && this._groupSelector && (this._drawSelection(o), this.contextTopDirty = !0), o.restore();
        },
        /**
         * Method to render only the top canvas.
         * Also used to render the group selection box.
         * @return {fabric.Canvas} thisArg
         * @chainable
         */
        renderTop: function() {
          var o = this.contextTop;
          return this.clearContext(o), this.renderTopLayer(o), this.fire("after:render"), this;
        },
        /**
         * @private
         */
        _normalizePointer: function(o, u) {
          var c = o.calcTransformMatrix(), d = e.util.invertTransform(c), m = this.restorePointerVpt(u);
          return e.util.transformPoint(m, d);
        },
        /**
         * Returns true if object is transparent at a certain location
         * @param {fabric.Object} target Object to check
         * @param {Number} x Left coordinate
         * @param {Number} y Top coordinate
         * @return {Boolean}
         */
        isTargetTransparent: function(o, u, c) {
          if (o.shouldCache() && o._cacheCanvas && o !== this._activeObject) {
            var d = this._normalizePointer(o, { x: u, y: c }), m = Math.max(o.cacheTranslationX + d.x * o.zoomX, 0), p = Math.max(o.cacheTranslationY + d.y * o.zoomY, 0), w = e.util.isTransparent(
              o._cacheContext,
              Math.round(m),
              Math.round(p),
              this.targetFindTolerance
            );
            return w;
          }
          var v = this.contextCache, b = o.selectionBackgroundColor, y = this.viewportTransform;
          o.selectionBackgroundColor = "", this.clearContext(v), v.save(), v.transform(y[0], y[1], y[2], y[3], y[4], y[5]), o.render(v), v.restore(), o.selectionBackgroundColor = b;
          var w = e.util.isTransparent(
            v,
            u,
            c,
            this.targetFindTolerance
          );
          return w;
        },
        /**
         * takes an event and determines if selection key has been pressed
         * @private
         * @param {Event} e Event object
         */
        _isSelectionKeyPressed: function(o) {
          var u = !1;
          return Array.isArray(this.selectionKey) ? u = !!this.selectionKey.find(function(c) {
            return o[c] === !0;
          }) : u = o[this.selectionKey], u;
        },
        /**
         * @private
         * @param {Event} e Event object
         * @param {fabric.Object} target
         */
        _shouldClearSelection: function(o, u) {
          var c = this.getActiveObjects(), d = this._activeObject;
          return !u || u && d && c.length > 1 && c.indexOf(u) === -1 && d !== u && !this._isSelectionKeyPressed(o) || u && !u.evented || u && !u.selectable && d && d !== u;
        },
        /**
         * centeredScaling from object can't override centeredScaling from canvas.
         * this should be fixed, since object setting should take precedence over canvas.
         * also this should be something that will be migrated in the control properties.
         * as ability to define the origin of the transformation that the control provide.
         * @private
         * @param {fabric.Object} target
         * @param {String} action
         * @param {Boolean} altKey
         */
        _shouldCenterTransform: function(o, u, c) {
          if (o) {
            var d;
            return u === "scale" || u === "scaleX" || u === "scaleY" || u === "resizing" ? d = this.centeredScaling || o.centeredScaling : u === "rotate" && (d = this.centeredRotation || o.centeredRotation), d ? !c : c;
          }
        },
        /**
         * should disappear before release 4.0
         * @private
         */
        _getOriginFromCorner: function(o, u) {
          var c = {
            x: o.originX,
            y: o.originY
          };
          return u === "ml" || u === "tl" || u === "bl" ? c.x = "right" : (u === "mr" || u === "tr" || u === "br") && (c.x = "left"), u === "tl" || u === "mt" || u === "tr" ? c.y = "bottom" : (u === "bl" || u === "mb" || u === "br") && (c.y = "top"), c;
        },
        /**
         * @private
         * @param {Boolean} alreadySelected true if target is already selected
         * @param {String} corner a string representing the corner ml, mr, tl ...
         * @param {Event} e Event object
         * @param {fabric.Object} [target] inserted back to help overriding. Unused
         */
        _getActionFromCorner: function(o, u, c, d) {
          if (!u || !o)
            return "drag";
          var m = d.controls[u];
          return m.getActionName(c, m, d);
        },
        /**
         * @private
         * @param {Event} e Event object
         * @param {fabric.Object} target
         */
        _setupCurrentTransform: function(o, u, c) {
          if (u) {
            var d = this.getPointer(o), m = u.__corner, p = u.controls[m], v = c && m ? p.getActionHandler(o, u, p) : e.controlsUtils.dragHandler, b = this._getActionFromCorner(c, m, o, u), y = this._getOriginFromCorner(u, m), w = o[this.centeredKey], C = {
              target: u,
              action: b,
              actionHandler: v,
              corner: m,
              scaleX: u.scaleX,
              scaleY: u.scaleY,
              skewX: u.skewX,
              skewY: u.skewY,
              // used by transation
              offsetX: d.x - u.left,
              offsetY: d.y - u.top,
              originX: y.x,
              originY: y.y,
              ex: d.x,
              ey: d.y,
              lastX: d.x,
              lastY: d.y,
              // unsure they are useful anymore.
              // left: target.left,
              // top: target.top,
              theta: s(u.angle),
              // end of unsure
              width: u.width * u.scaleX,
              shiftKey: o.shiftKey,
              altKey: w,
              original: e.util.saveObjectTransform(u)
            };
            this._shouldCenterTransform(u, b, w) && (C.originX = "center", C.originY = "center"), C.original.originX = y.x, C.original.originY = y.y, this._currentTransform = C, this._beforeTransform(o);
          }
        },
        /**
         * Set the cursor type of the canvas element
         * @param {String} value Cursor type of the canvas element.
         * @see http://www.w3.org/TR/css3-ui/#cursor
         */
        setCursor: function(o) {
          this.upperCanvasEl.style.cursor = o;
        },
        /**
         * @private
         * @param {CanvasRenderingContext2D} ctx to draw the selection on
         */
        _drawSelection: function(o) {
          var u = this._groupSelector, c = new e.Point(u.ex, u.ey), d = e.util.transformPoint(c, this.viewportTransform), m = new e.Point(u.ex + u.left, u.ey + u.top), p = e.util.transformPoint(m, this.viewportTransform), v = Math.min(d.x, p.x), b = Math.min(d.y, p.y), y = Math.max(d.x, p.x), w = Math.max(d.y, p.y), C = this.selectionLineWidth / 2;
          this.selectionColor && (o.fillStyle = this.selectionColor, o.fillRect(v, b, y - v, w - b)), !(!this.selectionLineWidth || !this.selectionBorderColor) && (o.lineWidth = this.selectionLineWidth, o.strokeStyle = this.selectionBorderColor, v += C, b += C, y -= C, w -= C, e.Object.prototype._setLineDash.call(this, o, this.selectionDashArray), o.strokeRect(v, b, y - v, w - b));
        },
        /**
         * Method that determines what object we are clicking on
         * the skipGroup parameter is for internal use, is needed for shift+click action
         * 11/09/2018 TODO: would be cool if findTarget could discern between being a full target
         * or the outside part of the corner.
         * @param {Event} e mouse event
         * @param {Boolean} skipGroup when true, activeGroup is skipped and only objects are traversed through
         * @return {fabric.Object} the target found
         */
        findTarget: function(o, u) {
          if (!this.skipTargetFind) {
            var c = !0, d = this.getPointer(o, c), m = this._activeObject, p = this.getActiveObjects(), v, b, y = a(o), w = p.length > 1 && !u || p.length === 1;
            if (this.targets = [], w && m._findTargetCorner(d, y) || p.length > 1 && !u && m === this._searchPossibleTargets([m], d))
              return m;
            if (p.length === 1 && m === this._searchPossibleTargets([m], d))
              if (this.preserveObjectStacking)
                v = m, b = this.targets, this.targets = [];
              else
                return m;
            var C = this._searchPossibleTargets(this._objects, d);
            return o[this.altSelectionKey] && C && v && C !== v && (C = v, this.targets = b), C;
          }
        },
        /**
         * Checks point is inside the object.
         * @param {Object} [pointer] x,y object of point coordinates we want to check.
         * @param {fabric.Object} obj Object to test against
         * @param {Object} [globalPointer] x,y object of point coordinates relative to canvas used to search per pixel target.
         * @return {Boolean} true if point is contained within an area of given object
         * @private
         */
        _checkTarget: function(o, u, c) {
          if (u && u.visible && u.evented && // http://www.geog.ubc.ca/courses/klink/gis.notes/ncgia/u32.html
          // http://idav.ucdavis.edu/~okreylos/TAship/Spring2000/PointInPolygon.html
          u.containsPoint(o))
            if ((this.perPixelTargetFind || u.perPixelTargetFind) && !u.isEditing) {
              var d = this.isTargetTransparent(u, c.x, c.y);
              if (!d)
                return !0;
            } else
              return !0;
        },
        /**
         * Function used to search inside objects an object that contains pointer in bounding box or that contains pointerOnCanvas when painted
         * @param {Array} [objects] objects array to look into
         * @param {Object} [pointer] x,y object of point coordinates we want to check.
         * @return {fabric.Object} object that contains pointer
         * @private
         */
        _searchPossibleTargets: function(o, u) {
          for (var c, d = o.length, m; d--; ) {
            var p = o[d], v = p.group ? this._normalizePointer(p.group, u) : u;
            if (this._checkTarget(v, p, u)) {
              c = o[d], c.subTargetCheck && c instanceof e.Group && (m = this._searchPossibleTargets(c._objects, u), m && this.targets.push(m));
              break;
            }
          }
          return c;
        },
        /**
         * Returns pointer coordinates without the effect of the viewport
         * @param {Object} pointer with "x" and "y" number values
         * @return {Object} object with "x" and "y" number values
         */
        restorePointerVpt: function(o) {
          return e.util.transformPoint(
            o,
            e.util.invertTransform(this.viewportTransform)
          );
        },
        /**
         * Returns pointer coordinates relative to canvas.
         * Can return coordinates with or without viewportTransform.
         * ignoreZoom false gives back coordinates that represent
         * the point clicked on canvas element.
         * ignoreZoom true gives back coordinates after being processed
         * by the viewportTransform ( sort of coordinates of what is displayed
         * on the canvas where you are clicking.
         * ignoreZoom true = HTMLElement coordinates relative to top,left
         * ignoreZoom false, default = fabric space coordinates, the same used for shape position
         * To interact with your shapes top and left you want to use ignoreZoom true
         * most of the time, while ignoreZoom false will give you coordinates
         * compatible with the object.oCoords system.
         * of the time.
         * @param {Event} e
         * @param {Boolean} ignoreZoom
         * @return {Object} object with "x" and "y" number values
         */
        getPointer: function(o, u) {
          if (this._absolutePointer && !u)
            return this._absolutePointer;
          if (this._pointer && u)
            return this._pointer;
          var c = l(o), d = this.upperCanvasEl, m = d.getBoundingClientRect(), p = m.width || 0, v = m.height || 0, b;
          (!p || !v) && ("top" in m && "bottom" in m && (v = Math.abs(m.top - m.bottom)), "right" in m && "left" in m && (p = Math.abs(m.right - m.left))), this.calcOffset(), c.x = c.x - this._offset.left, c.y = c.y - this._offset.top, u || (c = this.restorePointerVpt(c));
          var y = this.getRetinaScaling();
          return y !== 1 && (c.x /= y, c.y /= y), p === 0 || v === 0 ? b = { width: 1, height: 1 } : b = {
            width: d.width / p,
            height: d.height / v
          }, {
            x: c.x * b.width,
            y: c.y * b.height
          };
        },
        /**
         * @private
         * @throws {CANVAS_INIT_ERROR} If canvas can not be initialized
         */
        _createUpperCanvas: function() {
          var o = this.lowerCanvasEl.className.replace(/\s*lower-canvas\s*/, ""), u = this.lowerCanvasEl, c = this.upperCanvasEl;
          c ? c.className = "" : (c = this._createCanvasElement(), this.upperCanvasEl = c), e.util.addClass(c, "upper-canvas " + o), this.wrapperEl.appendChild(c), this._copyCanvasStyle(u, c), this._applyCanvasStyle(c), this.contextTop = c.getContext("2d");
        },
        /**
         * Returns context of top canvas where interactions are drawn
         * @returns {CanvasRenderingContext2D}
         */
        getTopContext: function() {
          return this.contextTop;
        },
        /**
         * @private
         */
        _createCacheCanvas: function() {
          this.cacheCanvasEl = this._createCanvasElement(), this.cacheCanvasEl.setAttribute("width", this.width), this.cacheCanvasEl.setAttribute("height", this.height), this.contextCache = this.cacheCanvasEl.getContext("2d");
        },
        /**
         * @private
         */
        _initWrapperElement: function() {
          this.wrapperEl = e.util.wrapElement(this.lowerCanvasEl, "div", {
            class: this.containerClass
          }), e.util.setStyle(this.wrapperEl, {
            width: this.width + "px",
            height: this.height + "px",
            position: "relative"
          }), e.util.makeElementUnselectable(this.wrapperEl);
        },
        /**
         * @private
         * @param {HTMLElement} element canvas element to apply styles on
         */
        _applyCanvasStyle: function(o) {
          var u = this.width || o.width, c = this.height || o.height;
          e.util.setStyle(o, {
            position: "absolute",
            width: u + "px",
            height: c + "px",
            left: 0,
            top: 0,
            "touch-action": this.allowTouchScrolling ? "manipulation" : "none",
            "-ms-touch-action": this.allowTouchScrolling ? "manipulation" : "none"
          }), o.width = u, o.height = c, e.util.makeElementUnselectable(o);
        },
        /**
         * Copy the entire inline style from one element (fromEl) to another (toEl)
         * @private
         * @param {Element} fromEl Element style is copied from
         * @param {Element} toEl Element copied style is applied to
         */
        _copyCanvasStyle: function(o, u) {
          u.style.cssText = o.style.cssText;
        },
        /**
         * Returns context of canvas where object selection is drawn
         * @return {CanvasRenderingContext2D}
         */
        getSelectionContext: function() {
          return this.contextTop;
        },
        /**
         * Returns &lt;canvas> element on which object selection is drawn
         * @return {HTMLCanvasElement}
         */
        getSelectionElement: function() {
          return this.upperCanvasEl;
        },
        /**
         * Returns currently active object
         * @return {fabric.Object} active object
         */
        getActiveObject: function() {
          return this._activeObject;
        },
        /**
         * Returns an array with the current selected objects
         * @return {fabric.Object} active object
         */
        getActiveObjects: function() {
          var o = this._activeObject;
          return o ? o.type === "activeSelection" && o._objects ? o._objects.slice(0) : [o] : [];
        },
        /**
         * @private
         * @param {fabric.Object} obj Object that was removed
         */
        _onObjectRemoved: function(o) {
          o === this._activeObject && (this.fire("before:selection:cleared", { target: o }), this._discardActiveObject(), this.fire("selection:cleared", { target: o }), o.fire("deselected")), o === this._hoveredTarget && (this._hoveredTarget = null, this._hoveredTargets = []), this.callSuper("_onObjectRemoved", o);
        },
        /**
         * @private
         * Compares the old activeObject with the current one and fires correct events
         * @param {fabric.Object} obj old activeObject
         */
        _fireSelectionEvents: function(o, u) {
          var c = !1, d = this.getActiveObjects(), m = [], p = [];
          o.forEach(function(v) {
            d.indexOf(v) === -1 && (c = !0, v.fire("deselected", {
              e: u,
              target: v
            }), p.push(v));
          }), d.forEach(function(v) {
            o.indexOf(v) === -1 && (c = !0, v.fire("selected", {
              e: u,
              target: v
            }), m.push(v));
          }), o.length > 0 && d.length > 0 ? c && this.fire("selection:updated", {
            e: u,
            selected: m,
            deselected: p
          }) : d.length > 0 ? this.fire("selection:created", {
            e: u,
            selected: m
          }) : o.length > 0 && this.fire("selection:cleared", {
            e: u,
            deselected: p
          });
        },
        /**
         * Sets given object as the only active object on canvas
         * @param {fabric.Object} object Object to set as an active one
         * @param {Event} [e] Event (passed along when firing "object:selected")
         * @return {fabric.Canvas} thisArg
         * @chainable
         */
        setActiveObject: function(o, u) {
          var c = this.getActiveObjects();
          return this._setActiveObject(o, u), this._fireSelectionEvents(c, u), this;
        },
        /**
         * This is a private method for now.
         * This is supposed to be equivalent to setActiveObject but without firing
         * any event. There is commitment to have this stay this way.
         * This is the functional part of setActiveObject.
         * @private
         * @param {Object} object to set as active
         * @param {Event} [e] Event (passed along when firing "object:selected")
         * @return {Boolean} true if the selection happened
         */
        _setActiveObject: function(o, u) {
          return this._activeObject === o || !this._discardActiveObject(u, o) || o.onSelect({ e: u }) ? !1 : (this._activeObject = o, !0);
        },
        /**
         * This is a private method for now.
         * This is supposed to be equivalent to discardActiveObject but without firing
         * any events. There is commitment to have this stay this way.
         * This is the functional part of discardActiveObject.
         * @param {Event} [e] Event (passed along when firing "object:deselected")
         * @param {Object} object to set as active
         * @return {Boolean} true if the selection happened
         * @private
         */
        _discardActiveObject: function(o, u) {
          var c = this._activeObject;
          if (c) {
            if (c.onDeselect({ e: o, object: u }))
              return !1;
            this._activeObject = null;
          }
          return !0;
        },
        /**
         * Discards currently active object and fire events. If the function is called by fabric
         * as a consequence of a mouse event, the event is passed as a parameter and
         * sent to the fire function for the custom events. When used as a method the
         * e param does not have any application.
         * @param {event} e
         * @return {fabric.Canvas} thisArg
         * @chainable
         */
        discardActiveObject: function(o) {
          var u = this.getActiveObjects(), c = this.getActiveObject();
          return u.length && this.fire("before:selection:cleared", { target: c, e: o }), this._discardActiveObject(o), this._fireSelectionEvents(u, o), this;
        },
        /**
         * Clears a canvas element and removes all event listeners
         * @return {fabric.Canvas} thisArg
         * @chainable
         */
        dispose: function() {
          var o = this.wrapperEl;
          return this.removeListeners(), o.removeChild(this.upperCanvasEl), o.removeChild(this.lowerCanvasEl), this.contextCache = null, this.contextTop = null, ["upperCanvasEl", "cacheCanvasEl"].forEach((function(u) {
            e.util.cleanUpJsdomNode(this[u]), this[u] = void 0;
          }).bind(this)), o.parentNode && o.parentNode.replaceChild(this.lowerCanvasEl, this.wrapperEl), delete this.wrapperEl, e.StaticCanvas.prototype.dispose.call(this), this;
        },
        /**
         * Clears all contexts (background, main, top) of an instance
         * @return {fabric.Canvas} thisArg
         * @chainable
         */
        clear: function() {
          return this.discardActiveObject(), this.clearContext(this.contextTop), this.callSuper("clear");
        },
        /**
         * Draws objects' controls (borders/controls)
         * @param {CanvasRenderingContext2D} ctx Context to render controls on
         */
        drawControls: function(o) {
          var u = this._activeObject;
          u && u._renderControls(o);
        },
        /**
         * @private
         */
        _toObject: function(o, u, c) {
          var d = this._realizeGroupTransformOnObject(o), m = this.callSuper("_toObject", o, u, c);
          return this._unwindGroupTransformOnObject(o, d), m;
        },
        /**
         * Realises an object's group transformation on it
         * @private
         * @param {fabric.Object} [instance] the object to transform (gets mutated)
         * @returns the original values of instance which were changed
         */
        _realizeGroupTransformOnObject: function(o) {
          if (o.group && o.group.type === "activeSelection" && this._activeObject === o.group) {
            var u = ["angle", "flipX", "flipY", "left", "scaleX", "scaleY", "skewX", "skewY", "top"], c = {};
            return u.forEach(function(d) {
              c[d] = o[d];
            }), e.util.addTransformToObject(o, this._activeObject.calcOwnMatrix()), c;
          } else
            return null;
        },
        /**
         * Restores the changed properties of instance
         * @private
         * @param {fabric.Object} [instance] the object to un-transform (gets mutated)
         * @param {Object} [originalValues] the original values of instance, as returned by _realizeGroupTransformOnObject
         */
        _unwindGroupTransformOnObject: function(o, u) {
          u && o.set(u);
        },
        /**
         * @private
         */
        _setSVGObject: function(o, u, c) {
          var d = this._realizeGroupTransformOnObject(u);
          this.callSuper("_setSVGObject", o, u, c), this._unwindGroupTransformOnObject(u, d);
        },
        setViewportTransform: function(o) {
          this.renderOnAddRemove && this._activeObject && this._activeObject.isEditing && this._activeObject.clearContextTop(), e.StaticCanvas.prototype.setViewportTransform.call(this, o);
        }
      }
    );
    for (var h in e.StaticCanvas)
      h !== "prototype" && (e.Canvas[h] = e.StaticCanvas[h]);
  }(), function() {
    var l = e.util.addListener, s = e.util.removeListener, a = 3, h = 2, o = 1, u = { passive: !1 };
    function c(d, m) {
      return d.button && d.button === m - 1;
    }
    e.util.object.extend(
      e.Canvas.prototype,
      /** @lends fabric.Canvas.prototype */
      {
        /**
         * Contains the id of the touch event that owns the fabric transform
         * @type Number
         * @private
         */
        mainTouchId: null,
        /**
         * Adds mouse listeners to canvas
         * @private
         */
        _initEventListeners: function() {
          this.removeListeners(), this._bindEvents(), this.addOrRemove(l, "add");
        },
        /**
         * return an event prefix pointer or mouse.
         * @private
         */
        _getEventPrefix: function() {
          return this.enablePointerEvents ? "pointer" : "mouse";
        },
        addOrRemove: function(d, m) {
          var p = this.upperCanvasEl, v = this._getEventPrefix();
          d(e.window, "resize", this._onResize), d(p, v + "down", this._onMouseDown), d(p, v + "move", this._onMouseMove, u), d(p, v + "out", this._onMouseOut), d(p, v + "enter", this._onMouseEnter), d(p, "wheel", this._onMouseWheel), d(p, "contextmenu", this._onContextMenu), d(p, "dblclick", this._onDoubleClick), d(p, "dragover", this._onDragOver), d(p, "dragenter", this._onDragEnter), d(p, "dragleave", this._onDragLeave), d(p, "drop", this._onDrop), this.enablePointerEvents || d(p, "touchstart", this._onTouchStart, u), typeof eventjs < "u" && m in eventjs && (eventjs[m](p, "gesture", this._onGesture), eventjs[m](p, "drag", this._onDrag), eventjs[m](p, "orientation", this._onOrientationChange), eventjs[m](p, "shake", this._onShake), eventjs[m](p, "longpress", this._onLongPress));
        },
        /**
         * Removes all event listeners
         */
        removeListeners: function() {
          this.addOrRemove(s, "remove");
          var d = this._getEventPrefix();
          s(e.document, d + "up", this._onMouseUp), s(e.document, "touchend", this._onTouchEnd, u), s(e.document, d + "move", this._onMouseMove, u), s(e.document, "touchmove", this._onMouseMove, u);
        },
        /**
         * @private
         */
        _bindEvents: function() {
          this.eventsBound || (this._onMouseDown = this._onMouseDown.bind(this), this._onTouchStart = this._onTouchStart.bind(this), this._onMouseMove = this._onMouseMove.bind(this), this._onMouseUp = this._onMouseUp.bind(this), this._onTouchEnd = this._onTouchEnd.bind(this), this._onResize = this._onResize.bind(this), this._onGesture = this._onGesture.bind(this), this._onDrag = this._onDrag.bind(this), this._onShake = this._onShake.bind(this), this._onLongPress = this._onLongPress.bind(this), this._onOrientationChange = this._onOrientationChange.bind(this), this._onMouseWheel = this._onMouseWheel.bind(this), this._onMouseOut = this._onMouseOut.bind(this), this._onMouseEnter = this._onMouseEnter.bind(this), this._onContextMenu = this._onContextMenu.bind(this), this._onDoubleClick = this._onDoubleClick.bind(this), this._onDragOver = this._onDragOver.bind(this), this._onDragEnter = this._simpleEventHandler.bind(this, "dragenter"), this._onDragLeave = this._simpleEventHandler.bind(this, "dragleave"), this._onDrop = this._onDrop.bind(this), this.eventsBound = !0);
        },
        /**
         * @private
         * @param {Event} [e] Event object fired on Event.js gesture
         * @param {Event} [self] Inner Event object
         */
        _onGesture: function(d, m) {
          this.__onTransformGesture && this.__onTransformGesture(d, m);
        },
        /**
         * @private
         * @param {Event} [e] Event object fired on Event.js drag
         * @param {Event} [self] Inner Event object
         */
        _onDrag: function(d, m) {
          this.__onDrag && this.__onDrag(d, m);
        },
        /**
         * @private
         * @param {Event} [e] Event object fired on wheel event
         */
        _onMouseWheel: function(d) {
          this.__onMouseWheel(d);
        },
        /**
         * @private
         * @param {Event} e Event object fired on mousedown
         */
        _onMouseOut: function(d) {
          var m = this._hoveredTarget;
          this.fire("mouse:out", { target: m, e: d }), this._hoveredTarget = null, m && m.fire("mouseout", { e: d });
          var p = this;
          this._hoveredTargets.forEach(function(v) {
            p.fire("mouse:out", { target: m, e: d }), v && m.fire("mouseout", { e: d });
          }), this._hoveredTargets = [];
        },
        /**
         * @private
         * @param {Event} e Event object fired on mouseenter
         */
        _onMouseEnter: function(d) {
          !this._currentTransform && !this.findTarget(d) && (this.fire("mouse:over", { target: null, e: d }), this._hoveredTarget = null, this._hoveredTargets = []);
        },
        /**
         * @private
         * @param {Event} [e] Event object fired on Event.js orientation change
         * @param {Event} [self] Inner Event object
         */
        _onOrientationChange: function(d, m) {
          this.__onOrientationChange && this.__onOrientationChange(d, m);
        },
        /**
         * @private
         * @param {Event} [e] Event object fired on Event.js shake
         * @param {Event} [self] Inner Event object
         */
        _onShake: function(d, m) {
          this.__onShake && this.__onShake(d, m);
        },
        /**
         * @private
         * @param {Event} [e] Event object fired on Event.js shake
         * @param {Event} [self] Inner Event object
         */
        _onLongPress: function(d, m) {
          this.__onLongPress && this.__onLongPress(d, m);
        },
        /**
         * prevent default to allow drop event to be fired
         * @private
         * @param {Event} [e] Event object fired on Event.js shake
         */
        _onDragOver: function(d) {
          d.preventDefault();
          var m = this._simpleEventHandler("dragover", d);
          this._fireEnterLeaveEvents(m, d);
        },
        /**
         * `drop:before` is a an event that allow you to schedule logic
         * before the `drop` event. Prefer `drop` event always, but if you need
         * to run some drop-disabling logic on an event, since there is no way
         * to handle event handlers ordering, use `drop:before`
         * @param {Event} e
         */
        _onDrop: function(d) {
          return this._simpleEventHandler("drop:before", d), this._simpleEventHandler("drop", d);
        },
        /**
         * @private
         * @param {Event} e Event object fired on mousedown
         */
        _onContextMenu: function(d) {
          return this.stopContextMenu && (d.stopPropagation(), d.preventDefault()), !1;
        },
        /**
         * @private
         * @param {Event} e Event object fired on mousedown
         */
        _onDoubleClick: function(d) {
          this._cacheTransformEventData(d), this._handleEvent(d, "dblclick"), this._resetTransformEventData(d);
        },
        /**
         * Return a the id of an event.
         * returns either the pointerId or the identifier or 0 for the mouse event
         * @private
         * @param {Event} evt Event object
         */
        getPointerId: function(d) {
          var m = d.changedTouches;
          return m ? m[0] && m[0].identifier : this.enablePointerEvents ? d.pointerId : -1;
        },
        /**
         * Determines if an event has the id of the event that is considered main
         * @private
         * @param {evt} event Event object
         */
        _isMainEvent: function(d) {
          return d.isPrimary === !0 ? !0 : d.isPrimary === !1 ? !1 : d.type === "touchend" && d.touches.length === 0 ? !0 : d.changedTouches ? d.changedTouches[0].identifier === this.mainTouchId : !0;
        },
        /**
         * @private
         * @param {Event} e Event object fired on mousedown
         */
        _onTouchStart: function(d) {
          d.preventDefault(), this.mainTouchId === null && (this.mainTouchId = this.getPointerId(d)), this.__onMouseDown(d), this._resetTransformEventData();
          var m = this.upperCanvasEl, p = this._getEventPrefix();
          l(e.document, "touchend", this._onTouchEnd, u), l(e.document, "touchmove", this._onMouseMove, u), s(m, p + "down", this._onMouseDown);
        },
        /**
         * @private
         * @param {Event} e Event object fired on mousedown
         */
        _onMouseDown: function(d) {
          this.__onMouseDown(d), this._resetTransformEventData();
          var m = this.upperCanvasEl, p = this._getEventPrefix();
          s(m, p + "move", this._onMouseMove, u), l(e.document, p + "up", this._onMouseUp), l(e.document, p + "move", this._onMouseMove, u);
        },
        /**
         * @private
         * @param {Event} e Event object fired on mousedown
         */
        _onTouchEnd: function(d) {
          if (!(d.touches.length > 0)) {
            this.__onMouseUp(d), this._resetTransformEventData(), this.mainTouchId = null;
            var m = this._getEventPrefix();
            s(e.document, "touchend", this._onTouchEnd, u), s(e.document, "touchmove", this._onMouseMove, u);
            var p = this;
            this._willAddMouseDown && clearTimeout(this._willAddMouseDown), this._willAddMouseDown = setTimeout(function() {
              l(p.upperCanvasEl, m + "down", p._onMouseDown), p._willAddMouseDown = 0;
            }, 400);
          }
        },
        /**
         * @private
         * @param {Event} e Event object fired on mouseup
         */
        _onMouseUp: function(d) {
          this.__onMouseUp(d), this._resetTransformEventData();
          var m = this.upperCanvasEl, p = this._getEventPrefix();
          this._isMainEvent(d) && (s(e.document, p + "up", this._onMouseUp), s(e.document, p + "move", this._onMouseMove, u), l(m, p + "move", this._onMouseMove, u));
        },
        /**
         * @private
         * @param {Event} e Event object fired on mousemove
         */
        _onMouseMove: function(d) {
          !this.allowTouchScrolling && d.preventDefault && d.preventDefault(), this.__onMouseMove(d);
        },
        /**
         * @private
         */
        _onResize: function() {
          this.calcOffset();
        },
        /**
         * Decides whether the canvas should be redrawn in mouseup and mousedown events.
         * @private
         * @param {Object} target
         */
        _shouldRender: function(d) {
          var m = this._activeObject;
          return !!m != !!d || m && d && m !== d ? !0 : (m && m.isEditing, !1);
        },
        /**
         * Method that defines the actions when mouse is released on canvas.
         * The method resets the currentTransform parameters, store the image corner
         * position in the image object and render the canvas on top.
         * @private
         * @param {Event} e Event object fired on mouseup
         */
        __onMouseUp: function(d) {
          var m, p = this._currentTransform, v = this._groupSelector, b = !1, y = !v || v.left === 0 && v.top === 0;
          if (this._cacheTransformEventData(d), m = this._target, this._handleEvent(d, "up:before"), c(d, a)) {
            this.fireRightClick && this._handleEvent(d, "up", a, y);
            return;
          }
          if (c(d, h)) {
            this.fireMiddleClick && this._handleEvent(d, "up", h, y), this._resetTransformEventData();
            return;
          }
          if (this.isDrawingMode && this._isCurrentlyDrawing) {
            this._onMouseUpInDrawingMode(d);
            return;
          }
          if (this._isMainEvent(d)) {
            if (p && (this._finalizeCurrentTransform(d), b = p.actionPerformed), !y) {
              var w = m === this._activeObject;
              this._maybeGroupObjects(d), b || (b = this._shouldRender(m) || !w && m === this._activeObject);
            }
            var C, _;
            if (m) {
              if (C = m._findTargetCorner(
                this.getPointer(d, !0),
                e.util.isTouchEvent(d)
              ), m.selectable && m !== this._activeObject && m.activeOn === "up")
                this.setActiveObject(m, d), b = !0;
              else {
                var S = m.controls[C], k = S && S.getMouseUpHandler(d, m, S);
                k && (_ = this.getPointer(d), k(d, p, _.x, _.y));
              }
              m.isMoving = !1;
            }
            if (p && (p.target !== m || p.corner !== C)) {
              var I = p.target && p.target.controls[p.corner], L = I && I.getMouseUpHandler(d, m, S);
              _ = _ || this.getPointer(d), L && L(d, p, _.x, _.y);
            }
            this._setCursorFromEvent(d, m), this._handleEvent(d, "up", o, y), this._groupSelector = null, this._currentTransform = null, m && (m.__corner = 0), b ? this.requestRenderAll() : y || this.renderTop();
          }
        },
        /**
         * @private
         * Handle event firing for target and subtargets
         * @param {Event} e event from mouse
         * @param {String} eventType event to fire (up, down or move)
         * @return {Fabric.Object} target return the the target found, for internal reasons.
         */
        _simpleEventHandler: function(d, m) {
          var p = this.findTarget(m), v = this.targets, b = {
            e: m,
            target: p,
            subTargets: v
          };
          if (this.fire(d, b), p && p.fire(d, b), !v)
            return p;
          for (var y = 0; y < v.length; y++)
            v[y].fire(d, b);
          return p;
        },
        /**
         * @private
         * Handle event firing for target and subtargets
         * @param {Event} e event from mouse
         * @param {String} eventType event to fire (up, down or move)
         * @param {fabric.Object} targetObj receiving event
         * @param {Number} [button] button used in the event 1 = left, 2 = middle, 3 = right
         * @param {Boolean} isClick for left button only, indicates that the mouse up happened without move.
         */
        _handleEvent: function(d, m, p, v) {
          var b = this._target, y = this.targets || [], w = {
            e: d,
            target: b,
            subTargets: y,
            button: p || o,
            isClick: v || !1,
            pointer: this._pointer,
            absolutePointer: this._absolutePointer,
            transform: this._currentTransform
          };
          m === "up" && (w.currentTarget = this.findTarget(d), w.currentSubTargets = this.targets), this.fire("mouse:" + m, w), b && b.fire("mouse" + m, w);
          for (var C = 0; C < y.length; C++)
            y[C].fire("mouse" + m, w);
        },
        /**
         * @private
         * @param {Event} e send the mouse event that generate the finalize down, so it can be used in the event
         */
        _finalizeCurrentTransform: function(d) {
          var m = this._currentTransform, p = m.target, v = {
            e: d,
            target: p,
            transform: m,
            action: m.action
          };
          p._scaling && (p._scaling = !1), p.setCoords(), (m.actionPerformed || this.stateful && p.hasStateChanged()) && this._fire("modified", v);
        },
        /**
         * @private
         * @param {Event} e Event object fired on mousedown
         */
        _onMouseDownInDrawingMode: function(d) {
          this._isCurrentlyDrawing = !0, this.getActiveObject() && this.discardActiveObject(d).requestRenderAll();
          var m = this.getPointer(d);
          this.freeDrawingBrush.onMouseDown(m, { e: d, pointer: m }), this._handleEvent(d, "down");
        },
        /**
         * @private
         * @param {Event} e Event object fired on mousemove
         */
        _onMouseMoveInDrawingMode: function(d) {
          if (this._isCurrentlyDrawing) {
            var m = this.getPointer(d);
            this.freeDrawingBrush.onMouseMove(m, { e: d, pointer: m });
          }
          this.setCursor(this.freeDrawingCursor), this._handleEvent(d, "move");
        },
        /**
         * @private
         * @param {Event} e Event object fired on mouseup
         */
        _onMouseUpInDrawingMode: function(d) {
          var m = this.getPointer(d);
          this._isCurrentlyDrawing = this.freeDrawingBrush.onMouseUp({ e: d, pointer: m }), this._handleEvent(d, "up");
        },
        /**
         * Method that defines the actions when mouse is clicked on canvas.
         * The method inits the currentTransform parameters and renders all the
         * canvas so the current image can be placed on the top canvas and the rest
         * in on the container one.
         * @private
         * @param {Event} e Event object fired on mousedown
         */
        __onMouseDown: function(d) {
          this._cacheTransformEventData(d), this._handleEvent(d, "down:before");
          var m = this._target;
          if (c(d, a)) {
            this.fireRightClick && this._handleEvent(d, "down", a);
            return;
          }
          if (c(d, h)) {
            this.fireMiddleClick && this._handleEvent(d, "down", h);
            return;
          }
          if (this.isDrawingMode) {
            this._onMouseDownInDrawingMode(d);
            return;
          }
          if (this._isMainEvent(d) && !this._currentTransform) {
            var p = this._pointer;
            this._previousPointer = p;
            var v = this._shouldRender(m), b = this._shouldGroup(d, m);
            if (this._shouldClearSelection(d, m) ? this.discardActiveObject(d) : b && (this._handleGrouping(d, m), m = this._activeObject), this.selection && (!m || !m.selectable && !m.isEditing && m !== this._activeObject) && (this._groupSelector = {
              ex: this._absolutePointer.x,
              ey: this._absolutePointer.y,
              top: 0,
              left: 0
            }), m) {
              var y = m === this._activeObject;
              m.selectable && m.activeOn === "down" && this.setActiveObject(m, d);
              var w = m._findTargetCorner(
                this.getPointer(d, !0),
                e.util.isTouchEvent(d)
              );
              if (m.__corner = w, m === this._activeObject && (w || !b)) {
                this._setupCurrentTransform(d, m, y);
                var C = m.controls[w], p = this.getPointer(d), _ = C && C.getMouseDownHandler(d, m, C);
                _ && _(d, this._currentTransform, p.x, p.y);
              }
            }
            this._handleEvent(d, "down"), (v || b) && this.requestRenderAll();
          }
        },
        /**
         * reset cache form common information needed during event processing
         * @private
         */
        _resetTransformEventData: function() {
          this._target = null, this._pointer = null, this._absolutePointer = null;
        },
        /**
         * Cache common information needed during event processing
         * @private
         * @param {Event} e Event object fired on event
         */
        _cacheTransformEventData: function(d) {
          this._resetTransformEventData(), this._pointer = this.getPointer(d, !0), this._absolutePointer = this.restorePointerVpt(this._pointer), this._target = this._currentTransform ? this._currentTransform.target : this.findTarget(d) || null;
        },
        /**
         * @private
         */
        _beforeTransform: function(d) {
          var m = this._currentTransform;
          this.stateful && m.target.saveState(), this.fire("before:transform", {
            e: d,
            transform: m
          });
        },
        /**
         * Method that defines the actions when mouse is hovering the canvas.
         * The currentTransform parameter will define whether the user is rotating/scaling/translating
         * an image or neither of them (only hovering). A group selection is also possible and would cancel
         * all any other type of action.
         * In case of an image transformation only the top canvas will be rendered.
         * @private
         * @param {Event} e Event object fired on mousemove
         */
        __onMouseMove: function(d) {
          this._handleEvent(d, "move:before"), this._cacheTransformEventData(d);
          var m, p;
          if (this.isDrawingMode) {
            this._onMouseMoveInDrawingMode(d);
            return;
          }
          if (this._isMainEvent(d)) {
            var v = this._groupSelector;
            v ? (p = this._absolutePointer, v.left = p.x - v.ex, v.top = p.y - v.ey, this.renderTop()) : this._currentTransform ? this._transformObject(d) : (m = this.findTarget(d) || null, this._setCursorFromEvent(d, m), this._fireOverOutEvents(m, d)), this._handleEvent(d, "move"), this._resetTransformEventData();
          }
        },
        /**
         * Manage the mouseout, mouseover events for the fabric object on the canvas
         * @param {Fabric.Object} target the target where the target from the mousemove event
         * @param {Event} e Event object fired on mousemove
         * @private
         */
        _fireOverOutEvents: function(d, m) {
          var p = this._hoveredTarget, v = this._hoveredTargets, b = this.targets, y = Math.max(v.length, b.length);
          this.fireSyntheticInOutEvents(d, m, {
            oldTarget: p,
            evtOut: "mouseout",
            canvasEvtOut: "mouse:out",
            evtIn: "mouseover",
            canvasEvtIn: "mouse:over"
          });
          for (var w = 0; w < y; w++)
            this.fireSyntheticInOutEvents(b[w], m, {
              oldTarget: v[w],
              evtOut: "mouseout",
              evtIn: "mouseover"
            });
          this._hoveredTarget = d, this._hoveredTargets = this.targets.concat();
        },
        /**
         * Manage the dragEnter, dragLeave events for the fabric objects on the canvas
         * @param {Fabric.Object} target the target where the target from the onDrag event
         * @param {Event} e Event object fired on ondrag
         * @private
         */
        _fireEnterLeaveEvents: function(d, m) {
          var p = this._draggedoverTarget, v = this._hoveredTargets, b = this.targets, y = Math.max(v.length, b.length);
          this.fireSyntheticInOutEvents(d, m, {
            oldTarget: p,
            evtOut: "dragleave",
            evtIn: "dragenter"
          });
          for (var w = 0; w < y; w++)
            this.fireSyntheticInOutEvents(b[w], m, {
              oldTarget: v[w],
              evtOut: "dragleave",
              evtIn: "dragenter"
            });
          this._draggedoverTarget = d;
        },
        /**
         * Manage the synthetic in/out events for the fabric objects on the canvas
         * @param {Fabric.Object} target the target where the target from the supported events
         * @param {Event} e Event object fired
         * @param {Object} config configuration for the function to work
         * @param {String} config.targetName property on the canvas where the old target is stored
         * @param {String} [config.canvasEvtOut] name of the event to fire at canvas level for out
         * @param {String} config.evtOut name of the event to fire for out
         * @param {String} [config.canvasEvtIn] name of the event to fire at canvas level for in
         * @param {String} config.evtIn name of the event to fire for in
         * @private
         */
        fireSyntheticInOutEvents: function(d, m, p) {
          var v, b, y = p.oldTarget, w, C, _ = y !== d, S = p.canvasEvtIn, k = p.canvasEvtOut;
          _ && (v = { e: m, target: d, previousTarget: y }, b = { e: m, target: y, nextTarget: d }), C = d && _, w = y && _, w && (k && this.fire(k, b), y.fire(p.evtOut, b)), C && (S && this.fire(S, v), d.fire(p.evtIn, v));
        },
        /**
         * Method that defines actions when an Event Mouse Wheel
         * @param {Event} e Event object fired on mouseup
         */
        __onMouseWheel: function(d) {
          this._cacheTransformEventData(d), this._handleEvent(d, "wheel"), this._resetTransformEventData();
        },
        /**
         * @private
         * @param {Event} e Event fired on mousemove
         */
        _transformObject: function(d) {
          var m = this.getPointer(d), p = this._currentTransform;
          p.reset = !1, p.shiftKey = d.shiftKey, p.altKey = d[this.centeredKey], this._performTransformAction(d, p, m), p.actionPerformed && this.requestRenderAll();
        },
        /**
         * @private
         */
        _performTransformAction: function(d, m, p) {
          var v = p.x, b = p.y, y = m.action, w = !1, C = m.actionHandler;
          C && (w = C(d, m, v, b)), y === "drag" && w && (m.target.isMoving = !0, this.setCursor(m.target.moveCursor || this.moveCursor)), m.actionPerformed = m.actionPerformed || w;
        },
        /**
         * @private
         */
        _fire: e.controlsUtils.fireEvent,
        /**
         * Sets the cursor depending on where the canvas is being hovered.
         * Note: very buggy in Opera
         * @param {Event} e Event object
         * @param {Object} target Object that the mouse is hovering, if so.
         */
        _setCursorFromEvent: function(d, m) {
          if (!m)
            return this.setCursor(this.defaultCursor), !1;
          var p = m.hoverCursor || this.hoverCursor, v = this._activeObject && this._activeObject.type === "activeSelection" ? this._activeObject : null, b = (!v || !v.contains(m)) && m._findTargetCorner(this.getPointer(d, !0));
          b ? this.setCursor(this.getCornerCursor(b, m, d)) : (m.subTargetCheck && this.targets.concat().reverse().map(function(y) {
            p = y.hoverCursor || p;
          }), this.setCursor(p));
        },
        /**
         * @private
         */
        getCornerCursor: function(d, m, p) {
          var v = m.controls[d];
          return v.cursorStyleHandler(p, v, m);
        }
      }
    );
  }(), function() {
    var l = Math.min, s = Math.max;
    e.util.object.extend(
      e.Canvas.prototype,
      /** @lends fabric.Canvas.prototype */
      {
        /**
         * @private
         * @param {Event} e Event object
         * @param {fabric.Object} target
         * @return {Boolean}
         */
        _shouldGroup: function(a, h) {
          var o = this._activeObject;
          return o && this._isSelectionKeyPressed(a) && h && h.selectable && this.selection && (o !== h || o.type === "activeSelection") && !h.onSelect({ e: a });
        },
        /**
         * @private
         * @param {Event} e Event object
         * @param {fabric.Object} target
         */
        _handleGrouping: function(a, h) {
          var o = this._activeObject;
          o.__corner || h === o && (h = this.findTarget(a, !0), !h || !h.selectable) || (o && o.type === "activeSelection" ? this._updateActiveSelection(h, a) : this._createActiveSelection(h, a));
        },
        /**
         * @private
         */
        _updateActiveSelection: function(a, h) {
          var o = this._activeObject, u = o._objects.slice(0);
          o.contains(a) ? (o.removeWithUpdate(a), this._hoveredTarget = a, this._hoveredTargets = this.targets.concat(), o.size() === 1 && this._setActiveObject(o.item(0), h)) : (o.addWithUpdate(a), this._hoveredTarget = o, this._hoveredTargets = this.targets.concat()), this._fireSelectionEvents(u, h);
        },
        /**
         * @private
         */
        _createActiveSelection: function(a, h) {
          var o = this.getActiveObjects(), u = this._createGroup(a);
          this._hoveredTarget = u, this._setActiveObject(u, h), this._fireSelectionEvents(o, h);
        },
        /**
         * @private
         * @param {Object} target
         */
        _createGroup: function(a) {
          var h = this._objects, o = h.indexOf(this._activeObject) < h.indexOf(a), u = o ? [this._activeObject, a] : [a, this._activeObject];
          return this._activeObject.isEditing && this._activeObject.exitEditing(), new e.ActiveSelection(u, {
            canvas: this
          });
        },
        /**
         * @private
         * @param {Event} e mouse event
         */
        _groupSelectedObjects: function(a) {
          var h = this._collectObjects(a), o;
          h.length === 1 ? this.setActiveObject(h[0], a) : h.length > 1 && (o = new e.ActiveSelection(h.reverse(), {
            canvas: this
          }), this.setActiveObject(o, a));
        },
        /**
         * @private
         */
        _collectObjects: function(a) {
          for (var h = [], o, u = this._groupSelector.ex, c = this._groupSelector.ey, d = u + this._groupSelector.left, m = c + this._groupSelector.top, p = new e.Point(l(u, d), l(c, m)), v = new e.Point(s(u, d), s(c, m)), b = !this.selectionFullyContained, y = u === d && c === m, w = this._objects.length; w-- && (o = this._objects[w], !(!(!o || !o.selectable || !o.visible) && (b && o.intersectsWithRect(p, v, !0) || o.isContainedWithinRect(p, v, !0) || b && o.containsPoint(p, null, !0) || b && o.containsPoint(v, null, !0)) && (h.push(o), y))); )
            ;
          return h.length > 1 && (h = h.filter(function(C) {
            return !C.onSelect({ e: a });
          })), h;
        },
        /**
         * @private
         */
        _maybeGroupObjects: function(a) {
          this.selection && this._groupSelector && this._groupSelectedObjects(a), this.setCursor(this.defaultCursor), this._groupSelector = null;
        }
      }
    );
  }(), function() {
    e.util.object.extend(
      e.StaticCanvas.prototype,
      /** @lends fabric.StaticCanvas.prototype */
      {
        /**
         * Exports canvas element to a dataurl image. Note that when multiplier is used, cropping is scaled appropriately
         * @param {Object} [options] Options object
         * @param {String} [options.format=png] The format of the output image. Either "jpeg" or "png"
         * @param {Number} [options.quality=1] Quality level (0..1). Only used for jpeg.
         * @param {Number} [options.multiplier=1] Multiplier to scale by, to have consistent
         * @param {Number} [options.left] Cropping left offset. Introduced in v1.2.14
         * @param {Number} [options.top] Cropping top offset. Introduced in v1.2.14
         * @param {Number} [options.width] Cropping width. Introduced in v1.2.14
         * @param {Number} [options.height] Cropping height. Introduced in v1.2.14
         * @param {Boolean} [options.enableRetinaScaling] Enable retina scaling for clone image. Introduce in 2.0.0
         * @return {String} Returns a data: URL containing a representation of the object in the format specified by options.format
         * @see {@link http://jsfiddle.net/fabricjs/NfZVb/|jsFiddle demo}
         * @example <caption>Generate jpeg dataURL with lower quality</caption>
         * var dataURL = canvas.toDataURL({
         *   format: 'jpeg',
         *   quality: 0.8
         * });
         * @example <caption>Generate cropped png dataURL (clipping of canvas)</caption>
         * var dataURL = canvas.toDataURL({
         *   format: 'png',
         *   left: 100,
         *   top: 100,
         *   width: 200,
         *   height: 200
         * });
         * @example <caption>Generate double scaled png dataURL</caption>
         * var dataURL = canvas.toDataURL({
         *   format: 'png',
         *   multiplier: 2
         * });
         */
        toDataURL: function(l) {
          l || (l = {});
          var s = l.format || "png", a = l.quality || 1, h = (l.multiplier || 1) * (l.enableRetinaScaling ? this.getRetinaScaling() : 1), o = this.toCanvasElement(h, l);
          return e.util.toDataURL(o, s, a);
        },
        /**
         * Create a new HTMLCanvas element painted with the current canvas content.
         * No need to resize the actual one or repaint it.
         * Will transfer object ownership to a new canvas, paint it, and set everything back.
         * This is an intermediary step used to get to a dataUrl but also it is useful to
         * create quick image copies of a canvas without passing for the dataUrl string
         * @param {Number} [multiplier] a zoom factor.
         * @param {Object} [cropping] Cropping informations
         * @param {Number} [cropping.left] Cropping left offset.
         * @param {Number} [cropping.top] Cropping top offset.
         * @param {Number} [cropping.width] Cropping width.
         * @param {Number} [cropping.height] Cropping height.
         */
        toCanvasElement: function(l, s) {
          l = l || 1, s = s || {};
          var a = (s.width || this.width) * l, h = (s.height || this.height) * l, o = this.getZoom(), u = this.width, c = this.height, d = o * l, m = this.viewportTransform, p = (m[4] - (s.left || 0)) * l, v = (m[5] - (s.top || 0)) * l, b = this.interactive, y = [d, 0, 0, d, p, v], w = this.enableRetinaScaling, C = e.util.createCanvasElement(), _ = this.contextTop;
          return C.width = a, C.height = h, this.contextTop = null, this.enableRetinaScaling = !1, this.interactive = !1, this.viewportTransform = y, this.width = a, this.height = h, this.calcViewportBoundaries(), this.renderCanvas(C.getContext("2d"), this._objects), this.viewportTransform = m, this.width = u, this.height = c, this.calcViewportBoundaries(), this.interactive = b, this.enableRetinaScaling = w, this.contextTop = _, C;
        }
      }
    );
  }(), e.util.object.extend(
    e.StaticCanvas.prototype,
    /** @lends fabric.StaticCanvas.prototype */
    {
      /**
       * Populates canvas with data from the specified JSON.
       * JSON format must conform to the one of {@link fabric.Canvas#toJSON}
       * @param {String|Object} json JSON string or object
       * @param {Function} callback Callback, invoked when json is parsed
       *                            and corresponding objects (e.g: {@link fabric.Image})
       *                            are initialized
       * @param {Function} [reviver] Method for further parsing of JSON elements, called after each fabric object created.
       * @return {fabric.Canvas} instance
       * @chainable
       * @tutorial {@link http://fabricjs.com/fabric-intro-part-3#deserialization}
       * @see {@link http://jsfiddle.net/fabricjs/fmgXt/|jsFiddle demo}
       * @example <caption>loadFromJSON</caption>
       * canvas.loadFromJSON(json, canvas.renderAll.bind(canvas));
       * @example <caption>loadFromJSON with reviver</caption>
       * canvas.loadFromJSON(json, canvas.renderAll.bind(canvas), function(o, object) {
       *   // `o` = json object
       *   // `object` = fabric.Object instance
       *   // ... do some stuff ...
       * });
       */
      loadFromJSON: function(l, s, a) {
        if (l) {
          var h = typeof l == "string" ? JSON.parse(l) : e.util.object.clone(l), o = this, u = h.clipPath, c = this.renderOnAddRemove;
          return this.renderOnAddRemove = !1, delete h.clipPath, this._enlivenObjects(h.objects, function(d) {
            o.clear(), o._setBgOverlay(h, function() {
              u ? o._enlivenObjects([u], function(m) {
                o.clipPath = m[0], o.__setupCanvas.call(o, h, d, c, s);
              }) : o.__setupCanvas.call(o, h, d, c, s);
            });
          }, a), this;
        }
      },
      /**
       * @private
       * @param {Object} serialized Object with background and overlay information
       * @param {Array} restored canvas objects
       * @param {Function} cached renderOnAddRemove callback
       * @param {Function} callback Invoked after all background and overlay images/patterns loaded
       */
      __setupCanvas: function(l, s, a, h) {
        var o = this;
        s.forEach(function(u, c) {
          o.insertAt(u, c);
        }), this.renderOnAddRemove = a, delete l.objects, delete l.backgroundImage, delete l.overlayImage, delete l.background, delete l.overlay, this._setOptions(l), this.renderAll(), h && h();
      },
      /**
       * @private
       * @param {Object} serialized Object with background and overlay information
       * @param {Function} callback Invoked after all background and overlay images/patterns loaded
       */
      _setBgOverlay: function(l, s) {
        var a = {
          backgroundColor: !1,
          overlayColor: !1,
          backgroundImage: !1,
          overlayImage: !1
        };
        if (!l.backgroundImage && !l.overlayImage && !l.background && !l.overlay) {
          s && s();
          return;
        }
        var h = function() {
          a.backgroundImage && a.overlayImage && a.backgroundColor && a.overlayColor && s && s();
        };
        this.__setBgOverlay("backgroundImage", l.backgroundImage, a, h), this.__setBgOverlay("overlayImage", l.overlayImage, a, h), this.__setBgOverlay("backgroundColor", l.background, a, h), this.__setBgOverlay("overlayColor", l.overlay, a, h);
      },
      /**
       * @private
       * @param {String} property Property to set (backgroundImage, overlayImage, backgroundColor, overlayColor)
       * @param {(Object|String)} value Value to set
       * @param {Object} loaded Set loaded property to true if property is set
       * @param {Object} callback Callback function to invoke after property is set
       */
      __setBgOverlay: function(l, s, a, h) {
        var o = this;
        if (!s) {
          a[l] = !0, h && h();
          return;
        }
        l === "backgroundImage" || l === "overlayImage" ? e.util.enlivenObjects([s], function(u) {
          o[l] = u[0], a[l] = !0, h && h();
        }) : this["set" + e.util.string.capitalize(l, !0)](s, function() {
          a[l] = !0, h && h();
        });
      },
      /**
       * @private
       * @param {Array} objects
       * @param {Function} callback
       * @param {Function} [reviver]
       */
      _enlivenObjects: function(l, s, a) {
        if (!l || l.length === 0) {
          s && s([]);
          return;
        }
        e.util.enlivenObjects(l, function(h) {
          s && s(h);
        }, null, a);
      },
      /**
       * @private
       * @param {String} format
       * @param {Function} callback
       */
      _toDataURL: function(l, s) {
        this.clone(function(a) {
          s(a.toDataURL(l));
        });
      },
      /**
       * @private
       * @param {String} format
       * @param {Number} multiplier
       * @param {Function} callback
       */
      _toDataURLWithMultiplier: function(l, s, a) {
        this.clone(function(h) {
          a(h.toDataURLWithMultiplier(l, s));
        });
      },
      /**
       * Clones canvas instance
       * @param {Object} [callback] Receives cloned instance as a first argument
       * @param {Array} [properties] Array of properties to include in the cloned canvas and children
       */
      clone: function(l, s) {
        var a = JSON.stringify(this.toJSON(s));
        this.cloneWithoutData(function(h) {
          h.loadFromJSON(a, function() {
            l && l(h);
          });
        });
      },
      /**
       * Clones canvas instance without cloning existing data.
       * This essentially copies canvas dimensions, clipping properties, etc.
       * but leaves data empty (so that you can populate it with your own)
       * @param {Object} [callback] Receives cloned instance as a first argument
       */
      cloneWithoutData: function(l) {
        var s = e.util.createCanvasElement();
        s.width = this.width, s.height = this.height;
        var a = new e.Canvas(s);
        this.backgroundImage ? (a.setBackgroundImage(this.backgroundImage.src, function() {
          a.renderAll(), l && l(a);
        }), a.backgroundImageOpacity = this.backgroundImageOpacity, a.backgroundImageStretch = this.backgroundImageStretch) : l && l(a);
      }
    }
  ), function(l) {
    var s = l.fabric || (l.fabric = {}), a = s.util.object.extend, h = s.util.object.clone, o = s.util.toFixed, u = s.util.string.capitalize, c = s.util.degreesToRadians, d = !s.isLikelyNode, m = 2;
    s.Object || (s.Object = s.util.createClass(
      s.CommonMethods,
      /** @lends fabric.Object.prototype */
      {
        /**
         * Type of an object (rect, circle, path, etc.).
         * Note that this property is meant to be read-only and not meant to be modified.
         * If you modify, certain parts of Fabric (such as JSON loading) won't work correctly.
         * @type String
         * @default
         */
        type: "object",
        /**
         * Horizontal origin of transformation of an object (one of "left", "right", "center")
         * See http://jsfiddle.net/1ow02gea/244/ on how originX/originY affect objects in groups
         * @type String
         * @default
         */
        originX: "left",
        /**
         * Vertical origin of transformation of an object (one of "top", "bottom", "center")
         * See http://jsfiddle.net/1ow02gea/244/ on how originX/originY affect objects in groups
         * @type String
         * @default
         */
        originY: "top",
        /**
         * Top position of an object. Note that by default it's relative to object top. You can change this by setting originY={top/center/bottom}
         * @type Number
         * @default
         */
        top: 0,
        /**
         * Left position of an object. Note that by default it's relative to object left. You can change this by setting originX={left/center/right}
         * @type Number
         * @default
         */
        left: 0,
        /**
         * Object width
         * @type Number
         * @default
         */
        width: 0,
        /**
         * Object height
         * @type Number
         * @default
         */
        height: 0,
        /**
         * Object scale factor (horizontal)
         * @type Number
         * @default
         */
        scaleX: 1,
        /**
         * Object scale factor (vertical)
         * @type Number
         * @default
         */
        scaleY: 1,
        /**
         * When true, an object is rendered as flipped horizontally
         * @type Boolean
         * @default
         */
        flipX: !1,
        /**
         * When true, an object is rendered as flipped vertically
         * @type Boolean
         * @default
         */
        flipY: !1,
        /**
         * Opacity of an object
         * @type Number
         * @default
         */
        opacity: 1,
        /**
         * Angle of rotation of an object (in degrees)
         * @type Number
         * @default
         */
        angle: 0,
        /**
         * Angle of skew on x axes of an object (in degrees)
         * @type Number
         * @default
         */
        skewX: 0,
        /**
         * Angle of skew on y axes of an object (in degrees)
         * @type Number
         * @default
         */
        skewY: 0,
        /**
         * Size of object's controlling corners (in pixels)
         * @type Number
         * @default
         */
        cornerSize: 13,
        /**
         * Size of object's controlling corners when touch interaction is detected
         * @type Number
         * @default
         */
        touchCornerSize: 24,
        /**
         * When true, object's controlling corners are rendered as transparent inside (i.e. stroke instead of fill)
         * @type Boolean
         * @default
         */
        transparentCorners: !0,
        /**
         * Default cursor value used when hovering over this object on canvas
         * @type String
         * @default
         */
        hoverCursor: null,
        /**
         * Default cursor value used when moving this object on canvas
         * @type String
         * @default
         */
        moveCursor: null,
        /**
         * Padding between object and its controlling borders (in pixels)
         * @type Number
         * @default
         */
        padding: 0,
        /**
         * Color of controlling borders of an object (when it's active)
         * @type String
         * @default
         */
        borderColor: "rgb(178,204,255)",
        /**
         * Array specifying dash pattern of an object's borders (hasBorder must be true)
         * @since 1.6.2
         * @type Array
         */
        borderDashArray: null,
        /**
         * Color of controlling corners of an object (when it's active)
         * @type String
         * @default
         */
        cornerColor: "rgb(178,204,255)",
        /**
         * Color of controlling corners of an object (when it's active and transparentCorners false)
         * @since 1.6.2
         * @type String
         * @default
         */
        cornerStrokeColor: null,
        /**
         * Specify style of control, 'rect' or 'circle'
         * @since 1.6.2
         * @type String
         */
        cornerStyle: "rect",
        /**
         * Array specifying dash pattern of an object's control (hasBorder must be true)
         * @since 1.6.2
         * @type Array
         */
        cornerDashArray: null,
        /**
         * When true, this object will use center point as the origin of transformation
         * when being scaled via the controls.
         * <b>Backwards incompatibility note:</b> This property replaces "centerTransform" (Boolean).
         * @since 1.3.4
         * @type Boolean
         * @default
         */
        centeredScaling: !1,
        /**
         * When true, this object will use center point as the origin of transformation
         * when being rotated via the controls.
         * <b>Backwards incompatibility note:</b> This property replaces "centerTransform" (Boolean).
         * @since 1.3.4
         * @type Boolean
         * @default
         */
        centeredRotation: !0,
        /**
         * Color of object's fill
         * takes css colors https://www.w3.org/TR/css-color-3/
         * @type String
         * @default
         */
        fill: "rgb(0,0,0)",
        /**
         * Fill rule used to fill an object
         * accepted values are nonzero, evenodd
         * <b>Backwards incompatibility note:</b> This property was used for setting globalCompositeOperation until v1.4.12 (use `fabric.Object#globalCompositeOperation` instead)
         * @type String
         * @default
         */
        fillRule: "nonzero",
        /**
         * Composite rule used for canvas globalCompositeOperation
         * @type String
         * @default
         */
        globalCompositeOperation: "source-over",
        /**
         * Background color of an object.
         * takes css colors https://www.w3.org/TR/css-color-3/
         * @type String
         * @default
         */
        backgroundColor: "",
        /**
         * Selection Background color of an object. colored layer behind the object when it is active.
         * does not mix good with globalCompositeOperation methods.
         * @type String
         * @default
         */
        selectionBackgroundColor: "",
        /**
         * When defined, an object is rendered via stroke and this property specifies its color
         * takes css colors https://www.w3.org/TR/css-color-3/
         * @type String
         * @default
         */
        stroke: null,
        /**
         * Width of a stroke used to render this object
         * @type Number
         * @default
         */
        strokeWidth: 1,
        /**
         * Array specifying dash pattern of an object's stroke (stroke must be defined)
         * @type Array
         */
        strokeDashArray: null,
        /**
         * Line offset of an object's stroke
         * @type Number
         * @default
         */
        strokeDashOffset: 0,
        /**
         * Line endings style of an object's stroke (one of "butt", "round", "square")
         * @type String
         * @default
         */
        strokeLineCap: "butt",
        /**
         * Corner style of an object's stroke (one of "bevel", "round", "miter")
         * @type String
         * @default
         */
        strokeLineJoin: "miter",
        /**
         * Maximum miter length (used for strokeLineJoin = "miter") of an object's stroke
         * @type Number
         * @default
         */
        strokeMiterLimit: 4,
        /**
         * Shadow object representing shadow of this shape
         * @type fabric.Shadow
         * @default
         */
        shadow: null,
        /**
         * Opacity of object's controlling borders when object is active and moving
         * @type Number
         * @default
         */
        borderOpacityWhenMoving: 0.4,
        /**
         * Scale factor of object's controlling borders
         * bigger number will make a thicker border
         * border is 1, so this is basically a border thickness
         * since there is no way to change the border itself.
         * @type Number
         * @default
         */
        borderScaleFactor: 1,
        /**
         * Minimum allowed scale value of an object
         * @type Number
         * @default
         */
        minScaleLimit: 0,
        /**
         * When set to `false`, an object can not be selected for modification (using either point-click-based or group-based selection).
         * But events still fire on it.
         * @type Boolean
         * @default
         */
        selectable: !0,
        /**
         * When set to `false`, an object can not be a target of events. All events propagate through it. Introduced in v1.3.4
         * @type Boolean
         * @default
         */
        evented: !0,
        /**
         * When set to `false`, an object is not rendered on canvas
         * @type Boolean
         * @default
         */
        visible: !0,
        /**
         * When set to `false`, object's controls are not displayed and can not be used to manipulate object
         * @type Boolean
         * @default
         */
        hasControls: !0,
        /**
         * When set to `false`, object's controlling borders are not rendered
         * @type Boolean
         * @default
         */
        hasBorders: !0,
        /**
         * When set to `true`, objects are "found" on canvas on per-pixel basis rather than according to bounding box
         * @type Boolean
         * @default
         */
        perPixelTargetFind: !1,
        /**
         * When `false`, default object's values are not included in its serialization
         * @type Boolean
         * @default
         */
        includeDefaultValues: !0,
        /**
         * When `true`, object horizontal movement is locked
         * @type Boolean
         * @default
         */
        lockMovementX: !1,
        /**
         * When `true`, object vertical movement is locked
         * @type Boolean
         * @default
         */
        lockMovementY: !1,
        /**
         * When `true`, object rotation is locked
         * @type Boolean
         * @default
         */
        lockRotation: !1,
        /**
         * When `true`, object horizontal scaling is locked
         * @type Boolean
         * @default
         */
        lockScalingX: !1,
        /**
         * When `true`, object vertical scaling is locked
         * @type Boolean
         * @default
         */
        lockScalingY: !1,
        /**
         * When `true`, object horizontal skewing is locked
         * @type Boolean
         * @default
         */
        lockSkewingX: !1,
        /**
         * When `true`, object vertical skewing is locked
         * @type Boolean
         * @default
         */
        lockSkewingY: !1,
        /**
         * When `true`, object cannot be flipped by scaling into negative values
         * @type Boolean
         * @default
         */
        lockScalingFlip: !1,
        /**
         * When `true`, object is not exported in OBJECT/JSON
         * @since 1.6.3
         * @type Boolean
         * @default
         */
        excludeFromExport: !1,
        /**
         * When `true`, object is cached on an additional canvas.
         * When `false`, object is not cached unless necessary ( clipPath )
         * default to true
         * @since 1.7.0
         * @type Boolean
         * @default true
         */
        objectCaching: d,
        /**
         * When `true`, object properties are checked for cache invalidation. In some particular
         * situation you may want this to be disabled ( spray brush, very big, groups)
         * or if your application does not allow you to modify properties for groups child you want
         * to disable it for groups.
         * default to false
         * since 1.7.0
         * @type Boolean
         * @default false
         */
        statefullCache: !1,
        /**
         * When `true`, cache does not get updated during scaling. The picture will get blocky if scaled
         * too much and will be redrawn with correct details at the end of scaling.
         * this setting is performance and application dependant.
         * default to true
         * since 1.7.0
         * @type Boolean
         * @default true
         */
        noScaleCache: !0,
        /**
         * When `false`, the stoke width will scale with the object.
         * When `true`, the stroke will always match the exact pixel size entered for stroke width.
         * this Property does not work on Text classes or drawing call that uses strokeText,fillText methods
         * default to false
         * @since 2.6.0
         * @type Boolean
         * @default false
         * @type Boolean
         * @default false
         */
        strokeUniform: !1,
        /**
         * When set to `true`, object's cache will be rerendered next render call.
         * since 1.7.0
         * @type Boolean
         * @default true
         */
        dirty: !0,
        /**
         * keeps the value of the last hovered corner during mouse move.
         * 0 is no corner, or 'mt', 'ml', 'mtr' etc..
         * It should be private, but there is no harm in using it as
         * a read-only property.
         * @type number|string|any
         * @default 0
         */
        __corner: 0,
        /**
         * Determines if the fill or the stroke is drawn first (one of "fill" or "stroke")
         * @type String
         * @default
         */
        paintFirst: "fill",
        /**
         * When 'down', object is set to active on mousedown/touchstart
         * When 'up', object is set to active on mouseup/touchend
         * Experimental. Let's see if this breaks anything before supporting officially
         * @private
         * since 4.4.0
         * @type String
         * @default 'down'
         */
        activeOn: "down",
        /**
         * List of properties to consider when checking if state
         * of an object is changed (fabric.Object#hasStateChanged)
         * as well as for history (undo/redo) purposes
         * @type Array
         */
        stateProperties: "top left width height scaleX scaleY flipX flipY originX originY transformMatrix stroke strokeWidth strokeDashArray strokeLineCap strokeDashOffset strokeLineJoin strokeMiterLimit angle opacity fill globalCompositeOperation shadow visible backgroundColor skewX skewY fillRule paintFirst clipPath strokeUniform".split(" "),
        /**
         * List of properties to consider when checking if cache needs refresh
         * Those properties are checked by statefullCache ON ( or lazy mode if we want ) or from single
         * calls to Object.set(key, value). If the key is in this list, the object is marked as dirty
         * and refreshed at the next render
         * @type Array
         */
        cacheProperties: "fill stroke strokeWidth strokeDashArray width height paintFirst strokeUniform strokeLineCap strokeDashOffset strokeLineJoin strokeMiterLimit backgroundColor clipPath".split(" "),
        /**
         * List of properties to consider for animating colors.
         * @type Array
         */
        colorProperties: "fill stroke backgroundColor".split(" "),
        /**
         * a fabricObject that, without stroke define a clipping area with their shape. filled in black
         * the clipPath object gets used when the object has rendered, and the context is placed in the center
         * of the object cacheCanvas.
         * If you want 0,0 of a clipPath to align with an object center, use clipPath.originX/Y to 'center'
         * @type fabric.Object
         */
        clipPath: void 0,
        /**
         * Meaningful ONLY when the object is used as clipPath.
         * if true, the clipPath will make the object clip to the outside of the clipPath
         * since 2.4.0
         * @type boolean
         * @default false
         */
        inverted: !1,
        /**
         * Meaningful ONLY when the object is used as clipPath.
         * if true, the clipPath will have its top and left relative to canvas, and will
         * not be influenced by the object transform. This will make the clipPath relative
         * to the canvas, but clipping just a particular object.
         * WARNING this is beta, this feature may change or be renamed.
         * since 2.4.0
         * @type boolean
         * @default false
         */
        absolutePositioned: !1,
        /**
         * Constructor
         * @param {Object} [options] Options object
         */
        initialize: function(p) {
          p && this.setOptions(p);
        },
        /**
         * Create a the canvas used to keep the cached copy of the object
         * @private
         */
        _createCacheCanvas: function() {
          this._cacheProperties = {}, this._cacheCanvas = s.util.createCanvasElement(), this._cacheContext = this._cacheCanvas.getContext("2d"), this._updateCacheCanvas(), this.dirty = !0;
        },
        /**
         * Limit the cache dimensions so that X * Y do not cross fabric.perfLimitSizeTotal
         * and each side do not cross fabric.cacheSideLimit
         * those numbers are configurable so that you can get as much detail as you want
         * making bargain with performances.
         * @param {Object} dims
         * @param {Object} dims.width width of canvas
         * @param {Object} dims.height height of canvas
         * @param {Object} dims.zoomX zoomX zoom value to unscale the canvas before drawing cache
         * @param {Object} dims.zoomY zoomY zoom value to unscale the canvas before drawing cache
         * @return {Object}.width width of canvas
         * @return {Object}.height height of canvas
         * @return {Object}.zoomX zoomX zoom value to unscale the canvas before drawing cache
         * @return {Object}.zoomY zoomY zoom value to unscale the canvas before drawing cache
         */
        _limitCacheSize: function(p) {
          var v = s.perfLimitSizeTotal, b = p.width, y = p.height, w = s.maxCacheSideLimit, C = s.minCacheSideLimit;
          if (b <= w && y <= w && b * y <= v)
            return b < C && (p.width = C), y < C && (p.height = C), p;
          var _ = b / y, S = s.util.limitDimsByArea(_, v), k = s.util.capValue, I = k(C, S.x, w), L = k(C, S.y, w);
          return b > I && (p.zoomX /= b / I, p.width = I, p.capped = !0), y > L && (p.zoomY /= y / L, p.height = L, p.capped = !0), p;
        },
        /**
         * Return the dimension and the zoom level needed to create a cache canvas
         * big enough to host the object to be cached.
         * @private
         * @return {Object}.x width of object to be cached
         * @return {Object}.y height of object to be cached
         * @return {Object}.width width of canvas
         * @return {Object}.height height of canvas
         * @return {Object}.zoomX zoomX zoom value to unscale the canvas before drawing cache
         * @return {Object}.zoomY zoomY zoom value to unscale the canvas before drawing cache
         */
        _getCacheCanvasDimensions: function() {
          var p = this.getTotalObjectScaling(), v = this._getTransformedDimensions(0, 0), b = v.x * p.scaleX / this.scaleX, y = v.y * p.scaleY / this.scaleY;
          return {
            // for sure this ALIASING_LIMIT is slightly creating problem
            // in situation in which the cache canvas gets an upper limit
            // also objectScale contains already scaleX and scaleY
            width: b + m,
            height: y + m,
            zoomX: p.scaleX,
            zoomY: p.scaleY,
            x: b,
            y
          };
        },
        /**
         * Update width and height of the canvas for cache
         * returns true or false if canvas needed resize.
         * @private
         * @return {Boolean} true if the canvas has been resized
         */
        _updateCacheCanvas: function() {
          var p = this.canvas;
          if (this.noScaleCache && p && p._currentTransform) {
            var v = p._currentTransform.target, b = p._currentTransform.action;
            if (this === v && b.slice && b.slice(0, 5) === "scale")
              return !1;
          }
          var y = this._cacheCanvas, w = this._limitCacheSize(this._getCacheCanvasDimensions()), C = s.minCacheSideLimit, _ = w.width, S = w.height, k, I, L = w.zoomX, j = w.zoomY, G = _ !== this.cacheWidth || S !== this.cacheHeight, te = this.zoomX !== L || this.zoomY !== j, W = G || te, q = 0, K = 0, ne = !1;
          if (G) {
            var re = this._cacheCanvas.width, T = this._cacheCanvas.height, P = _ > re || S > T, A = (_ < re * 0.9 || S < T * 0.9) && re > C && T > C;
            ne = P || A, P && !w.capped && (_ > C || S > C) && (q = _ * 0.1, K = S * 0.1);
          }
          return this instanceof s.Text && this.path && (W = !0, ne = !0, q += this.getHeightOfLine(0) * this.zoomX, K += this.getHeightOfLine(0) * this.zoomY), W ? (ne ? (y.width = Math.ceil(_ + q), y.height = Math.ceil(S + K)) : (this._cacheContext.setTransform(1, 0, 0, 1, 0, 0), this._cacheContext.clearRect(0, 0, y.width, y.height)), k = w.x / 2, I = w.y / 2, this.cacheTranslationX = Math.round(y.width / 2 - k) + k, this.cacheTranslationY = Math.round(y.height / 2 - I) + I, this.cacheWidth = _, this.cacheHeight = S, this._cacheContext.translate(this.cacheTranslationX, this.cacheTranslationY), this._cacheContext.scale(L, j), this.zoomX = L, this.zoomY = j, !0) : !1;
        },
        /**
         * Sets object's properties from options
         * @param {Object} [options] Options object
         */
        setOptions: function(p) {
          this._setOptions(p), this._initGradient(p.fill, "fill"), this._initGradient(p.stroke, "stroke"), this._initPattern(p.fill, "fill"), this._initPattern(p.stroke, "stroke");
        },
        /**
         * Transforms context when rendering an object
         * @param {CanvasRenderingContext2D} ctx Context
         */
        transform: function(p) {
          var v = this.group && !this.group._transformDone || this.group && this.canvas && p === this.canvas.contextTop, b = this.calcTransformMatrix(!v);
          p.transform(b[0], b[1], b[2], b[3], b[4], b[5]);
        },
        /**
         * Returns an object representation of an instance
         * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output
         * @return {Object} Object representation of an instance
         */
        toObject: function(p) {
          var v = s.Object.NUM_FRACTION_DIGITS, b = {
            type: this.type,
            version: s.version,
            originX: this.originX,
            originY: this.originY,
            left: o(this.left, v),
            top: o(this.top, v),
            width: o(this.width, v),
            height: o(this.height, v),
            fill: this.fill && this.fill.toObject ? this.fill.toObject() : this.fill,
            stroke: this.stroke && this.stroke.toObject ? this.stroke.toObject() : this.stroke,
            strokeWidth: o(this.strokeWidth, v),
            strokeDashArray: this.strokeDashArray ? this.strokeDashArray.concat() : this.strokeDashArray,
            strokeLineCap: this.strokeLineCap,
            strokeDashOffset: this.strokeDashOffset,
            strokeLineJoin: this.strokeLineJoin,
            strokeUniform: this.strokeUniform,
            strokeMiterLimit: o(this.strokeMiterLimit, v),
            scaleX: o(this.scaleX, v),
            scaleY: o(this.scaleY, v),
            angle: o(this.angle, v),
            flipX: this.flipX,
            flipY: this.flipY,
            opacity: o(this.opacity, v),
            shadow: this.shadow && this.shadow.toObject ? this.shadow.toObject() : this.shadow,
            visible: this.visible,
            backgroundColor: this.backgroundColor,
            fillRule: this.fillRule,
            paintFirst: this.paintFirst,
            globalCompositeOperation: this.globalCompositeOperation,
            skewX: o(this.skewX, v),
            skewY: o(this.skewY, v)
          };
          return this.clipPath && !this.clipPath.excludeFromExport && (b.clipPath = this.clipPath.toObject(p), b.clipPath.inverted = this.clipPath.inverted, b.clipPath.absolutePositioned = this.clipPath.absolutePositioned), s.util.populateWithProperties(this, b, p), this.includeDefaultValues || (b = this._removeDefaultValues(b)), b;
        },
        /**
         * Returns (dataless) object representation of an instance
         * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output
         * @return {Object} Object representation of an instance
         */
        toDatalessObject: function(p) {
          return this.toObject(p);
        },
        /**
         * @private
         * @param {Object} object
         */
        _removeDefaultValues: function(p) {
          var v = s.util.getKlass(p.type).prototype, b = v.stateProperties;
          return b.forEach(function(y) {
            y === "left" || y === "top" || (p[y] === v[y] && delete p[y], Array.isArray(p[y]) && Array.isArray(v[y]) && p[y].length === 0 && v[y].length === 0 && delete p[y]);
          }), p;
        },
        /**
         * Returns a string representation of an instance
         * @return {String}
         */
        toString: function() {
          return "#<fabric." + u(this.type) + ">";
        },
        /**
         * Return the object scale factor counting also the group scaling
         * @return {Object} object with scaleX and scaleY properties
         */
        getObjectScaling: function() {
          if (!this.group)
            return {
              scaleX: this.scaleX,
              scaleY: this.scaleY
            };
          var p = s.util.qrDecompose(this.calcTransformMatrix());
          return { scaleX: Math.abs(p.scaleX), scaleY: Math.abs(p.scaleY) };
        },
        /**
         * Return the object scale factor counting also the group scaling, zoom and retina
         * @return {Object} object with scaleX and scaleY properties
         */
        getTotalObjectScaling: function() {
          var p = this.getObjectScaling(), v = p.scaleX, b = p.scaleY;
          if (this.canvas) {
            var y = this.canvas.getZoom(), w = this.canvas.getRetinaScaling();
            v *= y * w, b *= y * w;
          }
          return { scaleX: v, scaleY: b };
        },
        /**
         * Return the object opacity counting also the group property
         * @return {Number}
         */
        getObjectOpacity: function() {
          var p = this.opacity;
          return this.group && (p *= this.group.getObjectOpacity()), p;
        },
        /**
         * @private
         * @param {String} key
         * @param {*} value
         * @return {fabric.Object} thisArg
         */
        _set: function(p, v) {
          var b = p === "scaleX" || p === "scaleY", y = this[p] !== v, w = !1;
          return b && (v = this._constrainScale(v)), p === "scaleX" && v < 0 ? (this.flipX = !this.flipX, v *= -1) : p === "scaleY" && v < 0 ? (this.flipY = !this.flipY, v *= -1) : p === "shadow" && v && !(v instanceof s.Shadow) ? v = new s.Shadow(v) : p === "dirty" && this.group && this.group.set("dirty", v), this[p] = v, y && (w = this.group && this.group.isOnACache(), this.cacheProperties.indexOf(p) > -1 ? (this.dirty = !0, w && this.group.set("dirty", !0)) : w && this.stateProperties.indexOf(p) > -1 && this.group.set("dirty", !0)), this;
        },
        /**
         * This callback function is called by the parent group of an object every
         * time a non-delegated property changes on the group. It is passed the key
         * and value as parameters. Not adding in this function's signature to avoid
         * Travis build error about unused variables.
         */
        setOnGroup: function() {
        },
        /**
         * Retrieves viewportTransform from Object's canvas if possible
         * @method getViewportTransform
         * @memberOf fabric.Object.prototype
         * @return {Array}
         */
        getViewportTransform: function() {
          return this.canvas && this.canvas.viewportTransform ? this.canvas.viewportTransform : s.iMatrix.concat();
        },
        /*
         * @private
         * return if the object would be visible in rendering
         * @memberOf fabric.Object.prototype
         * @return {Boolean}
         */
        isNotVisible: function() {
          return this.opacity === 0 || !this.width && !this.height && this.strokeWidth === 0 || !this.visible;
        },
        /**
         * Renders an object on a specified context
         * @param {CanvasRenderingContext2D} ctx Context to render on
         */
        render: function(p) {
          this.isNotVisible() || this.canvas && this.canvas.skipOffscreen && !this.group && !this.isOnScreen() || (p.save(), this._setupCompositeOperation(p), this.drawSelectionBackground(p), this.transform(p), this._setOpacity(p), this._setShadow(p, this), this.shouldCache() ? (this.renderCache(), this.drawCacheOnCanvas(p)) : (this._removeCacheCanvas(), this.dirty = !1, this.drawObject(p), this.objectCaching && this.statefullCache && this.saveState({ propertySet: "cacheProperties" })), p.restore());
        },
        renderCache: function(p) {
          p = p || {}, (!this._cacheCanvas || !this._cacheContext) && this._createCacheCanvas(), this.isCacheDirty() && (this.statefullCache && this.saveState({ propertySet: "cacheProperties" }), this.drawObject(this._cacheContext, p.forClipping), this.dirty = !1);
        },
        /**
         * Remove cacheCanvas and its dimensions from the objects
         */
        _removeCacheCanvas: function() {
          this._cacheCanvas = null, this._cacheContext = null, this.cacheWidth = 0, this.cacheHeight = 0;
        },
        /**
         * return true if the object will draw a stroke
         * Does not consider text styles. This is just a shortcut used at rendering time
         * We want it to be an approximation and be fast.
         * wrote to avoid extra caching, it has to return true when stroke happens,
         * can guess when it will not happen at 100% chance, does not matter if it misses
         * some use case where the stroke is invisible.
         * @since 3.0.0
         * @returns Boolean
         */
        hasStroke: function() {
          return this.stroke && this.stroke !== "transparent" && this.strokeWidth !== 0;
        },
        /**
         * return true if the object will draw a fill
         * Does not consider text styles. This is just a shortcut used at rendering time
         * We want it to be an approximation and be fast.
         * wrote to avoid extra caching, it has to return true when fill happens,
         * can guess when it will not happen at 100% chance, does not matter if it misses
         * some use case where the fill is invisible.
         * @since 3.0.0
         * @returns Boolean
         */
        hasFill: function() {
          return this.fill && this.fill !== "transparent";
        },
        /**
         * When set to `true`, force the object to have its own cache, even if it is inside a group
         * it may be needed when your object behave in a particular way on the cache and always needs
         * its own isolated canvas to render correctly.
         * Created to be overridden
         * since 1.7.12
         * @returns Boolean
         */
        needsItsOwnCache: function() {
          return !!(this.paintFirst === "stroke" && this.hasFill() && this.hasStroke() && typeof this.shadow == "object" || this.clipPath);
        },
        /**
         * Decide if the object should cache or not. Create its own cache level
         * objectCaching is a global flag, wins over everything
         * needsItsOwnCache should be used when the object drawing method requires
         * a cache step. None of the fabric classes requires it.
         * Generally you do not cache objects in groups because the group outside is cached.
         * Read as: cache if is needed, or if the feature is enabled but we are not already caching.
         * @return {Boolean}
         */
        shouldCache: function() {
          return this.ownCaching = this.needsItsOwnCache() || this.objectCaching && (!this.group || !this.group.isOnACache()), this.ownCaching;
        },
        /**
         * Check if this object or a child object will cast a shadow
         * used by Group.shouldCache to know if child has a shadow recursively
         * @return {Boolean}
         */
        willDrawShadow: function() {
          return !!this.shadow && (this.shadow.offsetX !== 0 || this.shadow.offsetY !== 0);
        },
        /**
         * Execute the drawing operation for an object clipPath
         * @param {CanvasRenderingContext2D} ctx Context to render on
         * @param {fabric.Object} clipPath
         */
        drawClipPathOnCache: function(p, v) {
          if (p.save(), v.inverted ? p.globalCompositeOperation = "destination-out" : p.globalCompositeOperation = "destination-in", v.absolutePositioned) {
            var b = s.util.invertTransform(this.calcTransformMatrix());
            p.transform(b[0], b[1], b[2], b[3], b[4], b[5]);
          }
          v.transform(p), p.scale(1 / v.zoomX, 1 / v.zoomY), p.drawImage(v._cacheCanvas, -v.cacheTranslationX, -v.cacheTranslationY), p.restore();
        },
        /**
         * Execute the drawing operation for an object on a specified context
         * @param {CanvasRenderingContext2D} ctx Context to render on
         */
        drawObject: function(p, v) {
          var b = this.fill, y = this.stroke;
          v ? (this.fill = "black", this.stroke = "", this._setClippingProperties(p)) : this._renderBackground(p), this._render(p), this._drawClipPath(p, this.clipPath), this.fill = b, this.stroke = y;
        },
        /**
         * Prepare clipPath state and cache and draw it on instance's cache
         * @param {CanvasRenderingContext2D} ctx
         * @param {fabric.Object} clipPath
         */
        _drawClipPath: function(p, v) {
          v && (v.canvas = this.canvas, v.shouldCache(), v._transformDone = !0, v.renderCache({ forClipping: !0 }), this.drawClipPathOnCache(p, v));
        },
        /**
         * Paint the cached copy of the object on the target context.
         * @param {CanvasRenderingContext2D} ctx Context to render on
         */
        drawCacheOnCanvas: function(p) {
          p.scale(1 / this.zoomX, 1 / this.zoomY), p.drawImage(this._cacheCanvas, -this.cacheTranslationX, -this.cacheTranslationY);
        },
        /**
         * Check if cache is dirty
         * @param {Boolean} skipCanvas skip canvas checks because this object is painted
         * on parent canvas.
         */
        isCacheDirty: function(p) {
          if (this.isNotVisible())
            return !1;
          if (this._cacheCanvas && this._cacheContext && !p && this._updateCacheCanvas())
            return !0;
          if (this.dirty || this.clipPath && this.clipPath.absolutePositioned || this.statefullCache && this.hasStateChanged("cacheProperties")) {
            if (this._cacheCanvas && this._cacheContext && !p) {
              var v = this.cacheWidth / this.zoomX, b = this.cacheHeight / this.zoomY;
              this._cacheContext.clearRect(-v / 2, -b / 2, v, b);
            }
            return !0;
          }
          return !1;
        },
        /**
         * Draws a background for the object big as its untransformed dimensions
         * @private
         * @param {CanvasRenderingContext2D} ctx Context to render on
         */
        _renderBackground: function(p) {
          if (this.backgroundColor) {
            var v = this._getNonTransformedDimensions();
            p.fillStyle = this.backgroundColor, p.fillRect(
              -v.x / 2,
              -v.y / 2,
              v.x,
              v.y
            ), this._removeShadow(p);
          }
        },
        /**
         * @private
         * @param {CanvasRenderingContext2D} ctx Context to render on
         */
        _setOpacity: function(p) {
          this.group && !this.group._transformDone ? p.globalAlpha = this.getObjectOpacity() : p.globalAlpha *= this.opacity;
        },
        _setStrokeStyles: function(p, v) {
          var b = v.stroke;
          b && (p.lineWidth = v.strokeWidth, p.lineCap = v.strokeLineCap, p.lineDashOffset = v.strokeDashOffset, p.lineJoin = v.strokeLineJoin, p.miterLimit = v.strokeMiterLimit, b.toLive ? b.gradientUnits === "percentage" || b.gradientTransform || b.patternTransform ? this._applyPatternForTransformedGradient(p, b) : (p.strokeStyle = b.toLive(p, this), this._applyPatternGradientTransform(p, b)) : p.strokeStyle = v.stroke);
        },
        _setFillStyles: function(p, v) {
          var b = v.fill;
          b && (b.toLive ? (p.fillStyle = b.toLive(p, this), this._applyPatternGradientTransform(p, v.fill)) : p.fillStyle = b);
        },
        _setClippingProperties: function(p) {
          p.globalAlpha = 1, p.strokeStyle = "transparent", p.fillStyle = "#000000";
        },
        /**
         * @private
         * Sets line dash
         * @param {CanvasRenderingContext2D} ctx Context to set the dash line on
         * @param {Array} dashArray array representing dashes
         */
        _setLineDash: function(p, v) {
          !v || v.length === 0 || (1 & v.length && v.push.apply(v, v), p.setLineDash(v));
        },
        /**
         * Renders controls and borders for the object
         * the context here is not transformed
         * @param {CanvasRenderingContext2D} ctx Context to render on
         * @param {Object} [styleOverride] properties to override the object style
         */
        _renderControls: function(p, v) {
          var b = this.getViewportTransform(), y = this.calcTransformMatrix(), w, C, _;
          v = v || {}, C = typeof v.hasBorders < "u" ? v.hasBorders : this.hasBorders, _ = typeof v.hasControls < "u" ? v.hasControls : this.hasControls, y = s.util.multiplyTransformMatrices(b, y), w = s.util.qrDecompose(y), p.save(), p.translate(w.translateX, w.translateY), p.lineWidth = 1 * this.borderScaleFactor, this.group || (p.globalAlpha = this.isMoving ? this.borderOpacityWhenMoving : 1), this.flipX && (w.angle -= 180), p.rotate(c(this.group ? w.angle : this.angle)), v.forActiveSelection || this.group ? C && this.drawBordersInGroup(p, w, v) : C && this.drawBorders(p, v), _ && this.drawControls(p, v), p.restore();
        },
        /**
         * @private
         * @param {CanvasRenderingContext2D} ctx Context to render on
         */
        _setShadow: function(p) {
          if (this.shadow) {
            var v = this.shadow, b = this.canvas, y, w = b && b.viewportTransform[0] || 1, C = b && b.viewportTransform[3] || 1;
            v.nonScaling ? y = { scaleX: 1, scaleY: 1 } : y = this.getObjectScaling(), b && b._isRetinaScaling() && (w *= s.devicePixelRatio, C *= s.devicePixelRatio), p.shadowColor = v.color, p.shadowBlur = v.blur * s.browserShadowBlurConstant * (w + C) * (y.scaleX + y.scaleY) / 4, p.shadowOffsetX = v.offsetX * w * y.scaleX, p.shadowOffsetY = v.offsetY * C * y.scaleY;
          }
        },
        /**
         * @private
         * @param {CanvasRenderingContext2D} ctx Context to render on
         */
        _removeShadow: function(p) {
          this.shadow && (p.shadowColor = "", p.shadowBlur = p.shadowOffsetX = p.shadowOffsetY = 0);
        },
        /**
         * @private
         * @param {CanvasRenderingContext2D} ctx Context to render on
         * @param {Object} filler fabric.Pattern or fabric.Gradient
         * @return {Object} offset.offsetX offset for text rendering
         * @return {Object} offset.offsetY offset for text rendering
         */
        _applyPatternGradientTransform: function(p, v) {
          if (!v || !v.toLive)
            return { offsetX: 0, offsetY: 0 };
          var b = v.gradientTransform || v.patternTransform, y = -this.width / 2 + v.offsetX || 0, w = -this.height / 2 + v.offsetY || 0;
          return v.gradientUnits === "percentage" ? p.transform(this.width, 0, 0, this.height, y, w) : p.transform(1, 0, 0, 1, y, w), b && p.transform(b[0], b[1], b[2], b[3], b[4], b[5]), { offsetX: y, offsetY: w };
        },
        /**
         * @private
         * @param {CanvasRenderingContext2D} ctx Context to render on
         */
        _renderPaintInOrder: function(p) {
          this.paintFirst === "stroke" ? (this._renderStroke(p), this._renderFill(p)) : (this._renderFill(p), this._renderStroke(p));
        },
        /**
         * @private
         * function that actually render something on the context.
         * empty here to allow Obects to work on tests to benchmark fabric functionalites
         * not related to rendering
         * @param {CanvasRenderingContext2D} ctx Context to render on
         */
        _render: function() {
        },
        /**
         * @private
         * @param {CanvasRenderingContext2D} ctx Context to render on
         */
        _renderFill: function(p) {
          this.fill && (p.save(), this._setFillStyles(p, this), this.fillRule === "evenodd" ? p.fill("evenodd") : p.fill(), p.restore());
        },
        /**
         * @private
         * @param {CanvasRenderingContext2D} ctx Context to render on
         */
        _renderStroke: function(p) {
          if (!(!this.stroke || this.strokeWidth === 0)) {
            if (this.shadow && !this.shadow.affectStroke && this._removeShadow(p), p.save(), this.strokeUniform && this.group) {
              var v = this.getObjectScaling();
              p.scale(1 / v.scaleX, 1 / v.scaleY);
            } else
              this.strokeUniform && p.scale(1 / this.scaleX, 1 / this.scaleY);
            this._setLineDash(p, this.strokeDashArray), this._setStrokeStyles(p, this), p.stroke(), p.restore();
          }
        },
        /**
         * This function try to patch the missing gradientTransform on canvas gradients.
         * transforming a context to transform the gradient, is going to transform the stroke too.
         * we want to transform the gradient but not the stroke operation, so we create
         * a transformed gradient on a pattern and then we use the pattern instead of the gradient.
         * this method has drwabacks: is slow, is in low resolution, needs a patch for when the size
         * is limited.
         * @private
         * @param {CanvasRenderingContext2D} ctx Context to render on
         * @param {fabric.Gradient} filler a fabric gradient instance
         */
        _applyPatternForTransformedGradient: function(p, v) {
          var b = this._limitCacheSize(this._getCacheCanvasDimensions()), y = s.util.createCanvasElement(), w, C = this.canvas.getRetinaScaling(), _ = b.x / this.scaleX / C, S = b.y / this.scaleY / C;
          y.width = _, y.height = S, w = y.getContext("2d"), w.beginPath(), w.moveTo(0, 0), w.lineTo(_, 0), w.lineTo(_, S), w.lineTo(0, S), w.closePath(), w.translate(_ / 2, S / 2), w.scale(
            b.zoomX / this.scaleX / C,
            b.zoomY / this.scaleY / C
          ), this._applyPatternGradientTransform(w, v), w.fillStyle = v.toLive(p), w.fill(), p.translate(-this.width / 2 - this.strokeWidth / 2, -this.height / 2 - this.strokeWidth / 2), p.scale(
            C * this.scaleX / b.zoomX,
            C * this.scaleY / b.zoomY
          ), p.strokeStyle = w.createPattern(y, "no-repeat");
        },
        /**
         * This function is an helper for svg import. it returns the center of the object in the svg
         * untransformed coordinates
         * @private
         * @return {Object} center point from element coordinates
         */
        _findCenterFromElement: function() {
          return { x: this.left + this.width / 2, y: this.top + this.height / 2 };
        },
        /**
         * This function is an helper for svg import. it decompose the transformMatrix
         * and assign properties to object.
         * untransformed coordinates
         * @private
         * @chainable
         */
        _assignTransformMatrixProps: function() {
          if (this.transformMatrix) {
            var p = s.util.qrDecompose(this.transformMatrix);
            this.flipX = !1, this.flipY = !1, this.set("scaleX", p.scaleX), this.set("scaleY", p.scaleY), this.angle = p.angle, this.skewX = p.skewX, this.skewY = 0;
          }
        },
        /**
         * This function is an helper for svg import. it removes the transform matrix
         * and set to object properties that fabricjs can handle
         * @private
         * @param {Object} preserveAspectRatioOptions
         * @return {thisArg}
         */
        _removeTransformMatrix: function(p) {
          var v = this._findCenterFromElement();
          this.transformMatrix && (this._assignTransformMatrixProps(), v = s.util.transformPoint(v, this.transformMatrix)), this.transformMatrix = null, p && (this.scaleX *= p.scaleX, this.scaleY *= p.scaleY, this.cropX = p.cropX, this.cropY = p.cropY, v.x += p.offsetLeft, v.y += p.offsetTop, this.width = p.width, this.height = p.height), this.setPositionByOrigin(v, "center", "center");
        },
        /**
         * Clones an instance, using a callback method will work for every object.
         * @param {Function} callback Callback is invoked with a clone as a first argument
         * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output
         */
        clone: function(p, v) {
          var b = this.toObject(v);
          this.constructor.fromObject ? this.constructor.fromObject(b, p) : s.Object._fromObject("Object", b, p);
        },
        /**
         * Creates an instance of fabric.Image out of an object
         * makes use of toCanvasElement.
         * Once this method was based on toDataUrl and loadImage, so it also had a quality
         * and format option. toCanvasElement is faster and produce no loss of quality.
         * If you need to get a real Jpeg or Png from an object, using toDataURL is the right way to do it.
         * toCanvasElement and then toBlob from the obtained canvas is also a good option.
         * This method is sync now, but still support the callback because we did not want to break.
         * When fabricJS 5.0 will be planned, this will probably be changed to not have a callback.
         * @param {Function} callback callback, invoked with an instance as a first argument
         * @param {Object} [options] for clone as image, passed to toDataURL
         * @param {Number} [options.multiplier=1] Multiplier to scale by
         * @param {Number} [options.left] Cropping left offset. Introduced in v1.2.14
         * @param {Number} [options.top] Cropping top offset. Introduced in v1.2.14
         * @param {Number} [options.width] Cropping width. Introduced in v1.2.14
         * @param {Number} [options.height] Cropping height. Introduced in v1.2.14
         * @param {Boolean} [options.enableRetinaScaling] Enable retina scaling for clone image. Introduce in 1.6.4
         * @param {Boolean} [options.withoutTransform] Remove current object transform ( no scale , no angle, no flip, no skew ). Introduced in 2.3.4
         * @param {Boolean} [options.withoutShadow] Remove current object shadow. Introduced in 2.4.2
         * @return {fabric.Object} thisArg
         */
        cloneAsImage: function(p, v) {
          var b = this.toCanvasElement(v);
          return p && p(new s.Image(b)), this;
        },
        /**
         * Converts an object into a HTMLCanvas element
         * @param {Object} options Options object
         * @param {Number} [options.multiplier=1] Multiplier to scale by
         * @param {Number} [options.left] Cropping left offset. Introduced in v1.2.14
         * @param {Number} [options.top] Cropping top offset. Introduced in v1.2.14
         * @param {Number} [options.width] Cropping width. Introduced in v1.2.14
         * @param {Number} [options.height] Cropping height. Introduced in v1.2.14
         * @param {Boolean} [options.enableRetinaScaling] Enable retina scaling for clone image. Introduce in 1.6.4
         * @param {Boolean} [options.withoutTransform] Remove current object transform ( no scale , no angle, no flip, no skew ). Introduced in 2.3.4
         * @param {Boolean} [options.withoutShadow] Remove current object shadow. Introduced in 2.4.2
         * @return {HTMLCanvasElement} Returns DOM element <canvas> with the fabric.Object
         */
        toCanvasElement: function(p) {
          p || (p = {});
          var v = s.util, b = v.saveObjectTransform(this), y = this.group, w = this.shadow, C = Math.abs, _ = (p.multiplier || 1) * (p.enableRetinaScaling ? s.devicePixelRatio : 1);
          delete this.group, p.withoutTransform && v.resetObjectTransform(this), p.withoutShadow && (this.shadow = null);
          var S = s.util.createCanvasElement(), k = this.getBoundingRect(!0, !0), I = this.shadow, L, j = { x: 0, y: 0 }, G, te, W;
          I && (G = I.blur, I.nonScaling ? L = { scaleX: 1, scaleY: 1 } : L = this.getObjectScaling(), j.x = 2 * Math.round(C(I.offsetX) + G) * C(L.scaleX), j.y = 2 * Math.round(C(I.offsetY) + G) * C(L.scaleY)), te = k.width + j.x, W = k.height + j.y, S.width = Math.ceil(te), S.height = Math.ceil(W);
          var q = new s.StaticCanvas(S, {
            enableRetinaScaling: !1,
            renderOnAddRemove: !1,
            skipOffscreen: !1
          });
          p.format === "jpeg" && (q.backgroundColor = "#fff"), this.setPositionByOrigin(new s.Point(q.width / 2, q.height / 2), "center", "center");
          var K = this.canvas;
          q.add(this);
          var ne = q.toCanvasElement(_ || 1, p);
          return this.shadow = w, this.set("canvas", K), y && (this.group = y), this.set(b).setCoords(), q._objects = [], q.dispose(), q = null, ne;
        },
        /**
         * Converts an object into a data-url-like string
         * @param {Object} options Options object
         * @param {String} [options.format=png] The format of the output image. Either "jpeg" or "png"
         * @param {Number} [options.quality=1] Quality level (0..1). Only used for jpeg.
         * @param {Number} [options.multiplier=1] Multiplier to scale by
         * @param {Number} [options.left] Cropping left offset. Introduced in v1.2.14
         * @param {Number} [options.top] Cropping top offset. Introduced in v1.2.14
         * @param {Number} [options.width] Cropping width. Introduced in v1.2.14
         * @param {Number} [options.height] Cropping height. Introduced in v1.2.14
         * @param {Boolean} [options.enableRetinaScaling] Enable retina scaling for clone image. Introduce in 1.6.4
         * @param {Boolean} [options.withoutTransform] Remove current object transform ( no scale , no angle, no flip, no skew ). Introduced in 2.3.4
         * @param {Boolean} [options.withoutShadow] Remove current object shadow. Introduced in 2.4.2
         * @return {String} Returns a data: URL containing a representation of the object in the format specified by options.format
         */
        toDataURL: function(p) {
          return p || (p = {}), s.util.toDataURL(this.toCanvasElement(p), p.format || "png", p.quality || 1);
        },
        /**
         * Returns true if specified type is identical to the type of an instance
         * @param {String} type Type to check against
         * @return {Boolean}
         */
        isType: function(p) {
          return arguments.length > 1 ? Array.from(arguments).includes(this.type) : this.type === p;
        },
        /**
         * Returns complexity of an instance
         * @return {Number} complexity of this instance (is 1 unless subclassed)
         */
        complexity: function() {
          return 1;
        },
        /**
         * Returns a JSON representation of an instance
         * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output
         * @return {Object} JSON
         */
        toJSON: function(p) {
          return this.toObject(p);
        },
        /**
         * Sets "angle" of an instance with centered rotation
         * @param {Number} angle Angle value (in degrees)
         * @return {fabric.Object} thisArg
         * @chainable
         */
        rotate: function(p) {
          var v = (this.originX !== "center" || this.originY !== "center") && this.centeredRotation;
          return v && this._setOriginToCenter(), this.set("angle", p), v && this._resetOrigin(), this;
        },
        /**
         * Centers object horizontally on canvas to which it was added last.
         * You might need to call `setCoords` on an object after centering, to update controls area.
         * @return {fabric.Object} thisArg
         * @chainable
         */
        centerH: function() {
          return this.canvas && this.canvas.centerObjectH(this), this;
        },
        /**
         * Centers object horizontally on current viewport of canvas to which it was added last.
         * You might need to call `setCoords` on an object after centering, to update controls area.
         * @return {fabric.Object} thisArg
         * @chainable
         */
        viewportCenterH: function() {
          return this.canvas && this.canvas.viewportCenterObjectH(this), this;
        },
        /**
         * Centers object vertically on canvas to which it was added last.
         * You might need to call `setCoords` on an object after centering, to update controls area.
         * @return {fabric.Object} thisArg
         * @chainable
         */
        centerV: function() {
          return this.canvas && this.canvas.centerObjectV(this), this;
        },
        /**
         * Centers object vertically on current viewport of canvas to which it was added last.
         * You might need to call `setCoords` on an object after centering, to update controls area.
         * @return {fabric.Object} thisArg
         * @chainable
         */
        viewportCenterV: function() {
          return this.canvas && this.canvas.viewportCenterObjectV(this), this;
        },
        /**
         * Centers object vertically and horizontally on canvas to which is was added last
         * You might need to call `setCoords` on an object after centering, to update controls area.
         * @return {fabric.Object} thisArg
         * @chainable
         */
        center: function() {
          return this.canvas && this.canvas.centerObject(this), this;
        },
        /**
         * Centers object on current viewport of canvas to which it was added last.
         * You might need to call `setCoords` on an object after centering, to update controls area.
         * @return {fabric.Object} thisArg
         * @chainable
         */
        viewportCenter: function() {
          return this.canvas && this.canvas.viewportCenterObject(this), this;
        },
        /**
         * Returns coordinates of a pointer relative to an object
         * @param {Event} e Event to operate upon
         * @param {Object} [pointer] Pointer to operate upon (instead of event)
         * @return {Object} Coordinates of a pointer (x, y)
         */
        getLocalPointer: function(p, v) {
          v = v || this.canvas.getPointer(p);
          var b = new s.Point(v.x, v.y), y = this._getLeftTopCoords();
          return this.angle && (b = s.util.rotatePoint(
            b,
            y,
            c(-this.angle)
          )), {
            x: b.x - y.x,
            y: b.y - y.y
          };
        },
        /**
         * Sets canvas globalCompositeOperation for specific object
         * custom composition operation for the particular object can be specified using globalCompositeOperation property
         * @param {CanvasRenderingContext2D} ctx Rendering canvas context
         */
        _setupCompositeOperation: function(p) {
          this.globalCompositeOperation && (p.globalCompositeOperation = this.globalCompositeOperation);
        },
        /**
         * cancel instance's running animations
         * override if necessary to dispose artifacts such as `clipPath`
         */
        dispose: function() {
          s.runningAnimations && s.runningAnimations.cancelByTarget(this);
        }
      }
    ), s.util.createAccessors && s.util.createAccessors(s.Object), a(s.Object.prototype, s.Observable), s.Object.NUM_FRACTION_DIGITS = 2, s.Object.ENLIVEN_PROPS = ["clipPath"], s.Object._fromObject = function(p, v, b, y) {
      var w = s[p];
      v = h(v, !0), s.util.enlivenPatterns([v.fill, v.stroke], function(C) {
        typeof C[0] < "u" && (v.fill = C[0]), typeof C[1] < "u" && (v.stroke = C[1]), s.util.enlivenObjectEnlivables(v, v, function() {
          var _ = y ? new w(v[y], v) : new w(v);
          b && b(_);
        });
      });
    }, s.Object.__uid = 0);
  }(t), function() {
    var l = e.util.degreesToRadians, s = {
      left: -0.5,
      center: 0,
      right: 0.5
    }, a = {
      top: -0.5,
      center: 0,
      bottom: 0.5
    };
    e.util.object.extend(
      e.Object.prototype,
      /** @lends fabric.Object.prototype */
      {
        /**
         * Translates the coordinates from a set of origin to another (based on the object's dimensions)
         * @param {fabric.Point} point The point which corresponds to the originX and originY params
         * @param {String} fromOriginX Horizontal origin: 'left', 'center' or 'right'
         * @param {String} fromOriginY Vertical origin: 'top', 'center' or 'bottom'
         * @param {String} toOriginX Horizontal origin: 'left', 'center' or 'right'
         * @param {String} toOriginY Vertical origin: 'top', 'center' or 'bottom'
         * @return {fabric.Point}
         */
        translateToGivenOrigin: function(h, o, u, c, d) {
          var m = h.x, p = h.y, v, b, y;
          return typeof o == "string" ? o = s[o] : o -= 0.5, typeof c == "string" ? c = s[c] : c -= 0.5, v = c - o, typeof u == "string" ? u = a[u] : u -= 0.5, typeof d == "string" ? d = a[d] : d -= 0.5, b = d - u, (v || b) && (y = this._getTransformedDimensions(), m = h.x + v * y.x, p = h.y + b * y.y), new e.Point(m, p);
        },
        /**
         * Translates the coordinates from origin to center coordinates (based on the object's dimensions)
         * @param {fabric.Point} point The point which corresponds to the originX and originY params
         * @param {String} originX Horizontal origin: 'left', 'center' or 'right'
         * @param {String} originY Vertical origin: 'top', 'center' or 'bottom'
         * @return {fabric.Point}
         */
        translateToCenterPoint: function(h, o, u) {
          var c = this.translateToGivenOrigin(h, o, u, "center", "center");
          return this.angle ? e.util.rotatePoint(c, h, l(this.angle)) : c;
        },
        /**
         * Translates the coordinates from center to origin coordinates (based on the object's dimensions)
         * @param {fabric.Point} center The point which corresponds to center of the object
         * @param {String} originX Horizontal origin: 'left', 'center' or 'right'
         * @param {String} originY Vertical origin: 'top', 'center' or 'bottom'
         * @return {fabric.Point}
         */
        translateToOriginPoint: function(h, o, u) {
          var c = this.translateToGivenOrigin(h, "center", "center", o, u);
          return this.angle ? e.util.rotatePoint(c, h, l(this.angle)) : c;
        },
        /**
         * Returns the real center coordinates of the object
         * @return {fabric.Point}
         */
        getCenterPoint: function() {
          var h = new e.Point(this.left, this.top);
          return this.translateToCenterPoint(h, this.originX, this.originY);
        },
        /**
         * Returns the coordinates of the object based on center coordinates
         * @param {fabric.Point} point The point which corresponds to the originX and originY params
         * @return {fabric.Point}
         */
        // getOriginPoint: function(center) {
        //   return this.translateToOriginPoint(center, this.originX, this.originY);
        // },
        /**
         * Returns the coordinates of the object as if it has a different origin
         * @param {String} originX Horizontal origin: 'left', 'center' or 'right'
         * @param {String} originY Vertical origin: 'top', 'center' or 'bottom'
         * @return {fabric.Point}
         */
        getPointByOrigin: function(h, o) {
          var u = this.getCenterPoint();
          return this.translateToOriginPoint(u, h, o);
        },
        /**
         * Returns the point in local coordinates
         * @param {fabric.Point} point The point relative to the global coordinate system
         * @param {String} originX Horizontal origin: 'left', 'center' or 'right'
         * @param {String} originY Vertical origin: 'top', 'center' or 'bottom'
         * @return {fabric.Point}
         */
        toLocalPoint: function(h, o, u) {
          var c = this.getCenterPoint(), d, m;
          return typeof o < "u" && typeof u < "u" ? d = this.translateToGivenOrigin(c, "center", "center", o, u) : d = new e.Point(this.left, this.top), m = new e.Point(h.x, h.y), this.angle && (m = e.util.rotatePoint(m, c, -l(this.angle))), m.subtractEquals(d);
        },
        /**
         * Returns the point in global coordinates
         * @param {fabric.Point} The point relative to the local coordinate system
         * @return {fabric.Point}
         */
        // toGlobalPoint: function(point) {
        //   return fabric.util.rotatePoint(point, this.getCenterPoint(), degreesToRadians(this.angle)).addEquals(new fabric.Point(this.left, this.top));
        // },
        /**
         * Sets the position of the object taking into consideration the object's origin
         * @param {fabric.Point} pos The new position of the object
         * @param {String} originX Horizontal origin: 'left', 'center' or 'right'
         * @param {String} originY Vertical origin: 'top', 'center' or 'bottom'
         * @return {void}
         */
        setPositionByOrigin: function(h, o, u) {
          var c = this.translateToCenterPoint(h, o, u), d = this.translateToOriginPoint(c, this.originX, this.originY);
          this.set("left", d.x), this.set("top", d.y);
        },
        /**
         * @param {String} to One of 'left', 'center', 'right'
         */
        adjustPosition: function(h) {
          var o = l(this.angle), u = this.getScaledWidth(), c = e.util.cos(o) * u, d = e.util.sin(o) * u, m, p;
          typeof this.originX == "string" ? m = s[this.originX] : m = this.originX - 0.5, typeof h == "string" ? p = s[h] : p = h - 0.5, this.left += c * (p - m), this.top += d * (p - m), this.setCoords(), this.originX = h;
        },
        /**
         * Sets the origin/position of the object to it's center point
         * @private
         * @return {void}
         */
        _setOriginToCenter: function() {
          this._originalOriginX = this.originX, this._originalOriginY = this.originY;
          var h = this.getCenterPoint();
          this.originX = "center", this.originY = "center", this.left = h.x, this.top = h.y;
        },
        /**
         * Resets the origin/position of the object to it's original origin
         * @private
         * @return {void}
         */
        _resetOrigin: function() {
          var h = this.translateToOriginPoint(
            this.getCenterPoint(),
            this._originalOriginX,
            this._originalOriginY
          );
          this.originX = this._originalOriginX, this.originY = this._originalOriginY, this.left = h.x, this.top = h.y, this._originalOriginX = null, this._originalOriginY = null;
        },
        /**
         * @private
         */
        _getLeftTopCoords: function() {
          return this.translateToOriginPoint(this.getCenterPoint(), "left", "top");
        }
      }
    );
  }(), function() {
    function l(u) {
      return [
        new e.Point(u.tl.x, u.tl.y),
        new e.Point(u.tr.x, u.tr.y),
        new e.Point(u.br.x, u.br.y),
        new e.Point(u.bl.x, u.bl.y)
      ];
    }
    var s = e.util, a = s.degreesToRadians, h = s.multiplyTransformMatrices, o = s.transformPoint;
    s.object.extend(
      e.Object.prototype,
      /** @lends fabric.Object.prototype */
      {
        /**
         * Describe object's corner position in canvas element coordinates.
         * properties are depending on control keys and padding the main controls.
         * each property is an object with x, y and corner.
         * The `corner` property contains in a similar manner the 4 points of the
         * interactive area of the corner.
         * The coordinates depends from the controls positionHandler and are used
         * to draw and locate controls
         * @memberOf fabric.Object.prototype
         */
        oCoords: null,
        /**
         * Describe object's corner position in canvas object absolute coordinates
         * properties are tl,tr,bl,br and describe the four main corner.
         * each property is an object with x, y, instance of Fabric.Point.
         * The coordinates depends from this properties: width, height, scaleX, scaleY
         * skewX, skewY, angle, strokeWidth, top, left.
         * Those coordinates are useful to understand where an object is. They get updated
         * with oCoords but they do not need to be updated when zoom or panning change.
         * The coordinates get updated with @method setCoords.
         * You can calculate them without updating with @method calcACoords();
         * @memberOf fabric.Object.prototype
         */
        aCoords: null,
        /**
         * Describe object's corner position in canvas element coordinates.
         * includes padding. Used of object detection.
         * set and refreshed with setCoords.
         * @memberOf fabric.Object.prototype
         */
        lineCoords: null,
        /**
         * storage for object transform matrix
         */
        ownMatrixCache: null,
        /**
         * storage for object full transform matrix
         */
        matrixCache: null,
        /**
         * custom controls interface
         * controls are added by default_controls.js
         */
        controls: {},
        /**
         * return correct set of coordinates for intersection
         * this will return either aCoords or lineCoords.
         * @param {Boolean} absolute will return aCoords if true or lineCoords
         * @return {Object} {tl, tr, br, bl} points
         */
        _getCoords: function(u, c) {
          return c ? u ? this.calcACoords() : this.calcLineCoords() : ((!this.aCoords || !this.lineCoords) && this.setCoords(!0), u ? this.aCoords : this.lineCoords);
        },
        /**
         * return correct set of coordinates for intersection
         * this will return either aCoords or lineCoords.
         * The coords are returned in an array.
         * @return {Array} [tl, tr, br, bl] of points
         */
        getCoords: function(u, c) {
          return l(this._getCoords(u, c));
        },
        /**
         * Checks if object intersects with an area formed by 2 points
         * @param {Object} pointTL top-left point of area
         * @param {Object} pointBR bottom-right point of area
         * @param {Boolean} [absolute] use coordinates without viewportTransform
         * @param {Boolean} [calculate] use coordinates of current position instead of .oCoords
         * @return {Boolean} true if object intersects with an area formed by 2 points
         */
        intersectsWithRect: function(u, c, d, m) {
          var p = this.getCoords(d, m), v = e.Intersection.intersectPolygonRectangle(
            p,
            u,
            c
          );
          return v.status === "Intersection";
        },
        /**
         * Checks if object intersects with another object
         * @param {Object} other Object to test
         * @param {Boolean} [absolute] use coordinates without viewportTransform
         * @param {Boolean} [calculate] use coordinates of current position instead of .oCoords
         * @return {Boolean} true if object intersects with another object
         */
        intersectsWithObject: function(u, c, d) {
          var m = e.Intersection.intersectPolygonPolygon(
            this.getCoords(c, d),
            u.getCoords(c, d)
          );
          return m.status === "Intersection" || u.isContainedWithinObject(this, c, d) || this.isContainedWithinObject(u, c, d);
        },
        /**
         * Checks if object is fully contained within area of another object
         * @param {Object} other Object to test
         * @param {Boolean} [absolute] use coordinates without viewportTransform
         * @param {Boolean} [calculate] use coordinates of current position instead of .oCoords
         * @return {Boolean} true if object is fully contained within area of another object
         */
        isContainedWithinObject: function(u, c, d) {
          for (var m = this.getCoords(c, d), p = c ? u.aCoords : u.lineCoords, v = 0, b = u._getImageLines(p); v < 4; v++)
            if (!u.containsPoint(m[v], b))
              return !1;
          return !0;
        },
        /**
         * Checks if object is fully contained within area formed by 2 points
         * @param {Object} pointTL top-left point of area
         * @param {Object} pointBR bottom-right point of area
         * @param {Boolean} [absolute] use coordinates without viewportTransform
         * @param {Boolean} [calculate] use coordinates of current position instead of .oCoords
         * @return {Boolean} true if object is fully contained within area formed by 2 points
         */
        isContainedWithinRect: function(u, c, d, m) {
          var p = this.getBoundingRect(d, m);
          return p.left >= u.x && p.left + p.width <= c.x && p.top >= u.y && p.top + p.height <= c.y;
        },
        /**
         * Checks if point is inside the object
         * @param {fabric.Point} point Point to check against
         * @param {Object} [lines] object returned from @method _getImageLines
         * @param {Boolean} [absolute] use coordinates without viewportTransform
         * @param {Boolean} [calculate] use coordinates of current position instead of .oCoords
         * @return {Boolean} true if point is inside the object
         */
        containsPoint: function(u, v, d, m) {
          var p = this._getCoords(d, m), v = v || this._getImageLines(p), b = this._findCrossPoints(u, v);
          return b !== 0 && b % 2 === 1;
        },
        /**
         * Checks if object is contained within the canvas with current viewportTransform
         * the check is done stopping at first point that appears on screen
         * @param {Boolean} [calculate] use coordinates of current position instead of .aCoords
         * @return {Boolean} true if object is fully or partially contained within canvas
         */
        isOnScreen: function(u) {
          if (!this.canvas)
            return !1;
          var c = this.canvas.vptCoords.tl, d = this.canvas.vptCoords.br, m = this.getCoords(!0, u);
          return m.some(function(p) {
            return p.x <= d.x && p.x >= c.x && p.y <= d.y && p.y >= c.y;
          }) || this.intersectsWithRect(c, d, !0, u) ? !0 : this._containsCenterOfCanvas(c, d, u);
        },
        /**
         * Checks if the object contains the midpoint between canvas extremities
         * Does not make sense outside the context of isOnScreen and isPartiallyOnScreen
         * @private
         * @param {Fabric.Point} pointTL Top Left point
         * @param {Fabric.Point} pointBR Top Right point
         * @param {Boolean} calculate use coordinates of current position instead of .oCoords
         * @return {Boolean} true if the object contains the point
         */
        _containsCenterOfCanvas: function(u, c, d) {
          var m = { x: (u.x + c.x) / 2, y: (u.y + c.y) / 2 };
          return !!this.containsPoint(m, null, !0, d);
        },
        /**
         * Checks if object is partially contained within the canvas with current viewportTransform
         * @param {Boolean} [calculate] use coordinates of current position instead of .oCoords
         * @return {Boolean} true if object is partially contained within canvas
         */
        isPartiallyOnScreen: function(u) {
          if (!this.canvas)
            return !1;
          var c = this.canvas.vptCoords.tl, d = this.canvas.vptCoords.br;
          if (this.intersectsWithRect(c, d, !0, u))
            return !0;
          var m = this.getCoords(!0, u).every(function(p) {
            return (p.x >= d.x || p.x <= c.x) && (p.y >= d.y || p.y <= c.y);
          });
          return m && this._containsCenterOfCanvas(c, d, u);
        },
        /**
         * Method that returns an object with the object edges in it, given the coordinates of the corners
         * @private
         * @param {Object} oCoords Coordinates of the object corners
         */
        _getImageLines: function(u) {
          var c = {
            topline: {
              o: u.tl,
              d: u.tr
            },
            rightline: {
              o: u.tr,
              d: u.br
            },
            bottomline: {
              o: u.br,
              d: u.bl
            },
            leftline: {
              o: u.bl,
              d: u.tl
            }
          };
          return c;
        },
        /**
         * Helper method to determine how many cross points are between the 4 object edges
         * and the horizontal line determined by a point on canvas
         * @private
         * @param {fabric.Point} point Point to check
         * @param {Object} lines Coordinates of the object being evaluated
         */
        // remove yi, not used but left code here just in case.
        _findCrossPoints: function(u, c) {
          var d, m, p, v, b, y = 0, w;
          for (var C in c)
            if (w = c[C], !(w.o.y < u.y && w.d.y < u.y) && !(w.o.y >= u.y && w.d.y >= u.y) && (w.o.x === w.d.x && w.o.x >= u.x ? b = w.o.x : (d = 0, m = (w.d.y - w.o.y) / (w.d.x - w.o.x), p = u.y - d * u.x, v = w.o.y - m * w.o.x, b = -(p - v) / (d - m)), b >= u.x && (y += 1), y === 2))
              break;
          return y;
        },
        /**
         * Returns coordinates of object's bounding rectangle (left, top, width, height)
         * the box is intended as aligned to axis of canvas.
         * @param {Boolean} [absolute] use coordinates without viewportTransform
         * @param {Boolean} [calculate] use coordinates of current position instead of .oCoords / .aCoords
         * @return {Object} Object with left, top, width, height properties
         */
        getBoundingRect: function(u, c) {
          var d = this.getCoords(u, c);
          return s.makeBoundingBoxFromPoints(d);
        },
        /**
         * Returns width of an object's bounding box counting transformations
         * before 2.0 it was named getWidth();
         * @return {Number} width value
         */
        getScaledWidth: function() {
          return this._getTransformedDimensions().x;
        },
        /**
         * Returns height of an object bounding box counting transformations
         * before 2.0 it was named getHeight();
         * @return {Number} height value
         */
        getScaledHeight: function() {
          return this._getTransformedDimensions().y;
        },
        /**
         * Makes sure the scale is valid and modifies it if necessary
         * @private
         * @param {Number} value
         * @return {Number}
         */
        _constrainScale: function(u) {
          return Math.abs(u) < this.minScaleLimit ? u < 0 ? -this.minScaleLimit : this.minScaleLimit : u === 0 ? 1e-4 : u;
        },
        /**
         * Scales an object (equally by x and y)
         * @param {Number} value Scale factor
         * @return {fabric.Object} thisArg
         * @chainable
         */
        scale: function(u) {
          return this._set("scaleX", u), this._set("scaleY", u), this.setCoords();
        },
        /**
         * Scales an object to a given width, with respect to bounding box (scaling by x/y equally)
         * @param {Number} value New width value
         * @param {Boolean} absolute ignore viewport
         * @return {fabric.Object} thisArg
         * @chainable
         */
        scaleToWidth: function(u, c) {
          var d = this.getBoundingRect(c).width / this.getScaledWidth();
          return this.scale(u / this.width / d);
        },
        /**
         * Scales an object to a given height, with respect to bounding box (scaling by x/y equally)
         * @param {Number} value New height value
         * @param {Boolean} absolute ignore viewport
         * @return {fabric.Object} thisArg
         * @chainable
         */
        scaleToHeight: function(u, c) {
          var d = this.getBoundingRect(c).height / this.getScaledHeight();
          return this.scale(u / this.height / d);
        },
        calcLineCoords: function() {
          var u = this.getViewportTransform(), c = this.padding, d = a(this.angle), m = s.cos(d), p = s.sin(d), v = m * c, b = p * c, y = v + b, w = v - b, C = this.calcACoords(), _ = {
            tl: o(C.tl, u),
            tr: o(C.tr, u),
            bl: o(C.bl, u),
            br: o(C.br, u)
          };
          return c && (_.tl.x -= w, _.tl.y -= y, _.tr.x += y, _.tr.y -= w, _.bl.x -= y, _.bl.y += w, _.br.x += w, _.br.y += y), _;
        },
        calcOCoords: function() {
          var u = this._calcRotateMatrix(), c = this._calcTranslateMatrix(), d = this.getViewportTransform(), m = h(d, c), p = h(m, u), p = h(p, [1 / d[0], 0, 0, 1 / d[3], 0, 0]), v = this._calculateCurrentDimensions(), b = {};
          return this.forEachControl(function(y, w, C) {
            b[w] = y.positionHandler(v, p, C);
          }), b;
        },
        calcACoords: function() {
          var u = this._calcRotateMatrix(), c = this._calcTranslateMatrix(), d = h(c, u), m = this._getTransformedDimensions(), p = m.x / 2, v = m.y / 2;
          return {
            // corners
            tl: o({ x: -p, y: -v }, d),
            tr: o({ x: p, y: -v }, d),
            bl: o({ x: -p, y: v }, d),
            br: o({ x: p, y: v }, d)
          };
        },
        /**
         * Sets corner and controls position coordinates based on current angle, width and height, left and top.
         * oCoords are used to find the corners
         * aCoords are used to quickly find an object on the canvas
         * lineCoords are used to quickly find object during pointer events.
         * See {@link https://github.com/fabricjs/fabric.js/wiki/When-to-call-setCoords} and {@link http://fabricjs.com/fabric-gotchas}
         *
         * @param {Boolean} [skipCorners] skip calculation of oCoords.
         * @return {fabric.Object} thisArg
         * @chainable
         */
        setCoords: function(u) {
          return this.aCoords = this.calcACoords(), this.lineCoords = this.group ? this.aCoords : this.calcLineCoords(), u ? this : (this.oCoords = this.calcOCoords(), this._setCornerCoords && this._setCornerCoords(), this);
        },
        /**
         * calculate rotation matrix of an object
         * @return {Array} rotation matrix for the object
         */
        _calcRotateMatrix: function() {
          return s.calcRotateMatrix(this);
        },
        /**
         * calculate the translation matrix for an object transform
         * @return {Array} rotation matrix for the object
         */
        _calcTranslateMatrix: function() {
          var u = this.getCenterPoint();
          return [1, 0, 0, 1, u.x, u.y];
        },
        transformMatrixKey: function(u) {
          var c = "_", d = "";
          return !u && this.group && (d = this.group.transformMatrixKey(u) + c), d + this.top + c + this.left + c + this.scaleX + c + this.scaleY + c + this.skewX + c + this.skewY + c + this.angle + c + this.originX + c + this.originY + c + this.width + c + this.height + c + this.strokeWidth + this.flipX + this.flipY;
        },
        /**
         * calculate transform matrix that represents the current transformations from the
         * object's properties.
         * @param {Boolean} [skipGroup] return transform matrix for object not counting parent transformations
         * There are some situation in which this is useful to avoid the fake rotation.
         * @return {Array} transform matrix for the object
         */
        calcTransformMatrix: function(u) {
          var c = this.calcOwnMatrix();
          if (u || !this.group)
            return c;
          var d = this.transformMatrixKey(u), m = this.matrixCache || (this.matrixCache = {});
          return m.key === d ? m.value : (this.group && (c = h(this.group.calcTransformMatrix(!1), c)), m.key = d, m.value = c, c);
        },
        /**
         * calculate transform matrix that represents the current transformations from the
         * object's properties, this matrix does not include the group transformation
         * @return {Array} transform matrix for the object
         */
        calcOwnMatrix: function() {
          var u = this.transformMatrixKey(!0), c = this.ownMatrixCache || (this.ownMatrixCache = {});
          if (c.key === u)
            return c.value;
          var d = this._calcTranslateMatrix(), m = {
            angle: this.angle,
            translateX: d[4],
            translateY: d[5],
            scaleX: this.scaleX,
            scaleY: this.scaleY,
            skewX: this.skewX,
            skewY: this.skewY,
            flipX: this.flipX,
            flipY: this.flipY
          };
          return c.key = u, c.value = s.composeMatrix(m), c.value;
        },
        /*
         * Calculate object dimensions from its properties
         * @private
         * @return {Object} .x width dimension
         * @return {Object} .y height dimension
         */
        _getNonTransformedDimensions: function() {
          var u = this.strokeWidth, c = this.width + u, d = this.height + u;
          return { x: c, y: d };
        },
        /*
         * Calculate object bounding box dimensions from its properties scale, skew.
         * @param {Number} skewX, a value to override current skewX
         * @param {Number} skewY, a value to override current skewY
         * @private
         * @return {Object} .x width dimension
         * @return {Object} .y height dimension
         */
        _getTransformedDimensions: function(u, c) {
          typeof u > "u" && (u = this.skewX), typeof c > "u" && (c = this.skewY);
          var d, m, p, v = u === 0 && c === 0;
          if (this.strokeUniform ? (m = this.width, p = this.height) : (d = this._getNonTransformedDimensions(), m = d.x, p = d.y), v)
            return this._finalizeDimensions(m * this.scaleX, p * this.scaleY);
          var b = s.sizeAfterTransform(m, p, {
            scaleX: this.scaleX,
            scaleY: this.scaleY,
            skewX: u,
            skewY: c
          });
          return this._finalizeDimensions(b.x, b.y);
        },
        /*
         * Calculate object bounding box dimensions from its properties scale, skew.
         * @param Number width width of the bbox
         * @param Number height height of the bbox
         * @private
         * @return {Object} .x finalized width dimension
         * @return {Object} .y finalized height dimension
         */
        _finalizeDimensions: function(u, c) {
          return this.strokeUniform ? { x: u + this.strokeWidth, y: c + this.strokeWidth } : { x: u, y: c };
        },
        /*
         * Calculate object dimensions for controls box, including padding and canvas zoom.
         * and active selection
         * private
         */
        _calculateCurrentDimensions: function() {
          var u = this.getViewportTransform(), c = this._getTransformedDimensions(), d = o(c, u, !0);
          return d.scalarAdd(2 * this.padding);
        }
      }
    );
  }(), e.util.object.extend(
    e.Object.prototype,
    /** @lends fabric.Object.prototype */
    {
      /**
       * Moves an object to the bottom of the stack of drawn objects
       * @return {fabric.Object} thisArg
       * @chainable
       */
      sendToBack: function() {
        return this.group ? e.StaticCanvas.prototype.sendToBack.call(this.group, this) : this.canvas && this.canvas.sendToBack(this), this;
      },
      /**
       * Moves an object to the top of the stack of drawn objects
       * @return {fabric.Object} thisArg
       * @chainable
       */
      bringToFront: function() {
        return this.group ? e.StaticCanvas.prototype.bringToFront.call(this.group, this) : this.canvas && this.canvas.bringToFront(this), this;
      },
      /**
       * Moves an object down in stack of drawn objects
       * @param {Boolean} [intersecting] If `true`, send object behind next lower intersecting object
       * @return {fabric.Object} thisArg
       * @chainable
       */
      sendBackwards: function(l) {
        return this.group ? e.StaticCanvas.prototype.sendBackwards.call(this.group, this, l) : this.canvas && this.canvas.sendBackwards(this, l), this;
      },
      /**
       * Moves an object up in stack of drawn objects
       * @param {Boolean} [intersecting] If `true`, send object in front of next upper intersecting object
       * @return {fabric.Object} thisArg
       * @chainable
       */
      bringForward: function(l) {
        return this.group ? e.StaticCanvas.prototype.bringForward.call(this.group, this, l) : this.canvas && this.canvas.bringForward(this, l), this;
      },
      /**
       * Moves an object to specified level in stack of drawn objects
       * @param {Number} index New position of object
       * @return {fabric.Object} thisArg
       * @chainable
       */
      moveTo: function(l) {
        return this.group && this.group.type !== "activeSelection" ? e.StaticCanvas.prototype.moveTo.call(this.group, this, l) : this.canvas && this.canvas.moveTo(this, l), this;
      }
    }
  ), function() {
    function l(a, h) {
      if (h) {
        if (h.toLive)
          return a + ": url(#SVGID_" + h.id + "); ";
        var o = new e.Color(h), u = a + ": " + o.toRgb() + "; ", c = o.getAlpha();
        return c !== 1 && (u += a + "-opacity: " + c.toString() + "; "), u;
      } else
        return a + ": none; ";
    }
    var s = e.util.toFixed;
    e.util.object.extend(
      e.Object.prototype,
      /** @lends fabric.Object.prototype */
      {
        /**
         * Returns styles-string for svg-export
         * @param {Boolean} skipShadow a boolean to skip shadow filter output
         * @return {String}
         */
        getSvgStyles: function(a) {
          var h = this.fillRule ? this.fillRule : "nonzero", o = this.strokeWidth ? this.strokeWidth : "0", u = this.strokeDashArray ? this.strokeDashArray.join(" ") : "none", c = this.strokeDashOffset ? this.strokeDashOffset : "0", d = this.strokeLineCap ? this.strokeLineCap : "butt", m = this.strokeLineJoin ? this.strokeLineJoin : "miter", p = this.strokeMiterLimit ? this.strokeMiterLimit : "4", v = typeof this.opacity < "u" ? this.opacity : "1", b = this.visible ? "" : " visibility: hidden;", y = a ? "" : this.getSvgFilter(), w = l("fill", this.fill), C = l("stroke", this.stroke);
          return [
            C,
            "stroke-width: ",
            o,
            "; ",
            "stroke-dasharray: ",
            u,
            "; ",
            "stroke-linecap: ",
            d,
            "; ",
            "stroke-dashoffset: ",
            c,
            "; ",
            "stroke-linejoin: ",
            m,
            "; ",
            "stroke-miterlimit: ",
            p,
            "; ",
            w,
            "fill-rule: ",
            h,
            "; ",
            "opacity: ",
            v,
            ";",
            y,
            b
          ].join("");
        },
        /**
         * Returns styles-string for svg-export
         * @param {Object} style the object from which to retrieve style properties
         * @param {Boolean} useWhiteSpace a boolean to include an additional attribute in the style.
         * @return {String}
         */
        getSvgSpanStyles: function(a, h) {
          var o = "; ", c = a.fontFamily ? "font-family: " + (a.fontFamily.indexOf("'") === -1 && a.fontFamily.indexOf('"') === -1 ? "'" + a.fontFamily + "'" : a.fontFamily) + o : "", u = a.strokeWidth ? "stroke-width: " + a.strokeWidth + o : "", c = c, d = a.fontSize ? "font-size: " + a.fontSize + "px" + o : "", m = a.fontStyle ? "font-style: " + a.fontStyle + o : "", p = a.fontWeight ? "font-weight: " + a.fontWeight + o : "", v = a.fill ? l("fill", a.fill) : "", b = a.stroke ? l("stroke", a.stroke) : "", y = this.getSvgTextDecoration(a), w = a.deltaY ? "baseline-shift: " + -a.deltaY + "; " : "";
          return y && (y = "text-decoration: " + y + o), [
            b,
            u,
            c,
            d,
            m,
            p,
            y,
            v,
            w,
            h ? "white-space: pre; " : ""
          ].join("");
        },
        /**
         * Returns text-decoration property for svg-export
         * @param {Object} style the object from which to retrieve style properties
         * @return {String}
         */
        getSvgTextDecoration: function(a) {
          return ["overline", "underline", "line-through"].filter(function(h) {
            return a[h.replace("-", "")];
          }).join(" ");
        },
        /**
         * Returns filter for svg shadow
         * @return {String}
         */
        getSvgFilter: function() {
          return this.shadow ? "filter: url(#SVGID_" + this.shadow.id + ");" : "";
        },
        /**
         * Returns id attribute for svg output
         * @return {String}
         */
        getSvgCommons: function() {
          return [
            this.id ? 'id="' + this.id + '" ' : "",
            this.clipPath ? 'clip-path="url(#' + this.clipPath.clipPathId + ')" ' : ""
          ].join("");
        },
        /**
         * Returns transform-string for svg-export
         * @param {Boolean} use the full transform or the single object one.
         * @return {String}
         */
        getSvgTransform: function(a, h) {
          var o = a ? this.calcTransformMatrix() : this.calcOwnMatrix(), u = 'transform="' + e.util.matrixToSVG(o);
          return u + (h || "") + '" ';
        },
        _setSVGBg: function(a) {
          if (this.backgroundColor) {
            var h = e.Object.NUM_FRACTION_DIGITS;
            a.push(
              "		<rect ",
              this._getFillAttributes(this.backgroundColor),
              ' x="',
              s(-this.width / 2, h),
              '" y="',
              s(-this.height / 2, h),
              '" width="',
              s(this.width, h),
              '" height="',
              s(this.height, h),
              `"></rect>
`
            );
          }
        },
        /**
         * Returns svg representation of an instance
         * @param {Function} [reviver] Method for further parsing of svg representation.
         * @return {String} svg representation of an instance
         */
        toSVG: function(a) {
          return this._createBaseSVGMarkup(this._toSVG(a), { reviver: a });
        },
        /**
         * Returns svg clipPath representation of an instance
         * @param {Function} [reviver] Method for further parsing of svg representation.
         * @return {String} svg representation of an instance
         */
        toClipPathSVG: function(a) {
          return "	" + this._createBaseClipPathSVGMarkup(this._toSVG(a), { reviver: a });
        },
        /**
         * @private
         */
        _createBaseClipPathSVGMarkup: function(a, h) {
          h = h || {};
          var o = h.reviver, u = h.additionalTransform || "", c = [
            this.getSvgTransform(!0, u),
            this.getSvgCommons()
          ].join(""), d = a.indexOf("COMMON_PARTS");
          return a[d] = c, o ? o(a.join("")) : a.join("");
        },
        /**
         * @private
         */
        _createBaseSVGMarkup: function(a, h) {
          h = h || {};
          var o = h.noStyle, u = h.reviver, c = o ? "" : 'style="' + this.getSvgStyles() + '" ', d = h.withShadow ? 'style="' + this.getSvgFilter() + '" ' : "", m = this.clipPath, p = this.strokeUniform ? 'vector-effect="non-scaling-stroke" ' : "", v = m && m.absolutePositioned, b = this.stroke, y = this.fill, w = this.shadow, C, _ = [], S, k = a.indexOf("COMMON_PARTS"), I = h.additionalTransform;
          return m && (m.clipPathId = "CLIPPATH_" + e.Object.__uid++, S = '<clipPath id="' + m.clipPathId + `" >
` + m.toClipPathSVG(u) + `</clipPath>
`), v && _.push(
            "<g ",
            d,
            this.getSvgCommons(),
            ` >
`
          ), _.push(
            "<g ",
            this.getSvgTransform(!1),
            v ? "" : d + this.getSvgCommons(),
            ` >
`
          ), C = [
            c,
            p,
            o ? "" : this.addPaintOrder(),
            " ",
            I ? 'transform="' + I + '" ' : ""
          ].join(""), a[k] = C, y && y.toLive && _.push(y.toSVG(this)), b && b.toLive && _.push(b.toSVG(this)), w && _.push(w.toSVG(this)), m && _.push(S), _.push(a.join("")), _.push(`</g>
`), v && _.push(`</g>
`), u ? u(_.join("")) : _.join("");
        },
        addPaintOrder: function() {
          return this.paintFirst !== "fill" ? ' paint-order="' + this.paintFirst + '" ' : "";
        }
      }
    );
  }(), function() {
    var l = e.util.object.extend, s = "stateProperties";
    function a(o, u, c) {
      var d = {}, m = !0;
      c.forEach(function(p) {
        d[p] = o[p];
      }), l(o[u], d, m);
    }
    function h(o, u, c) {
      if (o === u)
        return !0;
      if (Array.isArray(o)) {
        if (!Array.isArray(u) || o.length !== u.length)
          return !1;
        for (var d = 0, m = o.length; d < m; d++)
          if (!h(o[d], u[d]))
            return !1;
        return !0;
      } else if (o && typeof o == "object") {
        var p = Object.keys(o), v;
        if (!u || typeof u != "object" || !c && p.length !== Object.keys(u).length)
          return !1;
        for (var d = 0, m = p.length; d < m; d++)
          if (v = p[d], !(v === "canvas" || v === "group") && !h(o[v], u[v]))
            return !1;
        return !0;
      }
    }
    e.util.object.extend(
      e.Object.prototype,
      /** @lends fabric.Object.prototype */
      {
        /**
         * Returns true if object state (one of its state properties) was changed
         * @param {String} [propertySet] optional name for the set of property we want to save
         * @return {Boolean} true if instance' state has changed since `{@link fabric.Object#saveState}` was called
         */
        hasStateChanged: function(o) {
          o = o || s;
          var u = "_" + o;
          return Object.keys(this[u]).length < this[o].length ? !0 : !h(this[u], this, !0);
        },
        /**
         * Saves state of an object
         * @param {Object} [options] Object with additional `stateProperties` array to include when saving state
         * @return {fabric.Object} thisArg
         */
        saveState: function(o) {
          var u = o && o.propertySet || s, c = "_" + u;
          return this[c] ? (a(this, c, this[u]), o && o.stateProperties && a(this, c, o.stateProperties), this) : this.setupState(o);
        },
        /**
         * Setups state of an object
         * @param {Object} [options] Object with additional `stateProperties` array to include when saving state
         * @return {fabric.Object} thisArg
         */
        setupState: function(o) {
          o = o || {};
          var u = o.propertySet || s;
          return o.propertySet = u, this["_" + u] = {}, this.saveState(o), this;
        }
      }
    );
  }(), function() {
    var l = e.util.degreesToRadians;
    e.util.object.extend(
      e.Object.prototype,
      /** @lends fabric.Object.prototype */
      {
        /**
         * Determines which corner has been clicked
         * @private
         * @param {Object} pointer The pointer indicating the mouse position
         * @return {String|Boolean} corner code (tl, tr, bl, br, etc.), or false if nothing is found
         */
        _findTargetCorner: function(s, a) {
          if (!this.hasControls || this.group || !this.canvas || this.canvas._activeObject !== this)
            return !1;
          var h = s.x, o = s.y, u, c, d = Object.keys(this.oCoords), m = d.length - 1, p;
          for (this.__corner = 0; m >= 0; m--)
            if (p = d[m], !!this.isControlVisible(p) && (c = this._getImageLines(a ? this.oCoords[p].touchCorner : this.oCoords[p].corner), u = this._findCrossPoints({ x: h, y: o }, c), u !== 0 && u % 2 === 1))
              return this.__corner = p, p;
          return !1;
        },
        /**
         * Calls a function for each control. The function gets called,
         * with the control, the object that is calling the iterator and the control's key
         * @param {Function} fn function to iterate over the controls over
         */
        forEachControl: function(s) {
          for (var a in this.controls)
            s(this.controls[a], a, this);
        },
        /**
         * Sets the coordinates of the draggable boxes in the corners of
         * the image used to scale/rotate it.
         * note: if we would switch to ROUND corner area, all of this would disappear.
         * everything would resolve to a single point and a pythagorean theorem for the distance
         * @private
         */
        _setCornerCoords: function() {
          var s = this.oCoords;
          for (var a in s) {
            var h = this.controls[a];
            s[a].corner = h.calcCornerCoords(
              this.angle,
              this.cornerSize,
              s[a].x,
              s[a].y,
              !1
            ), s[a].touchCorner = h.calcCornerCoords(
              this.angle,
              this.touchCornerSize,
              s[a].x,
              s[a].y,
              !0
            );
          }
        },
        /**
         * Draws a colored layer behind the object, inside its selection borders.
         * Requires public options: padding, selectionBackgroundColor
         * this function is called when the context is transformed
         * has checks to be skipped when the object is on a staticCanvas
         * @param {CanvasRenderingContext2D} ctx Context to draw on
         * @return {fabric.Object} thisArg
         * @chainable
         */
        drawSelectionBackground: function(s) {
          if (!this.selectionBackgroundColor || this.canvas && !this.canvas.interactive || this.canvas && this.canvas._activeObject !== this)
            return this;
          s.save();
          var a = this.getCenterPoint(), h = this._calculateCurrentDimensions(), o = this.canvas.viewportTransform;
          return s.translate(a.x, a.y), s.scale(1 / o[0], 1 / o[3]), s.rotate(l(this.angle)), s.fillStyle = this.selectionBackgroundColor, s.fillRect(-h.x / 2, -h.y / 2, h.x, h.y), s.restore(), this;
        },
        /**
         * Draws borders of an object's bounding box.
         * Requires public properties: width, height
         * Requires public options: padding, borderColor
         * @param {CanvasRenderingContext2D} ctx Context to draw on
         * @param {Object} styleOverride object to override the object style
         * @return {fabric.Object} thisArg
         * @chainable
         */
        drawBorders: function(s, a) {
          a = a || {};
          var h = this._calculateCurrentDimensions(), o = this.borderScaleFactor, u = h.x + o, c = h.y + o, d = typeof a.hasControls < "u" ? a.hasControls : this.hasControls, m = !1;
          return s.save(), s.strokeStyle = a.borderColor || this.borderColor, this._setLineDash(s, a.borderDashArray || this.borderDashArray), s.strokeRect(
            -u / 2,
            -c / 2,
            u,
            c
          ), d && (s.beginPath(), this.forEachControl(function(p, v, b) {
            p.withConnection && p.getVisibility(b, v) && (m = !0, s.moveTo(p.x * u, p.y * c), s.lineTo(
              p.x * u + p.offsetX,
              p.y * c + p.offsetY
            ));
          }), m && s.stroke()), s.restore(), this;
        },
        /**
         * Draws borders of an object's bounding box when it is inside a group.
         * Requires public properties: width, height
         * Requires public options: padding, borderColor
         * @param {CanvasRenderingContext2D} ctx Context to draw on
         * @param {object} options object representing current object parameters
         * @param {Object} styleOverride object to override the object style
         * @return {fabric.Object} thisArg
         * @chainable
         */
        drawBordersInGroup: function(s, a, h) {
          h = h || {};
          var o = e.util.sizeAfterTransform(this.width, this.height, a), u = this.strokeWidth, c = this.strokeUniform, d = this.borderScaleFactor, m = o.x + u * (c ? this.canvas.getZoom() : a.scaleX) + d, p = o.y + u * (c ? this.canvas.getZoom() : a.scaleY) + d;
          return s.save(), this._setLineDash(s, h.borderDashArray || this.borderDashArray), s.strokeStyle = h.borderColor || this.borderColor, s.strokeRect(
            -m / 2,
            -p / 2,
            m,
            p
          ), s.restore(), this;
        },
        /**
         * Draws corners of an object's bounding box.
         * Requires public properties: width, height
         * Requires public options: cornerSize, padding
         * @param {CanvasRenderingContext2D} ctx Context to draw on
         * @param {Object} styleOverride object to override the object style
         * @return {fabric.Object} thisArg
         * @chainable
         */
        drawControls: function(s, a) {
          a = a || {}, s.save();
          var h = this.canvas.getRetinaScaling(), o, u;
          return s.setTransform(h, 0, 0, h, 0, 0), s.strokeStyle = s.fillStyle = a.cornerColor || this.cornerColor, this.transparentCorners || (s.strokeStyle = a.cornerStrokeColor || this.cornerStrokeColor), this._setLineDash(s, a.cornerDashArray || this.cornerDashArray), this.setCoords(), this.group && (o = this.group.calcTransformMatrix()), this.forEachControl(function(c, d, m) {
            u = m.oCoords[d], c.getVisibility(m, d) && (o && (u = e.util.transformPoint(u, o)), c.render(s, u.x, u.y, a, m));
          }), s.restore(), this;
        },
        /**
         * Returns true if the specified control is visible, false otherwise.
         * @param {String} controlKey The key of the control. Possible values are 'tl', 'tr', 'br', 'bl', 'ml', 'mt', 'mr', 'mb', 'mtr'.
         * @returns {Boolean} true if the specified control is visible, false otherwise
         */
        isControlVisible: function(s) {
          return this.controls[s] && this.controls[s].getVisibility(this, s);
        },
        /**
         * Sets the visibility of the specified control.
         * @param {String} controlKey The key of the control. Possible values are 'tl', 'tr', 'br', 'bl', 'ml', 'mt', 'mr', 'mb', 'mtr'.
         * @param {Boolean} visible true to set the specified control visible, false otherwise
         * @return {fabric.Object} thisArg
         * @chainable
         */
        setControlVisible: function(s, a) {
          return this._controlsVisibility || (this._controlsVisibility = {}), this._controlsVisibility[s] = a, this;
        },
        /**
         * Sets the visibility state of object controls.
         * @param {Object} [options] Options object
         * @param {Boolean} [options.bl] true to enable the bottom-left control, false to disable it
         * @param {Boolean} [options.br] true to enable the bottom-right control, false to disable it
         * @param {Boolean} [options.mb] true to enable the middle-bottom control, false to disable it
         * @param {Boolean} [options.ml] true to enable the middle-left control, false to disable it
         * @param {Boolean} [options.mr] true to enable the middle-right control, false to disable it
         * @param {Boolean} [options.mt] true to enable the middle-top control, false to disable it
         * @param {Boolean} [options.tl] true to enable the top-left control, false to disable it
         * @param {Boolean} [options.tr] true to enable the top-right control, false to disable it
         * @param {Boolean} [options.mtr] true to enable the middle-top-rotate control, false to disable it
         * @return {fabric.Object} thisArg
         * @chainable
         */
        setControlsVisibility: function(s) {
          s || (s = {});
          for (var a in s)
            this.setControlVisible(a, s[a]);
          return this;
        },
        /**
         * This callback function is called every time _discardActiveObject or _setActiveObject
         * try to to deselect this object. If the function returns true, the process is cancelled
         * @param {Object} [options] options sent from the upper functions
         * @param {Event} [options.e] event if the process is generated by an event
         */
        onDeselect: function() {
        },
        /**
         * This callback function is called every time _discardActiveObject or _setActiveObject
         * try to to select this object. If the function returns true, the process is cancelled
         * @param {Object} [options] options sent from the upper functions
         * @param {Event} [options.e] event if the process is generated by an event
         */
        onSelect: function() {
        }
      }
    );
  }(), e.util.object.extend(
    e.StaticCanvas.prototype,
    /** @lends fabric.StaticCanvas.prototype */
    {
      /**
       * Animation duration (in ms) for fx* methods
       * @type Number
       * @default
       */
      FX_DURATION: 500,
      /**
       * Centers object horizontally with animation.
       * @param {fabric.Object} object Object to center
       * @param {Object} [callbacks] Callbacks object with optional "onComplete" and/or "onChange" properties
       * @param {Function} [callbacks.onComplete] Invoked on completion
       * @param {Function} [callbacks.onChange] Invoked on every step of animation
       * @return {fabric.AnimationContext} context
       */
      fxCenterObjectH: function(l, s) {
        s = s || {};
        var a = function() {
        }, h = s.onComplete || a, o = s.onChange || a, u = this;
        return e.util.animate({
          target: this,
          startValue: l.left,
          endValue: this.getCenterPoint().x,
          duration: this.FX_DURATION,
          onChange: function(c) {
            l.set("left", c), u.requestRenderAll(), o();
          },
          onComplete: function() {
            l.setCoords(), h();
          }
        });
      },
      /**
       * Centers object vertically with animation.
       * @param {fabric.Object} object Object to center
       * @param {Object} [callbacks] Callbacks object with optional "onComplete" and/or "onChange" properties
       * @param {Function} [callbacks.onComplete] Invoked on completion
       * @param {Function} [callbacks.onChange] Invoked on every step of animation
       * @return {fabric.AnimationContext} context
       */
      fxCenterObjectV: function(l, s) {
        s = s || {};
        var a = function() {
        }, h = s.onComplete || a, o = s.onChange || a, u = this;
        return e.util.animate({
          target: this,
          startValue: l.top,
          endValue: this.getCenterPoint().y,
          duration: this.FX_DURATION,
          onChange: function(c) {
            l.set("top", c), u.requestRenderAll(), o();
          },
          onComplete: function() {
            l.setCoords(), h();
          }
        });
      },
      /**
       * Same as `fabric.Canvas#remove` but animated
       * @param {fabric.Object} object Object to remove
       * @param {Object} [callbacks] Callbacks object with optional "onComplete" and/or "onChange" properties
       * @param {Function} [callbacks.onComplete] Invoked on completion
       * @param {Function} [callbacks.onChange] Invoked on every step of animation
       * @return {fabric.AnimationContext} context
       */
      fxRemove: function(l, s) {
        s = s || {};
        var a = function() {
        }, h = s.onComplete || a, o = s.onChange || a, u = this;
        return e.util.animate({
          target: this,
          startValue: l.opacity,
          endValue: 0,
          duration: this.FX_DURATION,
          onChange: function(c) {
            l.set("opacity", c), u.requestRenderAll(), o();
          },
          onComplete: function() {
            u.remove(l), h();
          }
        });
      }
    }
  ), e.util.object.extend(
    e.Object.prototype,
    /** @lends fabric.Object.prototype */
    {
      /**
       * Animates object's properties
       * @param {String|Object} property Property to animate (if string) or properties to animate (if object)
       * @param {Number|Object} value Value to animate property to (if string was given first) or options object
       * @return {fabric.Object} thisArg
       * @tutorial {@link http://fabricjs.com/fabric-intro-part-2#animation}
       * @return {fabric.AnimationContext | fabric.AnimationContext[]} animation context (or an array if passed multiple properties)
       *
       * As object — multiple properties
       *
       * object.animate({ left: ..., top: ... });
       * object.animate({ left: ..., top: ... }, { duration: ... });
       *
       * As string — one property
       *
       * object.animate('left', ...);
       * object.animate('left', { duration: ... });
       *
       */
      animate: function() {
        if (arguments[0] && typeof arguments[0] == "object") {
          var l = [], s, a, h = [];
          for (s in arguments[0])
            l.push(s);
          for (var o = 0, u = l.length; o < u; o++)
            s = l[o], a = o !== u - 1, h.push(this._animate(s, arguments[0][s], arguments[1], a));
          return h;
        } else
          return this._animate.apply(this, arguments);
      },
      /**
       * @private
       * @param {String} property Property to animate
       * @param {String} to Value to animate to
       * @param {Object} [options] Options object
       * @param {Boolean} [skipCallbacks] When true, callbacks like onchange and oncomplete are not invoked
       */
      _animate: function(l, s, a, h) {
        var o = this, u;
        s = s.toString(), a ? a = e.util.object.clone(a) : a = {}, ~l.indexOf(".") && (u = l.split("."));
        var c = o.colorProperties.indexOf(l) > -1 || u && o.colorProperties.indexOf(u[1]) > -1, d = u ? this.get(u[0])[u[1]] : this.get(l);
        "from" in a || (a.from = d), c || (~s.indexOf("=") ? s = d + parseFloat(s.replace("=", "")) : s = parseFloat(s));
        var m = {
          target: this,
          startValue: a.from,
          endValue: s,
          byValue: a.by,
          easing: a.easing,
          duration: a.duration,
          abort: a.abort && function(p, v, b) {
            return a.abort.call(o, p, v, b);
          },
          onChange: function(p, v, b) {
            u ? o[u[0]][u[1]] = p : o.set(l, p), !h && a.onChange && a.onChange(p, v, b);
          },
          onComplete: function(p, v, b) {
            h || (o.setCoords(), a.onComplete && a.onComplete(p, v, b));
          }
        };
        return c ? e.util.animateColor(m.startValue, m.endValue, m.duration, m) : e.util.animate(m);
      }
    }
  ), function(l) {
    var s = l.fabric || (l.fabric = {}), a = s.util.object.extend, h = s.util.object.clone, o = { x1: 1, x2: 1, y1: 1, y2: 1 };
    if (s.Line) {
      s.warn("fabric.Line is already defined");
      return;
    }
    s.Line = s.util.createClass(
      s.Object,
      /** @lends fabric.Line.prototype */
      {
        /**
         * Type of an object
         * @type String
         * @default
         */
        type: "line",
        /**
         * x value or first line edge
         * @type Number
         * @default
         */
        x1: 0,
        /**
         * y value or first line edge
         * @type Number
         * @default
         */
        y1: 0,
        /**
         * x value or second line edge
         * @type Number
         * @default
         */
        x2: 0,
        /**
         * y value or second line edge
         * @type Number
         * @default
         */
        y2: 0,
        cacheProperties: s.Object.prototype.cacheProperties.concat("x1", "x2", "y1", "y2"),
        /**
         * Constructor
         * @param {Array} [points] Array of points
         * @param {Object} [options] Options object
         * @return {fabric.Line} thisArg
         */
        initialize: function(c, d) {
          c || (c = [0, 0, 0, 0]), this.callSuper("initialize", d), this.set("x1", c[0]), this.set("y1", c[1]), this.set("x2", c[2]), this.set("y2", c[3]), this._setWidthHeight(d);
        },
        /**
         * @private
         * @param {Object} [options] Options
         */
        _setWidthHeight: function(c) {
          c || (c = {}), this.width = Math.abs(this.x2 - this.x1), this.height = Math.abs(this.y2 - this.y1), this.left = "left" in c ? c.left : this._getLeftToOriginX(), this.top = "top" in c ? c.top : this._getTopToOriginY();
        },
        /**
         * @private
         * @param {String} key
         * @param {*} value
         */
        _set: function(c, d) {
          return this.callSuper("_set", c, d), typeof o[c] < "u" && this._setWidthHeight(), this;
        },
        /**
         * @private
         * @return {Number} leftToOriginX Distance from left edge of canvas to originX of Line.
         */
        _getLeftToOriginX: u(
          {
            // property names
            origin: "originX",
            axis1: "x1",
            axis2: "x2",
            dimension: "width"
          },
          {
            // possible values of origin
            nearest: "left",
            center: "center",
            farthest: "right"
          }
        ),
        /**
         * @private
         * @return {Number} topToOriginY Distance from top edge of canvas to originY of Line.
         */
        _getTopToOriginY: u(
          {
            // property names
            origin: "originY",
            axis1: "y1",
            axis2: "y2",
            dimension: "height"
          },
          {
            // possible values of origin
            nearest: "top",
            center: "center",
            farthest: "bottom"
          }
        ),
        /**
         * @private
         * @param {CanvasRenderingContext2D} ctx Context to render on
         */
        _render: function(c) {
          c.beginPath();
          var d = this.calcLinePoints();
          c.moveTo(d.x1, d.y1), c.lineTo(d.x2, d.y2), c.lineWidth = this.strokeWidth;
          var m = c.strokeStyle;
          c.strokeStyle = this.stroke || c.fillStyle, this.stroke && this._renderStroke(c), c.strokeStyle = m;
        },
        /**
         * This function is an helper for svg import. it returns the center of the object in the svg
         * untransformed coordinates
         * @private
         * @return {Object} center point from element coordinates
         */
        _findCenterFromElement: function() {
          return {
            x: (this.x1 + this.x2) / 2,
            y: (this.y1 + this.y2) / 2
          };
        },
        /**
         * Returns object representation of an instance
         * @method toObject
         * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output
         * @return {Object} object representation of an instance
         */
        toObject: function(c) {
          return a(this.callSuper("toObject", c), this.calcLinePoints());
        },
        /*
         * Calculate object dimensions from its properties
         * @private
         */
        _getNonTransformedDimensions: function() {
          var c = this.callSuper("_getNonTransformedDimensions");
          return this.strokeLineCap === "butt" && (this.width === 0 && (c.y -= this.strokeWidth), this.height === 0 && (c.x -= this.strokeWidth)), c;
        },
        /**
         * Recalculates line points given width and height
         * @private
         */
        calcLinePoints: function() {
          var c = this.x1 <= this.x2 ? -1 : 1, d = this.y1 <= this.y2 ? -1 : 1, m = c * this.width * 0.5, p = d * this.height * 0.5, v = c * this.width * -0.5, b = d * this.height * -0.5;
          return {
            x1: m,
            x2: v,
            y1: p,
            y2: b
          };
        },
        /* _TO_SVG_START_ */
        /**
         * Returns svg representation of an instance
         * @return {Array} an array of strings with the specific svg representation
         * of the instance
         */
        _toSVG: function() {
          var c = this.calcLinePoints();
          return [
            "<line ",
            "COMMON_PARTS",
            'x1="',
            c.x1,
            '" y1="',
            c.y1,
            '" x2="',
            c.x2,
            '" y2="',
            c.y2,
            `" />
`
          ];
        }
        /* _TO_SVG_END_ */
      }
    ), s.Line.ATTRIBUTE_NAMES = s.SHARED_ATTRIBUTES.concat("x1 y1 x2 y2".split(" ")), s.Line.fromElement = function(c, d, m) {
      m = m || {};
      var p = s.parseAttributes(c, s.Line.ATTRIBUTE_NAMES), v = [
        p.x1 || 0,
        p.y1 || 0,
        p.x2 || 0,
        p.y2 || 0
      ];
      d(new s.Line(v, a(p, m)));
    }, s.Line.fromObject = function(c, d) {
      function m(v) {
        delete v.points, d && d(v);
      }
      var p = h(c, !0);
      p.points = [c.x1, c.y1, c.x2, c.y2], s.Object._fromObject("Line", p, m, "points");
    };
    function u(c, d) {
      var m = c.origin, p = c.axis1, v = c.axis2, b = c.dimension, y = d.nearest, w = d.center, C = d.farthest;
      return function() {
        switch (this.get(m)) {
          case y:
            return Math.min(this.get(p), this.get(v));
          case w:
            return Math.min(this.get(p), this.get(v)) + 0.5 * this.get(b);
          case C:
            return Math.max(this.get(p), this.get(v));
        }
      };
    }
  }(t), function(l) {
    var s = l.fabric || (l.fabric = {}), a = s.util.degreesToRadians;
    if (s.Circle) {
      s.warn("fabric.Circle is already defined.");
      return;
    }
    s.Circle = s.util.createClass(
      s.Object,
      /** @lends fabric.Circle.prototype */
      {
        /**
         * Type of an object
         * @type String
         * @default
         */
        type: "circle",
        /**
         * Radius of this circle
         * @type Number
         * @default
         */
        radius: 0,
        /**
         * degrees of start of the circle.
         * probably will change to degrees in next major version
         * @type Number 0 - 359
         * @default 0
         */
        startAngle: 0,
        /**
         * End angle of the circle
         * probably will change to degrees in next major version
         * @type Number 1 - 360
         * @default 360
         */
        endAngle: 360,
        cacheProperties: s.Object.prototype.cacheProperties.concat("radius", "startAngle", "endAngle"),
        /**
         * @private
         * @param {String} key
         * @param {*} value
         * @return {fabric.Circle} thisArg
         */
        _set: function(o, u) {
          return this.callSuper("_set", o, u), o === "radius" && this.setRadius(u), this;
        },
        /**
         * Returns object representation of an instance
         * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output
         * @return {Object} object representation of an instance
         */
        toObject: function(o) {
          return this.callSuper("toObject", ["radius", "startAngle", "endAngle"].concat(o));
        },
        /* _TO_SVG_START_ */
        /**
         * Returns svg representation of an instance
         * @return {Array} an array of strings with the specific svg representation
         * of the instance
         */
        _toSVG: function() {
          var o, u = 0, c = 0, d = (this.endAngle - this.startAngle) % 360;
          if (d === 0)
            o = [
              "<circle ",
              "COMMON_PARTS",
              'cx="' + u + '" cy="' + c + '" ',
              'r="',
              this.radius,
              `" />
`
            ];
          else {
            var m = a(this.startAngle), p = a(this.endAngle), v = this.radius, b = s.util.cos(m) * v, y = s.util.sin(m) * v, w = s.util.cos(p) * v, C = s.util.sin(p) * v, _ = d > 180 ? "1" : "0";
            o = [
              '<path d="M ' + b + " " + y,
              " A " + v + " " + v,
              " 0 ",
              +_ + " 1",
              " " + w + " " + C,
              '" ',
              "COMMON_PARTS",
              ` />
`
            ];
          }
          return o;
        },
        /* _TO_SVG_END_ */
        /**
         * @private
         * @param {CanvasRenderingContext2D} ctx context to render on
         */
        _render: function(o) {
          o.beginPath(), o.arc(
            0,
            0,
            this.radius,
            a(this.startAngle),
            a(this.endAngle),
            !1
          ), this._renderPaintInOrder(o);
        },
        /**
         * Returns horizontal radius of an object (according to how an object is scaled)
         * @return {Number}
         */
        getRadiusX: function() {
          return this.get("radius") * this.get("scaleX");
        },
        /**
         * Returns vertical radius of an object (according to how an object is scaled)
         * @return {Number}
         */
        getRadiusY: function() {
          return this.get("radius") * this.get("scaleY");
        },
        /**
         * Sets radius of an object (and updates width accordingly)
         * @return {fabric.Circle} thisArg
         */
        setRadius: function(o) {
          return this.radius = o, this.set("width", o * 2).set("height", o * 2);
        }
      }
    ), s.Circle.ATTRIBUTE_NAMES = s.SHARED_ATTRIBUTES.concat("cx cy r".split(" ")), s.Circle.fromElement = function(o, u) {
      var c = s.parseAttributes(o, s.Circle.ATTRIBUTE_NAMES);
      if (!h(c))
        throw new Error("value of `r` attribute is required and can not be negative");
      c.left = (c.left || 0) - c.radius, c.top = (c.top || 0) - c.radius, u(new s.Circle(c));
    };
    function h(o) {
      return "radius" in o && o.radius >= 0;
    }
    s.Circle.fromObject = function(o, u) {
      s.Object._fromObject("Circle", o, u);
    };
  }(t), function(l) {
    var s = l.fabric || (l.fabric = {});
    if (s.Triangle) {
      s.warn("fabric.Triangle is already defined");
      return;
    }
    s.Triangle = s.util.createClass(
      s.Object,
      /** @lends fabric.Triangle.prototype */
      {
        /**
         * Type of an object
         * @type String
         * @default
         */
        type: "triangle",
        /**
         * Width is set to 100 to compensate the old initialize code that was setting it to 100
         * @type Number
         * @default
         */
        width: 100,
        /**
         * Height is set to 100 to compensate the old initialize code that was setting it to 100
         * @type Number
         * @default
         */
        height: 100,
        /**
         * @private
         * @param {CanvasRenderingContext2D} ctx Context to render on
         */
        _render: function(a) {
          var h = this.width / 2, o = this.height / 2;
          a.beginPath(), a.moveTo(-h, o), a.lineTo(0, -o), a.lineTo(h, o), a.closePath(), this._renderPaintInOrder(a);
        },
        /* _TO_SVG_START_ */
        /**
         * Returns svg representation of an instance
         * @return {Array} an array of strings with the specific svg representation
         * of the instance
         */
        _toSVG: function() {
          var a = this.width / 2, h = this.height / 2, o = [
            -a + " " + h,
            "0 " + -h,
            a + " " + h
          ].join(",");
          return [
            "<polygon ",
            "COMMON_PARTS",
            'points="',
            o,
            '" />'
          ];
        }
        /* _TO_SVG_END_ */
      }
    ), s.Triangle.fromObject = function(a, h) {
      return s.Object._fromObject("Triangle", a, h);
    };
  }(t), function(l) {
    var s = l.fabric || (l.fabric = {}), a = Math.PI * 2;
    if (s.Ellipse) {
      s.warn("fabric.Ellipse is already defined.");
      return;
    }
    s.Ellipse = s.util.createClass(
      s.Object,
      /** @lends fabric.Ellipse.prototype */
      {
        /**
         * Type of an object
         * @type String
         * @default
         */
        type: "ellipse",
        /**
         * Horizontal radius
         * @type Number
         * @default
         */
        rx: 0,
        /**
         * Vertical radius
         * @type Number
         * @default
         */
        ry: 0,
        cacheProperties: s.Object.prototype.cacheProperties.concat("rx", "ry"),
        /**
         * Constructor
         * @param {Object} [options] Options object
         * @return {fabric.Ellipse} thisArg
         */
        initialize: function(h) {
          this.callSuper("initialize", h), this.set("rx", h && h.rx || 0), this.set("ry", h && h.ry || 0);
        },
        /**
         * @private
         * @param {String} key
         * @param {*} value
         * @return {fabric.Ellipse} thisArg
         */
        _set: function(h, o) {
          switch (this.callSuper("_set", h, o), h) {
            case "rx":
              this.rx = o, this.set("width", o * 2);
              break;
            case "ry":
              this.ry = o, this.set("height", o * 2);
              break;
          }
          return this;
        },
        /**
         * Returns horizontal radius of an object (according to how an object is scaled)
         * @return {Number}
         */
        getRx: function() {
          return this.get("rx") * this.get("scaleX");
        },
        /**
         * Returns Vertical radius of an object (according to how an object is scaled)
         * @return {Number}
         */
        getRy: function() {
          return this.get("ry") * this.get("scaleY");
        },
        /**
         * Returns object representation of an instance
         * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output
         * @return {Object} object representation of an instance
         */
        toObject: function(h) {
          return this.callSuper("toObject", ["rx", "ry"].concat(h));
        },
        /* _TO_SVG_START_ */
        /**
         * Returns svg representation of an instance
         * @return {Array} an array of strings with the specific svg representation
         * of the instance
         */
        _toSVG: function() {
          return [
            "<ellipse ",
            "COMMON_PARTS",
            'cx="0" cy="0" ',
            'rx="',
            this.rx,
            '" ry="',
            this.ry,
            `" />
`
          ];
        },
        /* _TO_SVG_END_ */
        /**
         * @private
         * @param {CanvasRenderingContext2D} ctx context to render on
         */
        _render: function(h) {
          h.beginPath(), h.save(), h.transform(1, 0, 0, this.ry / this.rx, 0, 0), h.arc(
            0,
            0,
            this.rx,
            0,
            a,
            !1
          ), h.restore(), this._renderPaintInOrder(h);
        }
      }
    ), s.Ellipse.ATTRIBUTE_NAMES = s.SHARED_ATTRIBUTES.concat("cx cy rx ry".split(" ")), s.Ellipse.fromElement = function(h, o) {
      var u = s.parseAttributes(h, s.Ellipse.ATTRIBUTE_NAMES);
      u.left = (u.left || 0) - u.rx, u.top = (u.top || 0) - u.ry, o(new s.Ellipse(u));
    }, s.Ellipse.fromObject = function(h, o) {
      s.Object._fromObject("Ellipse", h, o);
    };
  }(t), function(l) {
    var s = l.fabric || (l.fabric = {}), a = s.util.object.extend;
    if (s.Rect) {
      s.warn("fabric.Rect is already defined");
      return;
    }
    s.Rect = s.util.createClass(
      s.Object,
      /** @lends fabric.Rect.prototype */
      {
        /**
         * List of properties to consider when checking if state of an object is changed ({@link fabric.Object#hasStateChanged})
         * as well as for history (undo/redo) purposes
         * @type Array
         */
        stateProperties: s.Object.prototype.stateProperties.concat("rx", "ry"),
        /**
         * Type of an object
         * @type String
         * @default
         */
        type: "rect",
        /**
         * Horizontal border radius
         * @type Number
         * @default
         */
        rx: 0,
        /**
         * Vertical border radius
         * @type Number
         * @default
         */
        ry: 0,
        cacheProperties: s.Object.prototype.cacheProperties.concat("rx", "ry"),
        /**
         * Constructor
         * @param {Object} [options] Options object
         * @return {Object} thisArg
         */
        initialize: function(h) {
          this.callSuper("initialize", h), this._initRxRy();
        },
        /**
         * Initializes rx/ry attributes
         * @private
         */
        _initRxRy: function() {
          this.rx && !this.ry ? this.ry = this.rx : this.ry && !this.rx && (this.rx = this.ry);
        },
        /**
         * @private
         * @param {CanvasRenderingContext2D} ctx Context to render on
         */
        _render: function(h) {
          var o = this.rx ? Math.min(this.rx, this.width / 2) : 0, u = this.ry ? Math.min(this.ry, this.height / 2) : 0, c = this.width, d = this.height, m = -this.width / 2, p = -this.height / 2, v = o !== 0 || u !== 0, b = 1 - 0.5522847498;
          h.beginPath(), h.moveTo(m + o, p), h.lineTo(m + c - o, p), v && h.bezierCurveTo(m + c - b * o, p, m + c, p + b * u, m + c, p + u), h.lineTo(m + c, p + d - u), v && h.bezierCurveTo(m + c, p + d - b * u, m + c - b * o, p + d, m + c - o, p + d), h.lineTo(m + o, p + d), v && h.bezierCurveTo(m + b * o, p + d, m, p + d - b * u, m, p + d - u), h.lineTo(m, p + u), v && h.bezierCurveTo(m, p + b * u, m + b * o, p, m + o, p), h.closePath(), this._renderPaintInOrder(h);
        },
        /**
         * Returns object representation of an instance
         * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output
         * @return {Object} object representation of an instance
         */
        toObject: function(h) {
          return this.callSuper("toObject", ["rx", "ry"].concat(h));
        },
        /* _TO_SVG_START_ */
        /**
         * Returns svg representation of an instance
         * @return {Array} an array of strings with the specific svg representation
         * of the instance
         */
        _toSVG: function() {
          var h = -this.width / 2, o = -this.height / 2;
          return [
            "<rect ",
            "COMMON_PARTS",
            'x="',
            h,
            '" y="',
            o,
            '" rx="',
            this.rx,
            '" ry="',
            this.ry,
            '" width="',
            this.width,
            '" height="',
            this.height,
            `" />
`
          ];
        }
        /* _TO_SVG_END_ */
      }
    ), s.Rect.ATTRIBUTE_NAMES = s.SHARED_ATTRIBUTES.concat("x y rx ry width height".split(" ")), s.Rect.fromElement = function(h, o, u) {
      if (!h)
        return o(null);
      u = u || {};
      var c = s.parseAttributes(h, s.Rect.ATTRIBUTE_NAMES);
      c.left = c.left || 0, c.top = c.top || 0, c.height = c.height || 0, c.width = c.width || 0;
      var d = new s.Rect(a(u ? s.util.object.clone(u) : {}, c));
      d.visible = d.visible && d.width > 0 && d.height > 0, o(d);
    }, s.Rect.fromObject = function(h, o) {
      return s.Object._fromObject("Rect", h, o);
    };
  }(t), function(l) {
    var s = l.fabric || (l.fabric = {}), a = s.util.object.extend, h = s.util.array.min, o = s.util.array.max, u = s.util.toFixed, c = s.util.projectStrokeOnPoints;
    if (s.Polyline) {
      s.warn("fabric.Polyline is already defined");
      return;
    }
    s.Polyline = s.util.createClass(
      s.Object,
      /** @lends fabric.Polyline.prototype */
      {
        /**
         * Type of an object
         * @type String
         * @default
         */
        type: "polyline",
        /**
         * Points array
         * @type Array
         * @default
         */
        points: null,
        /**
         * WARNING: Feature in progress
         * Calculate the exact bounding box taking in account strokeWidth on acute angles
         * this will be turned to true by default on fabric 6.0
         * maybe will be left in as an optimization since calculations may be slow
         * @deprecated
         * @type Boolean
         * @default false
         */
        exactBoundingBox: !1,
        cacheProperties: s.Object.prototype.cacheProperties.concat("points"),
        /**
         * Constructor
         * @param {Array} points Array of points (where each point is an object with x and y)
         * @param {Object} [options] Options object
         * @return {fabric.Polyline} thisArg
         * @example
         * var poly = new fabric.Polyline([
         *     { x: 10, y: 10 },
         *     { x: 50, y: 30 },
         *     { x: 40, y: 70 },
         *     { x: 60, y: 50 },
         *     { x: 100, y: 150 },
         *     { x: 40, y: 100 }
         *   ], {
         *   stroke: 'red',
         *   left: 100,
         *   top: 100
         * });
         */
        initialize: function(d, m) {
          m = m || {}, this.points = d || [], this.callSuper("initialize", m), this._setPositionDimensions(m);
        },
        /**
         * @private
         */
        _projectStrokeOnPoints: function() {
          return c(this.points, this, !0);
        },
        _setPositionDimensions: function(d) {
          var m = this._calcDimensions(d), p, v = this.exactBoundingBox ? this.strokeWidth : 0;
          this.width = m.width - v, this.height = m.height - v, d.fromSVG || (p = this.translateToGivenOrigin(
            {
              // this looks bad, but is one way to keep it optional for now.
              x: m.left - this.strokeWidth / 2 + v / 2,
              y: m.top - this.strokeWidth / 2 + v / 2
            },
            "left",
            "top",
            this.originX,
            this.originY
          )), typeof d.left > "u" && (this.left = d.fromSVG ? m.left : p.x), typeof d.top > "u" && (this.top = d.fromSVG ? m.top : p.y), this.pathOffset = {
            x: m.left + this.width / 2 + v / 2,
            y: m.top + this.height / 2 + v / 2
          };
        },
        /**
         * Calculate the polygon min and max point from points array,
         * returning an object with left, top, width, height to measure the
         * polygon size
         * @return {Object} object.left X coordinate of the polygon leftmost point
         * @return {Object} object.top Y coordinate of the polygon topmost point
         * @return {Object} object.width distance between X coordinates of the polygon leftmost and rightmost point
         * @return {Object} object.height distance between Y coordinates of the polygon topmost and bottommost point
         * @private
         */
        _calcDimensions: function() {
          var d = this.exactBoundingBox ? this._projectStrokeOnPoints() : this.points, m = h(d, "x") || 0, p = h(d, "y") || 0, v = o(d, "x") || 0, b = o(d, "y") || 0, y = v - m, w = b - p;
          return {
            left: m,
            top: p,
            width: y,
            height: w
          };
        },
        /**
         * Returns object representation of an instance
         * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output
         * @return {Object} Object representation of an instance
         */
        toObject: function(d) {
          return a(this.callSuper("toObject", d), {
            points: this.points.concat()
          });
        },
        /* _TO_SVG_START_ */
        /**
         * Returns svg representation of an instance
         * @return {Array} an array of strings with the specific svg representation
         * of the instance
         */
        _toSVG: function() {
          for (var d = [], m = this.pathOffset.x, p = this.pathOffset.y, v = s.Object.NUM_FRACTION_DIGITS, b = 0, y = this.points.length; b < y; b++)
            d.push(
              u(this.points[b].x - m, v),
              ",",
              u(this.points[b].y - p, v),
              " "
            );
          return [
            "<" + this.type + " ",
            "COMMON_PARTS",
            'points="',
            d.join(""),
            `" />
`
          ];
        },
        /* _TO_SVG_END_ */
        /**
         * @private
         * @param {CanvasRenderingContext2D} ctx Context to render on
         */
        commonRender: function(d) {
          var m, p = this.points.length, v = this.pathOffset.x, b = this.pathOffset.y;
          if (!p || isNaN(this.points[p - 1].y))
            return !1;
          d.beginPath(), d.moveTo(this.points[0].x - v, this.points[0].y - b);
          for (var y = 0; y < p; y++)
            m = this.points[y], d.lineTo(m.x - v, m.y - b);
          return !0;
        },
        /**
         * @private
         * @param {CanvasRenderingContext2D} ctx Context to render on
         */
        _render: function(d) {
          this.commonRender(d) && this._renderPaintInOrder(d);
        },
        /**
         * Returns complexity of an instance
         * @return {Number} complexity of this instance
         */
        complexity: function() {
          return this.get("points").length;
        }
      }
    ), s.Polyline.ATTRIBUTE_NAMES = s.SHARED_ATTRIBUTES.concat(), s.Polyline.fromElementGenerator = function(d) {
      return function(m, p, v) {
        if (!m)
          return p(null);
        v || (v = {});
        var b = s.parsePointsAttribute(m.getAttribute("points")), y = s.parseAttributes(m, s[d].ATTRIBUTE_NAMES);
        y.fromSVG = !0, p(new s[d](b, a(y, v)));
      };
    }, s.Polyline.fromElement = s.Polyline.fromElementGenerator("Polyline"), s.Polyline.fromObject = function(d, m) {
      return s.Object._fromObject("Polyline", d, m, "points");
    };
  }(t), function(l) {
    var s = l.fabric || (l.fabric = {}), a = s.util.projectStrokeOnPoints;
    if (s.Polygon) {
      s.warn("fabric.Polygon is already defined");
      return;
    }
    s.Polygon = s.util.createClass(
      s.Polyline,
      /** @lends fabric.Polygon.prototype */
      {
        /**
         * Type of an object
         * @type String
         * @default
         */
        type: "polygon",
        /**
         * @private
         */
        _projectStrokeOnPoints: function() {
          return a(this.points, this);
        },
        /**
         * @private
         * @param {CanvasRenderingContext2D} ctx Context to render on
         */
        _render: function(h) {
          this.commonRender(h) && (h.closePath(), this._renderPaintInOrder(h));
        }
      }
    ), s.Polygon.ATTRIBUTE_NAMES = s.SHARED_ATTRIBUTES.concat(), s.Polygon.fromElement = s.Polyline.fromElementGenerator("Polygon"), s.Polygon.fromObject = function(h, o) {
      s.Object._fromObject("Polygon", h, o, "points");
    };
  }(t), function(l) {
    var s = l.fabric || (l.fabric = {}), a = s.util.array.min, h = s.util.array.max, o = s.util.object.extend, u = s.util.object.clone, c = s.util.toFixed;
    if (s.Path) {
      s.warn("fabric.Path is already defined");
      return;
    }
    s.Path = s.util.createClass(
      s.Object,
      /** @lends fabric.Path.prototype */
      {
        /**
         * Type of an object
         * @type String
         * @default
         */
        type: "path",
        /**
         * Array of path points
         * @type Array
         * @default
         */
        path: null,
        cacheProperties: s.Object.prototype.cacheProperties.concat("path", "fillRule"),
        stateProperties: s.Object.prototype.stateProperties.concat("path"),
        /**
         * Constructor
         * @param {Array|String} path Path data (sequence of coordinates and corresponding "command" tokens)
         * @param {Object} [options] Options object
         * @return {fabric.Path} thisArg
         */
        initialize: function(d, m) {
          m = u(m || {}), delete m.path, this.callSuper("initialize", m), this._setPath(d || [], m);
        },
        /**
        * @private
        * @param {Array|String} path Path data (sequence of coordinates and corresponding "command" tokens)
        * @param {Object} [options] Options object
        */
        _setPath: function(d, m) {
          this.path = s.util.makePathSimpler(
            Array.isArray(d) ? d : s.util.parsePath(d)
          ), s.Polyline.prototype._setPositionDimensions.call(this, m || {});
        },
        /**
         * @private
         * @param {CanvasRenderingContext2D} ctx context to render path on
         */
        _renderPathCommands: function(d) {
          var m, p = 0, v = 0, b = 0, y = 0, w = 0, C = 0, _ = -this.pathOffset.x, S = -this.pathOffset.y;
          d.beginPath();
          for (var k = 0, I = this.path.length; k < I; ++k)
            switch (m = this.path[k], m[0]) {
              case "L":
                b = m[1], y = m[2], d.lineTo(b + _, y + S);
                break;
              case "M":
                b = m[1], y = m[2], p = b, v = y, d.moveTo(b + _, y + S);
                break;
              case "C":
                b = m[5], y = m[6], w = m[3], C = m[4], d.bezierCurveTo(
                  m[1] + _,
                  m[2] + S,
                  w + _,
                  C + S,
                  b + _,
                  y + S
                );
                break;
              case "Q":
                d.quadraticCurveTo(
                  m[1] + _,
                  m[2] + S,
                  m[3] + _,
                  m[4] + S
                ), b = m[3], y = m[4], w = m[1], C = m[2];
                break;
              case "z":
              case "Z":
                b = p, y = v, d.closePath();
                break;
            }
        },
        /**
         * @private
         * @param {CanvasRenderingContext2D} ctx context to render path on
         */
        _render: function(d) {
          this._renderPathCommands(d), this._renderPaintInOrder(d);
        },
        /**
         * Returns string representation of an instance
         * @return {String} string representation of an instance
         */
        toString: function() {
          return "#<fabric.Path (" + this.complexity() + '): { "top": ' + this.top + ', "left": ' + this.left + " }>";
        },
        /**
         * Returns object representation of an instance
         * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output
         * @return {Object} object representation of an instance
         */
        toObject: function(d) {
          return o(this.callSuper("toObject", d), {
            path: this.path.map(function(m) {
              return m.slice();
            })
          });
        },
        /**
         * Returns dataless object representation of an instance
         * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output
         * @return {Object} object representation of an instance
         */
        toDatalessObject: function(d) {
          var m = this.toObject(["sourcePath"].concat(d));
          return m.sourcePath && delete m.path, m;
        },
        /* _TO_SVG_START_ */
        /**
         * Returns svg representation of an instance
         * @return {Array} an array of strings with the specific svg representation
         * of the instance
         */
        _toSVG: function() {
          var d = s.util.joinPath(this.path);
          return [
            "<path ",
            "COMMON_PARTS",
            'd="',
            d,
            '" stroke-linecap="round" ',
            `/>
`
          ];
        },
        _getOffsetTransform: function() {
          var d = s.Object.NUM_FRACTION_DIGITS;
          return " translate(" + c(-this.pathOffset.x, d) + ", " + c(-this.pathOffset.y, d) + ")";
        },
        /**
         * Returns svg clipPath representation of an instance
         * @param {Function} [reviver] Method for further parsing of svg representation.
         * @return {String} svg representation of an instance
         */
        toClipPathSVG: function(d) {
          var m = this._getOffsetTransform();
          return "	" + this._createBaseClipPathSVGMarkup(
            this._toSVG(),
            { reviver: d, additionalTransform: m }
          );
        },
        /**
         * Returns svg representation of an instance
         * @param {Function} [reviver] Method for further parsing of svg representation.
         * @return {String} svg representation of an instance
         */
        toSVG: function(d) {
          var m = this._getOffsetTransform();
          return this._createBaseSVGMarkup(this._toSVG(), { reviver: d, additionalTransform: m });
        },
        /* _TO_SVG_END_ */
        /**
         * Returns number representation of an instance complexity
         * @return {Number} complexity of this instance
         */
        complexity: function() {
          return this.path.length;
        },
        /**
         * @private
         */
        _calcDimensions: function() {
          for (var d = [], m = [], p, v = 0, b = 0, y = 0, w = 0, C, _ = 0, S = this.path.length; _ < S; ++_) {
            switch (p = this.path[_], p[0]) {
              case "L":
                y = p[1], w = p[2], C = [];
                break;
              case "M":
                y = p[1], w = p[2], v = y, b = w, C = [];
                break;
              case "C":
                C = s.util.getBoundsOfCurve(
                  y,
                  w,
                  p[1],
                  p[2],
                  p[3],
                  p[4],
                  p[5],
                  p[6]
                ), y = p[5], w = p[6];
                break;
              case "Q":
                C = s.util.getBoundsOfCurve(
                  y,
                  w,
                  p[1],
                  p[2],
                  p[1],
                  p[2],
                  p[3],
                  p[4]
                ), y = p[3], w = p[4];
                break;
              case "z":
              case "Z":
                y = v, w = b;
                break;
            }
            C.forEach(function(W) {
              d.push(W.x), m.push(W.y);
            }), d.push(y), m.push(w);
          }
          var k = a(d) || 0, I = a(m) || 0, L = h(d) || 0, j = h(m) || 0, G = L - k, te = j - I;
          return {
            left: k,
            top: I,
            width: G,
            height: te
          };
        }
      }
    ), s.Path.fromObject = function(d, m) {
      if (typeof d.sourcePath == "string") {
        var p = d.sourcePath;
        s.loadSVGFromURL(p, function(v) {
          var b = v[0];
          b.setOptions(d), d.clipPath ? s.util.enlivenObjects([d.clipPath], function(y) {
            b.clipPath = y[0], m && m(b);
          }) : m && m(b);
        });
      } else
        s.Object._fromObject("Path", d, m, "path");
    }, s.Path.ATTRIBUTE_NAMES = s.SHARED_ATTRIBUTES.concat(["d"]), s.Path.fromElement = function(d, m, p) {
      var v = s.parseAttributes(d, s.Path.ATTRIBUTE_NAMES);
      v.fromSVG = !0, m(new s.Path(v.d, o(v, p)));
    };
  }(t), function(l) {
    var s = l.fabric || (l.fabric = {}), a = s.util.array.min, h = s.util.array.max;
    s.Group || (s.Group = s.util.createClass(
      s.Object,
      s.Collection,
      /** @lends fabric.Group.prototype */
      {
        /**
         * Type of an object
         * @type String
         * @default
         */
        type: "group",
        /**
         * Width of stroke
         * @type Number
         * @default
         */
        strokeWidth: 0,
        /**
         * Indicates if click, mouseover, mouseout events & hoverCursor should also check for subtargets
         * @type Boolean
         * @default
         */
        subTargetCheck: !1,
        /**
         * Groups are container, do not render anything on theyr own, ence no cache properties
         * @type Array
         * @default
         */
        cacheProperties: [],
        /**
         * setOnGroup is a method used for TextBox that is no more used since 2.0.0 The behavior is still
         * available setting this boolean to true.
         * @type Boolean
         * @since 2.0.0
         * @default
         */
        useSetOnGroup: !1,
        /**
         * Constructor
         * @param {Object} objects Group objects
         * @param {Object} [options] Options object
         * @param {Boolean} [isAlreadyGrouped] if true, objects have been grouped already.
         * @return {Object} thisArg
         */
        initialize: function(o, u, c) {
          u = u || {}, this._objects = [], c && this.callSuper("initialize", u), this._objects = o || [];
          for (var d = this._objects.length; d--; )
            this._objects[d].group = this;
          if (c)
            this._updateObjectsACoords();
          else {
            var m = u && u.centerPoint;
            u.originX !== void 0 && (this.originX = u.originX), u.originY !== void 0 && (this.originY = u.originY), m || this._calcBounds(), this._updateObjectsCoords(m), delete u.centerPoint, this.callSuper("initialize", u);
          }
          this.setCoords();
        },
        /**
         * @private
         */
        _updateObjectsACoords: function() {
          for (var o = !0, u = this._objects.length; u--; )
            this._objects[u].setCoords(o);
        },
        /**
         * @private
         * @param {Boolean} [skipCoordsChange] if true, coordinates of objects enclosed in a group do not change
         */
        _updateObjectsCoords: function(u) {
          for (var u = u || this.getCenterPoint(), c = this._objects.length; c--; )
            this._updateObjectCoords(this._objects[c], u);
        },
        /**
         * @private
         * @param {Object} object
         * @param {fabric.Point} center, current center of group.
         */
        _updateObjectCoords: function(o, u) {
          var c = o.left, d = o.top, m = !0;
          o.set({
            left: c - u.x,
            top: d - u.y
          }), o.group = this, o.setCoords(m);
        },
        /**
         * Returns string represenation of a group
         * @return {String}
         */
        toString: function() {
          return "#<fabric.Group: (" + this.complexity() + ")>";
        },
        /**
         * Adds an object to a group; Then recalculates group's dimension, position.
         * @param {Object} object
         * @return {fabric.Group} thisArg
         * @chainable
         */
        addWithUpdate: function(o) {
          var u = !!this.group;
          return this._restoreObjectsState(), s.util.resetObjectTransform(this), o && (u && s.util.removeTransformFromObject(o, this.group.calcTransformMatrix()), this._objects.push(o), o.group = this, o._set("canvas", this.canvas)), this._calcBounds(), this._updateObjectsCoords(), this.dirty = !0, u ? this.group.addWithUpdate() : this.setCoords(), this;
        },
        /**
         * Removes an object from a group; Then recalculates group's dimension, position.
         * @param {Object} object
         * @return {fabric.Group} thisArg
         * @chainable
         */
        removeWithUpdate: function(o) {
          return this._restoreObjectsState(), s.util.resetObjectTransform(this), this.remove(o), this._calcBounds(), this._updateObjectsCoords(), this.setCoords(), this.dirty = !0, this;
        },
        /**
         * @private
         */
        _onObjectAdded: function(o) {
          this.dirty = !0, o.group = this, o._set("canvas", this.canvas);
        },
        /**
         * @private
         */
        _onObjectRemoved: function(o) {
          this.dirty = !0, delete o.group;
        },
        /**
         * @private
         */
        _set: function(o, u) {
          var c = this._objects.length;
          if (this.useSetOnGroup)
            for (; c--; )
              this._objects[c].setOnGroup(o, u);
          if (o === "canvas")
            for (; c--; )
              this._objects[c]._set(o, u);
          s.Object.prototype._set.call(this, o, u);
        },
        /**
         * Returns object representation of an instance
         * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output
         * @return {Object} object representation of an instance
         */
        toObject: function(o) {
          var u = this.includeDefaultValues, c = this._objects.filter(function(m) {
            return !m.excludeFromExport;
          }).map(function(m) {
            var p = m.includeDefaultValues;
            m.includeDefaultValues = u;
            var v = m.toObject(o);
            return m.includeDefaultValues = p, v;
          }), d = s.Object.prototype.toObject.call(this, o);
          return d.objects = c, d;
        },
        /**
         * Returns object representation of an instance, in dataless mode.
         * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output
         * @return {Object} object representation of an instance
         */
        toDatalessObject: function(o) {
          var u, c = this.sourcePath;
          if (c)
            u = c;
          else {
            var d = this.includeDefaultValues;
            u = this._objects.map(function(p) {
              var v = p.includeDefaultValues;
              p.includeDefaultValues = d;
              var b = p.toDatalessObject(o);
              return p.includeDefaultValues = v, b;
            });
          }
          var m = s.Object.prototype.toDatalessObject.call(this, o);
          return m.objects = u, m;
        },
        /**
         * Renders instance on a given context
         * @param {CanvasRenderingContext2D} ctx context to render instance on
         */
        render: function(o) {
          this._transformDone = !0, this.callSuper("render", o), this._transformDone = !1;
        },
        /**
         * Decide if the object should cache or not. Create its own cache level
         * needsItsOwnCache should be used when the object drawing method requires
         * a cache step. None of the fabric classes requires it.
         * Generally you do not cache objects in groups because the group is already cached.
         * @return {Boolean}
         */
        shouldCache: function() {
          var o = s.Object.prototype.shouldCache.call(this);
          if (o) {
            for (var u = 0, c = this._objects.length; u < c; u++)
              if (this._objects[u].willDrawShadow())
                return this.ownCaching = !1, !1;
          }
          return o;
        },
        /**
         * Check if this object or a child object will cast a shadow
         * @return {Boolean}
         */
        willDrawShadow: function() {
          if (s.Object.prototype.willDrawShadow.call(this))
            return !0;
          for (var o = 0, u = this._objects.length; o < u; o++)
            if (this._objects[o].willDrawShadow())
              return !0;
          return !1;
        },
        /**
         * Check if this group or its parent group are caching, recursively up
         * @return {Boolean}
         */
        isOnACache: function() {
          return this.ownCaching || this.group && this.group.isOnACache();
        },
        /**
         * Execute the drawing operation for an object on a specified context
         * @param {CanvasRenderingContext2D} ctx Context to render on
         */
        drawObject: function(o) {
          for (var u = 0, c = this._objects.length; u < c; u++)
            this._objects[u].render(o);
          this._drawClipPath(o, this.clipPath);
        },
        /**
         * Check if cache is dirty
         */
        isCacheDirty: function(o) {
          if (this.callSuper("isCacheDirty", o))
            return !0;
          if (!this.statefullCache)
            return !1;
          for (var u = 0, c = this._objects.length; u < c; u++)
            if (this._objects[u].isCacheDirty(!0)) {
              if (this._cacheCanvas) {
                var d = this.cacheWidth / this.zoomX, m = this.cacheHeight / this.zoomY;
                this._cacheContext.clearRect(-d / 2, -m / 2, d, m);
              }
              return !0;
            }
          return !1;
        },
        /**
         * Restores original state of each of group objects (original state is that which was before group was created).
         * if the nested boolean is true, the original state will be restored just for the
         * first group and not for all the group chain
         * @private
         * @param {Boolean} nested tell the function to restore object state up to the parent group and not more
         * @return {fabric.Group} thisArg
         * @chainable
         */
        _restoreObjectsState: function() {
          var o = this.calcOwnMatrix();
          return this._objects.forEach(function(u) {
            s.util.addTransformToObject(u, o), delete u.group, u.setCoords();
          }), this;
        },
        /**
         * Destroys a group (restoring state of its objects)
         * @return {fabric.Group} thisArg
         * @chainable
         */
        destroy: function() {
          return this._objects.forEach(function(o) {
            o.set("dirty", !0);
          }), this._restoreObjectsState();
        },
        dispose: function() {
          this.callSuper("dispose"), this.forEachObject(function(o) {
            o.dispose && o.dispose();
          }), this._objects = [];
        },
        /**
         * make a group an active selection, remove the group from canvas
         * the group has to be on canvas for this to work.
         * @return {fabric.ActiveSelection} thisArg
         * @chainable
         */
        toActiveSelection: function() {
          if (this.canvas) {
            var o = this._objects, u = this.canvas;
            this._objects = [];
            var c = this.toObject();
            delete c.objects;
            var d = new s.ActiveSelection([]);
            return d.set(c), d.type = "activeSelection", u.remove(this), o.forEach(function(m) {
              m.group = d, m.dirty = !0, u.add(m);
            }), d.canvas = u, d._objects = o, u._activeObject = d, d.setCoords(), d;
          }
        },
        /**
         * Destroys a group (restoring state of its objects)
         * @return {fabric.Group} thisArg
         * @chainable
         */
        ungroupOnCanvas: function() {
          return this._restoreObjectsState();
        },
        /**
         * Sets coordinates of all objects inside group
         * @return {fabric.Group} thisArg
         * @chainable
         */
        setObjectsCoords: function() {
          var o = !0;
          return this.forEachObject(function(u) {
            u.setCoords(o);
          }), this;
        },
        /**
         * @private
         */
        _calcBounds: function(o) {
          for (var u = [], c = [], d, m, p, v = ["tr", "br", "bl", "tl"], b = 0, y = this._objects.length, w, C = v.length; b < y; ++b) {
            for (d = this._objects[b], p = d.calcACoords(), w = 0; w < C; w++)
              m = v[w], u.push(p[m].x), c.push(p[m].y);
            d.aCoords = p;
          }
          this._getBounds(u, c, o);
        },
        /**
         * @private
         */
        _getBounds: function(o, u, c) {
          var d = new s.Point(a(o), a(u)), m = new s.Point(h(o), h(u)), p = d.y || 0, v = d.x || 0, b = m.x - d.x || 0, y = m.y - d.y || 0;
          this.width = b, this.height = y, c || this.setPositionByOrigin({ x: v, y: p }, "left", "top");
        },
        /* _TO_SVG_START_ */
        /**
         * Returns svg representation of an instance
         * @param {Function} [reviver] Method for further parsing of svg representation.
         * @return {String} svg representation of an instance
         */
        _toSVG: function(o) {
          for (var u = ["<g ", "COMMON_PARTS", ` >
`], c = 0, d = this._objects.length; c < d; c++)
            u.push("		", this._objects[c].toSVG(o));
          return u.push(`</g>
`), u;
        },
        /**
         * Returns styles-string for svg-export, specific version for group
         * @return {String}
         */
        getSvgStyles: function() {
          var o = typeof this.opacity < "u" && this.opacity !== 1 ? "opacity: " + this.opacity + ";" : "", u = this.visible ? "" : " visibility: hidden;";
          return [
            o,
            this.getSvgFilter(),
            u
          ].join("");
        },
        /**
         * Returns svg clipPath representation of an instance
         * @param {Function} [reviver] Method for further parsing of svg representation.
         * @return {String} svg representation of an instance
         */
        toClipPathSVG: function(o) {
          for (var u = [], c = 0, d = this._objects.length; c < d; c++)
            u.push("	", this._objects[c].toClipPathSVG(o));
          return this._createBaseClipPathSVGMarkup(u, { reviver: o });
        }
        /* _TO_SVG_END_ */
      }
    ), s.Group.fromObject = function(o, u) {
      var c = o.objects, d = s.util.object.clone(o, !0);
      if (delete d.objects, typeof c == "string") {
        s.loadSVGFromURL(c, function(m) {
          var p = s.util.groupSVGElements(m, o, c), v = d.clipPath;
          delete d.clipPath, p.set(d), v ? s.util.enlivenObjects([v], function(b) {
            p.clipPath = b[0], u && u(p);
          }) : u && u(p);
        });
        return;
      }
      s.util.enlivenObjects(c, function(m) {
        s.util.enlivenObjectEnlivables(o, d, function() {
          u && u(new s.Group(m, d, !0));
        });
      });
    });
  }(t), function(l) {
    var s = l.fabric || (l.fabric = {});
    s.ActiveSelection || (s.ActiveSelection = s.util.createClass(
      s.Group,
      /** @lends fabric.ActiveSelection.prototype */
      {
        /**
         * Type of an object
         * @type String
         * @default
         */
        type: "activeSelection",
        /**
         * Constructor
         * @param {Object} objects ActiveSelection objects
         * @param {Object} [options] Options object
         * @return {Object} thisArg
         */
        initialize: function(a, h) {
          h = h || {}, this._objects = a || [];
          for (var o = this._objects.length; o--; )
            this._objects[o].group = this;
          h.originX && (this.originX = h.originX), h.originY && (this.originY = h.originY), this._calcBounds(), this._updateObjectsCoords(), s.Object.prototype.initialize.call(this, h), this.setCoords();
        },
        /**
         * Change te activeSelection to a normal group,
         * High level function that automatically adds it to canvas as
         * active object. no events fired.
         * @since 2.0.0
         * @return {fabric.Group}
         */
        toGroup: function() {
          var a = this._objects.concat();
          this._objects = [];
          var h = s.Object.prototype.toObject.call(this), o = new s.Group([]);
          if (delete h.type, o.set(h), a.forEach(function(c) {
            c.canvas.remove(c), c.group = o;
          }), o._objects = a, !this.canvas)
            return o;
          var u = this.canvas;
          return u.add(o), u._activeObject = o, o.setCoords(), o;
        },
        /**
         * If returns true, deselection is cancelled.
         * @since 2.0.0
         * @return {Boolean} [cancel]
         */
        onDeselect: function() {
          return this.destroy(), !1;
        },
        /**
         * Returns string representation of a group
         * @return {String}
         */
        toString: function() {
          return "#<fabric.ActiveSelection: (" + this.complexity() + ")>";
        },
        /**
         * Decide if the object should cache or not. Create its own cache level
         * objectCaching is a global flag, wins over everything
         * needsItsOwnCache should be used when the object drawing method requires
         * a cache step. None of the fabric classes requires it.
         * Generally you do not cache objects in groups because the group outside is cached.
         * @return {Boolean}
         */
        shouldCache: function() {
          return !1;
        },
        /**
         * Check if this group or its parent group are caching, recursively up
         * @return {Boolean}
         */
        isOnACache: function() {
          return !1;
        },
        /**
         * Renders controls and borders for the object
         * @param {CanvasRenderingContext2D} ctx Context to render on
         * @param {Object} [styleOverride] properties to override the object style
         * @param {Object} [childrenOverride] properties to override the children overrides
         */
        _renderControls: function(a, h, o) {
          a.save(), a.globalAlpha = this.isMoving ? this.borderOpacityWhenMoving : 1, this.callSuper("_renderControls", a, h), o = o || {}, typeof o.hasControls > "u" && (o.hasControls = !1), o.forActiveSelection = !0;
          for (var u = 0, c = this._objects.length; u < c; u++)
            this._objects[u]._renderControls(a, o);
          a.restore();
        }
      }
    ), s.ActiveSelection.fromObject = function(a, h) {
      s.util.enlivenObjects(a.objects, function(o) {
        delete a.objects, h && h(new s.ActiveSelection(o, a, !0));
      });
    });
  }(t), function(l) {
    var s = e.util.object.extend;
    if (l.fabric || (l.fabric = {}), l.fabric.Image) {
      e.warn("fabric.Image is already defined.");
      return;
    }
    e.Image = e.util.createClass(
      e.Object,
      /** @lends fabric.Image.prototype */
      {
        /**
         * Type of an object
         * @type String
         * @default
         */
        type: "image",
        /**
         * Width of a stroke.
         * For image quality a stroke multiple of 2 gives better results.
         * @type Number
         * @default
         */
        strokeWidth: 0,
        /**
         * When calling {@link fabric.Image.getSrc}, return value from element src with `element.getAttribute('src')`.
         * This allows for relative urls as image src.
         * @since 2.7.0
         * @type Boolean
         * @default
         */
        srcFromAttribute: !1,
        /**
         * private
         * contains last value of scaleX to detect
         * if the Image got resized after the last Render
         * @type Number
         */
        _lastScaleX: 1,
        /**
         * private
         * contains last value of scaleY to detect
         * if the Image got resized after the last Render
         * @type Number
         */
        _lastScaleY: 1,
        /**
         * private
         * contains last value of scaling applied by the apply filter chain
         * @type Number
         */
        _filterScalingX: 1,
        /**
         * private
         * contains last value of scaling applied by the apply filter chain
         * @type Number
         */
        _filterScalingY: 1,
        /**
         * minimum scale factor under which any resizeFilter is triggered to resize the image
         * 0 will disable the automatic resize. 1 will trigger automatically always.
         * number bigger than 1 are not implemented yet.
         * @type Number
         */
        minimumScaleTrigger: 0.5,
        /**
         * List of properties to consider when checking if
         * state of an object is changed ({@link fabric.Object#hasStateChanged})
         * as well as for history (undo/redo) purposes
         * @type Array
         */
        stateProperties: e.Object.prototype.stateProperties.concat("cropX", "cropY"),
        /**
         * List of properties to consider when checking if cache needs refresh
         * Those properties are checked by statefullCache ON ( or lazy mode if we want ) or from single
         * calls to Object.set(key, value). If the key is in this list, the object is marked as dirty
         * and refreshed at the next render
         * @type Array
         */
        cacheProperties: e.Object.prototype.cacheProperties.concat("cropX", "cropY"),
        /**
         * key used to retrieve the texture representing this image
         * @since 2.0.0
         * @type String
         * @default
         */
        cacheKey: "",
        /**
         * Image crop in pixels from original image size.
         * @since 2.0.0
         * @type Number
         * @default
         */
        cropX: 0,
        /**
         * Image crop in pixels from original image size.
         * @since 2.0.0
         * @type Number
         * @default
         */
        cropY: 0,
        /**
         * Indicates whether this canvas will use image smoothing when painting this image.
         * Also influence if the cacheCanvas for this image uses imageSmoothing
         * @since 4.0.0-beta.11
         * @type Boolean
         * @default
         */
        imageSmoothing: !0,
        /**
         * Constructor
         * Image can be initialized with any canvas drawable or a string.
         * The string should be a url and will be loaded as an image.
         * Canvas and Image element work out of the box, while videos require extra code to work.
         * Please check video element events for seeking.
         * @param {HTMLImageElement | HTMLCanvasElement | HTMLVideoElement | String} element Image element
         * @param {Object} [options] Options object
         * @param {function} [callback] callback function to call after eventual filters applied.
         * @return {fabric.Image} thisArg
         */
        initialize: function(a, h) {
          h || (h = {}), this.filters = [], this.cacheKey = "texture" + e.Object.__uid++, this.callSuper("initialize", h), this._initElement(a, h);
        },
        /**
         * Returns image element which this instance if based on
         * @return {HTMLImageElement} Image element
         */
        getElement: function() {
          return this._element || {};
        },
        /**
         * Sets image element for this instance to a specified one.
         * If filters defined they are applied to new image.
         * You might need to call `canvas.renderAll` and `object.setCoords` after replacing, to render new image and update controls area.
         * @param {HTMLImageElement} element
         * @param {Object} [options] Options object
         * @return {fabric.Image} thisArg
         * @chainable
         */
        setElement: function(a, h) {
          return this.removeTexture(this.cacheKey), this.removeTexture(this.cacheKey + "_filtered"), this._element = a, this._originalElement = a, this._initConfig(h), this.filters.length !== 0 && this.applyFilters(), this.resizeFilter && this.applyResizeFilters(), this;
        },
        /**
         * Delete a single texture if in webgl mode
         */
        removeTexture: function(a) {
          var h = e.filterBackend;
          h && h.evictCachesForKey && h.evictCachesForKey(a);
        },
        /**
         * Delete textures, reference to elements and eventually JSDOM cleanup
         */
        dispose: function() {
          this.callSuper("dispose"), this.removeTexture(this.cacheKey), this.removeTexture(this.cacheKey + "_filtered"), this._cacheContext = void 0, ["_originalElement", "_element", "_filteredEl", "_cacheCanvas"].forEach((function(a) {
            e.util.cleanUpJsdomNode(this[a]), this[a] = void 0;
          }).bind(this));
        },
        /**
         * Get the crossOrigin value (of the corresponding image element)
         */
        getCrossOrigin: function() {
          return this._originalElement && (this._originalElement.crossOrigin || null);
        },
        /**
         * Returns original size of an image
         * @return {Object} Object with "width" and "height" properties
         */
        getOriginalSize: function() {
          var a = this.getElement();
          return {
            width: a.naturalWidth || a.width,
            height: a.naturalHeight || a.height
          };
        },
        /**
         * @private
         * @param {CanvasRenderingContext2D} ctx Context to render on
         */
        _stroke: function(a) {
          if (!(!this.stroke || this.strokeWidth === 0)) {
            var h = this.width / 2, o = this.height / 2;
            a.beginPath(), a.moveTo(-h, -o), a.lineTo(h, -o), a.lineTo(h, o), a.lineTo(-h, o), a.lineTo(-h, -o), a.closePath();
          }
        },
        /**
         * Returns object representation of an instance
         * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output
         * @return {Object} Object representation of an instance
         */
        toObject: function(a) {
          var h = [];
          this.filters.forEach(function(u) {
            u && h.push(u.toObject());
          });
          var o = s(
            this.callSuper(
              "toObject",
              ["cropX", "cropY"].concat(a)
            ),
            {
              src: this.getSrc(),
              crossOrigin: this.getCrossOrigin(),
              filters: h
            }
          );
          return this.resizeFilter && (o.resizeFilter = this.resizeFilter.toObject()), o;
        },
        /**
         * Returns true if an image has crop applied, inspecting values of cropX,cropY,width,height.
         * @return {Boolean}
         */
        hasCrop: function() {
          return this.cropX || this.cropY || this.width < this._element.width || this.height < this._element.height;
        },
        /* _TO_SVG_START_ */
        /**
         * Returns svg representation of an instance
         * @return {Array} an array of strings with the specific svg representation
         * of the instance
         */
        _toSVG: function() {
          var a = [], h = [], o, u = this._element, c = -this.width / 2, d = -this.height / 2, m = "", p = "";
          if (!u)
            return [];
          if (this.hasCrop()) {
            var v = e.Object.__uid++;
            a.push(
              '<clipPath id="imageCrop_' + v + `">
`,
              '	<rect x="' + c + '" y="' + d + '" width="' + this.width + '" height="' + this.height + `" />
`,
              `</clipPath>
`
            ), m = ' clip-path="url(#imageCrop_' + v + ')" ';
          }
          if (this.imageSmoothing || (p = '" image-rendering="optimizeSpeed'), h.push(
            "	<image ",
            "COMMON_PARTS",
            'xlink:href="',
            this.getSvgSrc(!0),
            '" x="',
            c - this.cropX,
            '" y="',
            d - this.cropY,
            // we're essentially moving origin of transformation from top/left corner to the center of the shape
            // by wrapping it in container <g> element with actual transformation, then offsetting object to the top/left
            // so that object's center aligns with container's left/top
            '" width="',
            u.width || u.naturalWidth,
            '" height="',
            u.height || u.height,
            p,
            '"',
            m,
            `></image>
`
          ), this.stroke || this.strokeDashArray) {
            var b = this.fill;
            this.fill = null, o = [
              "	<rect ",
              'x="',
              c,
              '" y="',
              d,
              '" width="',
              this.width,
              '" height="',
              this.height,
              '" style="',
              this.getSvgStyles(),
              `"/>
`
            ], this.fill = b;
          }
          return this.paintFirst !== "fill" ? a = a.concat(o, h) : a = a.concat(h, o), a;
        },
        /* _TO_SVG_END_ */
        /**
         * Returns source of an image
         * @param {Boolean} filtered indicates if the src is needed for svg
         * @return {String} Source of an image
         */
        getSrc: function(a) {
          var h = a ? this._element : this._originalElement;
          return h ? h.toDataURL ? h.toDataURL() : this.srcFromAttribute ? h.getAttribute("src") : h.src : this.src || "";
        },
        /**
         * Sets source of an image
         * @param {String} src Source string (URL)
         * @param {Function} [callback] Callback is invoked when image has been loaded (and all filters have been applied)
         * @param {Object} [options] Options object
         * @param {String} [options.crossOrigin] crossOrigin value (one of "", "anonymous", "use-credentials")
         * @see https://developer.mozilla.org/en-US/docs/HTML/CORS_settings_attributes
         * @return {fabric.Image} thisArg
         * @chainable
         */
        setSrc: function(a, h, o) {
          return e.util.loadImage(a, function(u, c) {
            this.setElement(u, o), this._setWidthHeight(), h && h(this, c);
          }, this, o && o.crossOrigin), this;
        },
        /**
         * Returns string representation of an instance
         * @return {String} String representation of an instance
         */
        toString: function() {
          return '#<fabric.Image: { src: "' + this.getSrc() + '" }>';
        },
        applyResizeFilters: function() {
          var a = this.resizeFilter, h = this.minimumScaleTrigger, o = this.getTotalObjectScaling(), u = o.scaleX, c = o.scaleY, d = this._filteredEl || this._originalElement;
          if (this.group && this.set("dirty", !0), !a || u > h && c > h) {
            this._element = d, this._filterScalingX = 1, this._filterScalingY = 1, this._lastScaleX = u, this._lastScaleY = c;
            return;
          }
          e.filterBackend || (e.filterBackend = e.initFilterBackend());
          var m = e.util.createCanvasElement(), p = this._filteredEl ? this.cacheKey + "_filtered" : this.cacheKey, v = d.width, b = d.height;
          m.width = v, m.height = b, this._element = m, this._lastScaleX = a.scaleX = u, this._lastScaleY = a.scaleY = c, e.filterBackend.applyFilters(
            [a],
            d,
            v,
            b,
            this._element,
            p
          ), this._filterScalingX = m.width / this._originalElement.width, this._filterScalingY = m.height / this._originalElement.height;
        },
        /**
         * Applies filters assigned to this image (from "filters" array) or from filter param
         * @method applyFilters
         * @param {Array} filters to be applied
         * @param {Boolean} forResizing specify if the filter operation is a resize operation
         * @return {thisArg} return the fabric.Image object
         * @chainable
         */
        applyFilters: function(a) {
          if (a = a || this.filters || [], a = a.filter(function(d) {
            return d && !d.isNeutralState();
          }), this.set("dirty", !0), this.removeTexture(this.cacheKey + "_filtered"), a.length === 0)
            return this._element = this._originalElement, this._filteredEl = null, this._filterScalingX = 1, this._filterScalingY = 1, this;
          var h = this._originalElement, o = h.naturalWidth || h.width, u = h.naturalHeight || h.height;
          if (this._element === this._originalElement) {
            var c = e.util.createCanvasElement();
            c.width = o, c.height = u, this._element = c, this._filteredEl = c;
          } else
            this._element = this._filteredEl, this._filteredEl.getContext("2d").clearRect(0, 0, o, u), this._lastScaleX = 1, this._lastScaleY = 1;
          return e.filterBackend || (e.filterBackend = e.initFilterBackend()), e.filterBackend.applyFilters(
            a,
            this._originalElement,
            o,
            u,
            this._element,
            this.cacheKey
          ), (this._originalElement.width !== this._element.width || this._originalElement.height !== this._element.height) && (this._filterScalingX = this._element.width / this._originalElement.width, this._filterScalingY = this._element.height / this._originalElement.height), this;
        },
        /**
         * @private
         * @param {CanvasRenderingContext2D} ctx Context to render on
         */
        _render: function(a) {
          e.util.setImageSmoothing(a, this.imageSmoothing), this.isMoving !== !0 && this.resizeFilter && this._needsResize() && this.applyResizeFilters(), this._stroke(a), this._renderPaintInOrder(a);
        },
        /**
         * Paint the cached copy of the object on the target context.
         * it will set the imageSmoothing for the draw operation
         * @param {CanvasRenderingContext2D} ctx Context to render on
         */
        drawCacheOnCanvas: function(a) {
          e.util.setImageSmoothing(a, this.imageSmoothing), e.Object.prototype.drawCacheOnCanvas.call(this, a);
        },
        /**
         * Decide if the object should cache or not. Create its own cache level
         * needsItsOwnCache should be used when the object drawing method requires
         * a cache step. None of the fabric classes requires it.
         * Generally you do not cache objects in groups because the group outside is cached.
         * This is the special image version where we would like to avoid caching where possible.
         * Essentially images do not benefit from caching. They may require caching, and in that
         * case we do it. Also caching an image usually ends in a loss of details.
         * A full performance audit should be done.
         * @return {Boolean}
         */
        shouldCache: function() {
          return this.needsItsOwnCache();
        },
        _renderFill: function(a) {
          var h = this._element;
          if (h) {
            var o = this._filterScalingX, u = this._filterScalingY, c = this.width, d = this.height, m = Math.min, p = Math.max, v = p(this.cropX, 0), b = p(this.cropY, 0), y = h.naturalWidth || h.width, w = h.naturalHeight || h.height, C = v * o, _ = b * u, S = m(c * o, y - C), k = m(d * u, w - _), I = -c / 2, L = -d / 2, j = m(c, y / o - v), G = m(d, w / u - b);
            h && a.drawImage(h, C, _, S, k, I, L, j, G);
          }
        },
        /**
         * needed to check if image needs resize
         * @private
         */
        _needsResize: function() {
          var a = this.getTotalObjectScaling();
          return a.scaleX !== this._lastScaleX || a.scaleY !== this._lastScaleY;
        },
        /**
         * @private
         */
        _resetWidthHeight: function() {
          this.set(this.getOriginalSize());
        },
        /**
         * The Image class's initialization method. This method is automatically
         * called by the constructor.
         * @private
         * @param {HTMLImageElement|String} element The element representing the image
         * @param {Object} [options] Options object
         */
        _initElement: function(a, h) {
          this.setElement(e.util.getById(a), h), e.util.addClass(this.getElement(), e.Image.CSS_CANVAS);
        },
        /**
         * @private
         * @param {Object} [options] Options object
         */
        _initConfig: function(a) {
          a || (a = {}), this.setOptions(a), this._setWidthHeight(a);
        },
        /**
         * @private
         * @param {Array} filters to be initialized
         * @param {Function} callback Callback to invoke when all fabric.Image.filters instances are created
         */
        _initFilters: function(a, h) {
          a && a.length ? e.util.enlivenObjects(a, function(o) {
            h && h(o);
          }, "fabric.Image.filters") : h && h();
        },
        /**
         * @private
         * Set the width and the height of the image object, using the element or the
         * options.
         * @param {Object} [options] Object with width/height properties
         */
        _setWidthHeight: function(a) {
          a || (a = {});
          var h = this.getElement();
          this.width = a.width || h.naturalWidth || h.width || 0, this.height = a.height || h.naturalHeight || h.height || 0;
        },
        /**
         * Calculate offset for center and scale factor for the image in order to respect
         * the preserveAspectRatio attribute
         * @private
         * @return {Object}
         */
        parsePreserveAspectRatioAttribute: function() {
          var a = e.util.parsePreserveAspectRatioAttribute(this.preserveAspectRatio || ""), h = this._element.width, o = this._element.height, u = 1, c = 1, d = 0, m = 0, p = 0, v = 0, b, y = this.width, w = this.height, C = { width: y, height: w };
          return a && (a.alignX !== "none" || a.alignY !== "none") ? (a.meetOrSlice === "meet" && (u = c = e.util.findScaleToFit(this._element, C), b = (y - h * u) / 2, a.alignX === "Min" && (d = -b), a.alignX === "Max" && (d = b), b = (w - o * c) / 2, a.alignY === "Min" && (m = -b), a.alignY === "Max" && (m = b)), a.meetOrSlice === "slice" && (u = c = e.util.findScaleToCover(this._element, C), b = h - y / u, a.alignX === "Mid" && (p = b / 2), a.alignX === "Max" && (p = b), b = o - w / c, a.alignY === "Mid" && (v = b / 2), a.alignY === "Max" && (v = b), h = y / u, o = w / c)) : (u = y / h, c = w / o), {
            width: h,
            height: o,
            scaleX: u,
            scaleY: c,
            offsetLeft: d,
            offsetTop: m,
            cropX: p,
            cropY: v
          };
        }
      }
    ), e.Image.CSS_CANVAS = "canvas-img", e.Image.prototype.getSvgSrc = e.Image.prototype.getSrc, e.Image.fromObject = function(a, h) {
      var o = e.util.object.clone(a);
      e.util.loadImage(o.src, function(u, c) {
        if (c) {
          h && h(null, !0);
          return;
        }
        e.Image.prototype._initFilters.call(o, o.filters, function(d) {
          o.filters = d || [], e.Image.prototype._initFilters.call(o, [o.resizeFilter], function(m) {
            o.resizeFilter = m[0], e.util.enlivenObjectEnlivables(o, o, function() {
              var p = new e.Image(u, o);
              h(p, !1);
            });
          });
        });
      }, null, o.crossOrigin);
    }, e.Image.fromURL = function(a, h, o) {
      e.util.loadImage(a, function(u, c) {
        h && h(new e.Image(u, o), c);
      }, null, o && o.crossOrigin);
    }, e.Image.ATTRIBUTE_NAMES = e.SHARED_ATTRIBUTES.concat(
      "x y width height preserveAspectRatio xlink:href crossOrigin image-rendering".split(" ")
    ), e.Image.fromElement = function(a, h, o) {
      var u = e.parseAttributes(a, e.Image.ATTRIBUTE_NAMES);
      e.Image.fromURL(
        u["xlink:href"],
        h,
        s(o ? e.util.object.clone(o) : {}, u)
      );
    };
  }(t), e.util.object.extend(
    e.Object.prototype,
    /** @lends fabric.Object.prototype */
    {
      /**
       * @private
       * @return {Number} angle value
       */
      _getAngleValueForStraighten: function() {
        var l = this.angle % 360;
        return l > 0 ? Math.round((l - 1) / 90) * 90 : Math.round(l / 90) * 90;
      },
      /**
       * Straightens an object (rotating it from current angle to one of 0, 90, 180, 270, etc. depending on which is closer)
       * @return {fabric.Object} thisArg
       * @chainable
       */
      straighten: function() {
        return this.rotate(this._getAngleValueForStraighten());
      },
      /**
       * Same as {@link fabric.Object.prototype.straighten} but with animation
       * @param {Object} callbacks Object with callback functions
       * @param {Function} [callbacks.onComplete] Invoked on completion
       * @param {Function} [callbacks.onChange] Invoked on every step of animation
       * @return {fabric.Object} thisArg
       */
      fxStraighten: function(l) {
        l = l || {};
        var s = function() {
        }, a = l.onComplete || s, h = l.onChange || s, o = this;
        return e.util.animate({
          target: this,
          startValue: this.get("angle"),
          endValue: this._getAngleValueForStraighten(),
          duration: this.FX_DURATION,
          onChange: function(u) {
            o.rotate(u), h();
          },
          onComplete: function() {
            o.setCoords(), a();
          }
        });
      }
    }
  ), e.util.object.extend(
    e.StaticCanvas.prototype,
    /** @lends fabric.StaticCanvas.prototype */
    {
      /**
       * Straightens object, then rerenders canvas
       * @param {fabric.Object} object Object to straighten
       * @return {fabric.Canvas} thisArg
       * @chainable
       */
      straightenObject: function(l) {
        return l.straighten(), this.requestRenderAll(), this;
      },
      /**
       * Same as {@link fabric.Canvas.prototype.straightenObject}, but animated
       * @param {fabric.Object} object Object to straighten
       * @return {fabric.Canvas} thisArg
       */
      fxStraightenObject: function(l) {
        return l.fxStraighten({
          onChange: this.requestRenderAllBound
        });
      }
    }
  ), function() {
    function l(a, h) {
      var o = "precision " + h + ` float;
void main(){}`, u = a.createShader(a.FRAGMENT_SHADER);
      return a.shaderSource(u, o), a.compileShader(u), !!a.getShaderParameter(u, a.COMPILE_STATUS);
    }
    e.isWebglSupported = function(a) {
      if (e.isLikelyNode)
        return !1;
      a = a || e.WebglFilterBackend.prototype.tileSize;
      var h = document.createElement("canvas"), o = h.getContext("webgl") || h.getContext("experimental-webgl"), u = !1;
      if (o) {
        e.maxTextureSize = o.getParameter(o.MAX_TEXTURE_SIZE), u = e.maxTextureSize >= a;
        for (var c = ["highp", "mediump", "lowp"], d = 0; d < 3; d++)
          if (l(o, c[d])) {
            e.webGlPrecision = c[d];
            break;
          }
      }
      return this.isSupported = u, u;
    }, e.WebglFilterBackend = s;
    function s(a) {
      a && a.tileSize && (this.tileSize = a.tileSize), this.setupGLContext(this.tileSize, this.tileSize), this.captureGPUInfo();
    }
    s.prototype = /** @lends fabric.WebglFilterBackend.prototype */
    {
      tileSize: 2048,
      /**
       * Experimental. This object is a sort of repository of help layers used to avoid
       * of recreating them during frequent filtering. If you are previewing a filter with
       * a slider you probably do not want to create help layers every filter step.
       * in this object there will be appended some canvases, created once, resized sometimes
       * cleared never. Clearing is left to the developer.
       **/
      resources: {},
      /**
       * Setup a WebGL context suitable for filtering, and bind any needed event handlers.
       */
      setupGLContext: function(a, h) {
        this.dispose(), this.createWebGLCanvas(a, h), this.aPosition = new Float32Array([0, 0, 0, 1, 1, 0, 1, 1]), this.chooseFastestCopyGLTo2DMethod(a, h);
      },
      /**
       * Pick a method to copy data from GL context to 2d canvas.  In some browsers using
       * putImageData is faster than drawImage for that specific operation.
       */
      chooseFastestCopyGLTo2DMethod: function(a, h) {
        var o = typeof window.performance < "u", u;
        try {
          new ImageData(1, 1), u = !0;
        } catch {
          u = !1;
        }
        var c = typeof ArrayBuffer < "u", d = typeof Uint8ClampedArray < "u";
        if (o && u && c && d) {
          var m = e.util.createCanvasElement(), p = new ArrayBuffer(a * h * 4);
          if (e.forceGLPutImageData) {
            this.imageBuffer = p, this.copyGLTo2D = g;
            return;
          }
          var v = {
            imageBuffer: p,
            destinationWidth: a,
            destinationHeight: h,
            targetCanvas: m
          }, b, y, w;
          m.width = a, m.height = h, b = window.performance.now(), f.call(v, this.gl, v), y = window.performance.now() - b, b = window.performance.now(), g.call(v, this.gl, v), w = window.performance.now() - b, y > w ? (this.imageBuffer = p, this.copyGLTo2D = g) : this.copyGLTo2D = f;
        }
      },
      /**
       * Create a canvas element and associated WebGL context and attaches them as
       * class properties to the GLFilterBackend class.
       */
      createWebGLCanvas: function(a, h) {
        var o = e.util.createCanvasElement();
        o.width = a, o.height = h;
        var u = {
          alpha: !0,
          premultipliedAlpha: !1,
          depth: !1,
          stencil: !1,
          antialias: !1
        }, c = o.getContext("webgl", u);
        c || (c = o.getContext("experimental-webgl", u)), c && (c.clearColor(0, 0, 0, 0), this.canvas = o, this.gl = c);
      },
      /**
       * Attempts to apply the requested filters to the source provided, drawing the filtered output
       * to the provided target canvas.
       *
       * @param {Array} filters The filters to apply.
       * @param {HTMLImageElement|HTMLCanvasElement} source The source to be filtered.
       * @param {Number} width The width of the source input.
       * @param {Number} height The height of the source input.
       * @param {HTMLCanvasElement} targetCanvas The destination for filtered output to be drawn.
       * @param {String|undefined} cacheKey A key used to cache resources related to the source. If
       * omitted, caching will be skipped.
       */
      applyFilters: function(a, h, o, u, c, d) {
        var m = this.gl, p;
        d && (p = this.getCachedTexture(d, h));
        var v = {
          originalWidth: h.width || h.originalWidth,
          originalHeight: h.height || h.originalHeight,
          sourceWidth: o,
          sourceHeight: u,
          destinationWidth: o,
          destinationHeight: u,
          context: m,
          sourceTexture: this.createTexture(m, o, u, !p && h),
          targetTexture: this.createTexture(m, o, u),
          originalTexture: p || this.createTexture(m, o, u, !p && h),
          passes: a.length,
          webgl: !0,
          aPosition: this.aPosition,
          programCache: this.programCache,
          pass: 0,
          filterBackend: this,
          targetCanvas: c
        }, b = m.createFramebuffer();
        return m.bindFramebuffer(m.FRAMEBUFFER, b), a.forEach(function(y) {
          y && y.applyTo(v);
        }), i(v), this.copyGLTo2D(m, v), m.bindTexture(m.TEXTURE_2D, null), m.deleteTexture(v.sourceTexture), m.deleteTexture(v.targetTexture), m.deleteFramebuffer(b), c.getContext("2d").setTransform(1, 0, 0, 1, 0, 0), v;
      },
      /**
       * Detach event listeners, remove references, and clean up caches.
       */
      dispose: function() {
        this.canvas && (this.canvas = null, this.gl = null), this.clearWebGLCaches();
      },
      /**
       * Wipe out WebGL-related caches.
       */
      clearWebGLCaches: function() {
        this.programCache = {}, this.textureCache = {};
      },
      /**
       * Create a WebGL texture object.
       *
       * Accepts specific dimensions to initialize the texture to or a source image.
       *
       * @param {WebGLRenderingContext} gl The GL context to use for creating the texture.
       * @param {Number} width The width to initialize the texture at.
       * @param {Number} height The height to initialize the texture.
       * @param {HTMLImageElement|HTMLCanvasElement} textureImageSource A source for the texture data.
       * @param {Number} filterType gl.NEAREST or gl.LINEAR usually, webgl numeri constants
       * @returns {WebGLTexture}
       */
      createTexture: function(a, h, o, u, c) {
        var d = a.createTexture();
        return a.bindTexture(a.TEXTURE_2D, d), a.texParameteri(a.TEXTURE_2D, a.TEXTURE_MAG_FILTER, c || a.NEAREST), a.texParameteri(a.TEXTURE_2D, a.TEXTURE_MIN_FILTER, c || a.NEAREST), a.texParameteri(a.TEXTURE_2D, a.TEXTURE_WRAP_S, a.CLAMP_TO_EDGE), a.texParameteri(a.TEXTURE_2D, a.TEXTURE_WRAP_T, a.CLAMP_TO_EDGE), u ? a.texImage2D(a.TEXTURE_2D, 0, a.RGBA, a.RGBA, a.UNSIGNED_BYTE, u) : a.texImage2D(a.TEXTURE_2D, 0, a.RGBA, h, o, 0, a.RGBA, a.UNSIGNED_BYTE, null), d;
      },
      /**
       * Can be optionally used to get a texture from the cache array
       *
       * If an existing texture is not found, a new texture is created and cached.
       *
       * @param {String} uniqueId A cache key to use to find an existing texture.
       * @param {HTMLImageElement|HTMLCanvasElement} textureImageSource A source to use to create the
       * texture cache entry if one does not already exist.
       */
      getCachedTexture: function(a, h) {
        if (this.textureCache[a])
          return this.textureCache[a];
        var o = this.createTexture(
          this.gl,
          h.width,
          h.height,
          h
        );
        return this.textureCache[a] = o, o;
      },
      /**
       * Clear out cached resources related to a source image that has been
       * filtered previously.
       *
       * @param {String} cacheKey The cache key provided when the source image was filtered.
       */
      evictCachesForKey: function(a) {
        this.textureCache[a] && (this.gl.deleteTexture(this.textureCache[a]), delete this.textureCache[a]);
      },
      copyGLTo2D: f,
      /**
       * Attempt to extract GPU information strings from a WebGL context.
       *
       * Useful information when debugging or blacklisting specific GPUs.
       *
       * @returns {Object} A GPU info object with renderer and vendor strings.
       */
      captureGPUInfo: function() {
        if (this.gpuInfo)
          return this.gpuInfo;
        var a = this.gl, h = { renderer: "", vendor: "" };
        if (!a)
          return h;
        var o = a.getExtension("WEBGL_debug_renderer_info");
        if (o) {
          var u = a.getParameter(o.UNMASKED_RENDERER_WEBGL), c = a.getParameter(o.UNMASKED_VENDOR_WEBGL);
          u && (h.renderer = u.toLowerCase()), c && (h.vendor = c.toLowerCase());
        }
        return this.gpuInfo = h, h;
      }
    };
  }();
  function i(l) {
    var s = l.targetCanvas, a = s.width, h = s.height, o = l.destinationWidth, u = l.destinationHeight;
    (a !== o || h !== u) && (s.width = o, s.height = u);
  }
  function f(l, s) {
    var a = l.canvas, h = s.targetCanvas, o = h.getContext("2d");
    o.translate(0, h.height), o.scale(1, -1);
    var u = a.height - h.height;
    o.drawImage(
      a,
      0,
      u,
      h.width,
      h.height,
      0,
      0,
      h.width,
      h.height
    );
  }
  function g(l, s) {
    var a = s.targetCanvas, h = a.getContext("2d"), o = s.destinationWidth, u = s.destinationHeight, c = o * u * 4, d = new Uint8Array(this.imageBuffer, 0, c), m = new Uint8ClampedArray(this.imageBuffer, 0, c);
    l.readPixels(0, 0, o, u, l.RGBA, l.UNSIGNED_BYTE, d);
    var p = new ImageData(m, o, u);
    h.putImageData(p, 0, 0);
  }
  (function() {
    var l = function() {
    };
    e.Canvas2dFilterBackend = s;
    function s() {
    }
    s.prototype = /** @lends fabric.Canvas2dFilterBackend.prototype */
    {
      evictCachesForKey: l,
      dispose: l,
      clearWebGLCaches: l,
      /**
       * Experimental. This object is a sort of repository of help layers used to avoid
       * of recreating them during frequent filtering. If you are previewing a filter with
       * a slider you probably do not want to create help layers every filter step.
       * in this object there will be appended some canvases, created once, resized sometimes
       * cleared never. Clearing is left to the developer.
       **/
      resources: {},
      /**
       * Apply a set of filters against a source image and draw the filtered output
       * to the provided destination canvas.
       *
       * @param {EnhancedFilter} filters The filter to apply.
       * @param {HTMLImageElement|HTMLCanvasElement} sourceElement The source to be filtered.
       * @param {Number} sourceWidth The width of the source input.
       * @param {Number} sourceHeight The height of the source input.
       * @param {HTMLCanvasElement} targetCanvas The destination for filtered output to be drawn.
       */
      applyFilters: function(a, h, o, u, c) {
        var d = c.getContext("2d");
        d.drawImage(h, 0, 0, o, u);
        var m = d.getImageData(0, 0, o, u), p = d.getImageData(0, 0, o, u), v = {
          sourceWidth: o,
          sourceHeight: u,
          imageData: m,
          originalEl: h,
          originalImageData: p,
          canvasEl: c,
          ctx: d,
          filterBackend: this
        };
        return a.forEach(function(b) {
          b.applyTo(v);
        }), (v.imageData.width !== o || v.imageData.height !== u) && (c.width = v.imageData.width, c.height = v.imageData.height), d.putImageData(v.imageData, 0, 0), v;
      }
    };
  })(), e.Image = e.Image || {}, e.Image.filters = e.Image.filters || {}, e.Image.filters.BaseFilter = e.util.createClass(
    /** @lends fabric.Image.filters.BaseFilter.prototype */
    {
      /**
       * Filter type
       * @param {String} type
       * @default
       */
      type: "BaseFilter",
      /**
       * Array of attributes to send with buffers. do not modify
       * @private
       */
      vertexSource: `attribute vec2 aPosition;
varying vec2 vTexCoord;
void main() {
vTexCoord = aPosition;
gl_Position = vec4(aPosition * 2.0 - 1.0, 0.0, 1.0);
}`,
      fragmentSource: `precision highp float;
varying vec2 vTexCoord;
uniform sampler2D uTexture;
void main() {
gl_FragColor = texture2D(uTexture, vTexCoord);
}`,
      /**
       * Constructor
       * @param {Object} [options] Options object
       */
      initialize: function(l) {
        l && this.setOptions(l);
      },
      /**
       * Sets filter's properties from options
       * @param {Object} [options] Options object
       */
      setOptions: function(l) {
        for (var s in l)
          this[s] = l[s];
      },
      /**
       * Compile this filter's shader program.
       *
       * @param {WebGLRenderingContext} gl The GL canvas context to use for shader compilation.
       * @param {String} fragmentSource fragmentShader source for compilation
       * @param {String} vertexSource vertexShader source for compilation
       */
      createProgram: function(l, s, a) {
        s = s || this.fragmentSource, a = a || this.vertexSource, e.webGlPrecision !== "highp" && (s = s.replace(
          /precision highp float/g,
          "precision " + e.webGlPrecision + " float"
        ));
        var h = l.createShader(l.VERTEX_SHADER);
        if (l.shaderSource(h, a), l.compileShader(h), !l.getShaderParameter(h, l.COMPILE_STATUS))
          throw new Error(
            // eslint-disable-next-line prefer-template
            "Vertex shader compile error for " + this.type + ": " + l.getShaderInfoLog(h)
          );
        var o = l.createShader(l.FRAGMENT_SHADER);
        if (l.shaderSource(o, s), l.compileShader(o), !l.getShaderParameter(o, l.COMPILE_STATUS))
          throw new Error(
            // eslint-disable-next-line prefer-template
            "Fragment shader compile error for " + this.type + ": " + l.getShaderInfoLog(o)
          );
        var u = l.createProgram();
        if (l.attachShader(u, h), l.attachShader(u, o), l.linkProgram(u), !l.getProgramParameter(u, l.LINK_STATUS))
          throw new Error(
            // eslint-disable-next-line prefer-template
            'Shader link error for "${this.type}" ' + l.getProgramInfoLog(u)
          );
        var c = this.getAttributeLocations(l, u), d = this.getUniformLocations(l, u) || {};
        return d.uStepW = l.getUniformLocation(u, "uStepW"), d.uStepH = l.getUniformLocation(u, "uStepH"), {
          program: u,
          attributeLocations: c,
          uniformLocations: d
        };
      },
      /**
       * Return a map of attribute names to WebGLAttributeLocation objects.
       *
       * @param {WebGLRenderingContext} gl The canvas context used to compile the shader program.
       * @param {WebGLShaderProgram} program The shader program from which to take attribute locations.
       * @returns {Object} A map of attribute names to attribute locations.
       */
      getAttributeLocations: function(l, s) {
        return {
          aPosition: l.getAttribLocation(s, "aPosition")
        };
      },
      /**
       * Return a map of uniform names to WebGLUniformLocation objects.
       *
       * Intended to be overridden by subclasses.
       *
       * @param {WebGLRenderingContext} gl The canvas context used to compile the shader program.
       * @param {WebGLShaderProgram} program The shader program from which to take uniform locations.
       * @returns {Object} A map of uniform names to uniform locations.
       */
      getUniformLocations: function() {
        return {};
      },
      /**
       * Send attribute data from this filter to its shader program on the GPU.
       *
       * @param {WebGLRenderingContext} gl The canvas context used to compile the shader program.
       * @param {Object} attributeLocations A map of shader attribute names to their locations.
       */
      sendAttributeData: function(l, s, a) {
        var h = s.aPosition, o = l.createBuffer();
        l.bindBuffer(l.ARRAY_BUFFER, o), l.enableVertexAttribArray(h), l.vertexAttribPointer(h, 2, l.FLOAT, !1, 0, 0), l.bufferData(l.ARRAY_BUFFER, a, l.STATIC_DRAW);
      },
      _setupFrameBuffer: function(l) {
        var s = l.context, a, h;
        l.passes > 1 ? (a = l.destinationWidth, h = l.destinationHeight, (l.sourceWidth !== a || l.sourceHeight !== h) && (s.deleteTexture(l.targetTexture), l.targetTexture = l.filterBackend.createTexture(s, a, h)), s.framebufferTexture2D(
          s.FRAMEBUFFER,
          s.COLOR_ATTACHMENT0,
          s.TEXTURE_2D,
          l.targetTexture,
          0
        )) : (s.bindFramebuffer(s.FRAMEBUFFER, null), s.finish());
      },
      _swapTextures: function(l) {
        l.passes--, l.pass++;
        var s = l.targetTexture;
        l.targetTexture = l.sourceTexture, l.sourceTexture = s;
      },
      /**
       * Generic isNeutral implementation for one parameter based filters.
       * Used only in image applyFilters to discard filters that will not have an effect
       * on the image
       * Other filters may need their own version ( ColorMatrix, HueRotation, gamma, ComposedFilter )
       * @param {Object} options
       **/
      isNeutralState: function() {
        var l = this.mainParameter, s = e.Image.filters[this.type].prototype;
        if (l)
          if (Array.isArray(s[l])) {
            for (var a = s[l].length; a--; )
              if (this[l][a] !== s[l][a])
                return !1;
            return !0;
          } else
            return s[l] === this[l];
        else
          return !1;
      },
      /**
       * Apply this filter to the input image data provided.
       *
       * Determines whether to use WebGL or Canvas2D based on the options.webgl flag.
       *
       * @param {Object} options
       * @param {Number} options.passes The number of filters remaining to be executed
       * @param {Boolean} options.webgl Whether to use webgl to render the filter.
       * @param {WebGLTexture} options.sourceTexture The texture setup as the source to be filtered.
       * @param {WebGLTexture} options.targetTexture The texture where filtered output should be drawn.
       * @param {WebGLRenderingContext} options.context The GL context used for rendering.
       * @param {Object} options.programCache A map of compiled shader programs, keyed by filter type.
       */
      applyTo: function(l) {
        l.webgl ? (this._setupFrameBuffer(l), this.applyToWebGL(l), this._swapTextures(l)) : this.applyTo2d(l);
      },
      /**
       * Retrieves the cached shader.
       * @param {Object} options
       * @param {WebGLRenderingContext} options.context The GL context used for rendering.
       * @param {Object} options.programCache A map of compiled shader programs, keyed by filter type.
       */
      retrieveShader: function(l) {
        return l.programCache.hasOwnProperty(this.type) || (l.programCache[this.type] = this.createProgram(l.context)), l.programCache[this.type];
      },
      /**
       * Apply this filter using webgl.
       *
       * @param {Object} options
       * @param {Number} options.passes The number of filters remaining to be executed
       * @param {Boolean} options.webgl Whether to use webgl to render the filter.
       * @param {WebGLTexture} options.originalTexture The texture of the original input image.
       * @param {WebGLTexture} options.sourceTexture The texture setup as the source to be filtered.
       * @param {WebGLTexture} options.targetTexture The texture where filtered output should be drawn.
       * @param {WebGLRenderingContext} options.context The GL context used for rendering.
       * @param {Object} options.programCache A map of compiled shader programs, keyed by filter type.
       */
      applyToWebGL: function(l) {
        var s = l.context, a = this.retrieveShader(l);
        l.pass === 0 && l.originalTexture ? s.bindTexture(s.TEXTURE_2D, l.originalTexture) : s.bindTexture(s.TEXTURE_2D, l.sourceTexture), s.useProgram(a.program), this.sendAttributeData(s, a.attributeLocations, l.aPosition), s.uniform1f(a.uniformLocations.uStepW, 1 / l.sourceWidth), s.uniform1f(a.uniformLocations.uStepH, 1 / l.sourceHeight), this.sendUniformData(s, a.uniformLocations), s.viewport(0, 0, l.destinationWidth, l.destinationHeight), s.drawArrays(s.TRIANGLE_STRIP, 0, 4);
      },
      bindAdditionalTexture: function(l, s, a) {
        l.activeTexture(a), l.bindTexture(l.TEXTURE_2D, s), l.activeTexture(l.TEXTURE0);
      },
      unbindAdditionalTexture: function(l, s) {
        l.activeTexture(s), l.bindTexture(l.TEXTURE_2D, null), l.activeTexture(l.TEXTURE0);
      },
      getMainParameter: function() {
        return this[this.mainParameter];
      },
      setMainParameter: function(l) {
        this[this.mainParameter] = l;
      },
      /**
       * Send uniform data from this filter to its shader program on the GPU.
       *
       * Intended to be overridden by subclasses.
       *
       * @param {WebGLRenderingContext} gl The canvas context used to compile the shader program.
       * @param {Object} uniformLocations A map of shader uniform names to their locations.
       */
      sendUniformData: function() {
      },
      /**
       * If needed by a 2d filter, this functions can create an helper canvas to be used
       * remember that options.targetCanvas is available for use till end of chain.
       */
      createHelpLayer: function(l) {
        if (!l.helpLayer) {
          var s = document.createElement("canvas");
          s.width = l.sourceWidth, s.height = l.sourceHeight, l.helpLayer = s;
        }
      },
      /**
       * Returns object representation of an instance
       * @return {Object} Object representation of an instance
       */
      toObject: function() {
        var l = { type: this.type }, s = this.mainParameter;
        return s && (l[s] = this[s]), l;
      },
      /**
       * Returns a JSON representation of an instance
       * @return {Object} JSON
       */
      toJSON: function() {
        return this.toObject();
      }
    }
  ), e.Image.filters.BaseFilter.fromObject = function(l, s) {
    var a = new e.Image.filters[l.type](l);
    return s && s(a), a;
  }, function(l) {
    var s = l.fabric || (l.fabric = {}), a = s.Image.filters, h = s.util.createClass;
    a.ColorMatrix = h(
      a.BaseFilter,
      /** @lends fabric.Image.filters.ColorMatrix.prototype */
      {
        /**
         * Filter type
         * @param {String} type
         * @default
         */
        type: "ColorMatrix",
        fragmentSource: `precision highp float;
uniform sampler2D uTexture;
varying vec2 vTexCoord;
uniform mat4 uColorMatrix;
uniform vec4 uConstants;
void main() {
vec4 color = texture2D(uTexture, vTexCoord);
color *= uColorMatrix;
color += uConstants;
gl_FragColor = color;
}`,
        /**
         * Colormatrix for pixels.
         * array of 20 floats. Numbers in positions 4, 9, 14, 19 loose meaning
         * outside the -1, 1 range.
         * 0.0039215686 is the part of 1 that get translated to 1 in 2d
         * @param {Array} matrix array of 20 numbers.
         * @default
         */
        matrix: [
          1,
          0,
          0,
          0,
          0,
          0,
          1,
          0,
          0,
          0,
          0,
          0,
          1,
          0,
          0,
          0,
          0,
          0,
          1,
          0
        ],
        mainParameter: "matrix",
        /**
         * Lock the colormatrix on the color part, skipping alpha, mainly for non webgl scenario
         * to save some calculation
         * @type Boolean
         * @default true
         */
        colorsOnly: !0,
        /**
         * Constructor
         * @param {Object} [options] Options object
         */
        initialize: function(o) {
          this.callSuper("initialize", o), this.matrix = this.matrix.slice(0);
        },
        /**
         * Apply the ColorMatrix operation to a Uint8Array representing the pixels of an image.
         *
         * @param {Object} options
         * @param {ImageData} options.imageData The Uint8Array to be filtered.
         */
        applyTo2d: function(o) {
          var u = o.imageData, c = u.data, d = c.length, m = this.matrix, p, v, b, y, w, C = this.colorsOnly;
          for (w = 0; w < d; w += 4)
            p = c[w], v = c[w + 1], b = c[w + 2], C ? (c[w] = p * m[0] + v * m[1] + b * m[2] + m[4] * 255, c[w + 1] = p * m[5] + v * m[6] + b * m[7] + m[9] * 255, c[w + 2] = p * m[10] + v * m[11] + b * m[12] + m[14] * 255) : (y = c[w + 3], c[w] = p * m[0] + v * m[1] + b * m[2] + y * m[3] + m[4] * 255, c[w + 1] = p * m[5] + v * m[6] + b * m[7] + y * m[8] + m[9] * 255, c[w + 2] = p * m[10] + v * m[11] + b * m[12] + y * m[13] + m[14] * 255, c[w + 3] = p * m[15] + v * m[16] + b * m[17] + y * m[18] + m[19] * 255);
        },
        /**
         * Return WebGL uniform locations for this filter's shader.
         *
         * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.
         * @param {WebGLShaderProgram} program This filter's compiled shader program.
         */
        getUniformLocations: function(o, u) {
          return {
            uColorMatrix: o.getUniformLocation(u, "uColorMatrix"),
            uConstants: o.getUniformLocation(u, "uConstants")
          };
        },
        /**
         * Send data from this filter to its shader program's uniforms.
         *
         * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.
         * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects
         */
        sendUniformData: function(o, u) {
          var c = this.matrix, d = [
            c[0],
            c[1],
            c[2],
            c[3],
            c[5],
            c[6],
            c[7],
            c[8],
            c[10],
            c[11],
            c[12],
            c[13],
            c[15],
            c[16],
            c[17],
            c[18]
          ], m = [c[4], c[9], c[14], c[19]];
          o.uniformMatrix4fv(u.uColorMatrix, !1, d), o.uniform4fv(u.uConstants, m);
        }
      }
    ), s.Image.filters.ColorMatrix.fromObject = s.Image.filters.BaseFilter.fromObject;
  }(t), function(l) {
    var s = l.fabric || (l.fabric = {}), a = s.Image.filters, h = s.util.createClass;
    a.Brightness = h(
      a.BaseFilter,
      /** @lends fabric.Image.filters.Brightness.prototype */
      {
        /**
         * Filter type
         * @param {String} type
         * @default
         */
        type: "Brightness",
        /**
         * Fragment source for the brightness program
         */
        fragmentSource: `precision highp float;
uniform sampler2D uTexture;
uniform float uBrightness;
varying vec2 vTexCoord;
void main() {
vec4 color = texture2D(uTexture, vTexCoord);
color.rgb += uBrightness;
gl_FragColor = color;
}`,
        /**
         * Brightness value, from -1 to 1.
         * translated to -255 to 255 for 2d
         * 0.0039215686 is the part of 1 that get translated to 1 in 2d
         * @param {Number} brightness
         * @default
         */
        brightness: 0,
        /**
         * Describe the property that is the filter parameter
         * @param {String} m
         * @default
         */
        mainParameter: "brightness",
        /**
        * Apply the Brightness operation to a Uint8ClampedArray representing the pixels of an image.
        *
        * @param {Object} options
        * @param {ImageData} options.imageData The Uint8ClampedArray to be filtered.
        */
        applyTo2d: function(o) {
          if (this.brightness !== 0) {
            var u = o.imageData, c = u.data, d, m = c.length, p = Math.round(this.brightness * 255);
            for (d = 0; d < m; d += 4)
              c[d] = c[d] + p, c[d + 1] = c[d + 1] + p, c[d + 2] = c[d + 2] + p;
          }
        },
        /**
         * Return WebGL uniform locations for this filter's shader.
         *
         * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.
         * @param {WebGLShaderProgram} program This filter's compiled shader program.
         */
        getUniformLocations: function(o, u) {
          return {
            uBrightness: o.getUniformLocation(u, "uBrightness")
          };
        },
        /**
         * Send data from this filter to its shader program's uniforms.
         *
         * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.
         * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects
         */
        sendUniformData: function(o, u) {
          o.uniform1f(u.uBrightness, this.brightness);
        }
      }
    ), s.Image.filters.Brightness.fromObject = s.Image.filters.BaseFilter.fromObject;
  }(t), function(l) {
    var s = l.fabric || (l.fabric = {}), a = s.util.object.extend, h = s.Image.filters, o = s.util.createClass;
    h.Convolute = o(
      h.BaseFilter,
      /** @lends fabric.Image.filters.Convolute.prototype */
      {
        /**
         * Filter type
         * @param {String} type
         * @default
         */
        type: "Convolute",
        /*
         * Opaque value (true/false)
         */
        opaque: !1,
        /*
         * matrix for the filter, max 9x9
         */
        matrix: [0, 0, 0, 0, 1, 0, 0, 0, 0],
        /**
         * Fragment source for the brightness program
         */
        fragmentSource: {
          Convolute_3_1: `precision highp float;
uniform sampler2D uTexture;
uniform float uMatrix[9];
uniform float uStepW;
uniform float uStepH;
varying vec2 vTexCoord;
void main() {
vec4 color = vec4(0, 0, 0, 0);
for (float h = 0.0; h < 3.0; h+=1.0) {
for (float w = 0.0; w < 3.0; w+=1.0) {
vec2 matrixPos = vec2(uStepW * (w - 1), uStepH * (h - 1));
color += texture2D(uTexture, vTexCoord + matrixPos) * uMatrix[int(h * 3.0 + w)];
}
}
gl_FragColor = color;
}`,
          Convolute_3_0: `precision highp float;
uniform sampler2D uTexture;
uniform float uMatrix[9];
uniform float uStepW;
uniform float uStepH;
varying vec2 vTexCoord;
void main() {
vec4 color = vec4(0, 0, 0, 1);
for (float h = 0.0; h < 3.0; h+=1.0) {
for (float w = 0.0; w < 3.0; w+=1.0) {
vec2 matrixPos = vec2(uStepW * (w - 1.0), uStepH * (h - 1.0));
color.rgb += texture2D(uTexture, vTexCoord + matrixPos).rgb * uMatrix[int(h * 3.0 + w)];
}
}
float alpha = texture2D(uTexture, vTexCoord).a;
gl_FragColor = color;
gl_FragColor.a = alpha;
}`,
          Convolute_5_1: `precision highp float;
uniform sampler2D uTexture;
uniform float uMatrix[25];
uniform float uStepW;
uniform float uStepH;
varying vec2 vTexCoord;
void main() {
vec4 color = vec4(0, 0, 0, 0);
for (float h = 0.0; h < 5.0; h+=1.0) {
for (float w = 0.0; w < 5.0; w+=1.0) {
vec2 matrixPos = vec2(uStepW * (w - 2.0), uStepH * (h - 2.0));
color += texture2D(uTexture, vTexCoord + matrixPos) * uMatrix[int(h * 5.0 + w)];
}
}
gl_FragColor = color;
}`,
          Convolute_5_0: `precision highp float;
uniform sampler2D uTexture;
uniform float uMatrix[25];
uniform float uStepW;
uniform float uStepH;
varying vec2 vTexCoord;
void main() {
vec4 color = vec4(0, 0, 0, 1);
for (float h = 0.0; h < 5.0; h+=1.0) {
for (float w = 0.0; w < 5.0; w+=1.0) {
vec2 matrixPos = vec2(uStepW * (w - 2.0), uStepH * (h - 2.0));
color.rgb += texture2D(uTexture, vTexCoord + matrixPos).rgb * uMatrix[int(h * 5.0 + w)];
}
}
float alpha = texture2D(uTexture, vTexCoord).a;
gl_FragColor = color;
gl_FragColor.a = alpha;
}`,
          Convolute_7_1: `precision highp float;
uniform sampler2D uTexture;
uniform float uMatrix[49];
uniform float uStepW;
uniform float uStepH;
varying vec2 vTexCoord;
void main() {
vec4 color = vec4(0, 0, 0, 0);
for (float h = 0.0; h < 7.0; h+=1.0) {
for (float w = 0.0; w < 7.0; w+=1.0) {
vec2 matrixPos = vec2(uStepW * (w - 3.0), uStepH * (h - 3.0));
color += texture2D(uTexture, vTexCoord + matrixPos) * uMatrix[int(h * 7.0 + w)];
}
}
gl_FragColor = color;
}`,
          Convolute_7_0: `precision highp float;
uniform sampler2D uTexture;
uniform float uMatrix[49];
uniform float uStepW;
uniform float uStepH;
varying vec2 vTexCoord;
void main() {
vec4 color = vec4(0, 0, 0, 1);
for (float h = 0.0; h < 7.0; h+=1.0) {
for (float w = 0.0; w < 7.0; w+=1.0) {
vec2 matrixPos = vec2(uStepW * (w - 3.0), uStepH * (h - 3.0));
color.rgb += texture2D(uTexture, vTexCoord + matrixPos).rgb * uMatrix[int(h * 7.0 + w)];
}
}
float alpha = texture2D(uTexture, vTexCoord).a;
gl_FragColor = color;
gl_FragColor.a = alpha;
}`,
          Convolute_9_1: `precision highp float;
uniform sampler2D uTexture;
uniform float uMatrix[81];
uniform float uStepW;
uniform float uStepH;
varying vec2 vTexCoord;
void main() {
vec4 color = vec4(0, 0, 0, 0);
for (float h = 0.0; h < 9.0; h+=1.0) {
for (float w = 0.0; w < 9.0; w+=1.0) {
vec2 matrixPos = vec2(uStepW * (w - 4.0), uStepH * (h - 4.0));
color += texture2D(uTexture, vTexCoord + matrixPos) * uMatrix[int(h * 9.0 + w)];
}
}
gl_FragColor = color;
}`,
          Convolute_9_0: `precision highp float;
uniform sampler2D uTexture;
uniform float uMatrix[81];
uniform float uStepW;
uniform float uStepH;
varying vec2 vTexCoord;
void main() {
vec4 color = vec4(0, 0, 0, 1);
for (float h = 0.0; h < 9.0; h+=1.0) {
for (float w = 0.0; w < 9.0; w+=1.0) {
vec2 matrixPos = vec2(uStepW * (w - 4.0), uStepH * (h - 4.0));
color.rgb += texture2D(uTexture, vTexCoord + matrixPos).rgb * uMatrix[int(h * 9.0 + w)];
}
}
float alpha = texture2D(uTexture, vTexCoord).a;
gl_FragColor = color;
gl_FragColor.a = alpha;
}`
        },
        /**
         * Constructor
         * @memberOf fabric.Image.filters.Convolute.prototype
         * @param {Object} [options] Options object
         * @param {Boolean} [options.opaque=false] Opaque value (true/false)
         * @param {Array} [options.matrix] Filter matrix
         */
        /**
        * Retrieves the cached shader.
        * @param {Object} options
        * @param {WebGLRenderingContext} options.context The GL context used for rendering.
        * @param {Object} options.programCache A map of compiled shader programs, keyed by filter type.
        */
        retrieveShader: function(u) {
          var c = Math.sqrt(this.matrix.length), d = this.type + "_" + c + "_" + (this.opaque ? 1 : 0), m = this.fragmentSource[d];
          return u.programCache.hasOwnProperty(d) || (u.programCache[d] = this.createProgram(u.context, m)), u.programCache[d];
        },
        /**
         * Apply the Brightness operation to a Uint8ClampedArray representing the pixels of an image.
         *
         * @param {Object} options
         * @param {ImageData} options.imageData The Uint8ClampedArray to be filtered.
         */
        applyTo2d: function(u) {
          var c = u.imageData, d = c.data, m = this.matrix, p = Math.round(Math.sqrt(m.length)), v = Math.floor(p / 2), b = c.width, y = c.height, w = u.ctx.createImageData(b, y), C = w.data, _ = this.opaque ? 1 : 0, S, k, I, L, j, G, te, W, q, K, ne, re, T;
          for (ne = 0; ne < y; ne++)
            for (K = 0; K < b; K++) {
              for (j = (ne * b + K) * 4, S = 0, k = 0, I = 0, L = 0, T = 0; T < p; T++)
                for (re = 0; re < p; re++)
                  te = ne + T - v, G = K + re - v, !(te < 0 || te >= y || G < 0 || G >= b) && (W = (te * b + G) * 4, q = m[T * p + re], S += d[W] * q, k += d[W + 1] * q, I += d[W + 2] * q, _ || (L += d[W + 3] * q));
              C[j] = S, C[j + 1] = k, C[j + 2] = I, _ ? C[j + 3] = d[j + 3] : C[j + 3] = L;
            }
          u.imageData = w;
        },
        /**
         * Return WebGL uniform locations for this filter's shader.
         *
         * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.
         * @param {WebGLShaderProgram} program This filter's compiled shader program.
         */
        getUniformLocations: function(u, c) {
          return {
            uMatrix: u.getUniformLocation(c, "uMatrix"),
            uOpaque: u.getUniformLocation(c, "uOpaque"),
            uHalfSize: u.getUniformLocation(c, "uHalfSize"),
            uSize: u.getUniformLocation(c, "uSize")
          };
        },
        /**
         * Send data from this filter to its shader program's uniforms.
         *
         * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.
         * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects
         */
        sendUniformData: function(u, c) {
          u.uniform1fv(c.uMatrix, this.matrix);
        },
        /**
         * Returns object representation of an instance
         * @return {Object} Object representation of an instance
         */
        toObject: function() {
          return a(this.callSuper("toObject"), {
            opaque: this.opaque,
            matrix: this.matrix
          });
        }
      }
    ), s.Image.filters.Convolute.fromObject = s.Image.filters.BaseFilter.fromObject;
  }(t), function(l) {
    var s = l.fabric || (l.fabric = {}), a = s.Image.filters, h = s.util.createClass;
    a.Grayscale = h(
      a.BaseFilter,
      /** @lends fabric.Image.filters.Grayscale.prototype */
      {
        /**
         * Filter type
         * @param {String} type
         * @default
         */
        type: "Grayscale",
        fragmentSource: {
          average: `precision highp float;
uniform sampler2D uTexture;
varying vec2 vTexCoord;
void main() {
vec4 color = texture2D(uTexture, vTexCoord);
float average = (color.r + color.b + color.g) / 3.0;
gl_FragColor = vec4(average, average, average, color.a);
}`,
          lightness: `precision highp float;
uniform sampler2D uTexture;
uniform int uMode;
varying vec2 vTexCoord;
void main() {
vec4 col = texture2D(uTexture, vTexCoord);
float average = (max(max(col.r, col.g),col.b) + min(min(col.r, col.g),col.b)) / 2.0;
gl_FragColor = vec4(average, average, average, col.a);
}`,
          luminosity: `precision highp float;
uniform sampler2D uTexture;
uniform int uMode;
varying vec2 vTexCoord;
void main() {
vec4 col = texture2D(uTexture, vTexCoord);
float average = 0.21 * col.r + 0.72 * col.g + 0.07 * col.b;
gl_FragColor = vec4(average, average, average, col.a);
}`
        },
        /**
         * Grayscale mode, between 'average', 'lightness', 'luminosity'
         * @param {String} type
         * @default
         */
        mode: "average",
        mainParameter: "mode",
        /**
         * Apply the Grayscale operation to a Uint8Array representing the pixels of an image.
         *
         * @param {Object} options
         * @param {ImageData} options.imageData The Uint8Array to be filtered.
         */
        applyTo2d: function(o) {
          var u = o.imageData, c = u.data, d, m = c.length, p, v = this.mode;
          for (d = 0; d < m; d += 4)
            v === "average" ? p = (c[d] + c[d + 1] + c[d + 2]) / 3 : v === "lightness" ? p = (Math.min(c[d], c[d + 1], c[d + 2]) + Math.max(c[d], c[d + 1], c[d + 2])) / 2 : v === "luminosity" && (p = 0.21 * c[d] + 0.72 * c[d + 1] + 0.07 * c[d + 2]), c[d] = p, c[d + 1] = p, c[d + 2] = p;
        },
        /**
         * Retrieves the cached shader.
         * @param {Object} options
         * @param {WebGLRenderingContext} options.context The GL context used for rendering.
         * @param {Object} options.programCache A map of compiled shader programs, keyed by filter type.
         */
        retrieveShader: function(o) {
          var u = this.type + "_" + this.mode;
          if (!o.programCache.hasOwnProperty(u)) {
            var c = this.fragmentSource[this.mode];
            o.programCache[u] = this.createProgram(o.context, c);
          }
          return o.programCache[u];
        },
        /**
         * Return WebGL uniform locations for this filter's shader.
         *
         * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.
         * @param {WebGLShaderProgram} program This filter's compiled shader program.
         */
        getUniformLocations: function(o, u) {
          return {
            uMode: o.getUniformLocation(u, "uMode")
          };
        },
        /**
         * Send data from this filter to its shader program's uniforms.
         *
         * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.
         * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects
         */
        sendUniformData: function(o, u) {
          var c = 1;
          o.uniform1i(u.uMode, c);
        },
        /**
         * Grayscale filter isNeutralState implementation
         * The filter is never neutral
         * on the image
         **/
        isNeutralState: function() {
          return !1;
        }
      }
    ), s.Image.filters.Grayscale.fromObject = s.Image.filters.BaseFilter.fromObject;
  }(t), function(l) {
    var s = l.fabric || (l.fabric = {}), a = s.Image.filters, h = s.util.createClass;
    a.Invert = h(
      a.BaseFilter,
      /** @lends fabric.Image.filters.Invert.prototype */
      {
        /**
         * Filter type
         * @param {String} type
         * @default
         */
        type: "Invert",
        fragmentSource: `precision highp float;
uniform sampler2D uTexture;
uniform int uInvert;
varying vec2 vTexCoord;
void main() {
vec4 color = texture2D(uTexture, vTexCoord);
if (uInvert == 1) {
gl_FragColor = vec4(1.0 - color.r,1.0 -color.g,1.0 -color.b,color.a);
} else {
gl_FragColor = color;
}
}`,
        /**
         * Filter invert. if false, does nothing
         * @param {Boolean} invert
         * @default
         */
        invert: !0,
        mainParameter: "invert",
        /**
         * Apply the Invert operation to a Uint8Array representing the pixels of an image.
         *
         * @param {Object} options
         * @param {ImageData} options.imageData The Uint8Array to be filtered.
         */
        applyTo2d: function(o) {
          var u = o.imageData, c = u.data, d, m = c.length;
          for (d = 0; d < m; d += 4)
            c[d] = 255 - c[d], c[d + 1] = 255 - c[d + 1], c[d + 2] = 255 - c[d + 2];
        },
        /**
         * Invert filter isNeutralState implementation
         * Used only in image applyFilters to discard filters that will not have an effect
         * on the image
         * @param {Object} options
         **/
        isNeutralState: function() {
          return !this.invert;
        },
        /**
         * Return WebGL uniform locations for this filter's shader.
         *
         * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.
         * @param {WebGLShaderProgram} program This filter's compiled shader program.
         */
        getUniformLocations: function(o, u) {
          return {
            uInvert: o.getUniformLocation(u, "uInvert")
          };
        },
        /**
         * Send data from this filter to its shader program's uniforms.
         *
         * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.
         * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects
         */
        sendUniformData: function(o, u) {
          o.uniform1i(u.uInvert, this.invert);
        }
      }
    ), s.Image.filters.Invert.fromObject = s.Image.filters.BaseFilter.fromObject;
  }(t), function(l) {
    var s = l.fabric || (l.fabric = {}), a = s.util.object.extend, h = s.Image.filters, o = s.util.createClass;
    h.Noise = o(
      h.BaseFilter,
      /** @lends fabric.Image.filters.Noise.prototype */
      {
        /**
         * Filter type
         * @param {String} type
         * @default
         */
        type: "Noise",
        /**
         * Fragment source for the noise program
         */
        fragmentSource: `precision highp float;
uniform sampler2D uTexture;
uniform float uStepH;
uniform float uNoise;
uniform float uSeed;
varying vec2 vTexCoord;
float rand(vec2 co, float seed, float vScale) {
return fract(sin(dot(co.xy * vScale ,vec2(12.9898 , 78.233))) * 43758.5453 * (seed + 0.01) / 2.0);
}
void main() {
vec4 color = texture2D(uTexture, vTexCoord);
color.rgb += (0.5 - rand(vTexCoord, uSeed, 0.1 / uStepH)) * uNoise;
gl_FragColor = color;
}`,
        /**
         * Describe the property that is the filter parameter
         * @param {String} m
         * @default
         */
        mainParameter: "noise",
        /**
         * Noise value, from
         * @param {Number} noise
         * @default
         */
        noise: 0,
        /**
         * Apply the Brightness operation to a Uint8ClampedArray representing the pixels of an image.
         *
         * @param {Object} options
         * @param {ImageData} options.imageData The Uint8ClampedArray to be filtered.
         */
        applyTo2d: function(u) {
          if (this.noise !== 0) {
            var c = u.imageData, d = c.data, m, p = d.length, v = this.noise, b;
            for (m = 0, p = d.length; m < p; m += 4)
              b = (0.5 - Math.random()) * v, d[m] += b, d[m + 1] += b, d[m + 2] += b;
          }
        },
        /**
         * Return WebGL uniform locations for this filter's shader.
         *
         * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.
         * @param {WebGLShaderProgram} program This filter's compiled shader program.
         */
        getUniformLocations: function(u, c) {
          return {
            uNoise: u.getUniformLocation(c, "uNoise"),
            uSeed: u.getUniformLocation(c, "uSeed")
          };
        },
        /**
         * Send data from this filter to its shader program's uniforms.
         *
         * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.
         * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects
         */
        sendUniformData: function(u, c) {
          u.uniform1f(c.uNoise, this.noise / 255), u.uniform1f(c.uSeed, Math.random());
        },
        /**
         * Returns object representation of an instance
         * @return {Object} Object representation of an instance
         */
        toObject: function() {
          return a(this.callSuper("toObject"), {
            noise: this.noise
          });
        }
      }
    ), s.Image.filters.Noise.fromObject = s.Image.filters.BaseFilter.fromObject;
  }(t), function(l) {
    var s = l.fabric || (l.fabric = {}), a = s.Image.filters, h = s.util.createClass;
    a.Pixelate = h(
      a.BaseFilter,
      /** @lends fabric.Image.filters.Pixelate.prototype */
      {
        /**
         * Filter type
         * @param {String} type
         * @default
         */
        type: "Pixelate",
        blocksize: 4,
        mainParameter: "blocksize",
        /**
         * Fragment source for the Pixelate program
         */
        fragmentSource: `precision highp float;
uniform sampler2D uTexture;
uniform float uBlocksize;
uniform float uStepW;
uniform float uStepH;
varying vec2 vTexCoord;
void main() {
float blockW = uBlocksize * uStepW;
float blockH = uBlocksize * uStepW;
int posX = int(vTexCoord.x / blockW);
int posY = int(vTexCoord.y / blockH);
float fposX = float(posX);
float fposY = float(posY);
vec2 squareCoords = vec2(fposX * blockW, fposY * blockH);
vec4 color = texture2D(uTexture, squareCoords);
gl_FragColor = color;
}`,
        /**
         * Apply the Pixelate operation to a Uint8ClampedArray representing the pixels of an image.
         *
         * @param {Object} options
         * @param {ImageData} options.imageData The Uint8ClampedArray to be filtered.
         */
        applyTo2d: function(o) {
          var u = o.imageData, c = u.data, d = u.height, m = u.width, p, v, b, y, w, C, _, S, k, I, L;
          for (v = 0; v < d; v += this.blocksize)
            for (b = 0; b < m; b += this.blocksize)
              for (p = v * 4 * m + b * 4, y = c[p], w = c[p + 1], C = c[p + 2], _ = c[p + 3], I = Math.min(v + this.blocksize, d), L = Math.min(b + this.blocksize, m), S = v; S < I; S++)
                for (k = b; k < L; k++)
                  p = S * 4 * m + k * 4, c[p] = y, c[p + 1] = w, c[p + 2] = C, c[p + 3] = _;
        },
        /**
         * Indicate when the filter is not gonna apply changes to the image
         **/
        isNeutralState: function() {
          return this.blocksize === 1;
        },
        /**
         * Return WebGL uniform locations for this filter's shader.
         *
         * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.
         * @param {WebGLShaderProgram} program This filter's compiled shader program.
         */
        getUniformLocations: function(o, u) {
          return {
            uBlocksize: o.getUniformLocation(u, "uBlocksize"),
            uStepW: o.getUniformLocation(u, "uStepW"),
            uStepH: o.getUniformLocation(u, "uStepH")
          };
        },
        /**
         * Send data from this filter to its shader program's uniforms.
         *
         * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.
         * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects
         */
        sendUniformData: function(o, u) {
          o.uniform1f(u.uBlocksize, this.blocksize);
        }
      }
    ), s.Image.filters.Pixelate.fromObject = s.Image.filters.BaseFilter.fromObject;
  }(t), function(l) {
    var s = l.fabric || (l.fabric = {}), a = s.util.object.extend, h = s.Image.filters, o = s.util.createClass;
    h.RemoveColor = o(
      h.BaseFilter,
      /** @lends fabric.Image.filters.RemoveColor.prototype */
      {
        /**
         * Filter type
         * @param {String} type
         * @default
         */
        type: "RemoveColor",
        /**
         * Color to remove, in any format understood by fabric.Color.
         * @param {String} type
         * @default
         */
        color: "#FFFFFF",
        /**
         * Fragment source for the brightness program
         */
        fragmentSource: `precision highp float;
uniform sampler2D uTexture;
uniform vec4 uLow;
uniform vec4 uHigh;
varying vec2 vTexCoord;
void main() {
gl_FragColor = texture2D(uTexture, vTexCoord);
if(all(greaterThan(gl_FragColor.rgb,uLow.rgb)) && all(greaterThan(uHigh.rgb,gl_FragColor.rgb))) {
gl_FragColor.a = 0.0;
}
}`,
        /**
         * distance to actual color, as value up or down from each r,g,b
         * between 0 and 1
         **/
        distance: 0.02,
        /**
         * For color to remove inside distance, use alpha channel for a smoother deletion
         * NOT IMPLEMENTED YET
         **/
        useAlpha: !1,
        /**
         * Constructor
         * @memberOf fabric.Image.filters.RemoveWhite.prototype
         * @param {Object} [options] Options object
         * @param {Number} [options.color=#RRGGBB] Threshold value
         * @param {Number} [options.distance=10] Distance value
         */
        /**
         * Applies filter to canvas element
         * @param {Object} canvasEl Canvas element to apply filter to
         */
        applyTo2d: function(u) {
          var c = u.imageData, d = c.data, m, p = this.distance * 255, v, b, y, w = new s.Color(this.color).getSource(), C = [
            w[0] - p,
            w[1] - p,
            w[2] - p
          ], _ = [
            w[0] + p,
            w[1] + p,
            w[2] + p
          ];
          for (m = 0; m < d.length; m += 4)
            v = d[m], b = d[m + 1], y = d[m + 2], v > C[0] && b > C[1] && y > C[2] && v < _[0] && b < _[1] && y < _[2] && (d[m + 3] = 0);
        },
        /**
         * Return WebGL uniform locations for this filter's shader.
         *
         * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.
         * @param {WebGLShaderProgram} program This filter's compiled shader program.
         */
        getUniformLocations: function(u, c) {
          return {
            uLow: u.getUniformLocation(c, "uLow"),
            uHigh: u.getUniformLocation(c, "uHigh")
          };
        },
        /**
         * Send data from this filter to its shader program's uniforms.
         *
         * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.
         * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects
         */
        sendUniformData: function(u, c) {
          var d = new s.Color(this.color).getSource(), m = parseFloat(this.distance), p = [
            0 + d[0] / 255 - m,
            0 + d[1] / 255 - m,
            0 + d[2] / 255 - m,
            1
          ], v = [
            d[0] / 255 + m,
            d[1] / 255 + m,
            d[2] / 255 + m,
            1
          ];
          u.uniform4fv(c.uLow, p), u.uniform4fv(c.uHigh, v);
        },
        /**
         * Returns object representation of an instance
         * @return {Object} Object representation of an instance
         */
        toObject: function() {
          return a(this.callSuper("toObject"), {
            color: this.color,
            distance: this.distance
          });
        }
      }
    ), s.Image.filters.RemoveColor.fromObject = s.Image.filters.BaseFilter.fromObject;
  }(t), function(l) {
    var s = l.fabric || (l.fabric = {}), a = s.Image.filters, h = s.util.createClass, o = {
      Brownie: [
        0.5997,
        0.34553,
        -0.27082,
        0,
        0.186,
        -0.0377,
        0.86095,
        0.15059,
        0,
        -0.1449,
        0.24113,
        -0.07441,
        0.44972,
        0,
        -0.02965,
        0,
        0,
        0,
        1,
        0
      ],
      Vintage: [
        0.62793,
        0.32021,
        -0.03965,
        0,
        0.03784,
        0.02578,
        0.64411,
        0.03259,
        0,
        0.02926,
        0.0466,
        -0.08512,
        0.52416,
        0,
        0.02023,
        0,
        0,
        0,
        1,
        0
      ],
      Kodachrome: [
        1.12855,
        -0.39673,
        -0.03992,
        0,
        0.24991,
        -0.16404,
        1.08352,
        -0.05498,
        0,
        0.09698,
        -0.16786,
        -0.56034,
        1.60148,
        0,
        0.13972,
        0,
        0,
        0,
        1,
        0
      ],
      Technicolor: [
        1.91252,
        -0.85453,
        -0.09155,
        0,
        0.04624,
        -0.30878,
        1.76589,
        -0.10601,
        0,
        -0.27589,
        -0.2311,
        -0.75018,
        1.84759,
        0,
        0.12137,
        0,
        0,
        0,
        1,
        0
      ],
      Polaroid: [
        1.438,
        -0.062,
        -0.062,
        0,
        0,
        -0.122,
        1.378,
        -0.122,
        0,
        0,
        -0.016,
        -0.016,
        1.483,
        0,
        0,
        0,
        0,
        0,
        1,
        0
      ],
      Sepia: [
        0.393,
        0.769,
        0.189,
        0,
        0,
        0.349,
        0.686,
        0.168,
        0,
        0,
        0.272,
        0.534,
        0.131,
        0,
        0,
        0,
        0,
        0,
        1,
        0
      ],
      BlackWhite: [
        1.5,
        1.5,
        1.5,
        0,
        -1,
        1.5,
        1.5,
        1.5,
        0,
        -1,
        1.5,
        1.5,
        1.5,
        0,
        -1,
        0,
        0,
        0,
        1,
        0
      ]
    };
    for (var u in o)
      a[u] = h(
        a.ColorMatrix,
        /** @lends fabric.Image.filters.Sepia.prototype */
        {
          /**
           * Filter type
           * @param {String} type
           * @default
           */
          type: u,
          /**
           * Colormatrix for the effect
           * array of 20 floats. Numbers in positions 4, 9, 14, 19 loose meaning
           * outside the -1, 1 range.
           * @param {Array} matrix array of 20 numbers.
           * @default
           */
          matrix: o[u],
          /**
           * Lock the matrix export for this kind of static, parameter less filters.
           */
          mainParameter: !1,
          /**
           * Lock the colormatrix on the color part, skipping alpha
           */
          colorsOnly: !0
        }
      ), s.Image.filters[u].fromObject = s.Image.filters.BaseFilter.fromObject;
  }(t), function(l) {
    var s = l.fabric, a = s.Image.filters, h = s.util.createClass;
    a.BlendColor = h(
      a.BaseFilter,
      /** @lends fabric.Image.filters.Blend.prototype */
      {
        type: "BlendColor",
        /**
         * Color to make the blend operation with. default to a reddish color since black or white
         * gives always strong result.
         * @type String
         * @default
         **/
        color: "#F95C63",
        /**
         * Blend mode for the filter: one of multiply, add, diff, screen, subtract,
         * darken, lighten, overlay, exclusion, tint.
         * @type String
         * @default
         **/
        mode: "multiply",
        /**
         * alpha value. represent the strength of the blend color operation.
         * @type Number
         * @default
         **/
        alpha: 1,
        /**
         * Fragment source for the Multiply program
         */
        fragmentSource: {
          multiply: `gl_FragColor.rgb *= uColor.rgb;
`,
          screen: `gl_FragColor.rgb = 1.0 - (1.0 - gl_FragColor.rgb) * (1.0 - uColor.rgb);
`,
          add: `gl_FragColor.rgb += uColor.rgb;
`,
          diff: `gl_FragColor.rgb = abs(gl_FragColor.rgb - uColor.rgb);
`,
          subtract: `gl_FragColor.rgb -= uColor.rgb;
`,
          lighten: `gl_FragColor.rgb = max(gl_FragColor.rgb, uColor.rgb);
`,
          darken: `gl_FragColor.rgb = min(gl_FragColor.rgb, uColor.rgb);
`,
          exclusion: `gl_FragColor.rgb += uColor.rgb - 2.0 * (uColor.rgb * gl_FragColor.rgb);
`,
          overlay: `if (uColor.r < 0.5) {
gl_FragColor.r *= 2.0 * uColor.r;
} else {
gl_FragColor.r = 1.0 - 2.0 * (1.0 - gl_FragColor.r) * (1.0 - uColor.r);
}
if (uColor.g < 0.5) {
gl_FragColor.g *= 2.0 * uColor.g;
} else {
gl_FragColor.g = 1.0 - 2.0 * (1.0 - gl_FragColor.g) * (1.0 - uColor.g);
}
if (uColor.b < 0.5) {
gl_FragColor.b *= 2.0 * uColor.b;
} else {
gl_FragColor.b = 1.0 - 2.0 * (1.0 - gl_FragColor.b) * (1.0 - uColor.b);
}
`,
          tint: `gl_FragColor.rgb *= (1.0 - uColor.a);
gl_FragColor.rgb += uColor.rgb;
`
        },
        /**
         * build the fragment source for the filters, joining the common part with
         * the specific one.
         * @param {String} mode the mode of the filter, a key of this.fragmentSource
         * @return {String} the source to be compiled
         * @private
         */
        buildSource: function(o) {
          return `precision highp float;
uniform sampler2D uTexture;
uniform vec4 uColor;
varying vec2 vTexCoord;
void main() {
vec4 color = texture2D(uTexture, vTexCoord);
gl_FragColor = color;
if (color.a > 0.0) {
` + this.fragmentSource[o] + `}
}`;
        },
        /**
         * Retrieves the cached shader.
         * @param {Object} options
         * @param {WebGLRenderingContext} options.context The GL context used for rendering.
         * @param {Object} options.programCache A map of compiled shader programs, keyed by filter type.
         */
        retrieveShader: function(o) {
          var u = this.type + "_" + this.mode, c;
          return o.programCache.hasOwnProperty(u) || (c = this.buildSource(this.mode), o.programCache[u] = this.createProgram(o.context, c)), o.programCache[u];
        },
        /**
         * Apply the Blend operation to a Uint8ClampedArray representing the pixels of an image.
         *
         * @param {Object} options
         * @param {ImageData} options.imageData The Uint8ClampedArray to be filtered.
         */
        applyTo2d: function(o) {
          var u = o.imageData, c = u.data, d = c.length, m, p, v, b, y, w, C, _ = 1 - this.alpha;
          C = new s.Color(this.color).getSource(), m = C[0] * this.alpha, p = C[1] * this.alpha, v = C[2] * this.alpha;
          for (var S = 0; S < d; S += 4)
            switch (b = c[S], y = c[S + 1], w = c[S + 2], this.mode) {
              case "multiply":
                c[S] = b * m / 255, c[S + 1] = y * p / 255, c[S + 2] = w * v / 255;
                break;
              case "screen":
                c[S] = 255 - (255 - b) * (255 - m) / 255, c[S + 1] = 255 - (255 - y) * (255 - p) / 255, c[S + 2] = 255 - (255 - w) * (255 - v) / 255;
                break;
              case "add":
                c[S] = b + m, c[S + 1] = y + p, c[S + 2] = w + v;
                break;
              case "diff":
              case "difference":
                c[S] = Math.abs(b - m), c[S + 1] = Math.abs(y - p), c[S + 2] = Math.abs(w - v);
                break;
              case "subtract":
                c[S] = b - m, c[S + 1] = y - p, c[S + 2] = w - v;
                break;
              case "darken":
                c[S] = Math.min(b, m), c[S + 1] = Math.min(y, p), c[S + 2] = Math.min(w, v);
                break;
              case "lighten":
                c[S] = Math.max(b, m), c[S + 1] = Math.max(y, p), c[S + 2] = Math.max(w, v);
                break;
              case "overlay":
                c[S] = m < 128 ? 2 * b * m / 255 : 255 - 2 * (255 - b) * (255 - m) / 255, c[S + 1] = p < 128 ? 2 * y * p / 255 : 255 - 2 * (255 - y) * (255 - p) / 255, c[S + 2] = v < 128 ? 2 * w * v / 255 : 255 - 2 * (255 - w) * (255 - v) / 255;
                break;
              case "exclusion":
                c[S] = m + b - 2 * m * b / 255, c[S + 1] = p + y - 2 * p * y / 255, c[S + 2] = v + w - 2 * v * w / 255;
                break;
              case "tint":
                c[S] = m + b * _, c[S + 1] = p + y * _, c[S + 2] = v + w * _;
            }
        },
        /**
         * Return WebGL uniform locations for this filter's shader.
         *
         * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.
         * @param {WebGLShaderProgram} program This filter's compiled shader program.
         */
        getUniformLocations: function(o, u) {
          return {
            uColor: o.getUniformLocation(u, "uColor")
          };
        },
        /**
         * Send data from this filter to its shader program's uniforms.
         *
         * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.
         * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects
         */
        sendUniformData: function(o, u) {
          var c = new s.Color(this.color).getSource();
          c[0] = this.alpha * c[0] / 255, c[1] = this.alpha * c[1] / 255, c[2] = this.alpha * c[2] / 255, c[3] = this.alpha, o.uniform4fv(u.uColor, c);
        },
        /**
         * Returns object representation of an instance
         * @return {Object} Object representation of an instance
         */
        toObject: function() {
          return {
            type: this.type,
            color: this.color,
            mode: this.mode,
            alpha: this.alpha
          };
        }
      }
    ), s.Image.filters.BlendColor.fromObject = s.Image.filters.BaseFilter.fromObject;
  }(t), function(l) {
    var s = l.fabric, a = s.Image.filters, h = s.util.createClass;
    a.BlendImage = h(
      a.BaseFilter,
      /** @lends fabric.Image.filters.BlendImage.prototype */
      {
        type: "BlendImage",
        /**
         * Color to make the blend operation with. default to a reddish color since black or white
         * gives always strong result.
         **/
        image: null,
        /**
         * Blend mode for the filter (one of "multiply", "mask")
         * @type String
         * @default
         **/
        mode: "multiply",
        /**
         * alpha value. represent the strength of the blend image operation.
         * not implemented.
         **/
        alpha: 1,
        vertexSource: `attribute vec2 aPosition;
varying vec2 vTexCoord;
varying vec2 vTexCoord2;
uniform mat3 uTransformMatrix;
void main() {
vTexCoord = aPosition;
vTexCoord2 = (uTransformMatrix * vec3(aPosition, 1.0)).xy;
gl_Position = vec4(aPosition * 2.0 - 1.0, 0.0, 1.0);
}`,
        /**
         * Fragment source for the Multiply program
         */
        fragmentSource: {
          multiply: `precision highp float;
uniform sampler2D uTexture;
uniform sampler2D uImage;
uniform vec4 uColor;
varying vec2 vTexCoord;
varying vec2 vTexCoord2;
void main() {
vec4 color = texture2D(uTexture, vTexCoord);
vec4 color2 = texture2D(uImage, vTexCoord2);
color.rgba *= color2.rgba;
gl_FragColor = color;
}`,
          mask: `precision highp float;
uniform sampler2D uTexture;
uniform sampler2D uImage;
uniform vec4 uColor;
varying vec2 vTexCoord;
varying vec2 vTexCoord2;
void main() {
vec4 color = texture2D(uTexture, vTexCoord);
vec4 color2 = texture2D(uImage, vTexCoord2);
color.a = color2.a;
gl_FragColor = color;
}`
        },
        /**
         * Retrieves the cached shader.
         * @param {Object} options
         * @param {WebGLRenderingContext} options.context The GL context used for rendering.
         * @param {Object} options.programCache A map of compiled shader programs, keyed by filter type.
         */
        retrieveShader: function(o) {
          var u = this.type + "_" + this.mode, c = this.fragmentSource[this.mode];
          return o.programCache.hasOwnProperty(u) || (o.programCache[u] = this.createProgram(o.context, c)), o.programCache[u];
        },
        applyToWebGL: function(o) {
          var u = o.context, c = this.createTexture(o.filterBackend, this.image);
          this.bindAdditionalTexture(u, c, u.TEXTURE1), this.callSuper("applyToWebGL", o), this.unbindAdditionalTexture(u, u.TEXTURE1);
        },
        createTexture: function(o, u) {
          return o.getCachedTexture(u.cacheKey, u._element);
        },
        /**
         * Calculate a transformMatrix to adapt the image to blend over
         * @param {Object} options
         * @param {WebGLRenderingContext} options.context The GL context used for rendering.
         * @param {Object} options.programCache A map of compiled shader programs, keyed by filter type.
         */
        calculateMatrix: function() {
          var o = this.image, u = o._element.width, c = o._element.height;
          return [
            1 / o.scaleX,
            0,
            0,
            0,
            1 / o.scaleY,
            0,
            -o.left / u,
            -o.top / c,
            1
          ];
        },
        /**
         * Apply the Blend operation to a Uint8ClampedArray representing the pixels of an image.
         *
         * @param {Object} options
         * @param {ImageData} options.imageData The Uint8ClampedArray to be filtered.
         */
        applyTo2d: function(o) {
          var u = o.imageData, c = o.filterBackend.resources, d = u.data, m = d.length, p = u.width, v = u.height, b, y, w, C, _, S, k, I, L, j, G = this.image, te;
          c.blendImage || (c.blendImage = s.util.createCanvasElement()), L = c.blendImage, j = L.getContext("2d"), L.width !== p || L.height !== v ? (L.width = p, L.height = v) : j.clearRect(0, 0, p, v), j.setTransform(G.scaleX, 0, 0, G.scaleY, G.left, G.top), j.drawImage(G._element, 0, 0, p, v), te = j.getImageData(0, 0, p, v).data;
          for (var W = 0; W < m; W += 4)
            switch (_ = d[W], S = d[W + 1], k = d[W + 2], I = d[W + 3], b = te[W], y = te[W + 1], w = te[W + 2], C = te[W + 3], this.mode) {
              case "multiply":
                d[W] = _ * b / 255, d[W + 1] = S * y / 255, d[W + 2] = k * w / 255, d[W + 3] = I * C / 255;
                break;
              case "mask":
                d[W + 3] = C;
                break;
            }
        },
        /**
         * Return WebGL uniform locations for this filter's shader.
         *
         * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.
         * @param {WebGLShaderProgram} program This filter's compiled shader program.
         */
        getUniformLocations: function(o, u) {
          return {
            uTransformMatrix: o.getUniformLocation(u, "uTransformMatrix"),
            uImage: o.getUniformLocation(u, "uImage")
          };
        },
        /**
         * Send data from this filter to its shader program's uniforms.
         *
         * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.
         * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects
         */
        sendUniformData: function(o, u) {
          var c = this.calculateMatrix();
          o.uniform1i(u.uImage, 1), o.uniformMatrix3fv(u.uTransformMatrix, !1, c);
        },
        /**
         * Returns object representation of an instance
         * @return {Object} Object representation of an instance
         */
        toObject: function() {
          return {
            type: this.type,
            image: this.image && this.image.toObject(),
            mode: this.mode,
            alpha: this.alpha
          };
        }
      }
    ), s.Image.filters.BlendImage.fromObject = function(o, u) {
      s.Image.fromObject(o.image, function(c) {
        var d = s.util.object.clone(o);
        d.image = c, u(new s.Image.filters.BlendImage(d));
      });
    };
  }(t), function(l) {
    var s = l.fabric || (l.fabric = {}), a = Math.pow, h = Math.floor, o = Math.sqrt, u = Math.abs, c = Math.round, d = Math.sin, m = Math.ceil, p = s.Image.filters, v = s.util.createClass;
    p.Resize = v(
      p.BaseFilter,
      /** @lends fabric.Image.filters.Resize.prototype */
      {
        /**
         * Filter type
         * @param {String} type
         * @default
         */
        type: "Resize",
        /**
         * Resize type
         * for webgl resizeType is just lanczos, for canvas2d can be:
         * bilinear, hermite, sliceHack, lanczos.
         * @param {String} resizeType
         * @default
         */
        resizeType: "hermite",
        /**
         * Scale factor for resizing, x axis
         * @param {Number} scaleX
         * @default
         */
        scaleX: 1,
        /**
         * Scale factor for resizing, y axis
         * @param {Number} scaleY
         * @default
         */
        scaleY: 1,
        /**
         * LanczosLobes parameter for lanczos filter, valid for resizeType lanczos
         * @param {Number} lanczosLobes
         * @default
         */
        lanczosLobes: 3,
        /**
         * Return WebGL uniform locations for this filter's shader.
         *
         * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.
         * @param {WebGLShaderProgram} program This filter's compiled shader program.
         */
        getUniformLocations: function(b, y) {
          return {
            uDelta: b.getUniformLocation(y, "uDelta"),
            uTaps: b.getUniformLocation(y, "uTaps")
          };
        },
        /**
         * Send data from this filter to its shader program's uniforms.
         *
         * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.
         * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects
         */
        sendUniformData: function(b, y) {
          b.uniform2fv(y.uDelta, this.horizontal ? [1 / this.width, 0] : [0, 1 / this.height]), b.uniform1fv(y.uTaps, this.taps);
        },
        /**
         * Retrieves the cached shader.
         * @param {Object} options
         * @param {WebGLRenderingContext} options.context The GL context used for rendering.
         * @param {Object} options.programCache A map of compiled shader programs, keyed by filter type.
         */
        retrieveShader: function(b) {
          var y = this.getFilterWindow(), w = this.type + "_" + y;
          if (!b.programCache.hasOwnProperty(w)) {
            var C = this.generateShader(y);
            b.programCache[w] = this.createProgram(b.context, C);
          }
          return b.programCache[w];
        },
        getFilterWindow: function() {
          var b = this.tempScale;
          return Math.ceil(this.lanczosLobes / b);
        },
        getTaps: function() {
          for (var b = this.lanczosCreate(this.lanczosLobes), y = this.tempScale, w = this.getFilterWindow(), C = new Array(w), _ = 1; _ <= w; _++)
            C[_ - 1] = b(_ * y);
          return C;
        },
        /**
         * Generate vertex and shader sources from the necessary steps numbers
         * @param {Number} filterWindow
         */
        generateShader: function(C) {
          for (var y = new Array(C), w = this.fragmentSourceTOP, C, _ = 1; _ <= C; _++)
            y[_ - 1] = _ + ".0 * uDelta";
          return w += "uniform float uTaps[" + C + `];
`, w += `void main() {
`, w += `  vec4 color = texture2D(uTexture, vTexCoord);
`, w += `  float sum = 1.0;
`, y.forEach(function(S, k) {
            w += "  color += texture2D(uTexture, vTexCoord + " + S + ") * uTaps[" + k + `];
`, w += "  color += texture2D(uTexture, vTexCoord - " + S + ") * uTaps[" + k + `];
`, w += "  sum += 2.0 * uTaps[" + k + `];
`;
          }), w += `  gl_FragColor = color / sum;
`, w += "}", w;
        },
        fragmentSourceTOP: `precision highp float;
uniform sampler2D uTexture;
uniform vec2 uDelta;
varying vec2 vTexCoord;
`,
        /**
         * Apply the resize filter to the image
         * Determines whether to use WebGL or Canvas2D based on the options.webgl flag.
         *
         * @param {Object} options
         * @param {Number} options.passes The number of filters remaining to be executed
         * @param {Boolean} options.webgl Whether to use webgl to render the filter.
         * @param {WebGLTexture} options.sourceTexture The texture setup as the source to be filtered.
         * @param {WebGLTexture} options.targetTexture The texture where filtered output should be drawn.
         * @param {WebGLRenderingContext} options.context The GL context used for rendering.
         * @param {Object} options.programCache A map of compiled shader programs, keyed by filter type.
         */
        applyTo: function(b) {
          b.webgl ? (b.passes++, this.width = b.sourceWidth, this.horizontal = !0, this.dW = Math.round(this.width * this.scaleX), this.dH = b.sourceHeight, this.tempScale = this.dW / this.width, this.taps = this.getTaps(), b.destinationWidth = this.dW, this._setupFrameBuffer(b), this.applyToWebGL(b), this._swapTextures(b), b.sourceWidth = b.destinationWidth, this.height = b.sourceHeight, this.horizontal = !1, this.dH = Math.round(this.height * this.scaleY), this.tempScale = this.dH / this.height, this.taps = this.getTaps(), b.destinationHeight = this.dH, this._setupFrameBuffer(b), this.applyToWebGL(b), this._swapTextures(b), b.sourceHeight = b.destinationHeight) : this.applyTo2d(b);
        },
        isNeutralState: function() {
          return this.scaleX === 1 && this.scaleY === 1;
        },
        lanczosCreate: function(b) {
          return function(y) {
            if (y >= b || y <= -b)
              return 0;
            if (y < 11920929e-14 && y > -11920929e-14)
              return 1;
            y *= Math.PI;
            var w = y / b;
            return d(y) / y * d(w) / w;
          };
        },
        /**
         * Applies filter to canvas element
         * @memberOf fabric.Image.filters.Resize.prototype
         * @param {Object} canvasEl Canvas element to apply filter to
         * @param {Number} scaleX
         * @param {Number} scaleY
         */
        applyTo2d: function(b) {
          var y = b.imageData, w = this.scaleX, C = this.scaleY;
          this.rcpScaleX = 1 / w, this.rcpScaleY = 1 / C;
          var _ = y.width, S = y.height, k = c(_ * w), I = c(S * C), L;
          this.resizeType === "sliceHack" ? L = this.sliceByTwo(b, _, S, k, I) : this.resizeType === "hermite" ? L = this.hermiteFastResize(b, _, S, k, I) : this.resizeType === "bilinear" ? L = this.bilinearFiltering(b, _, S, k, I) : this.resizeType === "lanczos" && (L = this.lanczosResize(b, _, S, k, I)), b.imageData = L;
        },
        /**
         * Filter sliceByTwo
         * @param {Object} canvasEl Canvas element to apply filter to
         * @param {Number} oW Original Width
         * @param {Number} oH Original Height
         * @param {Number} dW Destination Width
         * @param {Number} dH Destination Height
         * @returns {ImageData}
         */
        sliceByTwo: function(b, y, w, C, _) {
          var S = b.imageData, k = 0.5, I = !1, L = !1, j = y * k, G = w * k, te = s.filterBackend.resources, W, q, K = 0, ne = 0, re = y, T = 0;
          for (te.sliceByTwo || (te.sliceByTwo = document.createElement("canvas")), W = te.sliceByTwo, (W.width < y * 1.5 || W.height < w) && (W.width = y * 1.5, W.height = w), q = W.getContext("2d"), q.clearRect(0, 0, y * 1.5, w), q.putImageData(S, 0, 0), C = h(C), _ = h(_); !I || !L; )
            y = j, w = G, C < h(j * k) ? j = h(j * k) : (j = C, I = !0), _ < h(G * k) ? G = h(G * k) : (G = _, L = !0), q.drawImage(W, K, ne, y, w, re, T, j, G), K = re, ne = T, T += G;
          return q.getImageData(K, ne, C, _);
        },
        /**
         * Filter lanczosResize
         * @param {Object} canvasEl Canvas element to apply filter to
         * @param {Number} oW Original Width
         * @param {Number} oH Original Height
         * @param {Number} dW Destination Width
         * @param {Number} dH Destination Height
         * @returns {ImageData}
         */
        lanczosResize: function(b, y, w, C, _) {
          function S(A) {
            var M, $, D, E, F, N, H, V, J, ee, le;
            for (T.x = (A + 0.5) * G, P.x = h(T.x), M = 0; M < _; M++) {
              for (T.y = (M + 0.5) * te, P.y = h(T.y), F = 0, N = 0, H = 0, V = 0, J = 0, $ = P.x - K; $ <= P.x + K; $++)
                if (!($ < 0 || $ >= y)) {
                  ee = h(1e3 * u($ - T.x)), re[ee] || (re[ee] = {});
                  for (var U = P.y - ne; U <= P.y + ne; U++)
                    U < 0 || U >= w || (le = h(1e3 * u(U - T.y)), re[ee][le] || (re[ee][le] = j(o(a(ee * W, 2) + a(le * q, 2)) / 1e3)), D = re[ee][le], D > 0 && (E = (U * y + $) * 4, F += D, N += D * k[E], H += D * k[E + 1], V += D * k[E + 2], J += D * k[E + 3]));
                }
              E = (M * C + A) * 4, L[E] = N / F, L[E + 1] = H / F, L[E + 2] = V / F, L[E + 3] = J / F;
            }
            return ++A < C ? S(A) : I;
          }
          var k = b.imageData.data, I = b.ctx.createImageData(C, _), L = I.data, j = this.lanczosCreate(this.lanczosLobes), G = this.rcpScaleX, te = this.rcpScaleY, W = 2 / this.rcpScaleX, q = 2 / this.rcpScaleY, K = m(G * this.lanczosLobes / 2), ne = m(te * this.lanczosLobes / 2), re = {}, T = {}, P = {};
          return S(0);
        },
        /**
         * bilinearFiltering
         * @param {Object} canvasEl Canvas element to apply filter to
         * @param {Number} oW Original Width
         * @param {Number} oH Original Height
         * @param {Number} dW Destination Width
         * @param {Number} dH Destination Height
         * @returns {ImageData}
         */
        bilinearFiltering: function(b, y, w, C, _) {
          var S, k, I, L, j, G, te, W, q, K, ne, re, T = 0, P, A = this.rcpScaleX, M = this.rcpScaleY, $ = 4 * (y - 1), D = b.imageData, E = D.data, F = b.ctx.createImageData(C, _), N = F.data;
          for (te = 0; te < _; te++)
            for (W = 0; W < C; W++)
              for (j = h(A * W), G = h(M * te), q = A * W - j, K = M * te - G, P = 4 * (G * y + j), ne = 0; ne < 4; ne++)
                S = E[P + ne], k = E[P + 4 + ne], I = E[P + $ + ne], L = E[P + $ + 4 + ne], re = S * (1 - q) * (1 - K) + k * q * (1 - K) + I * K * (1 - q) + L * q * K, N[T++] = re;
          return F;
        },
        /**
         * hermiteFastResize
         * @param {Object} canvasEl Canvas element to apply filter to
         * @param {Number} oW Original Width
         * @param {Number} oH Original Height
         * @param {Number} dW Destination Width
         * @param {Number} dH Destination Height
         * @returns {ImageData}
         */
        hermiteFastResize: function(b, y, w, C, _) {
          for (var S = this.rcpScaleX, k = this.rcpScaleY, I = m(S / 2), L = m(k / 2), j = b.imageData, G = j.data, te = b.ctx.createImageData(C, _), W = te.data, q = 0; q < _; q++)
            for (var K = 0; K < C; K++) {
              for (var ne = (K + q * C) * 4, re = 0, T = 0, P = 0, A = 0, M = 0, $ = 0, D = 0, E = (q + 0.5) * k, F = h(q * k); F < (q + 1) * k; F++)
                for (var N = u(E - (F + 0.5)) / L, H = (K + 0.5) * S, V = N * N, J = h(K * S); J < (K + 1) * S; J++) {
                  var ee = u(H - (J + 0.5)) / I, le = o(V + ee * ee);
                  le > 1 && le < -1 || (re = 2 * le * le * le - 3 * le * le + 1, re > 0 && (ee = 4 * (J + F * y), D += re * G[ee + 3], P += re, G[ee + 3] < 255 && (re = re * G[ee + 3] / 250), A += re * G[ee], M += re * G[ee + 1], $ += re * G[ee + 2], T += re));
                }
              W[ne] = A / T, W[ne + 1] = M / T, W[ne + 2] = $ / T, W[ne + 3] = D / P;
            }
          return te;
        },
        /**
         * Returns object representation of an instance
         * @return {Object} Object representation of an instance
         */
        toObject: function() {
          return {
            type: this.type,
            scaleX: this.scaleX,
            scaleY: this.scaleY,
            resizeType: this.resizeType,
            lanczosLobes: this.lanczosLobes
          };
        }
      }
    ), s.Image.filters.Resize.fromObject = s.Image.filters.BaseFilter.fromObject;
  }(t), function(l) {
    var s = l.fabric || (l.fabric = {}), a = s.Image.filters, h = s.util.createClass;
    a.Contrast = h(
      a.BaseFilter,
      /** @lends fabric.Image.filters.Contrast.prototype */
      {
        /**
         * Filter type
         * @param {String} type
         * @default
         */
        type: "Contrast",
        fragmentSource: `precision highp float;
uniform sampler2D uTexture;
uniform float uContrast;
varying vec2 vTexCoord;
void main() {
vec4 color = texture2D(uTexture, vTexCoord);
float contrastF = 1.015 * (uContrast + 1.0) / (1.0 * (1.015 - uContrast));
color.rgb = contrastF * (color.rgb - 0.5) + 0.5;
gl_FragColor = color;
}`,
        /**
         * contrast value, range from -1 to 1.
         * @param {Number} contrast
         * @default 0
         */
        contrast: 0,
        mainParameter: "contrast",
        /**
         * Constructor
         * @memberOf fabric.Image.filters.Contrast.prototype
         * @param {Object} [options] Options object
         * @param {Number} [options.contrast=0] Value to contrast the image up (-1...1)
         */
        /**
          * Apply the Contrast operation to a Uint8Array representing the pixels of an image.
          *
          * @param {Object} options
          * @param {ImageData} options.imageData The Uint8Array to be filtered.
          */
        applyTo2d: function(o) {
          if (this.contrast !== 0) {
            var u = o.imageData, c, m, d = u.data, m = d.length, p = Math.floor(this.contrast * 255), v = 259 * (p + 255) / (255 * (259 - p));
            for (c = 0; c < m; c += 4)
              d[c] = v * (d[c] - 128) + 128, d[c + 1] = v * (d[c + 1] - 128) + 128, d[c + 2] = v * (d[c + 2] - 128) + 128;
          }
        },
        /**
         * Return WebGL uniform locations for this filter's shader.
         *
         * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.
         * @param {WebGLShaderProgram} program This filter's compiled shader program.
         */
        getUniformLocations: function(o, u) {
          return {
            uContrast: o.getUniformLocation(u, "uContrast")
          };
        },
        /**
         * Send data from this filter to its shader program's uniforms.
         *
         * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.
         * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects
         */
        sendUniformData: function(o, u) {
          o.uniform1f(u.uContrast, this.contrast);
        }
      }
    ), s.Image.filters.Contrast.fromObject = s.Image.filters.BaseFilter.fromObject;
  }(t), function(l) {
    var s = l.fabric || (l.fabric = {}), a = s.Image.filters, h = s.util.createClass;
    a.Saturation = h(
      a.BaseFilter,
      /** @lends fabric.Image.filters.Saturation.prototype */
      {
        /**
         * Filter type
         * @param {String} type
         * @default
         */
        type: "Saturation",
        fragmentSource: `precision highp float;
uniform sampler2D uTexture;
uniform float uSaturation;
varying vec2 vTexCoord;
void main() {
vec4 color = texture2D(uTexture, vTexCoord);
float rgMax = max(color.r, color.g);
float rgbMax = max(rgMax, color.b);
color.r += rgbMax != color.r ? (rgbMax - color.r) * uSaturation : 0.00;
color.g += rgbMax != color.g ? (rgbMax - color.g) * uSaturation : 0.00;
color.b += rgbMax != color.b ? (rgbMax - color.b) * uSaturation : 0.00;
gl_FragColor = color;
}`,
        /**
         * Saturation value, from -1 to 1.
         * Increases/decreases the color saturation.
         * A value of 0 has no effect.
         * 
         * @param {Number} saturation
         * @default
         */
        saturation: 0,
        mainParameter: "saturation",
        /**
         * Constructor
         * @memberOf fabric.Image.filters.Saturate.prototype
         * @param {Object} [options] Options object
         * @param {Number} [options.saturate=0] Value to saturate the image (-1...1)
         */
        /**
         * Apply the Saturation operation to a Uint8ClampedArray representing the pixels of an image.
         *
         * @param {Object} options
         * @param {ImageData} options.imageData The Uint8ClampedArray to be filtered.
         */
        applyTo2d: function(o) {
          if (this.saturation !== 0) {
            var u = o.imageData, c = u.data, d = c.length, m = -this.saturation, p, v;
            for (p = 0; p < d; p += 4)
              v = Math.max(c[p], c[p + 1], c[p + 2]), c[p] += v !== c[p] ? (v - c[p]) * m : 0, c[p + 1] += v !== c[p + 1] ? (v - c[p + 1]) * m : 0, c[p + 2] += v !== c[p + 2] ? (v - c[p + 2]) * m : 0;
          }
        },
        /**
         * Return WebGL uniform locations for this filter's shader.
         *
         * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.
         * @param {WebGLShaderProgram} program This filter's compiled shader program.
         */
        getUniformLocations: function(o, u) {
          return {
            uSaturation: o.getUniformLocation(u, "uSaturation")
          };
        },
        /**
         * Send data from this filter to its shader program's uniforms.
         *
         * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.
         * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects
         */
        sendUniformData: function(o, u) {
          o.uniform1f(u.uSaturation, -this.saturation);
        }
      }
    ), s.Image.filters.Saturation.fromObject = s.Image.filters.BaseFilter.fromObject;
  }(t), function(l) {
    var s = l.fabric || (l.fabric = {}), a = s.Image.filters, h = s.util.createClass;
    a.Vibrance = h(
      a.BaseFilter,
      /** @lends fabric.Image.filters.Vibrance.prototype */
      {
        /**
         * Filter type
         * @param {String} type
         * @default
         */
        type: "Vibrance",
        fragmentSource: `precision highp float;
uniform sampler2D uTexture;
uniform float uVibrance;
varying vec2 vTexCoord;
void main() {
vec4 color = texture2D(uTexture, vTexCoord);
float max = max(color.r, max(color.g, color.b));
float avg = (color.r + color.g + color.b) / 3.0;
float amt = (abs(max - avg) * 2.0) * uVibrance;
color.r += max != color.r ? (max - color.r) * amt : 0.00;
color.g += max != color.g ? (max - color.g) * amt : 0.00;
color.b += max != color.b ? (max - color.b) * amt : 0.00;
gl_FragColor = color;
}`,
        /**
         * Vibrance value, from -1 to 1.
         * Increases/decreases the saturation of more muted colors with less effect on saturated colors.
         * A value of 0 has no effect.
         * 
         * @param {Number} vibrance
         * @default
         */
        vibrance: 0,
        mainParameter: "vibrance",
        /**
         * Constructor
         * @memberOf fabric.Image.filters.Vibrance.prototype
         * @param {Object} [options] Options object
         * @param {Number} [options.vibrance=0] Vibrance value for the image (between -1 and 1)
         */
        /**
         * Apply the Vibrance operation to a Uint8ClampedArray representing the pixels of an image.
         *
         * @param {Object} options
         * @param {ImageData} options.imageData The Uint8ClampedArray to be filtered.
         */
        applyTo2d: function(o) {
          if (this.vibrance !== 0) {
            var u = o.imageData, c = u.data, d = c.length, m = -this.vibrance, p, v, b, y;
            for (p = 0; p < d; p += 4)
              v = Math.max(c[p], c[p + 1], c[p + 2]), b = (c[p] + c[p + 1] + c[p + 2]) / 3, y = Math.abs(v - b) * 2 / 255 * m, c[p] += v !== c[p] ? (v - c[p]) * y : 0, c[p + 1] += v !== c[p + 1] ? (v - c[p + 1]) * y : 0, c[p + 2] += v !== c[p + 2] ? (v - c[p + 2]) * y : 0;
          }
        },
        /**
         * Return WebGL uniform locations for this filter's shader.
         *
         * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.
         * @param {WebGLShaderProgram} program This filter's compiled shader program.
         */
        getUniformLocations: function(o, u) {
          return {
            uVibrance: o.getUniformLocation(u, "uVibrance")
          };
        },
        /**
         * Send data from this filter to its shader program's uniforms.
         *
         * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.
         * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects
         */
        sendUniformData: function(o, u) {
          o.uniform1f(u.uVibrance, -this.vibrance);
        }
      }
    ), s.Image.filters.Vibrance.fromObject = s.Image.filters.BaseFilter.fromObject;
  }(t), function(l) {
    var s = l.fabric || (l.fabric = {}), a = s.Image.filters, h = s.util.createClass;
    a.Blur = h(
      a.BaseFilter,
      /** @lends fabric.Image.filters.Blur.prototype */
      {
        type: "Blur",
        /*
        'gl_FragColor = vec4(0.0);',
        'gl_FragColor += texture2D(texture, vTexCoord + -7 * uDelta)*0.0044299121055113265;',
        'gl_FragColor += texture2D(texture, vTexCoord + -6 * uDelta)*0.00895781211794;',
        'gl_FragColor += texture2D(texture, vTexCoord + -5 * uDelta)*0.0215963866053;',
        'gl_FragColor += texture2D(texture, vTexCoord + -4 * uDelta)*0.0443683338718;',
        'gl_FragColor += texture2D(texture, vTexCoord + -3 * uDelta)*0.0776744219933;',
        'gl_FragColor += texture2D(texture, vTexCoord + -2 * uDelta)*0.115876621105;',
        'gl_FragColor += texture2D(texture, vTexCoord + -1 * uDelta)*0.147308056121;',
        'gl_FragColor += texture2D(texture, vTexCoord              )*0.159576912161;',
        'gl_FragColor += texture2D(texture, vTexCoord + 1 * uDelta)*0.147308056121;',
        'gl_FragColor += texture2D(texture, vTexCoord + 2 * uDelta)*0.115876621105;',
        'gl_FragColor += texture2D(texture, vTexCoord + 3 * uDelta)*0.0776744219933;',
        'gl_FragColor += texture2D(texture, vTexCoord + 4 * uDelta)*0.0443683338718;',
        'gl_FragColor += texture2D(texture, vTexCoord + 5 * uDelta)*0.0215963866053;',
        'gl_FragColor += texture2D(texture, vTexCoord + 6 * uDelta)*0.00895781211794;',
        'gl_FragColor += texture2D(texture, vTexCoord + 7 * uDelta)*0.0044299121055113265;',
        */
        /* eslint-disable max-len */
        fragmentSource: `precision highp float;
uniform sampler2D uTexture;
uniform vec2 uDelta;
varying vec2 vTexCoord;
const float nSamples = 15.0;
vec3 v3offset = vec3(12.9898, 78.233, 151.7182);
float random(vec3 scale) {
return fract(sin(dot(gl_FragCoord.xyz, scale)) * 43758.5453);
}
void main() {
vec4 color = vec4(0.0);
float total = 0.0;
float offset = random(v3offset);
for (float t = -nSamples; t <= nSamples; t++) {
float percent = (t + offset - 0.5) / nSamples;
float weight = 1.0 - abs(percent);
color += texture2D(uTexture, vTexCoord + uDelta * percent) * weight;
total += weight;
}
gl_FragColor = color / total;
}`,
        /* eslint-enable max-len */
        /**
         * blur value, in percentage of image dimensions.
         * specific to keep the image blur constant at different resolutions
         * range between 0 and 1.
         * @type Number
         * @default
         */
        blur: 0,
        mainParameter: "blur",
        applyTo: function(o) {
          o.webgl ? (this.aspectRatio = o.sourceWidth / o.sourceHeight, o.passes++, this._setupFrameBuffer(o), this.horizontal = !0, this.applyToWebGL(o), this._swapTextures(o), this._setupFrameBuffer(o), this.horizontal = !1, this.applyToWebGL(o), this._swapTextures(o)) : this.applyTo2d(o);
        },
        applyTo2d: function(o) {
          o.imageData = this.simpleBlur(o);
        },
        simpleBlur: function(o) {
          var u = o.filterBackend.resources, c, d, m = o.imageData.width, p = o.imageData.height;
          u.blurLayer1 || (u.blurLayer1 = s.util.createCanvasElement(), u.blurLayer2 = s.util.createCanvasElement()), c = u.blurLayer1, d = u.blurLayer2, (c.width !== m || c.height !== p) && (d.width = c.width = m, d.height = c.height = p);
          var v = c.getContext("2d"), b = d.getContext("2d"), y = 15, w, C, _, S, k = this.blur * 0.06 * 0.5;
          for (v.putImageData(o.imageData, 0, 0), b.clearRect(0, 0, m, p), S = -y; S <= y; S++)
            w = (Math.random() - 0.5) / 4, C = S / y, _ = k * C * m + w, b.globalAlpha = 1 - Math.abs(C), b.drawImage(c, _, w), v.drawImage(d, 0, 0), b.globalAlpha = 1, b.clearRect(0, 0, d.width, d.height);
          for (S = -y; S <= y; S++)
            w = (Math.random() - 0.5) / 4, C = S / y, _ = k * C * p + w, b.globalAlpha = 1 - Math.abs(C), b.drawImage(c, w, _), v.drawImage(d, 0, 0), b.globalAlpha = 1, b.clearRect(0, 0, d.width, d.height);
          o.ctx.drawImage(c, 0, 0);
          var I = o.ctx.getImageData(0, 0, c.width, c.height);
          return v.globalAlpha = 1, v.clearRect(0, 0, c.width, c.height), I;
        },
        /**
         * Return WebGL uniform locations for this filter's shader.
         *
         * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.
         * @param {WebGLShaderProgram} program This filter's compiled shader program.
         */
        getUniformLocations: function(o, u) {
          return {
            delta: o.getUniformLocation(u, "uDelta")
          };
        },
        /**
         * Send data from this filter to its shader program's uniforms.
         *
         * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.
         * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects
         */
        sendUniformData: function(o, u) {
          var c = this.chooseRightDelta();
          o.uniform2fv(u.delta, c);
        },
        /**
         * choose right value of image percentage to blur with
         * @returns {Array} a numeric array with delta values
         */
        chooseRightDelta: function() {
          var o = 1, u = [0, 0], c;
          return this.horizontal ? this.aspectRatio > 1 && (o = 1 / this.aspectRatio) : this.aspectRatio < 1 && (o = this.aspectRatio), c = o * this.blur * 0.12, this.horizontal ? u[0] = c : u[1] = c, u;
        }
      }
    ), a.Blur.fromObject = s.Image.filters.BaseFilter.fromObject;
  }(t), function(l) {
    var s = l.fabric || (l.fabric = {}), a = s.Image.filters, h = s.util.createClass;
    a.Gamma = h(
      a.BaseFilter,
      /** @lends fabric.Image.filters.Gamma.prototype */
      {
        /**
         * Filter type
         * @param {String} type
         * @default
         */
        type: "Gamma",
        fragmentSource: `precision highp float;
uniform sampler2D uTexture;
uniform vec3 uGamma;
varying vec2 vTexCoord;
void main() {
vec4 color = texture2D(uTexture, vTexCoord);
vec3 correction = (1.0 / uGamma);
color.r = pow(color.r, correction.r);
color.g = pow(color.g, correction.g);
color.b = pow(color.b, correction.b);
gl_FragColor = color;
gl_FragColor.rgb *= color.a;
}`,
        /**
         * Gamma array value, from 0.01 to 2.2.
         * @param {Array} gamma
         * @default
         */
        gamma: [1, 1, 1],
        /**
         * Describe the property that is the filter parameter
         * @param {String} m
         * @default
         */
        mainParameter: "gamma",
        /**
         * Constructor
         * @param {Object} [options] Options object
         */
        initialize: function(o) {
          this.gamma = [1, 1, 1], a.BaseFilter.prototype.initialize.call(this, o);
        },
        /**
         * Apply the Gamma operation to a Uint8Array representing the pixels of an image.
         *
         * @param {Object} options
         * @param {ImageData} options.imageData The Uint8Array to be filtered.
         */
        applyTo2d: function(o) {
          var u = o.imageData, c = u.data, d = this.gamma, m = c.length, p = 1 / d[0], v = 1 / d[1], b = 1 / d[2], y;
          for (this.rVals || (this.rVals = new Uint8Array(256), this.gVals = new Uint8Array(256), this.bVals = new Uint8Array(256)), y = 0, m = 256; y < m; y++)
            this.rVals[y] = Math.pow(y / 255, p) * 255, this.gVals[y] = Math.pow(y / 255, v) * 255, this.bVals[y] = Math.pow(y / 255, b) * 255;
          for (y = 0, m = c.length; y < m; y += 4)
            c[y] = this.rVals[c[y]], c[y + 1] = this.gVals[c[y + 1]], c[y + 2] = this.bVals[c[y + 2]];
        },
        /**
         * Return WebGL uniform locations for this filter's shader.
         *
         * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.
         * @param {WebGLShaderProgram} program This filter's compiled shader program.
         */
        getUniformLocations: function(o, u) {
          return {
            uGamma: o.getUniformLocation(u, "uGamma")
          };
        },
        /**
         * Send data from this filter to its shader program's uniforms.
         *
         * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.
         * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects
         */
        sendUniformData: function(o, u) {
          o.uniform3fv(u.uGamma, this.gamma);
        }
      }
    ), s.Image.filters.Gamma.fromObject = s.Image.filters.BaseFilter.fromObject;
  }(t), function(l) {
    var s = l.fabric || (l.fabric = {}), a = s.Image.filters, h = s.util.createClass;
    a.Composed = h(
      a.BaseFilter,
      /** @lends fabric.Image.filters.Composed.prototype */
      {
        type: "Composed",
        /**
         * A non sparse array of filters to apply
         */
        subFilters: [],
        /**
         * Constructor
         * @param {Object} [options] Options object
         */
        initialize: function(o) {
          this.callSuper("initialize", o), this.subFilters = this.subFilters.slice(0);
        },
        /**
         * Apply this container's filters to the input image provided.
         *
         * @param {Object} options
         * @param {Number} options.passes The number of filters remaining to be applied.
         */
        applyTo: function(o) {
          o.passes += this.subFilters.length - 1, this.subFilters.forEach(function(u) {
            u.applyTo(o);
          });
        },
        /**
         * Serialize this filter into JSON.
         *
         * @returns {Object} A JSON representation of this filter.
         */
        toObject: function() {
          return s.util.object.extend(this.callSuper("toObject"), {
            subFilters: this.subFilters.map(function(o) {
              return o.toObject();
            })
          });
        },
        isNeutralState: function() {
          return !this.subFilters.some(function(o) {
            return !o.isNeutralState();
          });
        }
      }
    ), s.Image.filters.Composed.fromObject = function(o, u) {
      var c = o.subFilters || [], d = c.map(function(p) {
        return new s.Image.filters[p.type](p);
      }), m = new s.Image.filters.Composed({ subFilters: d });
      return u && u(m), m;
    };
  }(t), function(l) {
    var s = l.fabric || (l.fabric = {}), a = s.Image.filters, h = s.util.createClass;
    a.HueRotation = h(
      a.ColorMatrix,
      /** @lends fabric.Image.filters.HueRotation.prototype */
      {
        /**
         * Filter type
         * @param {String} type
         * @default
         */
        type: "HueRotation",
        /**
         * HueRotation value, from -1 to 1.
         * the unit is radians
         * @param {Number} myParameter
         * @default
         */
        rotation: 0,
        /**
         * Describe the property that is the filter parameter
         * @param {String} m
         * @default
         */
        mainParameter: "rotation",
        calculateMatrix: function() {
          var o = this.rotation * Math.PI, u = s.util.cos(o), c = s.util.sin(o), d = 1 / 3, m = Math.sqrt(d) * c, p = 1 - u;
          this.matrix = [
            1,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            1,
            0
          ], this.matrix[0] = u + p / 3, this.matrix[1] = d * p - m, this.matrix[2] = d * p + m, this.matrix[5] = d * p + m, this.matrix[6] = u + d * p, this.matrix[7] = d * p - m, this.matrix[10] = d * p - m, this.matrix[11] = d * p + m, this.matrix[12] = u + d * p;
        },
        /**
         * HueRotation isNeutralState implementation
         * Used only in image applyFilters to discard filters that will not have an effect
         * on the image
         * @param {Object} options
         **/
        isNeutralState: function(o) {
          return this.calculateMatrix(), a.BaseFilter.prototype.isNeutralState.call(this, o);
        },
        /**
         * Apply this filter to the input image data provided.
         *
         * Determines whether to use WebGL or Canvas2D based on the options.webgl flag.
         *
         * @param {Object} options
         * @param {Number} options.passes The number of filters remaining to be executed
         * @param {Boolean} options.webgl Whether to use webgl to render the filter.
         * @param {WebGLTexture} options.sourceTexture The texture setup as the source to be filtered.
         * @param {WebGLTexture} options.targetTexture The texture where filtered output should be drawn.
         * @param {WebGLRenderingContext} options.context The GL context used for rendering.
         * @param {Object} options.programCache A map of compiled shader programs, keyed by filter type.
         */
        applyTo: function(o) {
          this.calculateMatrix(), a.BaseFilter.prototype.applyTo.call(this, o);
        }
      }
    ), s.Image.filters.HueRotation.fromObject = s.Image.filters.BaseFilter.fromObject;
  }(t), function(l) {
    var s = l.fabric || (l.fabric = {}), a = s.util.object.clone;
    if (s.Text) {
      s.warn("fabric.Text is already defined");
      return;
    }
    var h = "fontFamily fontWeight fontSize text underline overline linethrough textAlign fontStyle lineHeight textBackgroundColor charSpacing styles direction path pathStartOffset pathSide pathAlign".split(" ");
    s.Text = s.util.createClass(
      s.Object,
      /** @lends fabric.Text.prototype */
      {
        /**
         * Properties which when set cause object to change dimensions
         * @type Array
         * @private
         */
        _dimensionAffectingProps: [
          "fontSize",
          "fontWeight",
          "fontFamily",
          "fontStyle",
          "lineHeight",
          "text",
          "charSpacing",
          "textAlign",
          "styles",
          "path",
          "pathStartOffset",
          "pathSide",
          "pathAlign"
        ],
        /**
         * @private
         */
        _reNewline: /\r?\n/,
        /**
         * Use this regular expression to filter for whitespaces that is not a new line.
         * Mostly used when text is 'justify' aligned.
         * @private
         */
        _reSpacesAndTabs: /[ \t\r]/g,
        /**
         * Use this regular expression to filter for whitespace that is not a new line.
         * Mostly used when text is 'justify' aligned.
         * @private
         */
        _reSpaceAndTab: /[ \t\r]/,
        /**
         * Use this regular expression to filter consecutive groups of non spaces.
         * Mostly used when text is 'justify' aligned.
         * @private
         */
        _reWords: /\S+/g,
        /**
         * Type of an object
         * @type String
         * @default
         */
        type: "text",
        /**
         * Font size (in pixels)
         * @type Number
         * @default
         */
        fontSize: 40,
        /**
         * Font weight (e.g. bold, normal, 400, 600, 800)
         * @type {(Number|String)}
         * @default
         */
        fontWeight: "normal",
        /**
         * Font family
         * @type String
         * @default
         */
        fontFamily: "Times New Roman",
        /**
         * Text decoration underline.
         * @type Boolean
         * @default
         */
        underline: !1,
        /**
         * Text decoration overline.
         * @type Boolean
         * @default
         */
        overline: !1,
        /**
         * Text decoration linethrough.
         * @type Boolean
         * @default
         */
        linethrough: !1,
        /**
         * Text alignment. Possible values: "left", "center", "right", "justify",
         * "justify-left", "justify-center" or "justify-right".
         * @type String
         * @default
         */
        textAlign: "left",
        /**
         * Font style . Possible values: "", "normal", "italic" or "oblique".
         * @type String
         * @default
         */
        fontStyle: "normal",
        /**
         * Line height
         * @type Number
         * @default
         */
        lineHeight: 1.16,
        /**
         * Superscript schema object (minimum overlap)
         * @type {Object}
         * @default
         */
        superscript: {
          size: 0.6,
          // fontSize factor
          baseline: -0.35
          // baseline-shift factor (upwards)
        },
        /**
         * Subscript schema object (minimum overlap)
         * @type {Object}
         * @default
         */
        subscript: {
          size: 0.6,
          // fontSize factor
          baseline: 0.11
          // baseline-shift factor (downwards)
        },
        /**
         * Background color of text lines
         * @type String
         * @default
         */
        textBackgroundColor: "",
        /**
         * List of properties to consider when checking if
         * state of an object is changed ({@link fabric.Object#hasStateChanged})
         * as well as for history (undo/redo) purposes
         * @type Array
         */
        stateProperties: s.Object.prototype.stateProperties.concat(h),
        /**
         * List of properties to consider when checking if cache needs refresh
         * @type Array
         */
        cacheProperties: s.Object.prototype.cacheProperties.concat(h),
        /**
         * When defined, an object is rendered via stroke and this property specifies its color.
         * <b>Backwards incompatibility note:</b> This property was named "strokeStyle" until v1.1.6
         * @type String
         * @default
         */
        stroke: null,
        /**
         * Shadow object representing shadow of this shape.
         * <b>Backwards incompatibility note:</b> This property was named "textShadow" (String) until v1.2.11
         * @type fabric.Shadow
         * @default
         */
        shadow: null,
        /**
         * fabric.Path that the text should follow.
         * since 4.6.0 the path will be drawn automatically.
         * if you want to make the path visible, give it a stroke and strokeWidth or fill value
         * if you want it to be hidden, assign visible = false to the path.
         * This feature is in BETA, and SVG import/export is not yet supported.
         * @type fabric.Path
         * @example
         * var textPath = new fabric.Text('Text on a path', {
         *     top: 150,
         *     left: 150,
         *     textAlign: 'center',
         *     charSpacing: -50,
         *     path: new fabric.Path('M 0 0 C 50 -100 150 -100 200 0', {
         *         strokeWidth: 1,
         *         visible: false
         *     }),
         *     pathSide: 'left',
         *     pathStartOffset: 0
         * });
         * @default
         */
        path: null,
        /**
         * Offset amount for text path starting position
         * Only used when text has a path
         * @type Number
         * @default
         */
        pathStartOffset: 0,
        /**
         * Which side of the path the text should be drawn on.
         * Only used when text has a path
         * @type {String} 'left|right'
         * @default
         */
        pathSide: "left",
        /**
         * How text is aligned to the path. This property determines
         * the perpendicular position of each character relative to the path.
         * (one of "baseline", "center", "ascender", "descender")
         * This feature is in BETA, and its behavior may change
         * @type String
         * @default
         */
        pathAlign: "baseline",
        /**
         * @private
         */
        _fontSizeFraction: 0.222,
        /**
         * @private
         */
        offsets: {
          underline: 0.1,
          linethrough: -0.315,
          overline: -0.88
        },
        /**
         * Text Line proportion to font Size (in pixels)
         * @type Number
         * @default
         */
        _fontSizeMult: 1.13,
        /**
         * additional space between characters
         * expressed in thousands of em unit
         * @type Number
         * @default
         */
        charSpacing: 0,
        /**
         * Object containing character styles - top-level properties -> line numbers,
         * 2nd-level properties - character numbers
         * @type Object
         * @default
         */
        styles: null,
        /**
         * Reference to a context to measure text char or couple of chars
         * the cacheContext of the canvas will be used or a freshly created one if the object is not on canvas
         * once created it will be referenced on fabric._measuringContext to avoid creating a canvas for every
         * text object created.
         * @type {CanvasRenderingContext2D}
         * @default
         */
        _measuringContext: null,
        /**
         * Baseline shift, styles only, keep at 0 for the main text object
         * @type {Number}
         * @default
         */
        deltaY: 0,
        /**
         * WARNING: EXPERIMENTAL. NOT SUPPORTED YET
         * determine the direction of the text.
         * This has to be set manually together with textAlign and originX for proper
         * experience.
         * some interesting link for the future
         * https://www.w3.org/International/questions/qa-bidi-unicode-controls
         * @since 4.5.0
         * @type {String} 'ltr|rtl'
         * @default
         */
        direction: "ltr",
        /**
         * Array of properties that define a style unit (of 'styles').
         * @type {Array}
         * @default
         */
        _styleProperties: [
          "stroke",
          "strokeWidth",
          "fill",
          "fontFamily",
          "fontSize",
          "fontWeight",
          "fontStyle",
          "underline",
          "overline",
          "linethrough",
          "deltaY",
          "textBackgroundColor"
        ],
        /**
         * contains characters bounding boxes
         */
        __charBounds: [],
        /**
         * use this size when measuring text. To avoid IE11 rounding errors
         * @type {Number}
         * @default
         * @readonly
         * @private
         */
        CACHE_FONT_SIZE: 400,
        /**
         * contains the min text width to avoid getting 0
         * @type {Number}
         * @default
         */
        MIN_TEXT_WIDTH: 2,
        /**
         * Constructor
         * @param {String} text Text string
         * @param {Object} [options] Options object
         * @return {fabric.Text} thisArg
         */
        initialize: function(o, u) {
          this.styles = u ? u.styles || {} : {}, this.text = o, this.__skipDimension = !0, this.callSuper("initialize", u), this.path && this.setPathInfo(), this.__skipDimension = !1, this.initDimensions(), this.setCoords(), this.setupState({ propertySet: "_dimensionAffectingProps" });
        },
        /**
         * If text has a path, it will add the extra information needed
         * for path and text calculations
         * @return {fabric.Text} thisArg
         */
        setPathInfo: function() {
          var o = this.path;
          o && (o.segmentsInfo = s.util.getPathSegmentsInfo(o.path));
        },
        /**
         * Return a context for measurement of text string.
         * if created it gets stored for reuse
         * this is for internal use, please do not use it
         * @private
         * @param {String} text Text string
         * @param {Object} [options] Options object
         * @return {fabric.Text} thisArg
         */
        getMeasuringContext: function() {
          return s._measuringContext || (s._measuringContext = this.canvas && this.canvas.contextCache || s.util.createCanvasElement().getContext("2d")), s._measuringContext;
        },
        /**
         * @private
         * Divides text into lines of text and lines of graphemes.
         */
        _splitText: function() {
          var o = this._splitTextIntoLines(this.text);
          return this.textLines = o.lines, this._textLines = o.graphemeLines, this._unwrappedTextLines = o._unwrappedLines, this._text = o.graphemeText, o;
        },
        /**
         * Initialize or update text dimensions.
         * Updates this.width and this.height with the proper values.
         * Does not return dimensions.
         */
        initDimensions: function() {
          this.__skipDimension || (this._splitText(), this._clearCache(), this.path ? (this.width = this.path.width, this.height = this.path.height) : (this.width = this.calcTextWidth() || this.cursorWidth || this.MIN_TEXT_WIDTH, this.height = this.calcTextHeight()), this.textAlign.indexOf("justify") !== -1 && this.enlargeSpaces(), this.saveState({ propertySet: "_dimensionAffectingProps" }));
        },
        /**
         * Enlarge space boxes and shift the others
         */
        enlargeSpaces: function() {
          for (var o, u, c, d, m, p, v, b = 0, y = this._textLines.length; b < y; b++)
            if (!(this.textAlign !== "justify" && (b === y - 1 || this.isEndOfWrapping(b))) && (d = 0, m = this._textLines[b], u = this.getLineWidth(b), u < this.width && (v = this.textLines[b].match(this._reSpacesAndTabs)))) {
              c = v.length, o = (this.width - u) / c;
              for (var w = 0, C = m.length; w <= C; w++)
                p = this.__charBounds[b][w], this._reSpaceAndTab.test(m[w]) ? (p.width += o, p.kernedWidth += o, p.left += d, d += o) : p.left += d;
            }
        },
        /**
         * Detect if the text line is ended with an hard break
         * text and itext do not have wrapping, return false
         * @return {Boolean}
         */
        isEndOfWrapping: function(o) {
          return o === this._textLines.length - 1;
        },
        /**
         * Detect if a line has a linebreak and so we need to account for it when moving
         * and counting style.
         * It return always for text and Itext.
         * @return Number
         */
        missingNewlineOffset: function() {
          return 1;
        },
        /**
         * Returns string representation of an instance
         * @return {String} String representation of text object
         */
        toString: function() {
          return "#<fabric.Text (" + this.complexity() + '): { "text": "' + this.text + '", "fontFamily": "' + this.fontFamily + '" }>';
        },
        /**
         * Return the dimension and the zoom level needed to create a cache canvas
         * big enough to host the object to be cached.
         * @private
         * @param {Object} dim.x width of object to be cached
         * @param {Object} dim.y height of object to be cached
         * @return {Object}.width width of canvas
         * @return {Object}.height height of canvas
         * @return {Object}.zoomX zoomX zoom value to unscale the canvas before drawing cache
         * @return {Object}.zoomY zoomY zoom value to unscale the canvas before drawing cache
         */
        _getCacheCanvasDimensions: function() {
          var o = this.callSuper("_getCacheCanvasDimensions"), u = this.fontSize;
          return o.width += u * o.zoomX, o.height += u * o.zoomY, o;
        },
        /**
         * @private
         * @param {CanvasRenderingContext2D} ctx Context to render on
         */
        _render: function(o) {
          var u = this.path;
          u && !u.isNotVisible() && u._render(o), this._setTextStyles(o), this._renderTextLinesBackground(o), this._renderTextDecoration(o, "underline"), this._renderText(o), this._renderTextDecoration(o, "overline"), this._renderTextDecoration(o, "linethrough");
        },
        /**
         * @private
         * @param {CanvasRenderingContext2D} ctx Context to render on
         */
        _renderText: function(o) {
          this.paintFirst === "stroke" ? (this._renderTextStroke(o), this._renderTextFill(o)) : (this._renderTextFill(o), this._renderTextStroke(o));
        },
        /**
         * Set the font parameter of the context with the object properties or with charStyle
         * @private
         * @param {CanvasRenderingContext2D} ctx Context to render on
         * @param {Object} [charStyle] object with font style properties
         * @param {String} [charStyle.fontFamily] Font Family
         * @param {Number} [charStyle.fontSize] Font size in pixels. ( without px suffix )
         * @param {String} [charStyle.fontWeight] Font weight
         * @param {String} [charStyle.fontStyle] Font style (italic|normal)
         */
        _setTextStyles: function(o, u, c) {
          if (o.textBaseline = "alphabetical", this.path)
            switch (this.pathAlign) {
              case "center":
                o.textBaseline = "middle";
                break;
              case "ascender":
                o.textBaseline = "top";
                break;
              case "descender":
                o.textBaseline = "bottom";
                break;
            }
          o.font = this._getFontDeclaration(u, c);
        },
        /**
         * calculate and return the text Width measuring each line.
         * @private
         * @param {CanvasRenderingContext2D} ctx Context to render on
         * @return {Number} Maximum width of fabric.Text object
         */
        calcTextWidth: function() {
          for (var o = this.getLineWidth(0), u = 1, c = this._textLines.length; u < c; u++) {
            var d = this.getLineWidth(u);
            d > o && (o = d);
          }
          return o;
        },
        /**
         * @private
         * @param {String} method Method name ("fillText" or "strokeText")
         * @param {CanvasRenderingContext2D} ctx Context to render on
         * @param {String} line Text to render
         * @param {Number} left Left position of text
         * @param {Number} top Top position of text
         * @param {Number} lineIndex Index of a line in a text
         */
        _renderTextLine: function(o, u, c, d, m, p) {
          this._renderChars(o, u, c, d, m, p);
        },
        /**
         * Renders the text background for lines, taking care of style
         * @private
         * @param {CanvasRenderingContext2D} ctx Context to render on
         */
        _renderTextLinesBackground: function(o) {
          if (!(!this.textBackgroundColor && !this.styleHas("textBackgroundColor"))) {
            for (var u, c, d = o.fillStyle, m, p, v = this._getLeftOffset(), b = this._getTopOffset(), y = 0, w = 0, C, _, S = this.path, k, I = 0, L = this._textLines.length; I < L; I++) {
              if (u = this.getHeightOfLine(I), !this.textBackgroundColor && !this.styleHas("textBackgroundColor", I)) {
                b += u;
                continue;
              }
              m = this._textLines[I], c = this._getLineLeftOffset(I), w = 0, y = 0, p = this.getValueOfPropertyAt(I, 0, "textBackgroundColor");
              for (var j = 0, G = m.length; j < G; j++)
                C = this.__charBounds[I][j], _ = this.getValueOfPropertyAt(I, j, "textBackgroundColor"), S ? (o.save(), o.translate(C.renderLeft, C.renderTop), o.rotate(C.angle), o.fillStyle = _, _ && o.fillRect(
                  -C.width / 2,
                  -u / this.lineHeight * (1 - this._fontSizeFraction),
                  C.width,
                  u / this.lineHeight
                ), o.restore()) : _ !== p ? (k = v + c + y, this.direction === "rtl" && (k = this.width - k - w), o.fillStyle = p, p && o.fillRect(
                  k,
                  b,
                  w,
                  u / this.lineHeight
                ), y = C.left, w = C.width, p = _) : w += C.kernedWidth;
              _ && !S && (k = v + c + y, this.direction === "rtl" && (k = this.width - k - w), o.fillStyle = _, o.fillRect(
                k,
                b,
                w,
                u / this.lineHeight
              )), b += u;
            }
            o.fillStyle = d, this._removeShadow(o);
          }
        },
        /**
         * @private
         * @param {Object} decl style declaration for cache
         * @param {String} decl.fontFamily fontFamily
         * @param {String} decl.fontStyle fontStyle
         * @param {String} decl.fontWeight fontWeight
         * @return {Object} reference to cache
         */
        getFontCache: function(o) {
          var u = o.fontFamily.toLowerCase();
          s.charWidthsCache[u] || (s.charWidthsCache[u] = {});
          var c = s.charWidthsCache[u], d = o.fontStyle.toLowerCase() + "_" + (o.fontWeight + "").toLowerCase();
          return c[d] || (c[d] = {}), c[d];
        },
        /**
         * measure and return the width of a single character.
         * possibly overridden to accommodate different measure logic or
         * to hook some external lib for character measurement
         * @private
         * @param {String} _char, char to be measured
         * @param {Object} charStyle style of char to be measured
         * @param {String} [previousChar] previous char
         * @param {Object} [prevCharStyle] style of previous char
         */
        _measureChar: function(o, u, c, d) {
          var m = this.getFontCache(u), p = this._getFontDeclaration(u), v = this._getFontDeclaration(d), b = c + o, y = p === v, w, C, _, S = u.fontSize / this.CACHE_FONT_SIZE, k;
          if (c && m[c] !== void 0 && (_ = m[c]), m[o] !== void 0 && (k = w = m[o]), y && m[b] !== void 0 && (C = m[b], k = C - _), w === void 0 || _ === void 0 || C === void 0) {
            var I = this.getMeasuringContext();
            this._setTextStyles(I, u, !0);
          }
          return w === void 0 && (k = w = I.measureText(o).width, m[o] = w), _ === void 0 && y && c && (_ = I.measureText(c).width, m[c] = _), y && C === void 0 && (C = I.measureText(b).width, m[b] = C, k = C - _), { width: w * S, kernedWidth: k * S };
        },
        /**
         * Computes height of character at given position
         * @param {Number} line the line index number
         * @param {Number} _char the character index number
         * @return {Number} fontSize of the character
         */
        getHeightOfChar: function(o, u) {
          return this.getValueOfPropertyAt(o, u, "fontSize");
        },
        /**
         * measure a text line measuring all characters.
         * @param {Number} lineIndex line number
         * @return {Number} Line width
         */
        measureLine: function(o) {
          var u = this._measureLine(o);
          return this.charSpacing !== 0 && (u.width -= this._getWidthOfCharSpacing()), u.width < 0 && (u.width = 0), u;
        },
        /**
         * measure every grapheme of a line, populating __charBounds
         * @param {Number} lineIndex
         * @return {Object} object.width total width of characters
         * @return {Object} object.widthOfSpaces length of chars that match this._reSpacesAndTabs
         */
        _measureLine: function(o) {
          var u = 0, c, d, m = this._textLines[o], p, v, b = 0, y = new Array(m.length), w = 0, C, _, S = this.path, k = this.pathSide === "right";
          for (this.__charBounds[o] = y, c = 0; c < m.length; c++)
            d = m[c], v = this._getGraphemeBox(d, o, c, p), y[c] = v, u += v.kernedWidth, p = d;
          if (y[c] = {
            left: v ? v.left + v.width : 0,
            width: 0,
            kernedWidth: 0,
            height: this.fontSize
          }, S) {
            switch (_ = S.segmentsInfo[S.segmentsInfo.length - 1].length, C = s.util.getPointOnPath(S.path, 0, S.segmentsInfo), C.x += S.pathOffset.x, C.y += S.pathOffset.y, this.textAlign) {
              case "left":
                w = k ? _ - u : 0;
                break;
              case "center":
                w = (_ - u) / 2;
                break;
              case "right":
                w = k ? 0 : _ - u;
                break;
            }
            for (w += this.pathStartOffset * (k ? -1 : 1), c = k ? m.length - 1 : 0; k ? c >= 0 : c < m.length; k ? c-- : c++)
              v = y[c], w > _ ? w %= _ : w < 0 && (w += _), this._setGraphemeOnPath(w, v, C), w += v.kernedWidth;
          }
          return { width: u, numOfSpaces: b };
        },
        /**
         * Calculate the angle  and the left,top position of the char that follow a path.
         * It appends it to graphemeInfo to be reused later at rendering
         * @private
         * @param {Number} positionInPath to be measured
         * @param {Object} graphemeInfo current grapheme box information
         * @param {Object} startingPoint position of the point
         */
        _setGraphemeOnPath: function(o, u, c) {
          var d = o + u.kernedWidth / 2, m = this.path, p = s.util.getPointOnPath(m.path, d, m.segmentsInfo);
          u.renderLeft = p.x - c.x, u.renderTop = p.y - c.y, u.angle = p.angle + (this.pathSide === "right" ? Math.PI : 0);
        },
        /**
         * Measure and return the info of a single grapheme.
         * needs the the info of previous graphemes already filled
         * @private
         * @param {String} grapheme to be measured
         * @param {Number} lineIndex index of the line where the char is
         * @param {Number} charIndex position in the line
         * @param {String} [prevGrapheme] character preceding the one to be measured
         */
        _getGraphemeBox: function(o, u, c, d, m) {
          var p = this.getCompleteStyleDeclaration(u, c), v = d ? this.getCompleteStyleDeclaration(u, c - 1) : {}, b = this._measureChar(o, p, d, v), y = b.kernedWidth, w = b.width, C;
          this.charSpacing !== 0 && (C = this._getWidthOfCharSpacing(), w += C, y += C);
          var _ = {
            width: w,
            left: 0,
            height: p.fontSize,
            kernedWidth: y,
            deltaY: p.deltaY
          };
          if (c > 0 && !m) {
            var S = this.__charBounds[u][c - 1];
            _.left = S.left + S.width + b.kernedWidth - b.width;
          }
          return _;
        },
        /**
         * Calculate height of line at 'lineIndex'
         * @param {Number} lineIndex index of line to calculate
         * @return {Number}
         */
        getHeightOfLine: function(o) {
          if (this.__lineHeights[o])
            return this.__lineHeights[o];
          for (var u = this._textLines[o], c = this.getHeightOfChar(o, 0), d = 1, m = u.length; d < m; d++)
            c = Math.max(this.getHeightOfChar(o, d), c);
          return this.__lineHeights[o] = c * this.lineHeight * this._fontSizeMult;
        },
        /**
         * Calculate text box height
         */
        calcTextHeight: function() {
          for (var o, u = 0, c = 0, d = this._textLines.length; c < d; c++)
            o = this.getHeightOfLine(c), u += c === d - 1 ? o / this.lineHeight : o;
          return u;
        },
        /**
         * @private
         * @return {Number} Left offset
         */
        _getLeftOffset: function() {
          return this.direction === "ltr" ? -this.width / 2 : this.width / 2;
        },
        /**
         * @private
         * @return {Number} Top offset
         */
        _getTopOffset: function() {
          return -this.height / 2;
        },
        /**
         * @private
         * @param {CanvasRenderingContext2D} ctx Context to render on
         * @param {String} method Method name ("fillText" or "strokeText")
         */
        _renderTextCommon: function(o, u) {
          o.save();
          for (var c = 0, d = this._getLeftOffset(), m = this._getTopOffset(), p = 0, v = this._textLines.length; p < v; p++) {
            var b = this.getHeightOfLine(p), y = b / this.lineHeight, w = this._getLineLeftOffset(p);
            this._renderTextLine(
              u,
              o,
              this._textLines[p],
              d + w,
              m + c + y,
              p
            ), c += b;
          }
          o.restore();
        },
        /**
         * @private
         * @param {CanvasRenderingContext2D} ctx Context to render on
         */
        _renderTextFill: function(o) {
          !this.fill && !this.styleHas("fill") || this._renderTextCommon(o, "fillText");
        },
        /**
         * @private
         * @param {CanvasRenderingContext2D} ctx Context to render on
         */
        _renderTextStroke: function(o) {
          (!this.stroke || this.strokeWidth === 0) && this.isEmptyStyles() || (this.shadow && !this.shadow.affectStroke && this._removeShadow(o), o.save(), this._setLineDash(o, this.strokeDashArray), o.beginPath(), this._renderTextCommon(o, "strokeText"), o.closePath(), o.restore());
        },
        /**
         * @private
         * @param {String} method fillText or strokeText.
         * @param {CanvasRenderingContext2D} ctx Context to render on
         * @param {Array} line Content of the line, splitted in an array by grapheme
         * @param {Number} left
         * @param {Number} top
         * @param {Number} lineIndex
         */
        _renderChars: function(o, u, c, d, m, p) {
          var v = this.getHeightOfLine(p), b = this.textAlign.indexOf("justify") !== -1, y, w, C = "", _, S = 0, k, I = this.path, L = !b && this.charSpacing === 0 && this.isEmptyStyles(p) && !I, j = this.direction === "ltr", G = this.direction === "ltr" ? 1 : -1, te, W = u.canvas.getAttribute("dir");
          if (u.save(), W !== this.direction && (u.canvas.setAttribute("dir", j ? "ltr" : "rtl"), u.direction = j ? "ltr" : "rtl", u.textAlign = j ? "left" : "right"), m -= v * this._fontSizeFraction / this.lineHeight, L) {
            this._renderChar(o, u, p, 0, c.join(""), d, m, v), u.restore();
            return;
          }
          for (var q = 0, K = c.length - 1; q <= K; q++)
            k = q === K || this.charSpacing || I, C += c[q], _ = this.__charBounds[p][q], S === 0 ? (d += G * (_.kernedWidth - _.width), S += _.width) : S += _.kernedWidth, b && !k && this._reSpaceAndTab.test(c[q]) && (k = !0), k || (y = y || this.getCompleteStyleDeclaration(p, q), w = this.getCompleteStyleDeclaration(p, q + 1), k = s.util.hasStyleChanged(y, w, !1)), k && (I ? (u.save(), u.translate(_.renderLeft, _.renderTop), u.rotate(_.angle), this._renderChar(o, u, p, q, C, -S / 2, 0, v), u.restore()) : (te = d, this._renderChar(o, u, p, q, C, te, m, v)), C = "", y = w, d += G * S, S = 0);
          u.restore();
        },
        /**
         * This function try to patch the missing gradientTransform on canvas gradients.
         * transforming a context to transform the gradient, is going to transform the stroke too.
         * we want to transform the gradient but not the stroke operation, so we create
         * a transformed gradient on a pattern and then we use the pattern instead of the gradient.
         * this method has drawbacks: is slow, is in low resolution, needs a patch for when the size
         * is limited.
         * @private
         * @param {fabric.Gradient} filler a fabric gradient instance
         * @return {CanvasPattern} a pattern to use as fill/stroke style
         */
        _applyPatternGradientTransformText: function(o) {
          var u = s.util.createCanvasElement(), c, d = this.width + this.strokeWidth, m = this.height + this.strokeWidth;
          return u.width = d, u.height = m, c = u.getContext("2d"), c.beginPath(), c.moveTo(0, 0), c.lineTo(d, 0), c.lineTo(d, m), c.lineTo(0, m), c.closePath(), c.translate(d / 2, m / 2), c.fillStyle = o.toLive(c), this._applyPatternGradientTransform(c, o), c.fill(), c.createPattern(u, "no-repeat");
        },
        handleFiller: function(o, u, c) {
          var d, m;
          return c.toLive ? c.gradientUnits === "percentage" || c.gradientTransform || c.patternTransform ? (d = -this.width / 2, m = -this.height / 2, o.translate(d, m), o[u] = this._applyPatternGradientTransformText(c), { offsetX: d, offsetY: m }) : (o[u] = c.toLive(o, this), this._applyPatternGradientTransform(o, c)) : (o[u] = c, { offsetX: 0, offsetY: 0 });
        },
        _setStrokeStyles: function(o, u) {
          return o.lineWidth = u.strokeWidth, o.lineCap = this.strokeLineCap, o.lineDashOffset = this.strokeDashOffset, o.lineJoin = this.strokeLineJoin, o.miterLimit = this.strokeMiterLimit, this.handleFiller(o, "strokeStyle", u.stroke);
        },
        _setFillStyles: function(o, u) {
          return this.handleFiller(o, "fillStyle", u.fill);
        },
        /**
         * @private
         * @param {String} method
         * @param {CanvasRenderingContext2D} ctx Context to render on
         * @param {Number} lineIndex
         * @param {Number} charIndex
         * @param {String} _char
         * @param {Number} left Left coordinate
         * @param {Number} top Top coordinate
         * @param {Number} lineHeight Height of the line
         */
        _renderChar: function(o, u, c, d, m, p, v) {
          var b = this._getStyleDeclaration(c, d), y = this.getCompleteStyleDeclaration(c, d), w = o === "fillText" && y.fill, C = o === "strokeText" && y.stroke && y.strokeWidth, _, S;
          !C && !w || (u.save(), w && (_ = this._setFillStyles(u, y)), C && (S = this._setStrokeStyles(u, y)), u.font = this._getFontDeclaration(y), b && b.textBackgroundColor && this._removeShadow(u), b && b.deltaY && (v += b.deltaY), w && u.fillText(m, p - _.offsetX, v - _.offsetY), C && u.strokeText(m, p - S.offsetX, v - S.offsetY), u.restore());
        },
        /**
         * Turns the character into a 'superior figure' (i.e. 'superscript')
         * @param {Number} start selection start
         * @param {Number} end selection end
         * @returns {fabric.Text} thisArg
         * @chainable
         */
        setSuperscript: function(o, u) {
          return this._setScript(o, u, this.superscript);
        },
        /**
         * Turns the character into an 'inferior figure' (i.e. 'subscript')
         * @param {Number} start selection start
         * @param {Number} end selection end
         * @returns {fabric.Text} thisArg
         * @chainable
         */
        setSubscript: function(o, u) {
          return this._setScript(o, u, this.subscript);
        },
        /**
         * Applies 'schema' at given position
         * @private
         * @param {Number} start selection start
         * @param {Number} end selection end
         * @param {Number} schema
         * @returns {fabric.Text} thisArg
         * @chainable
         */
        _setScript: function(o, u, c) {
          var d = this.get2DCursorLocation(o, !0), m = this.getValueOfPropertyAt(d.lineIndex, d.charIndex, "fontSize"), p = this.getValueOfPropertyAt(d.lineIndex, d.charIndex, "deltaY"), v = { fontSize: m * c.size, deltaY: p + m * c.baseline };
          return this.setSelectionStyles(v, o, u), this;
        },
        /**
         * @private
         * @param {Number} lineIndex index text line
         * @return {Number} Line left offset
         */
        _getLineLeftOffset: function(o) {
          var u = this.getLineWidth(o), c = this.width - u, d = this.textAlign, m = this.direction, v, p = 0, v = this.isEndOfWrapping(o);
          return d === "justify" || d === "justify-center" && !v || d === "justify-right" && !v || d === "justify-left" && !v ? 0 : (d === "center" && (p = c / 2), d === "right" && (p = c), d === "justify-center" && (p = c / 2), d === "justify-right" && (p = c), m === "rtl" && (p -= c), p);
        },
        /**
         * @private
         */
        _clearCache: function() {
          this.__lineWidths = [], this.__lineHeights = [], this.__charBounds = [];
        },
        /**
         * @private
         */
        _shouldClearDimensionCache: function() {
          var o = this._forceClearCache;
          return o || (o = this.hasStateChanged("_dimensionAffectingProps")), o && (this.dirty = !0, this._forceClearCache = !1), o;
        },
        /**
         * Measure a single line given its index. Used to calculate the initial
         * text bounding box. The values are calculated and stored in __lineWidths cache.
         * @private
         * @param {Number} lineIndex line number
         * @return {Number} Line width
         */
        getLineWidth: function(o) {
          if (this.__lineWidths[o] !== void 0)
            return this.__lineWidths[o];
          var u = this.measureLine(o), c = u.width;
          return this.__lineWidths[o] = c, c;
        },
        _getWidthOfCharSpacing: function() {
          return this.charSpacing !== 0 ? this.fontSize * this.charSpacing / 1e3 : 0;
        },
        /**
         * Retrieves the value of property at given character position
         * @param {Number} lineIndex the line number
         * @param {Number} charIndex the character number
         * @param {String} property the property name
         * @returns the value of 'property'
         */
        getValueOfPropertyAt: function(o, u, c) {
          var d = this._getStyleDeclaration(o, u);
          return d && typeof d[c] < "u" ? d[c] : this[c];
        },
        /**
         * @private
         * @param {CanvasRenderingContext2D} ctx Context to render on
         */
        _renderTextDecoration: function(o, u) {
          if (!(!this[u] && !this.styleHas(u))) {
            for (var c, d, m, p, v, b, y, w, C = this._getLeftOffset(), _ = this._getTopOffset(), S, k, I, L, j, G, te, W, q = this.path, K = this._getWidthOfCharSpacing(), ne = this.offsets[u], re = 0, T = this._textLines.length; re < T; re++) {
              if (c = this.getHeightOfLine(re), !this[u] && !this.styleHas(u, re)) {
                _ += c;
                continue;
              }
              y = this._textLines[re], G = c / this.lineHeight, p = this._getLineLeftOffset(re), k = 0, I = 0, w = this.getValueOfPropertyAt(re, 0, u), W = this.getValueOfPropertyAt(re, 0, "fill"), S = _ + G * (1 - this._fontSizeFraction), d = this.getHeightOfChar(re, 0), v = this.getValueOfPropertyAt(re, 0, "deltaY");
              for (var P = 0, A = y.length; P < A; P++)
                if (L = this.__charBounds[re][P], j = this.getValueOfPropertyAt(re, P, u), te = this.getValueOfPropertyAt(re, P, "fill"), m = this.getHeightOfChar(re, P), b = this.getValueOfPropertyAt(re, P, "deltaY"), q && j && te)
                  o.save(), o.fillStyle = W, o.translate(L.renderLeft, L.renderTop), o.rotate(L.angle), o.fillRect(
                    -L.kernedWidth / 2,
                    ne * m + b,
                    L.kernedWidth,
                    this.fontSize / 15
                  ), o.restore();
                else if ((j !== w || te !== W || m !== d || b !== v) && I > 0) {
                  var M = C + p + k;
                  this.direction === "rtl" && (M = this.width - M - I), w && W && (o.fillStyle = W, o.fillRect(
                    M,
                    S + ne * d + v,
                    I,
                    this.fontSize / 15
                  )), k = L.left, I = L.width, w = j, W = te, d = m, v = b;
                } else
                  I += L.kernedWidth;
              var M = C + p + k;
              this.direction === "rtl" && (M = this.width - M - I), o.fillStyle = te, j && te && o.fillRect(
                M,
                S + ne * d + v,
                I - K,
                this.fontSize / 15
              ), _ += c;
            }
            this._removeShadow(o);
          }
        },
        /**
         * return font declaration string for canvas context
         * @param {Object} [styleObject] object
         * @returns {String} font declaration formatted for canvas context.
         */
        _getFontDeclaration: function(o, u) {
          var c = o || this, d = this.fontFamily, m = s.Text.genericFonts.indexOf(d.toLowerCase()) > -1, p = d === void 0 || d.indexOf("'") > -1 || d.indexOf(",") > -1 || d.indexOf('"') > -1 || m ? c.fontFamily : '"' + c.fontFamily + '"';
          return [
            // node-canvas needs "weight style", while browsers need "style weight"
            // verify if this can be fixed in JSDOM
            s.isLikelyNode ? c.fontWeight : c.fontStyle,
            s.isLikelyNode ? c.fontStyle : c.fontWeight,
            u ? this.CACHE_FONT_SIZE + "px" : c.fontSize + "px",
            p
          ].join(" ");
        },
        /**
         * Renders text instance on a specified context
         * @param {CanvasRenderingContext2D} ctx Context to render on
         */
        render: function(o) {
          this.visible && (this.canvas && this.canvas.skipOffscreen && !this.group && !this.isOnScreen() || (this._shouldClearDimensionCache() && this.initDimensions(), this.callSuper("render", o)));
        },
        /**
         * Returns the text as an array of lines.
         * @param {String} text text to split
         * @returns {Array} Lines in the text
         */
        _splitTextIntoLines: function(o) {
          for (var u = o.split(this._reNewline), c = new Array(u.length), d = [`
`], m = [], p = 0; p < u.length; p++)
            c[p] = s.util.string.graphemeSplit(u[p]), m = m.concat(c[p], d);
          return m.pop(), { _unwrappedLines: c, lines: u, graphemeText: m, graphemeLines: c };
        },
        /**
         * Returns object representation of an instance
         * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output
         * @return {Object} Object representation of an instance
         */
        toObject: function(o) {
          var u = h.concat(o), c = this.callSuper("toObject", u);
          return c.styles = s.util.stylesToArray(this.styles, this.text), c.path && (c.path = this.path.toObject()), c;
        },
        /**
         * Sets property to a given value. When changing position/dimension -related properties (left, top, scale, angle, etc.) `set` does not update position of object's borders/controls. If you need to update those, call `setCoords()`.
         * @param {String|Object} key Property name or object (if object, iterate over the object properties)
         * @param {Object|Function} value Property value (if function, the value is passed into it and its return value is used as a new one)
         * @return {fabric.Object} thisArg
         * @chainable
         */
        set: function(o, u) {
          this.callSuper("set", o, u);
          var c = !1, d = !1;
          if (typeof o == "object")
            for (var m in o)
              m === "path" && this.setPathInfo(), c = c || this._dimensionAffectingProps.indexOf(m) !== -1, d = d || m === "path";
          else
            c = this._dimensionAffectingProps.indexOf(o) !== -1, d = o === "path";
          return d && this.setPathInfo(), c && (this.initDimensions(), this.setCoords()), this;
        },
        /**
         * Returns complexity of an instance
         * @return {Number} complexity
         */
        complexity: function() {
          return 1;
        }
      }
    ), s.Text.ATTRIBUTE_NAMES = s.SHARED_ATTRIBUTES.concat(
      "x y dx dy font-family font-style font-weight font-size letter-spacing text-decoration text-anchor".split(" ")
    ), s.Text.DEFAULT_SVG_FONT_SIZE = 16, s.Text.fromElement = function(o, u, c) {
      if (!o)
        return u(null);
      var d = s.parseAttributes(o, s.Text.ATTRIBUTE_NAMES), m = d.textAnchor || "left";
      if (c = s.util.object.extend(c ? a(c) : {}, d), c.top = c.top || 0, c.left = c.left || 0, d.textDecoration) {
        var p = d.textDecoration;
        p.indexOf("underline") !== -1 && (c.underline = !0), p.indexOf("overline") !== -1 && (c.overline = !0), p.indexOf("line-through") !== -1 && (c.linethrough = !0), delete c.textDecoration;
      }
      "dx" in d && (c.left += d.dx), "dy" in d && (c.top += d.dy), "fontSize" in c || (c.fontSize = s.Text.DEFAULT_SVG_FONT_SIZE);
      var v = "";
      "textContent" in o ? v = o.textContent : "firstChild" in o && o.firstChild !== null && "data" in o.firstChild && o.firstChild.data !== null && (v = o.firstChild.data), v = v.replace(/^\s+|\s+$|\n+/g, "").replace(/\s+/g, " ");
      var b = c.strokeWidth;
      c.strokeWidth = 0;
      var y = new s.Text(v, c), w = y.getScaledHeight() / y.height, C = (y.height + y.strokeWidth) * y.lineHeight - y.height, _ = C * w, S = y.getScaledHeight() + _, k = 0;
      m === "center" && (k = y.getScaledWidth() / 2), m === "right" && (k = y.getScaledWidth()), y.set({
        left: y.left - k,
        top: y.top - (S - y.fontSize * (0.07 + y._fontSizeFraction)) / y.lineHeight,
        strokeWidth: typeof b < "u" ? b : 1
      }), u(y);
    }, s.Text.fromObject = function(o, u) {
      var c = a(o), d = o.path;
      return delete c.path, s.Object._fromObject("Text", c, function(m) {
        m.styles = s.util.stylesFromArray(o.styles, o.text), d ? s.Object._fromObject("Path", d, function(p) {
          m.set("path", p), u(m);
        }, "path") : u(m);
      }, "text");
    }, s.Text.genericFonts = ["sans-serif", "serif", "cursive", "fantasy", "monospace"], s.util.createAccessors && s.util.createAccessors(s.Text);
  }(t), function() {
    e.util.object.extend(
      e.Text.prototype,
      /** @lends fabric.Text.prototype */
      {
        /**
         * Returns true if object has no styling or no styling in a line
         * @param {Number} lineIndex , lineIndex is on wrapped lines.
         * @return {Boolean}
         */
        isEmptyStyles: function(l) {
          if (!this.styles || typeof l < "u" && !this.styles[l])
            return !0;
          var s = typeof l > "u" ? this.styles : { line: this.styles[l] };
          for (var a in s)
            for (var h in s[a])
              for (var o in s[a][h])
                return !1;
          return !0;
        },
        /**
         * Returns true if object has a style property or has it ina specified line
         * This function is used to detect if a text will use a particular property or not.
         * @param {String} property to check for
         * @param {Number} lineIndex to check the style on
         * @return {Boolean}
         */
        styleHas: function(l, s) {
          if (!this.styles || !l || l === "" || typeof s < "u" && !this.styles[s])
            return !1;
          var a = typeof s > "u" ? this.styles : { 0: this.styles[s] };
          for (var h in a)
            for (var o in a[h])
              if (typeof a[h][o][l] < "u")
                return !0;
          return !1;
        },
        /**
         * Check if characters in a text have a value for a property
         * whose value matches the textbox's value for that property.  If so,
         * the character-level property is deleted.  If the character
         * has no other properties, then it is also deleted.  Finally,
         * if the line containing that character has no other characters
         * then it also is deleted.
         *
         * @param {string} property The property to compare between characters and text.
         */
        cleanStyle: function(l) {
          if (!this.styles || !l || l === "")
            return !1;
          var s = this.styles, a = 0, h, o, u = !0, c = 0, d;
          for (var m in s) {
            h = 0;
            for (var p in s[m]) {
              var d = s[m][p], v = d.hasOwnProperty(l);
              a++, v ? (o ? d[l] !== o && (u = !1) : o = d[l], d[l] === this[l] && delete d[l]) : u = !1, Object.keys(d).length !== 0 ? h++ : delete s[m][p];
            }
            h === 0 && delete s[m];
          }
          for (var b = 0; b < this._textLines.length; b++)
            c += this._textLines[b].length;
          u && a === c && (this[l] = o, this.removeStyle(l));
        },
        /**
         * Remove a style property or properties from all individual character styles
         * in a text object.  Deletes the character style object if it contains no other style
         * props.  Deletes a line style object if it contains no other character styles.
         *
         * @param {String} props The property to remove from character styles.
         */
        removeStyle: function(l) {
          if (!(!this.styles || !l || l === "")) {
            var s = this.styles, a, h, o;
            for (h in s) {
              a = s[h];
              for (o in a)
                delete a[o][l], Object.keys(a[o]).length === 0 && delete a[o];
              Object.keys(a).length === 0 && delete s[h];
            }
          }
        },
        /**
         * @private
         */
        _extendStyles: function(l, s) {
          var a = this.get2DCursorLocation(l);
          this._getLineStyle(a.lineIndex) || this._setLineStyle(a.lineIndex), this._getStyleDeclaration(a.lineIndex, a.charIndex) || this._setStyleDeclaration(a.lineIndex, a.charIndex, {}), e.util.object.extend(this._getStyleDeclaration(a.lineIndex, a.charIndex), s);
        },
        /**
         * Returns 2d representation (lineIndex and charIndex) of cursor (or selection start)
         * @param {Number} [selectionStart] Optional index. When not given, current selectionStart is used.
         * @param {Boolean} [skipWrapping] consider the location for unwrapped lines. useful to manage styles.
         */
        get2DCursorLocation: function(l, s) {
          typeof l > "u" && (l = this.selectionStart);
          for (var a = s ? this._unwrappedTextLines : this._textLines, h = a.length, o = 0; o < h; o++) {
            if (l <= a[o].length)
              return {
                lineIndex: o,
                charIndex: l
              };
            l -= a[o].length + this.missingNewlineOffset(o);
          }
          return {
            lineIndex: o - 1,
            charIndex: a[o - 1].length < l ? a[o - 1].length : l
          };
        },
        /**
         * Gets style of a current selection/cursor (at the start position)
         * if startIndex or endIndex are not provided, selectionStart or selectionEnd will be used.
         * @param {Number} [startIndex] Start index to get styles at
         * @param {Number} [endIndex] End index to get styles at, if not specified selectionEnd or startIndex + 1
         * @param {Boolean} [complete] get full style or not
         * @return {Array} styles an array with one, zero or more Style objects
         */
        getSelectionStyles: function(l, s, a) {
          typeof l > "u" && (l = this.selectionStart || 0), typeof s > "u" && (s = this.selectionEnd || l);
          for (var h = [], o = l; o < s; o++)
            h.push(this.getStyleAtPosition(o, a));
          return h;
        },
        /**
         * Gets style of a current selection/cursor position
         * @param {Number} position  to get styles at
         * @param {Boolean} [complete] full style if true
         * @return {Object} style Style object at a specified index
         * @private
         */
        getStyleAtPosition: function(l, s) {
          var a = this.get2DCursorLocation(l), h = s ? this.getCompleteStyleDeclaration(a.lineIndex, a.charIndex) : this._getStyleDeclaration(a.lineIndex, a.charIndex);
          return h || {};
        },
        /**
         * Sets style of a current selection, if no selection exist, do not set anything.
         * @param {Object} [styles] Styles object
         * @param {Number} [startIndex] Start index to get styles at
         * @param {Number} [endIndex] End index to get styles at, if not specified selectionEnd or startIndex + 1
         * @return {fabric.IText} thisArg
         * @chainable
         */
        setSelectionStyles: function(l, s, a) {
          typeof s > "u" && (s = this.selectionStart || 0), typeof a > "u" && (a = this.selectionEnd || s);
          for (var h = s; h < a; h++)
            this._extendStyles(h, l);
          return this._forceClearCache = !0, this;
        },
        /**
         * get the reference, not a clone, of the style object for a given character
         * @param {Number} lineIndex
         * @param {Number} charIndex
         * @return {Object} style object
         */
        _getStyleDeclaration: function(l, s) {
          var a = this.styles && this.styles[l];
          return a ? a[s] : null;
        },
        /**
         * return a new object that contains all the style property for a character
         * the object returned is newly created
         * @param {Number} lineIndex of the line where the character is
         * @param {Number} charIndex position of the character on the line
         * @return {Object} style object
         */
        getCompleteStyleDeclaration: function(l, s) {
          for (var a = this._getStyleDeclaration(l, s) || {}, h = {}, o, u = 0; u < this._styleProperties.length; u++)
            o = this._styleProperties[u], h[o] = typeof a[o] > "u" ? this[o] : a[o];
          return h;
        },
        /**
         * @param {Number} lineIndex
         * @param {Number} charIndex
         * @param {Object} style
         * @private
         */
        _setStyleDeclaration: function(l, s, a) {
          this.styles[l][s] = a;
        },
        /**
         *
         * @param {Number} lineIndex
         * @param {Number} charIndex
         * @private
         */
        _deleteStyleDeclaration: function(l, s) {
          delete this.styles[l][s];
        },
        /**
         * @param {Number} lineIndex
         * @return {Boolean} if the line exists or not
         * @private
         */
        _getLineStyle: function(l) {
          return !!this.styles[l];
        },
        /**
         * Set the line style to an empty object so that is initialized
         * @param {Number} lineIndex
         * @private
         */
        _setLineStyle: function(l) {
          this.styles[l] = {};
        },
        /**
         * @param {Number} lineIndex
         * @private
         */
        _deleteLineStyle: function(l) {
          delete this.styles[l];
        }
      }
    );
  }(), function() {
    function l(s) {
      s.textDecoration && (s.textDecoration.indexOf("underline") > -1 && (s.underline = !0), s.textDecoration.indexOf("line-through") > -1 && (s.linethrough = !0), s.textDecoration.indexOf("overline") > -1 && (s.overline = !0), delete s.textDecoration);
    }
    e.IText = e.util.createClass(
      e.Text,
      e.Observable,
      /** @lends fabric.IText.prototype */
      {
        /**
         * Type of an object
         * @type String
         * @default
         */
        type: "i-text",
        /**
         * Index where text selection starts (or where cursor is when there is no selection)
         * @type Number
         * @default
         */
        selectionStart: 0,
        /**
         * Index where text selection ends
         * @type Number
         * @default
         */
        selectionEnd: 0,
        /**
         * Color of text selection
         * @type String
         * @default
         */
        selectionColor: "rgba(17,119,255,0.3)",
        /**
         * Indicates whether text is in editing mode
         * @type Boolean
         * @default
         */
        isEditing: !1,
        /**
         * Indicates whether a text can be edited
         * @type Boolean
         * @default
         */
        editable: !0,
        /**
         * Border color of text object while it's in editing mode
         * @type String
         * @default
         */
        editingBorderColor: "rgba(102,153,255,0.25)",
        /**
         * Width of cursor (in px)
         * @type Number
         * @default
         */
        cursorWidth: 2,
        /**
         * Color of text cursor color in editing mode.
         * if not set (default) will take color from the text.
         * if set to a color value that fabric can understand, it will
         * be used instead of the color of the text at the current position.
         * @type String
         * @default
         */
        cursorColor: "",
        /**
         * Delay between cursor blink (in ms)
         * @type Number
         * @default
         */
        cursorDelay: 1e3,
        /**
         * Duration of cursor fadein (in ms)
         * @type Number
         * @default
         */
        cursorDuration: 600,
        /**
         * Indicates whether internal text char widths can be cached
         * @type Boolean
         * @default
         */
        caching: !0,
        /**
         * DOM container to append the hiddenTextarea.
         * An alternative to attaching to the document.body.
         * Useful to reduce laggish redraw of the full document.body tree and
         * also with modals event capturing that won't let the textarea take focus.
         * @type HTMLElement
         * @default
         */
        hiddenTextareaContainer: null,
        /**
         * @private
         */
        _reSpace: /\s|\n/,
        /**
         * @private
         */
        _currentCursorOpacity: 0,
        /**
         * @private
         */
        _selectionDirection: null,
        /**
         * @private
         */
        _abortCursorAnimation: !1,
        /**
         * @private
         */
        __widthOfSpace: [],
        /**
         * Helps determining when the text is in composition, so that the cursor
         * rendering is altered.
         */
        inCompositionMode: !1,
        /**
         * Constructor
         * @param {String} text Text string
         * @param {Object} [options] Options object
         * @return {fabric.IText} thisArg
         */
        initialize: function(s, a) {
          this.callSuper("initialize", s, a), this.initBehavior();
        },
        /**
         * Sets selection start (left boundary of a selection)
         * @param {Number} index Index to set selection start to
         */
        setSelectionStart: function(s) {
          s = Math.max(s, 0), this._updateAndFire("selectionStart", s);
        },
        /**
         * Sets selection end (right boundary of a selection)
         * @param {Number} index Index to set selection end to
         */
        setSelectionEnd: function(s) {
          s = Math.min(s, this.text.length), this._updateAndFire("selectionEnd", s);
        },
        /**
         * @private
         * @param {String} property 'selectionStart' or 'selectionEnd'
         * @param {Number} index new position of property
         */
        _updateAndFire: function(s, a) {
          this[s] !== a && (this._fireSelectionChanged(), this[s] = a), this._updateTextarea();
        },
        /**
         * Fires the even of selection changed
         * @private
         */
        _fireSelectionChanged: function() {
          this.fire("selection:changed"), this.canvas && this.canvas.fire("text:selection:changed", { target: this });
        },
        /**
         * Initialize text dimensions. Render all text on given context
         * or on a offscreen canvas to get the text width with measureText.
         * Updates this.width and this.height with the proper values.
         * Does not return dimensions.
         * @private
         */
        initDimensions: function() {
          this.isEditing && this.initDelayedCursor(), this.clearContextTop(), this.callSuper("initDimensions");
        },
        /**
         * @private
         * @param {CanvasRenderingContext2D} ctx Context to render on
         */
        render: function(s) {
          this.clearContextTop(), this.callSuper("render", s), this.cursorOffsetCache = {}, this.renderCursorOrSelection();
        },
        /**
         * @private
         * @param {CanvasRenderingContext2D} ctx Context to render on
         */
        _render: function(s) {
          this.callSuper("_render", s);
        },
        /**
         * Prepare and clean the contextTop
         */
        clearContextTop: function(s) {
          if (!(!this.isEditing || !this.canvas || !this.canvas.contextTop)) {
            var a = this.canvas.contextTop, h = this.canvas.viewportTransform;
            a.save(), a.transform(h[0], h[1], h[2], h[3], h[4], h[5]), this.transform(a), this._clearTextArea(a), s || a.restore();
          }
        },
        /**
         * Renders cursor or selection (depending on what exists)
         * it does on the contextTop. If contextTop is not available, do nothing.
         */
        renderCursorOrSelection: function() {
          if (!(!this.isEditing || !this.canvas || !this.canvas.contextTop)) {
            var s = this._getCursorBoundaries(), a = this.canvas.contextTop;
            this.clearContextTop(!0), this.selectionStart === this.selectionEnd ? this.renderCursor(s, a) : this.renderSelection(s, a), a.restore();
          }
        },
        _clearTextArea: function(s) {
          var a = this.width + 4, h = this.height + 4;
          s.clearRect(-a / 2, -h / 2, a, h);
        },
        /**
         * Returns cursor boundaries (left, top, leftOffset, topOffset)
         * @private
         * @param {Array} chars Array of characters
         * @param {String} typeOfBoundaries
         */
        _getCursorBoundaries: function(s) {
          typeof s > "u" && (s = this.selectionStart);
          var a = this._getLeftOffset(), h = this._getTopOffset(), o = this._getCursorBoundariesOffsets(s);
          return {
            left: a,
            top: h,
            leftOffset: o.left,
            topOffset: o.top
          };
        },
        /**
         * @private
         */
        _getCursorBoundariesOffsets: function(s) {
          if (this.cursorOffsetCache && "top" in this.cursorOffsetCache)
            return this.cursorOffsetCache;
          var a, h, o, u = 0, c = 0, d, m = this.get2DCursorLocation(s);
          o = m.charIndex, h = m.lineIndex;
          for (var p = 0; p < h; p++)
            u += this.getHeightOfLine(p);
          a = this._getLineLeftOffset(h);
          var v = this.__charBounds[h][o];
          return v && (c = v.left), this.charSpacing !== 0 && o === this._textLines[h].length && (c -= this._getWidthOfCharSpacing()), d = {
            top: u,
            left: a + (c > 0 ? c : 0)
          }, this.direction === "rtl" && (d.left *= -1), this.cursorOffsetCache = d, this.cursorOffsetCache;
        },
        /**
         * Renders cursor
         * @param {Object} boundaries
         * @param {CanvasRenderingContext2D} ctx transformed context to draw on
         */
        renderCursor: function(s, a) {
          var h = this.get2DCursorLocation(), o = h.lineIndex, u = h.charIndex > 0 ? h.charIndex - 1 : 0, c = this.getValueOfPropertyAt(o, u, "fontSize"), d = this.scaleX * this.canvas.getZoom(), m = this.cursorWidth / d, p = s.topOffset, v = this.getValueOfPropertyAt(o, u, "deltaY");
          p += (1 - this._fontSizeFraction) * this.getHeightOfLine(o) / this.lineHeight - c * (1 - this._fontSizeFraction), this.inCompositionMode && this.renderSelection(s, a), a.fillStyle = this.cursorColor || this.getValueOfPropertyAt(o, u, "fill"), a.globalAlpha = this.__isMousedown ? 1 : this._currentCursorOpacity, a.fillRect(
            s.left + s.leftOffset - m / 2,
            p + s.top + v,
            m,
            c
          );
        },
        /**
         * Renders text selection
         * @param {Object} boundaries Object with left/top/leftOffset/topOffset
         * @param {CanvasRenderingContext2D} ctx transformed context to draw on
         */
        renderSelection: function(s, a) {
          for (var h = this.inCompositionMode ? this.hiddenTextarea.selectionStart : this.selectionStart, o = this.inCompositionMode ? this.hiddenTextarea.selectionEnd : this.selectionEnd, u = this.textAlign.indexOf("justify") !== -1, c = this.get2DCursorLocation(h), d = this.get2DCursorLocation(o), m = c.lineIndex, p = d.lineIndex, v = c.charIndex < 0 ? 0 : c.charIndex, b = d.charIndex < 0 ? 0 : d.charIndex, y = m; y <= p; y++) {
            var w = this._getLineLeftOffset(y) || 0, C = this.getHeightOfLine(y), _ = 0, S = 0, k = 0;
            if (y === m && (S = this.__charBounds[m][v].left), y >= m && y < p)
              k = u && !this.isEndOfWrapping(y) ? this.width : this.getLineWidth(y) || 5;
            else if (y === p)
              if (b === 0)
                k = this.__charBounds[p][b].left;
              else {
                var I = this._getWidthOfCharSpacing();
                k = this.__charBounds[p][b - 1].left + this.__charBounds[p][b - 1].width - I;
              }
            _ = C, (this.lineHeight < 1 || y === p && this.lineHeight > 1) && (C /= this.lineHeight);
            var L = s.left + w + S, j = k - S, G = C, te = 0;
            this.inCompositionMode ? (a.fillStyle = this.compositionColor || "black", G = 1, te = C) : a.fillStyle = this.selectionColor, this.direction === "rtl" && (L = this.width - L - j), a.fillRect(
              L,
              s.top + s.topOffset + te,
              j,
              G
            ), s.topOffset += _;
          }
        },
        /**
         * High level function to know the height of the cursor.
         * the currentChar is the one that precedes the cursor
         * Returns fontSize of char at the current cursor
         * Unused from the library, is for the end user
         * @return {Number} Character font size
         */
        getCurrentCharFontSize: function() {
          var s = this._getCurrentCharIndex();
          return this.getValueOfPropertyAt(s.l, s.c, "fontSize");
        },
        /**
         * High level function to know the color of the cursor.
         * the currentChar is the one that precedes the cursor
         * Returns color (fill) of char at the current cursor
         * if the text object has a pattern or gradient for filler, it will return that.
         * Unused by the library, is for the end user
         * @return {String | fabric.Gradient | fabric.Pattern} Character color (fill)
         */
        getCurrentCharColor: function() {
          var s = this._getCurrentCharIndex();
          return this.getValueOfPropertyAt(s.l, s.c, "fill");
        },
        /**
         * Returns the cursor position for the getCurrent.. functions
         * @private
         */
        _getCurrentCharIndex: function() {
          var s = this.get2DCursorLocation(this.selectionStart, !0), a = s.charIndex > 0 ? s.charIndex - 1 : 0;
          return { l: s.lineIndex, c: a };
        }
      }
    ), e.IText.fromObject = function(s, a) {
      var h = e.util.stylesFromArray(s.styles, s.text), o = Object.assign({}, s, { styles: h });
      if (l(o), o.styles)
        for (var u in o.styles)
          for (var c in o.styles[u])
            l(o.styles[u][c]);
      e.Object._fromObject("IText", o, a, "text");
    };
  }(), function() {
    var l = e.util.object.clone;
    e.util.object.extend(
      e.IText.prototype,
      /** @lends fabric.IText.prototype */
      {
        /**
         * Initializes all the interactive behavior of IText
         */
        initBehavior: function() {
          this.initAddedHandler(), this.initRemovedHandler(), this.initCursorSelectionHandlers(), this.initDoubleClickSimulation(), this.mouseMoveHandler = this.mouseMoveHandler.bind(this);
        },
        onDeselect: function() {
          this.isEditing && this.exitEditing(), this.selected = !1;
        },
        /**
         * Initializes "added" event handler
         */
        initAddedHandler: function() {
          var s = this;
          this.on("added", function() {
            var a = s.canvas;
            a && (a._hasITextHandlers || (a._hasITextHandlers = !0, s._initCanvasHandlers(a)), a._iTextInstances = a._iTextInstances || [], a._iTextInstances.push(s));
          });
        },
        initRemovedHandler: function() {
          var s = this;
          this.on("removed", function() {
            var a = s.canvas;
            a && (a._iTextInstances = a._iTextInstances || [], e.util.removeFromArray(a._iTextInstances, s), a._iTextInstances.length === 0 && (a._hasITextHandlers = !1, s._removeCanvasHandlers(a)));
          });
        },
        /**
         * register canvas event to manage exiting on other instances
         * @private
         */
        _initCanvasHandlers: function(s) {
          s._mouseUpITextHandler = function() {
            s._iTextInstances && s._iTextInstances.forEach(function(a) {
              a.__isMousedown = !1;
            });
          }, s.on("mouse:up", s._mouseUpITextHandler);
        },
        /**
         * remove canvas event to manage exiting on other instances
         * @private
         */
        _removeCanvasHandlers: function(s) {
          s.off("mouse:up", s._mouseUpITextHandler);
        },
        /**
         * @private
         */
        _tick: function() {
          this._currentTickState = this._animateCursor(this, 1, this.cursorDuration, "_onTickComplete");
        },
        /**
         * @private
         */
        _animateCursor: function(s, a, h, o) {
          var u;
          return u = {
            isAborted: !1,
            abort: function() {
              this.isAborted = !0;
            }
          }, s.animate("_currentCursorOpacity", a, {
            duration: h,
            onComplete: function() {
              u.isAborted || s[o]();
            },
            onChange: function() {
              s.canvas && s.selectionStart === s.selectionEnd && s.renderCursorOrSelection();
            },
            abort: function() {
              return u.isAborted;
            }
          }), u;
        },
        /**
         * @private
         */
        _onTickComplete: function() {
          var s = this;
          this._cursorTimeout1 && clearTimeout(this._cursorTimeout1), this._cursorTimeout1 = setTimeout(function() {
            s._currentTickCompleteState = s._animateCursor(s, 0, this.cursorDuration / 2, "_tick");
          }, 100);
        },
        /**
         * Initializes delayed cursor
         */
        initDelayedCursor: function(s) {
          var a = this, h = s ? 0 : this.cursorDelay;
          this.abortCursorAnimation(), this._currentCursorOpacity = 1, this._cursorTimeout2 = setTimeout(function() {
            a._tick();
          }, h);
        },
        /**
         * Aborts cursor animation and clears all timeouts
         */
        abortCursorAnimation: function() {
          var s = this._currentTickState || this._currentTickCompleteState, a = this.canvas;
          this._currentTickState && this._currentTickState.abort(), this._currentTickCompleteState && this._currentTickCompleteState.abort(), clearTimeout(this._cursorTimeout1), clearTimeout(this._cursorTimeout2), this._currentCursorOpacity = 0, s && a && a.clearContext(a.contextTop || a.contextContainer);
        },
        /**
         * Selects entire text
         * @return {fabric.IText} thisArg
         * @chainable
         */
        selectAll: function() {
          return this.selectionStart = 0, this.selectionEnd = this._text.length, this._fireSelectionChanged(), this._updateTextarea(), this;
        },
        /**
         * Returns selected text
         * @return {String}
         */
        getSelectedText: function() {
          return this._text.slice(this.selectionStart, this.selectionEnd).join("");
        },
        /**
         * Find new selection index representing start of current word according to current selection index
         * @param {Number} startFrom Current selection index
         * @return {Number} New selection index
         */
        findWordBoundaryLeft: function(s) {
          var a = 0, h = s - 1;
          if (this._reSpace.test(this._text[h]))
            for (; this._reSpace.test(this._text[h]); )
              a++, h--;
          for (; /\S/.test(this._text[h]) && h > -1; )
            a++, h--;
          return s - a;
        },
        /**
         * Find new selection index representing end of current word according to current selection index
         * @param {Number} startFrom Current selection index
         * @return {Number} New selection index
         */
        findWordBoundaryRight: function(s) {
          var a = 0, h = s;
          if (this._reSpace.test(this._text[h]))
            for (; this._reSpace.test(this._text[h]); )
              a++, h++;
          for (; /\S/.test(this._text[h]) && h < this._text.length; )
            a++, h++;
          return s + a;
        },
        /**
         * Find new selection index representing start of current line according to current selection index
         * @param {Number} startFrom Current selection index
         * @return {Number} New selection index
         */
        findLineBoundaryLeft: function(s) {
          for (var a = 0, h = s - 1; !/\n/.test(this._text[h]) && h > -1; )
            a++, h--;
          return s - a;
        },
        /**
         * Find new selection index representing end of current line according to current selection index
         * @param {Number} startFrom Current selection index
         * @return {Number} New selection index
         */
        findLineBoundaryRight: function(s) {
          for (var a = 0, h = s; !/\n/.test(this._text[h]) && h < this._text.length; )
            a++, h++;
          return s + a;
        },
        /**
         * Finds index corresponding to beginning or end of a word
         * @param {Number} selectionStart Index of a character
         * @param {Number} direction 1 or -1
         * @return {Number} Index of the beginning or end of a word
         */
        searchWordBoundary: function(s, a) {
          for (var h = this._text, o = this._reSpace.test(h[s]) ? s - 1 : s, u = h[o], c = e.reNonWord; !c.test(u) && o > 0 && o < h.length; )
            o += a, u = h[o];
          return c.test(u) && (o += a === 1 ? 0 : 1), o;
        },
        /**
         * Selects a word based on the index
         * @param {Number} selectionStart Index of a character
         */
        selectWord: function(s) {
          s = s || this.selectionStart;
          var a = this.searchWordBoundary(s, -1), h = this.searchWordBoundary(s, 1);
          this.selectionStart = a, this.selectionEnd = h, this._fireSelectionChanged(), this._updateTextarea(), this.renderCursorOrSelection();
        },
        /**
         * Selects a line based on the index
         * @param {Number} selectionStart Index of a character
         * @return {fabric.IText} thisArg
         * @chainable
         */
        selectLine: function(s) {
          s = s || this.selectionStart;
          var a = this.findLineBoundaryLeft(s), h = this.findLineBoundaryRight(s);
          return this.selectionStart = a, this.selectionEnd = h, this._fireSelectionChanged(), this._updateTextarea(), this;
        },
        /**
         * Enters editing state
         * @return {fabric.IText} thisArg
         * @chainable
         */
        enterEditing: function(s) {
          if (!(this.isEditing || !this.editable))
            return this.canvas && (this.canvas.calcOffset(), this.exitEditingOnOthers(this.canvas)), this.isEditing = !0, this.initHiddenTextarea(s), this.hiddenTextarea.focus(), this.hiddenTextarea.value = this.text, this._updateTextarea(), this._saveEditingProps(), this._setEditingProps(), this._textBeforeEdit = this.text, this._tick(), this.fire("editing:entered"), this._fireSelectionChanged(), this.canvas ? (this.canvas.fire("text:editing:entered", { target: this }), this.initMouseMoveHandler(), this.canvas.requestRenderAll(), this) : this;
        },
        exitEditingOnOthers: function(s) {
          s._iTextInstances && s._iTextInstances.forEach(function(a) {
            a.selected = !1, a.isEditing && a.exitEditing();
          });
        },
        /**
         * Initializes "mousemove" event handler
         */
        initMouseMoveHandler: function() {
          this.canvas.on("mouse:move", this.mouseMoveHandler);
        },
        /**
         * @private
         */
        mouseMoveHandler: function(s) {
          if (!(!this.__isMousedown || !this.isEditing)) {
            document.activeElement !== this.hiddenTextarea && this.hiddenTextarea.focus();
            var a = this.getSelectionStartFromPointer(s.e), h = this.selectionStart, o = this.selectionEnd;
            (a !== this.__selectionStartOnMouseDown || h === o) && (h === a || o === a) || (a > this.__selectionStartOnMouseDown ? (this.selectionStart = this.__selectionStartOnMouseDown, this.selectionEnd = a) : (this.selectionStart = a, this.selectionEnd = this.__selectionStartOnMouseDown), (this.selectionStart !== h || this.selectionEnd !== o) && (this.restartCursorIfNeeded(), this._fireSelectionChanged(), this._updateTextarea(), this.renderCursorOrSelection()));
          }
        },
        /**
         * @private
         */
        _setEditingProps: function() {
          this.hoverCursor = "text", this.canvas && (this.canvas.defaultCursor = this.canvas.moveCursor = "text"), this.borderColor = this.editingBorderColor, this.hasControls = this.selectable = !1, this.lockMovementX = this.lockMovementY = !0;
        },
        /**
         * convert from textarea to grapheme indexes
         */
        fromStringToGraphemeSelection: function(s, a, h) {
          var o = h.slice(0, s), u = e.util.string.graphemeSplit(o).length;
          if (s === a)
            return { selectionStart: u, selectionEnd: u };
          var c = h.slice(s, a), d = e.util.string.graphemeSplit(c).length;
          return { selectionStart: u, selectionEnd: u + d };
        },
        /**
         * convert from fabric to textarea values
         */
        fromGraphemeToStringSelection: function(s, a, h) {
          var o = h.slice(0, s), u = o.join("").length;
          if (s === a)
            return { selectionStart: u, selectionEnd: u };
          var c = h.slice(s, a), d = c.join("").length;
          return { selectionStart: u, selectionEnd: u + d };
        },
        /**
         * @private
         */
        _updateTextarea: function() {
          if (this.cursorOffsetCache = {}, !!this.hiddenTextarea) {
            if (!this.inCompositionMode) {
              var s = this.fromGraphemeToStringSelection(this.selectionStart, this.selectionEnd, this._text);
              this.hiddenTextarea.selectionStart = s.selectionStart, this.hiddenTextarea.selectionEnd = s.selectionEnd;
            }
            this.updateTextareaPosition();
          }
        },
        /**
         * @private
         */
        updateFromTextArea: function() {
          if (this.hiddenTextarea) {
            this.cursorOffsetCache = {}, this.text = this.hiddenTextarea.value, this._shouldClearDimensionCache() && (this.initDimensions(), this.setCoords());
            var s = this.fromStringToGraphemeSelection(
              this.hiddenTextarea.selectionStart,
              this.hiddenTextarea.selectionEnd,
              this.hiddenTextarea.value
            );
            this.selectionEnd = this.selectionStart = s.selectionEnd, this.inCompositionMode || (this.selectionStart = s.selectionStart), this.updateTextareaPosition();
          }
        },
        /**
         * @private
         */
        updateTextareaPosition: function() {
          if (this.selectionStart === this.selectionEnd) {
            var s = this._calcTextareaPosition();
            this.hiddenTextarea.style.left = s.left, this.hiddenTextarea.style.top = s.top;
          }
        },
        /**
         * @private
         * @return {Object} style contains style for hiddenTextarea
         */
        _calcTextareaPosition: function() {
          if (!this.canvas)
            return { x: 1, y: 1 };
          var s = this.inCompositionMode ? this.compositionStart : this.selectionStart, a = this._getCursorBoundaries(s), h = this.get2DCursorLocation(s), o = h.lineIndex, u = h.charIndex, c = this.getValueOfPropertyAt(o, u, "fontSize") * this.lineHeight, d = a.leftOffset, m = this.calcTransformMatrix(), p = {
            x: a.left + d,
            y: a.top + a.topOffset + c
          }, v = this.canvas.getRetinaScaling(), b = this.canvas.upperCanvasEl, y = b.width / v, w = b.height / v, C = y - c, _ = w - c, S = b.clientWidth / y, k = b.clientHeight / w;
          return p = e.util.transformPoint(p, m), p = e.util.transformPoint(p, this.canvas.viewportTransform), p.x *= S, p.y *= k, p.x < 0 && (p.x = 0), p.x > C && (p.x = C), p.y < 0 && (p.y = 0), p.y > _ && (p.y = _), p.x += this.canvas._offset.left, p.y += this.canvas._offset.top, { left: p.x + "px", top: p.y + "px", fontSize: c + "px", charHeight: c };
        },
        /**
         * @private
         */
        _saveEditingProps: function() {
          this._savedProps = {
            hasControls: this.hasControls,
            borderColor: this.borderColor,
            lockMovementX: this.lockMovementX,
            lockMovementY: this.lockMovementY,
            hoverCursor: this.hoverCursor,
            selectable: this.selectable,
            defaultCursor: this.canvas && this.canvas.defaultCursor,
            moveCursor: this.canvas && this.canvas.moveCursor
          };
        },
        /**
         * @private
         */
        _restoreEditingProps: function() {
          this._savedProps && (this.hoverCursor = this._savedProps.hoverCursor, this.hasControls = this._savedProps.hasControls, this.borderColor = this._savedProps.borderColor, this.selectable = this._savedProps.selectable, this.lockMovementX = this._savedProps.lockMovementX, this.lockMovementY = this._savedProps.lockMovementY, this.canvas && (this.canvas.defaultCursor = this._savedProps.defaultCursor, this.canvas.moveCursor = this._savedProps.moveCursor));
        },
        /**
         * Exits from editing state
         * @return {fabric.IText} thisArg
         * @chainable
         */
        exitEditing: function() {
          var s = this._textBeforeEdit !== this.text, a = this.hiddenTextarea;
          return this.selected = !1, this.isEditing = !1, this.selectionEnd = this.selectionStart, a && (a.blur && a.blur(), a.parentNode && a.parentNode.removeChild(a)), this.hiddenTextarea = null, this.abortCursorAnimation(), this._restoreEditingProps(), this._currentCursorOpacity = 0, this._shouldClearDimensionCache() && (this.initDimensions(), this.setCoords()), this.fire("editing:exited"), s && this.fire("modified"), this.canvas && (this.canvas.off("mouse:move", this.mouseMoveHandler), this.canvas.fire("text:editing:exited", { target: this }), s && this.canvas.fire("object:modified", { target: this })), this;
        },
        /**
         * @private
         */
        _removeExtraneousStyles: function() {
          for (var s in this.styles)
            this._textLines[s] || delete this.styles[s];
        },
        /**
         * remove and reflow a style block from start to end.
         * @param {Number} start linear start position for removal (included in removal)
         * @param {Number} end linear end position for removal ( excluded from removal )
         */
        removeStyleFromTo: function(s, a) {
          var h = this.get2DCursorLocation(s, !0), o = this.get2DCursorLocation(a, !0), u = h.lineIndex, c = h.charIndex, d = o.lineIndex, m = o.charIndex, p, v;
          if (u !== d) {
            if (this.styles[u])
              for (p = c; p < this._unwrappedTextLines[u].length; p++)
                delete this.styles[u][p];
            if (this.styles[d])
              for (p = m; p < this._unwrappedTextLines[d].length; p++)
                v = this.styles[d][p], v && (this.styles[u] || (this.styles[u] = {}), this.styles[u][c + p - m] = v);
            for (p = u + 1; p <= d; p++)
              delete this.styles[p];
            this.shiftLineStyles(d, u - d);
          } else if (this.styles[u]) {
            v = this.styles[u];
            var b = m - c, y, w;
            for (p = c; p < m; p++)
              delete v[p];
            for (w in this.styles[u])
              y = parseInt(w, 10), y >= m && (v[y - b] = v[w], delete v[w]);
          }
        },
        /**
         * Shifts line styles up or down
         * @param {Number} lineIndex Index of a line
         * @param {Number} offset Can any number?
         */
        shiftLineStyles: function(s, a) {
          var h = l(this.styles);
          for (var o in this.styles) {
            var u = parseInt(o, 10);
            u > s && (this.styles[u + a] = h[u], h[u - a] || delete this.styles[u]);
          }
        },
        restartCursorIfNeeded: function() {
          (!this._currentTickState || this._currentTickState.isAborted || !this._currentTickCompleteState || this._currentTickCompleteState.isAborted) && this.initDelayedCursor();
        },
        /**
         * Handle insertion of more consecutive style lines for when one or more
         * newlines gets added to the text. Since current style needs to be shifted
         * first we shift the current style of the number lines needed, then we add
         * new lines from the last to the first.
         * @param {Number} lineIndex Index of a line
         * @param {Number} charIndex Index of a char
         * @param {Number} qty number of lines to add
         * @param {Array} copiedStyle Array of objects styles
         */
        insertNewlineStyleObject: function(s, a, h, o) {
          var u, c = {}, d = !1, m = this._unwrappedTextLines[s].length === a;
          h || (h = 1), this.shiftLineStyles(s, h), this.styles[s] && (u = this.styles[s][a === 0 ? a : a - 1]);
          for (var p in this.styles[s]) {
            var v = parseInt(p, 10);
            v >= a && (d = !0, c[v - a] = this.styles[s][p], m && a === 0 || delete this.styles[s][p]);
          }
          var b = !1;
          for (d && !m && (this.styles[s + h] = c, b = !0), b && h--; h > 0; )
            o && o[h - 1] ? this.styles[s + h] = { 0: l(o[h - 1]) } : u ? this.styles[s + h] = { 0: l(u) } : delete this.styles[s + h], h--;
          this._forceClearCache = !0;
        },
        /**
         * Inserts style object for a given line/char index
         * @param {Number} lineIndex Index of a line
         * @param {Number} charIndex Index of a char
         * @param {Number} quantity number Style object to insert, if given
         * @param {Array} copiedStyle array of style objects
         */
        insertCharStyleObject: function(s, a, h, o) {
          this.styles || (this.styles = {});
          var u = this.styles[s], c = u ? l(u) : {};
          h || (h = 1);
          for (var d in c) {
            var m = parseInt(d, 10);
            m >= a && (u[m + h] = c[m], c[m - h] || delete u[m]);
          }
          if (this._forceClearCache = !0, o) {
            for (; h--; )
              Object.keys(o[h]).length && (this.styles[s] || (this.styles[s] = {}), this.styles[s][a + h] = l(o[h]));
            return;
          }
          if (u)
            for (var p = u[a ? a - 1 : 1]; p && h--; )
              this.styles[s][a + h] = l(p);
        },
        /**
         * Inserts style object(s)
         * @param {Array} insertedText Characters at the location where style is inserted
         * @param {Number} start cursor index for inserting style
         * @param {Array} [copiedStyle] array of style objects to insert.
         */
        insertNewStyleBlock: function(s, a, h) {
          for (var o = this.get2DCursorLocation(a, !0), u = [0], c = 0, d = 0; d < s.length; d++)
            s[d] === `
` ? (c++, u[c] = 0) : u[c]++;
          u[0] > 0 && (this.insertCharStyleObject(o.lineIndex, o.charIndex, u[0], h), h = h && h.slice(u[0] + 1)), c && this.insertNewlineStyleObject(
            o.lineIndex,
            o.charIndex + u[0],
            c
          );
          for (var d = 1; d < c; d++)
            u[d] > 0 ? this.insertCharStyleObject(o.lineIndex + d, 0, u[d], h) : h && this.styles[o.lineIndex + d] && h[0] && (this.styles[o.lineIndex + d][0] = h[0]), h = h && h.slice(u[d] + 1);
          u[d] > 0 && this.insertCharStyleObject(o.lineIndex + d, 0, u[d], h);
        },
        /**
         * Set the selectionStart and selectionEnd according to the new position of cursor
         * mimic the key - mouse navigation when shift is pressed.
         */
        setSelectionStartEndWithShift: function(s, a, h) {
          h <= s ? (a === s ? this._selectionDirection = "left" : this._selectionDirection === "right" && (this._selectionDirection = "left", this.selectionEnd = s), this.selectionStart = h) : h > s && h < a ? this._selectionDirection === "right" ? this.selectionEnd = h : this.selectionStart = h : (a === s ? this._selectionDirection = "right" : this._selectionDirection === "left" && (this._selectionDirection = "right", this.selectionStart = a), this.selectionEnd = h);
        },
        setSelectionInBoundaries: function() {
          var s = this.text.length;
          this.selectionStart > s ? this.selectionStart = s : this.selectionStart < 0 && (this.selectionStart = 0), this.selectionEnd > s ? this.selectionEnd = s : this.selectionEnd < 0 && (this.selectionEnd = 0);
        }
      }
    );
  }(), e.util.object.extend(
    e.IText.prototype,
    /** @lends fabric.IText.prototype */
    {
      /**
       * Initializes "dbclick" event handler
       */
      initDoubleClickSimulation: function() {
        this.__lastClickTime = +/* @__PURE__ */ new Date(), this.__lastLastClickTime = +/* @__PURE__ */ new Date(), this.__lastPointer = {}, this.on("mousedown", this.onMouseDown);
      },
      /**
       * Default event handler to simulate triple click
       * @private
       */
      onMouseDown: function(l) {
        if (this.canvas) {
          this.__newClickTime = +/* @__PURE__ */ new Date();
          var s = l.pointer;
          this.isTripleClick(s) && (this.fire("tripleclick", l), this._stopEvent(l.e)), this.__lastLastClickTime = this.__lastClickTime, this.__lastClickTime = this.__newClickTime, this.__lastPointer = s, this.__lastIsEditing = this.isEditing, this.__lastSelected = this.selected;
        }
      },
      isTripleClick: function(l) {
        return this.__newClickTime - this.__lastClickTime < 500 && this.__lastClickTime - this.__lastLastClickTime < 500 && this.__lastPointer.x === l.x && this.__lastPointer.y === l.y;
      },
      /**
       * @private
       */
      _stopEvent: function(l) {
        l.preventDefault && l.preventDefault(), l.stopPropagation && l.stopPropagation();
      },
      /**
       * Initializes event handlers related to cursor or selection
       */
      initCursorSelectionHandlers: function() {
        this.initMousedownHandler(), this.initMouseupHandler(), this.initClicks();
      },
      /**
       * Default handler for double click, select a word
       */
      doubleClickHandler: function(l) {
        this.isEditing && this.selectWord(this.getSelectionStartFromPointer(l.e));
      },
      /**
       * Default handler for triple click, select a line
       */
      tripleClickHandler: function(l) {
        this.isEditing && this.selectLine(this.getSelectionStartFromPointer(l.e));
      },
      /**
       * Initializes double and triple click event handlers
       */
      initClicks: function() {
        this.on("mousedblclick", this.doubleClickHandler), this.on("tripleclick", this.tripleClickHandler);
      },
      /**
       * Default event handler for the basic functionalities needed on _mouseDown
       * can be overridden to do something different.
       * Scope of this implementation is: find the click position, set selectionStart
       * find selectionEnd, initialize the drawing of either cursor or selection area
       * initializing a mousedDown on a text area will cancel fabricjs knowledge of
       * current compositionMode. It will be set to false.
       */
      _mouseDownHandler: function(l) {
        !this.canvas || !this.editable || l.e.button && l.e.button !== 1 || (this.__isMousedown = !0, this.selected && (this.inCompositionMode = !1, this.setCursorByClick(l.e)), this.isEditing && (this.__selectionStartOnMouseDown = this.selectionStart, this.selectionStart === this.selectionEnd && this.abortCursorAnimation(), this.renderCursorOrSelection()));
      },
      /**
       * Default event handler for the basic functionalities needed on mousedown:before
       * can be overridden to do something different.
       * Scope of this implementation is: verify the object is already selected when mousing down
       */
      _mouseDownHandlerBefore: function(l) {
        !this.canvas || !this.editable || l.e.button && l.e.button !== 1 || (this.selected = this === this.canvas._activeObject);
      },
      /**
       * Initializes "mousedown" event handler
       */
      initMousedownHandler: function() {
        this.on("mousedown", this._mouseDownHandler), this.on("mousedown:before", this._mouseDownHandlerBefore);
      },
      /**
       * Initializes "mouseup" event handler
       */
      initMouseupHandler: function() {
        this.on("mouseup", this.mouseUpHandler);
      },
      /**
       * standard handler for mouse up, overridable
       * @private
       */
      mouseUpHandler: function(l) {
        if (this.__isMousedown = !1, !(!this.editable || this.group || l.transform && l.transform.actionPerformed || l.e.button && l.e.button !== 1)) {
          if (this.canvas) {
            var s = this.canvas._activeObject;
            if (s && s !== this)
              return;
          }
          this.__lastSelected && !this.__corner ? (this.selected = !1, this.__lastSelected = !1, this.enterEditing(l.e), this.selectionStart === this.selectionEnd ? this.initDelayedCursor(!0) : this.renderCursorOrSelection()) : this.selected = !0;
        }
      },
      /**
       * Changes cursor location in a text depending on passed pointer (x/y) object
       * @param {Event} e Event object
       */
      setCursorByClick: function(l) {
        var s = this.getSelectionStartFromPointer(l), a = this.selectionStart, h = this.selectionEnd;
        l.shiftKey ? this.setSelectionStartEndWithShift(a, h, s) : (this.selectionStart = s, this.selectionEnd = s), this.isEditing && (this._fireSelectionChanged(), this._updateTextarea());
      },
      /**
       * Returns index of a character corresponding to where an object was clicked
       * @param {Event} e Event object
       * @return {Number} Index of a character
       */
      getSelectionStartFromPointer: function(l) {
        for (var s = this.getLocalPointer(l), a = 0, h = 0, o = 0, u = 0, c = 0, d, m, p = 0, v = this._textLines.length; p < v && o <= s.y; p++)
          o += this.getHeightOfLine(p) * this.scaleY, c = p, p > 0 && (u += this._textLines[p - 1].length + this.missingNewlineOffset(p - 1));
        d = this._getLineLeftOffset(c), h = d * this.scaleX, m = this._textLines[c], this.direction === "rtl" && (s.x = this.width * this.scaleX - s.x + h);
        for (var b = 0, y = m.length; b < y && (a = h, h += this.__charBounds[c][b].kernedWidth * this.scaleX, h <= s.x); b++)
          u++;
        return this._getNewSelectionStartFromOffset(s, a, h, u, y);
      },
      /**
       * @private
       */
      _getNewSelectionStartFromOffset: function(l, s, a, h, o) {
        var u = l.x - s, c = a - l.x, d = c > u || c < 0 ? 0 : 1, m = h + d;
        return this.flipX && (m = o - m), m > this._text.length && (m = this._text.length), m;
      }
    }
  ), e.util.object.extend(
    e.IText.prototype,
    /** @lends fabric.IText.prototype */
    {
      /**
       * Initializes hidden textarea (needed to bring up keyboard in iOS)
       */
      initHiddenTextarea: function() {
        this.hiddenTextarea = e.document.createElement("textarea"), this.hiddenTextarea.setAttribute("autocapitalize", "off"), this.hiddenTextarea.setAttribute("autocorrect", "off"), this.hiddenTextarea.setAttribute("autocomplete", "off"), this.hiddenTextarea.setAttribute("spellcheck", "false"), this.hiddenTextarea.setAttribute("data-fabric-hiddentextarea", ""), this.hiddenTextarea.setAttribute("wrap", "off");
        var l = this._calcTextareaPosition();
        this.hiddenTextarea.style.cssText = "position: absolute; top: " + l.top + "; left: " + l.left + "; z-index: -999; opacity: 0; width: 1px; height: 1px; font-size: 1px; padding-top: " + l.fontSize + ";", this.hiddenTextareaContainer ? this.hiddenTextareaContainer.appendChild(this.hiddenTextarea) : e.document.body.appendChild(this.hiddenTextarea), e.util.addListener(this.hiddenTextarea, "keydown", this.onKeyDown.bind(this)), e.util.addListener(this.hiddenTextarea, "keyup", this.onKeyUp.bind(this)), e.util.addListener(this.hiddenTextarea, "input", this.onInput.bind(this)), e.util.addListener(this.hiddenTextarea, "copy", this.copy.bind(this)), e.util.addListener(this.hiddenTextarea, "cut", this.copy.bind(this)), e.util.addListener(this.hiddenTextarea, "paste", this.paste.bind(this)), e.util.addListener(this.hiddenTextarea, "compositionstart", this.onCompositionStart.bind(this)), e.util.addListener(this.hiddenTextarea, "compositionupdate", this.onCompositionUpdate.bind(this)), e.util.addListener(this.hiddenTextarea, "compositionend", this.onCompositionEnd.bind(this)), !this._clickHandlerInitialized && this.canvas && (e.util.addListener(this.canvas.upperCanvasEl, "click", this.onClick.bind(this)), this._clickHandlerInitialized = !0);
      },
      /**
       * For functionalities on keyDown
       * Map a special key to a function of the instance/prototype
       * If you need different behaviour for ESC or TAB or arrows, you have to change
       * this map setting the name of a function that you build on the fabric.Itext or
       * your prototype.
       * the map change will affect all Instances unless you need for only some text Instances
       * in that case you have to clone this object and assign your Instance.
       * this.keysMap = fabric.util.object.clone(this.keysMap);
       * The function must be in fabric.Itext.prototype.myFunction And will receive event as args[0]
       */
      keysMap: {
        9: "exitEditing",
        27: "exitEditing",
        33: "moveCursorUp",
        34: "moveCursorDown",
        35: "moveCursorRight",
        36: "moveCursorLeft",
        37: "moveCursorLeft",
        38: "moveCursorUp",
        39: "moveCursorRight",
        40: "moveCursorDown"
      },
      keysMapRtl: {
        9: "exitEditing",
        27: "exitEditing",
        33: "moveCursorUp",
        34: "moveCursorDown",
        35: "moveCursorLeft",
        36: "moveCursorRight",
        37: "moveCursorRight",
        38: "moveCursorUp",
        39: "moveCursorLeft",
        40: "moveCursorDown"
      },
      /**
       * For functionalities on keyUp + ctrl || cmd
       */
      ctrlKeysMapUp: {
        67: "copy",
        88: "cut"
      },
      /**
       * For functionalities on keyDown + ctrl || cmd
       */
      ctrlKeysMapDown: {
        65: "selectAll"
      },
      onClick: function() {
        this.hiddenTextarea && this.hiddenTextarea.focus();
      },
      /**
       * Handles keydown event
       * only used for arrows and combination of modifier keys.
       * @param {Event} e Event object
       */
      onKeyDown: function(l) {
        if (this.isEditing) {
          var s = this.direction === "rtl" ? this.keysMapRtl : this.keysMap;
          if (l.keyCode in s)
            this[s[l.keyCode]](l);
          else if (l.keyCode in this.ctrlKeysMapDown && (l.ctrlKey || l.metaKey))
            this[this.ctrlKeysMapDown[l.keyCode]](l);
          else
            return;
          l.stopImmediatePropagation(), l.preventDefault(), l.keyCode >= 33 && l.keyCode <= 40 ? (this.inCompositionMode = !1, this.clearContextTop(), this.renderCursorOrSelection()) : this.canvas && this.canvas.requestRenderAll();
        }
      },
      /**
       * Handles keyup event
       * We handle KeyUp because ie11 and edge have difficulties copy/pasting
       * if a copy/cut event fired, keyup is dismissed
       * @param {Event} e Event object
       */
      onKeyUp: function(l) {
        if (!this.isEditing || this._copyDone || this.inCompositionMode) {
          this._copyDone = !1;
          return;
        }
        if (l.keyCode in this.ctrlKeysMapUp && (l.ctrlKey || l.metaKey))
          this[this.ctrlKeysMapUp[l.keyCode]](l);
        else
          return;
        l.stopImmediatePropagation(), l.preventDefault(), this.canvas && this.canvas.requestRenderAll();
      },
      /**
       * Handles onInput event
       * @param {Event} e Event object
       */
      onInput: function(l) {
        var s = this.fromPaste;
        if (this.fromPaste = !1, l && l.stopPropagation(), !!this.isEditing) {
          var a = this._splitTextIntoLines(this.hiddenTextarea.value).graphemeText, h = this._text.length, o = a.length, u, c, d = o - h, m = this.selectionStart, p = this.selectionEnd, v = m !== p, b, y, w;
          if (this.hiddenTextarea.value === "") {
            this.styles = {}, this.updateFromTextArea(), this.fire("changed"), this.canvas && (this.canvas.fire("text:changed", { target: this }), this.canvas.requestRenderAll());
            return;
          }
          var C = this.fromStringToGraphemeSelection(
            this.hiddenTextarea.selectionStart,
            this.hiddenTextarea.selectionEnd,
            this.hiddenTextarea.value
          ), _ = m > C.selectionStart;
          v ? (u = this._text.slice(m, p), d += p - m) : o < h && (_ ? u = this._text.slice(p + d, p) : u = this._text.slice(m, m - d)), c = a.slice(C.selectionEnd - d, C.selectionEnd), u && u.length && (c.length && (b = this.getSelectionStyles(m, m + 1, !1), b = c.map(function() {
            return b[0];
          })), v ? (y = m, w = p) : _ ? (y = p - u.length, w = p) : (y = p, w = p + u.length), this.removeStyleFromTo(y, w)), c.length && (s && c.join("") === e.copiedText && !e.disableStyleCopyPaste && (b = e.copiedTextStyle), this.insertNewStyleBlock(c, m, b)), this.updateFromTextArea(), this.fire("changed"), this.canvas && (this.canvas.fire("text:changed", { target: this }), this.canvas.requestRenderAll());
        }
      },
      /**
       * Composition start
       */
      onCompositionStart: function() {
        this.inCompositionMode = !0;
      },
      /**
       * Composition end
       */
      onCompositionEnd: function() {
        this.inCompositionMode = !1;
      },
      // /**
      //  * Composition update
      //  */
      onCompositionUpdate: function(l) {
        this.compositionStart = l.target.selectionStart, this.compositionEnd = l.target.selectionEnd, this.updateTextareaPosition();
      },
      /**
       * Copies selected text
       * @param {Event} e Event object
       */
      copy: function() {
        this.selectionStart !== this.selectionEnd && (e.copiedText = this.getSelectedText(), e.disableStyleCopyPaste ? e.copiedTextStyle = null : e.copiedTextStyle = this.getSelectionStyles(this.selectionStart, this.selectionEnd, !0), this._copyDone = !0);
      },
      /**
       * Pastes text
       * @param {Event} e Event object
       */
      paste: function() {
        this.fromPaste = !0;
      },
      /**
       * @private
       * @param {Event} e Event object
       * @return {Object} Clipboard data object
       */
      _getClipboardData: function(l) {
        return l && l.clipboardData || e.window.clipboardData;
      },
      /**
       * Finds the width in pixels before the cursor on the same line
       * @private
       * @param {Number} lineIndex
       * @param {Number} charIndex
       * @return {Number} widthBeforeCursor width before cursor
       */
      _getWidthBeforeCursor: function(l, s) {
        var a = this._getLineLeftOffset(l), h;
        return s > 0 && (h = this.__charBounds[l][s - 1], a += h.left + h.width), a;
      },
      /**
       * Gets start offset of a selection
       * @param {Event} e Event object
       * @param {Boolean} isRight
       * @return {Number}
       */
      getDownCursorOffset: function(l, s) {
        var a = this._getSelectionForOffset(l, s), h = this.get2DCursorLocation(a), o = h.lineIndex;
        if (o === this._textLines.length - 1 || l.metaKey || l.keyCode === 34)
          return this._text.length - a;
        var u = h.charIndex, c = this._getWidthBeforeCursor(o, u), d = this._getIndexOnLine(o + 1, c), m = this._textLines[o].slice(u);
        return m.length + d + 1 + this.missingNewlineOffset(o);
      },
      /**
       * private
       * Helps finding if the offset should be counted from Start or End
       * @param {Event} e Event object
       * @param {Boolean} isRight
       * @return {Number}
       */
      _getSelectionForOffset: function(l, s) {
        return l.shiftKey && this.selectionStart !== this.selectionEnd && s ? this.selectionEnd : this.selectionStart;
      },
      /**
       * @param {Event} e Event object
       * @param {Boolean} isRight
       * @return {Number}
       */
      getUpCursorOffset: function(l, s) {
        var a = this._getSelectionForOffset(l, s), h = this.get2DCursorLocation(a), o = h.lineIndex;
        if (o === 0 || l.metaKey || l.keyCode === 33)
          return -a;
        var u = h.charIndex, c = this._getWidthBeforeCursor(o, u), d = this._getIndexOnLine(o - 1, c), m = this._textLines[o].slice(0, u), p = this.missingNewlineOffset(o - 1);
        return -this._textLines[o - 1].length + d - m.length + (1 - p);
      },
      /**
       * for a given width it founds the matching character.
       * @private
       */
      _getIndexOnLine: function(l, s) {
        for (var a = this._textLines[l], h = this._getLineLeftOffset(l), o = h, u = 0, c, d, m = 0, p = a.length; m < p; m++)
          if (c = this.__charBounds[l][m].width, o += c, o > s) {
            d = !0;
            var v = o - c, b = o, y = Math.abs(v - s), w = Math.abs(b - s);
            u = w < y ? m : m - 1;
            break;
          }
        return d || (u = a.length - 1), u;
      },
      /**
       * Moves cursor down
       * @param {Event} e Event object
       */
      moveCursorDown: function(l) {
        this.selectionStart >= this._text.length && this.selectionEnd >= this._text.length || this._moveCursorUpOrDown("Down", l);
      },
      /**
       * Moves cursor up
       * @param {Event} e Event object
       */
      moveCursorUp: function(l) {
        this.selectionStart === 0 && this.selectionEnd === 0 || this._moveCursorUpOrDown("Up", l);
      },
      /**
       * Moves cursor up or down, fires the events
       * @param {String} direction 'Up' or 'Down'
       * @param {Event} e Event object
       */
      _moveCursorUpOrDown: function(l, s) {
        var a = "get" + l + "CursorOffset", h = this[a](s, this._selectionDirection === "right");
        s.shiftKey ? this.moveCursorWithShift(h) : this.moveCursorWithoutShift(h), h !== 0 && (this.setSelectionInBoundaries(), this.abortCursorAnimation(), this._currentCursorOpacity = 1, this.initDelayedCursor(), this._fireSelectionChanged(), this._updateTextarea());
      },
      /**
       * Moves cursor with shift
       * @param {Number} offset
       */
      moveCursorWithShift: function(l) {
        var s = this._selectionDirection === "left" ? this.selectionStart + l : this.selectionEnd + l;
        return this.setSelectionStartEndWithShift(this.selectionStart, this.selectionEnd, s), l !== 0;
      },
      /**
       * Moves cursor up without shift
       * @param {Number} offset
       */
      moveCursorWithoutShift: function(l) {
        return l < 0 ? (this.selectionStart += l, this.selectionEnd = this.selectionStart) : (this.selectionEnd += l, this.selectionStart = this.selectionEnd), l !== 0;
      },
      /**
       * Moves cursor left
       * @param {Event} e Event object
       */
      moveCursorLeft: function(l) {
        this.selectionStart === 0 && this.selectionEnd === 0 || this._moveCursorLeftOrRight("Left", l);
      },
      /**
       * @private
       * @return {Boolean} true if a change happened
       */
      _move: function(l, s, a) {
        var h;
        if (l.altKey)
          h = this["findWordBoundary" + a](this[s]);
        else if (l.metaKey || l.keyCode === 35 || l.keyCode === 36)
          h = this["findLineBoundary" + a](this[s]);
        else
          return this[s] += a === "Left" ? -1 : 1, !0;
        if (typeof h < "u" && this[s] !== h)
          return this[s] = h, !0;
      },
      /**
       * @private
       */
      _moveLeft: function(l, s) {
        return this._move(l, s, "Left");
      },
      /**
       * @private
       */
      _moveRight: function(l, s) {
        return this._move(l, s, "Right");
      },
      /**
       * Moves cursor left without keeping selection
       * @param {Event} e
       */
      moveCursorLeftWithoutShift: function(l) {
        var s = !0;
        return this._selectionDirection = "left", this.selectionEnd === this.selectionStart && this.selectionStart !== 0 && (s = this._moveLeft(l, "selectionStart")), this.selectionEnd = this.selectionStart, s;
      },
      /**
       * Moves cursor left while keeping selection
       * @param {Event} e
       */
      moveCursorLeftWithShift: function(l) {
        if (this._selectionDirection === "right" && this.selectionStart !== this.selectionEnd)
          return this._moveLeft(l, "selectionEnd");
        if (this.selectionStart !== 0)
          return this._selectionDirection = "left", this._moveLeft(l, "selectionStart");
      },
      /**
       * Moves cursor right
       * @param {Event} e Event object
       */
      moveCursorRight: function(l) {
        this.selectionStart >= this._text.length && this.selectionEnd >= this._text.length || this._moveCursorLeftOrRight("Right", l);
      },
      /**
       * Moves cursor right or Left, fires event
       * @param {String} direction 'Left', 'Right'
       * @param {Event} e Event object
       */
      _moveCursorLeftOrRight: function(l, s) {
        var a = "moveCursor" + l + "With";
        this._currentCursorOpacity = 1, s.shiftKey ? a += "Shift" : a += "outShift", this[a](s) && (this.abortCursorAnimation(), this.initDelayedCursor(), this._fireSelectionChanged(), this._updateTextarea());
      },
      /**
       * Moves cursor right while keeping selection
       * @param {Event} e
       */
      moveCursorRightWithShift: function(l) {
        if (this._selectionDirection === "left" && this.selectionStart !== this.selectionEnd)
          return this._moveRight(l, "selectionStart");
        if (this.selectionEnd !== this._text.length)
          return this._selectionDirection = "right", this._moveRight(l, "selectionEnd");
      },
      /**
       * Moves cursor right without keeping selection
       * @param {Event} e Event object
       */
      moveCursorRightWithoutShift: function(l) {
        var s = !0;
        return this._selectionDirection = "right", this.selectionStart === this.selectionEnd ? (s = this._moveRight(l, "selectionStart"), this.selectionEnd = this.selectionStart) : this.selectionStart = this.selectionEnd, s;
      },
      /**
       * Removes characters from start/end
       * start/end ar per grapheme position in _text array.
       *
       * @param {Number} start
       * @param {Number} end default to start + 1
       */
      removeChars: function(l, s) {
        typeof s > "u" && (s = l + 1), this.removeStyleFromTo(l, s), this._text.splice(l, s - l), this.text = this._text.join(""), this.set("dirty", !0), this._shouldClearDimensionCache() && (this.initDimensions(), this.setCoords()), this._removeExtraneousStyles();
      },
      /**
       * insert characters at start position, before start position.
       * start  equal 1 it means the text get inserted between actual grapheme 0 and 1
       * if style array is provided, it must be as the same length of text in graphemes
       * if end is provided and is bigger than start, old text is replaced.
       * start/end ar per grapheme position in _text array.
       *
       * @param {String} text text to insert
       * @param {Array} style array of style objects
       * @param {Number} start
       * @param {Number} end default to start + 1
       */
      insertChars: function(l, s, a, h) {
        typeof h > "u" && (h = a), h > a && this.removeStyleFromTo(a, h);
        var o = e.util.string.graphemeSplit(l);
        this.insertNewStyleBlock(o, a, s), this._text = [].concat(this._text.slice(0, a), o, this._text.slice(h)), this.text = this._text.join(""), this.set("dirty", !0), this._shouldClearDimensionCache() && (this.initDimensions(), this.setCoords()), this._removeExtraneousStyles();
      }
    }
  ), function() {
    var l = e.util.toFixed, s = /  +/g;
    e.util.object.extend(
      e.Text.prototype,
      /** @lends fabric.Text.prototype */
      {
        /**
         * Returns SVG representation of an instance
         * @param {Function} [reviver] Method for further parsing of svg representation.
         * @return {String} svg representation of an instance
         */
        _toSVG: function() {
          var a = this._getSVGLeftTopOffsets(), h = this._getSVGTextAndBg(a.textTop, a.textLeft);
          return this._wrapSVGTextAndBg(h);
        },
        /**
         * Returns svg representation of an instance
         * @param {Function} [reviver] Method for further parsing of svg representation.
         * @return {String} svg representation of an instance
         */
        toSVG: function(a) {
          return this._createBaseSVGMarkup(
            this._toSVG(),
            { reviver: a, noStyle: !0, withShadow: !0 }
          );
        },
        /**
         * @private
         */
        _getSVGLeftTopOffsets: function() {
          return {
            textLeft: -this.width / 2,
            textTop: -this.height / 2,
            lineTop: this.getHeightOfLine(0)
          };
        },
        /**
         * @private
         */
        _wrapSVGTextAndBg: function(a) {
          var h = !0, o = this.getSvgTextDecoration(this);
          return [
            a.textBgRects.join(""),
            '		<text xml:space="preserve" ',
            this.fontFamily ? 'font-family="' + this.fontFamily.replace(/"/g, "'") + '" ' : "",
            this.fontSize ? 'font-size="' + this.fontSize + '" ' : "",
            this.fontStyle ? 'font-style="' + this.fontStyle + '" ' : "",
            this.fontWeight ? 'font-weight="' + this.fontWeight + '" ' : "",
            o ? 'text-decoration="' + o + '" ' : "",
            'style="',
            this.getSvgStyles(h),
            '"',
            this.addPaintOrder(),
            " >",
            a.textSpans.join(""),
            `</text>
`
          ];
        },
        /**
         * @private
         * @param {Number} textTopOffset Text top offset
         * @param {Number} textLeftOffset Text left offset
         * @return {Object}
         */
        _getSVGTextAndBg: function(a, h) {
          var o = [], u = [], c = a, d;
          this._setSVGBg(u);
          for (var m = 0, p = this._textLines.length; m < p; m++)
            d = this._getLineLeftOffset(m), (this.textBackgroundColor || this.styleHas("textBackgroundColor", m)) && this._setSVGTextLineBg(u, m, h + d, c), this._setSVGTextLineText(o, m, h + d, c), c += this.getHeightOfLine(m);
          return {
            textSpans: o,
            textBgRects: u
          };
        },
        /**
         * @private
         */
        _createTextCharSpan: function(a, h, o, u) {
          var c = a !== a.trim() || a.match(s), d = this.getSvgSpanStyles(h, c), m = d ? 'style="' + d + '"' : "", p = h.deltaY, v = "", b = e.Object.NUM_FRACTION_DIGITS;
          return p && (v = ' dy="' + l(p, b) + '" '), [
            '<tspan x="',
            l(o, b),
            '" y="',
            l(u, b),
            '" ',
            v,
            m,
            ">",
            e.util.string.escapeXml(a),
            "</tspan>"
          ].join("");
        },
        _setSVGTextLineText: function(a, h, o, u) {
          var c = this.getHeightOfLine(h), d = this.textAlign.indexOf("justify") !== -1, m, p, v = "", b, y, w = 0, C = this._textLines[h], _;
          u += c * (1 - this._fontSizeFraction) / this.lineHeight;
          for (var S = 0, k = C.length - 1; S <= k; S++)
            _ = S === k || this.charSpacing, v += C[S], b = this.__charBounds[h][S], w === 0 ? (o += b.kernedWidth - b.width, w += b.width) : w += b.kernedWidth, d && !_ && this._reSpaceAndTab.test(C[S]) && (_ = !0), _ || (m = m || this.getCompleteStyleDeclaration(h, S), p = this.getCompleteStyleDeclaration(h, S + 1), _ = e.util.hasStyleChanged(m, p, !0)), _ && (y = this._getStyleDeclaration(h, S) || {}, a.push(this._createTextCharSpan(v, y, o, u)), v = "", m = p, o += w, w = 0);
        },
        _pushTextBgRect: function(a, h, o, u, c, d) {
          var m = e.Object.NUM_FRACTION_DIGITS;
          a.push(
            "		<rect ",
            this._getFillAttributes(h),
            ' x="',
            l(o, m),
            '" y="',
            l(u, m),
            '" width="',
            l(c, m),
            '" height="',
            l(d, m),
            `"></rect>
`
          );
        },
        _setSVGTextLineBg: function(a, h, o, u) {
          for (var c = this._textLines[h], d = this.getHeightOfLine(h) / this.lineHeight, m = 0, p = 0, v, b, y = this.getValueOfPropertyAt(h, 0, "textBackgroundColor"), w = 0, C = c.length; w < C; w++)
            v = this.__charBounds[h][w], b = this.getValueOfPropertyAt(h, w, "textBackgroundColor"), b !== y ? (y && this._pushTextBgRect(
              a,
              y,
              o + p,
              u,
              m,
              d
            ), p = v.left, m = v.width, y = b) : m += v.kernedWidth;
          b && this._pushTextBgRect(
            a,
            b,
            o + p,
            u,
            m,
            d
          );
        },
        /**
         * Adobe Illustrator (at least CS5) is unable to render rgba()-based fill values
         * we work around it by "moving" alpha channel into opacity attribute and setting fill's alpha to 1
         *
         * @private
         * @param {*} value
         * @return {String}
         */
        _getFillAttributes: function(a) {
          var h = a && typeof a == "string" ? new e.Color(a) : "";
          return !h || !h.getSource() || h.getAlpha() === 1 ? 'fill="' + a + '"' : 'opacity="' + h.getAlpha() + '" fill="' + h.setAlpha(1).toRgb() + '"';
        },
        /**
         * @private
         */
        _getSVGLineTopOffset: function(a) {
          for (var h = 0, o = 0, u = 0; u < a; u++)
            h += this.getHeightOfLine(u);
          return o = this.getHeightOfLine(u), {
            lineTop: h,
            offset: (this._fontSizeMult - this._fontSizeFraction) * o / (this.lineHeight * this._fontSizeMult)
          };
        },
        /**
         * Returns styles-string for svg-export
         * @param {Boolean} skipShadow a boolean to skip shadow filter output
         * @return {String}
         */
        getSvgStyles: function(a) {
          var h = e.Object.prototype.getSvgStyles.call(this, a);
          return h + " white-space: pre;";
        }
      }
    );
  }(), function(l) {
    var s = l.fabric || (l.fabric = {});
    s.Textbox = s.util.createClass(s.IText, s.Observable, {
      /**
       * Type of an object
       * @type String
       * @default
       */
      type: "textbox",
      /**
       * Minimum width of textbox, in pixels.
       * @type Number
       * @default
       */
      minWidth: 20,
      /**
       * Minimum calculated width of a textbox, in pixels.
       * fixed to 2 so that an empty textbox cannot go to 0
       * and is still selectable without text.
       * @type Number
       * @default
       */
      dynamicMinWidth: 2,
      /**
       * Cached array of text wrapping.
       * @type Array
       */
      __cachedLines: null,
      /**
       * Override standard Object class values
       */
      lockScalingFlip: !0,
      /**
       * Override standard Object class values
       * Textbox needs this on false
       */
      noScaleCache: !1,
      /**
       * Properties which when set cause object to change dimensions
       * @type Object
       * @private
       */
      _dimensionAffectingProps: s.Text.prototype._dimensionAffectingProps.concat("width"),
      /**
       * Use this regular expression to split strings in breakable lines
       * @private
       */
      _wordJoiners: /[ \t\r]/,
      /**
       * Use this boolean property in order to split strings that have no white space concept.
       * this is a cheap way to help with chinese/japanese
       * @type Boolean
       * @since 2.6.0
       */
      splitByGrapheme: !1,
      /**
       * Unlike superclass's version of this function, Textbox does not update
       * its width.
       * @private
       * @override
       */
      initDimensions: function() {
        this.__skipDimension || (this.isEditing && this.initDelayedCursor(), this.clearContextTop(), this._clearCache(), this.dynamicMinWidth = 0, this._styleMap = this._generateStyleMap(this._splitText()), this.dynamicMinWidth > this.width && this._set("width", this.dynamicMinWidth), this.textAlign.indexOf("justify") !== -1 && this.enlargeSpaces(), this.height = this.calcTextHeight(), this.saveState({ propertySet: "_dimensionAffectingProps" }));
      },
      /**
       * Generate an object that translates the style object so that it is
       * broken up by visual lines (new lines and automatic wrapping).
       * The original text styles object is broken up by actual lines (new lines only),
       * which is only sufficient for Text / IText
       * @private
       */
      _generateStyleMap: function(a) {
        for (var h = 0, o = 0, u = 0, c = {}, d = 0; d < a.graphemeLines.length; d++)
          a.graphemeText[u] === `
` && d > 0 ? (o = 0, u++, h++) : !this.splitByGrapheme && this._reSpaceAndTab.test(a.graphemeText[u]) && d > 0 && (o++, u++), c[d] = { line: h, offset: o }, u += a.graphemeLines[d].length, o += a.graphemeLines[d].length;
        return c;
      },
      /**
       * Returns true if object has a style property or has it on a specified line
       * @param {Number} lineIndex
       * @return {Boolean}
       */
      styleHas: function(a, h) {
        if (this._styleMap && !this.isWrapping) {
          var o = this._styleMap[h];
          o && (h = o.line);
        }
        return s.Text.prototype.styleHas.call(this, a, h);
      },
      /**
       * Returns true if object has no styling or no styling in a line
       * @param {Number} lineIndex , lineIndex is on wrapped lines.
       * @return {Boolean}
       */
      isEmptyStyles: function(a) {
        if (!this.styles)
          return !0;
        var h = 0, o = a + 1, u, c, d = !1, m = this._styleMap[a], p = this._styleMap[a + 1];
        m && (a = m.line, h = m.offset), p && (o = p.line, d = o === a, u = p.offset), c = typeof a > "u" ? this.styles : { line: this.styles[a] };
        for (var v in c)
          for (var b in c[v])
            if (b >= h && (!d || b < u))
              for (var y in c[v][b])
                return !1;
        return !0;
      },
      /**
       * @param {Number} lineIndex
       * @param {Number} charIndex
       * @private
       */
      _getStyleDeclaration: function(a, h) {
        if (this._styleMap && !this.isWrapping) {
          var o = this._styleMap[a];
          if (!o)
            return null;
          a = o.line, h = o.offset + h;
        }
        return this.callSuper("_getStyleDeclaration", a, h);
      },
      /**
       * @param {Number} lineIndex
       * @param {Number} charIndex
       * @param {Object} style
       * @private
       */
      _setStyleDeclaration: function(a, h, o) {
        var u = this._styleMap[a];
        a = u.line, h = u.offset + h, this.styles[a][h] = o;
      },
      /**
       * @param {Number} lineIndex
       * @param {Number} charIndex
       * @private
       */
      _deleteStyleDeclaration: function(a, h) {
        var o = this._styleMap[a];
        a = o.line, h = o.offset + h, delete this.styles[a][h];
      },
      /**
       * probably broken need a fix
       * Returns the real style line that correspond to the wrapped lineIndex line
       * Used just to verify if the line does exist or not.
       * @param {Number} lineIndex
       * @returns {Boolean} if the line exists or not
       * @private
       */
      _getLineStyle: function(a) {
        var h = this._styleMap[a];
        return !!this.styles[h.line];
      },
      /**
       * Set the line style to an empty object so that is initialized
       * @param {Number} lineIndex
       * @param {Object} style
       * @private
       */
      _setLineStyle: function(a) {
        var h = this._styleMap[a];
        this.styles[h.line] = {};
      },
      /**
       * Wraps text using the 'width' property of Textbox. First this function
       * splits text on newlines, so we preserve newlines entered by the user.
       * Then it wraps each line using the width of the Textbox by calling
       * _wrapLine().
       * @param {Array} lines The string array of text that is split into lines
       * @param {Number} desiredWidth width you want to wrap to
       * @returns {Array} Array of lines
       */
      _wrapText: function(a, h) {
        var o = [], u;
        for (this.isWrapping = !0, u = 0; u < a.length; u++)
          o = o.concat(this._wrapLine(a[u], u, h));
        return this.isWrapping = !1, o;
      },
      /**
       * Helper function to measure a string of text, given its lineIndex and charIndex offset
       * it gets called when charBounds are not available yet.
       * @param {CanvasRenderingContext2D} ctx
       * @param {String} text
       * @param {number} lineIndex
       * @param {number} charOffset
       * @returns {number}
       * @private
       */
      _measureWord: function(a, h, o) {
        var u = 0, c, d = !0;
        o = o || 0;
        for (var m = 0, p = a.length; m < p; m++) {
          var v = this._getGraphemeBox(a[m], h, m + o, c, d);
          u += v.kernedWidth, c = a[m];
        }
        return u;
      },
      /**
       * Wraps a line of text using the width of the Textbox and a context.
       * @param {Array} line The grapheme array that represent the line
       * @param {Number} lineIndex
       * @param {Number} desiredWidth width you want to wrap the line to
       * @param {Number} reservedSpace space to remove from wrapping for custom functionalities
       * @returns {Array} Array of line(s) into which the given text is wrapped
       * to.
       */
      _wrapLine: function(a, h, o, L) {
        var c = 0, d = this.splitByGrapheme, m = [], p = [], v = d ? s.util.string.graphemeSplit(a) : a.split(this._wordJoiners), b = "", y = 0, w = d ? "" : " ", C = 0, _ = 0, S = 0, k = !0, I = this._getWidthOfCharSpacing(), L = L || 0;
        v.length === 0 && v.push([]), o -= L;
        for (var j = 0; j < v.length; j++)
          b = d ? v[j] : s.util.string.graphemeSplit(v[j]), C = this._measureWord(b, h, y), y += b.length, c += _ + C - I, c > o && !k ? (m.push(p), p = [], c = C, k = !0) : c += I, !k && !d && p.push(w), p = p.concat(b), _ = d ? 0 : this._measureWord([w], h, y), y++, k = !1, C > S && (S = C);
        return j && m.push(p), S + L > this.dynamicMinWidth && (this.dynamicMinWidth = S - I + L), m;
      },
      /**
       * Detect if the text line is ended with an hard break
       * text and itext do not have wrapping, return false
       * @param {Number} lineIndex text to split
       * @return {Boolean}
       */
      isEndOfWrapping: function(a) {
        return !this._styleMap[a + 1] || this._styleMap[a + 1].line !== this._styleMap[a].line;
      },
      /**
       * Detect if a line has a linebreak and so we need to account for it when moving
       * and counting style.
       * @return Number
       */
      missingNewlineOffset: function(a) {
        return this.splitByGrapheme ? this.isEndOfWrapping(a) ? 1 : 0 : 1;
      },
      /**
      * Gets lines of text to render in the Textbox. This function calculates
      * text wrapping on the fly every time it is called.
      * @param {String} text text to split
      * @returns {Array} Array of lines in the Textbox.
      * @override
      */
      _splitTextIntoLines: function(a) {
        for (var h = s.Text.prototype._splitTextIntoLines.call(this, a), o = this._wrapText(h.lines, this.width), u = new Array(o.length), c = 0; c < o.length; c++)
          u[c] = o[c].join("");
        return h.lines = u, h.graphemeLines = o, h;
      },
      getMinWidth: function() {
        return Math.max(this.minWidth, this.dynamicMinWidth);
      },
      _removeExtraneousStyles: function() {
        var a = {};
        for (var h in this._styleMap)
          this._textLines[h] && (a[this._styleMap[h].line] = 1);
        for (var h in this.styles)
          a[h] || delete this.styles[h];
      },
      /**
       * Returns object representation of an instance
       * @method toObject
       * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output
       * @return {Object} object representation of an instance
       */
      toObject: function(a) {
        return this.callSuper("toObject", ["minWidth", "splitByGrapheme"].concat(a));
      }
    }), s.Textbox.fromObject = function(a, h) {
      var o = s.util.stylesFromArray(a.styles, a.text), u = Object.assign({}, a, { styles: o });
      return s.Object._fromObject("Textbox", u, h, "text");
    };
  }(t), function() {
    var l = e.controlsUtils, s = l.scaleSkewCursorStyleHandler, a = l.scaleCursorStyleHandler, h = l.scalingEqually, o = l.scalingYOrSkewingX, u = l.scalingXOrSkewingY, c = l.scaleOrSkewActionName, d = e.Object.prototype.controls;
    if (d.ml = new e.Control({
      x: -0.5,
      y: 0,
      cursorStyleHandler: s,
      actionHandler: u,
      getActionName: c
    }), d.mr = new e.Control({
      x: 0.5,
      y: 0,
      cursorStyleHandler: s,
      actionHandler: u,
      getActionName: c
    }), d.mb = new e.Control({
      x: 0,
      y: 0.5,
      cursorStyleHandler: s,
      actionHandler: o,
      getActionName: c
    }), d.mt = new e.Control({
      x: 0,
      y: -0.5,
      cursorStyleHandler: s,
      actionHandler: o,
      getActionName: c
    }), d.tl = new e.Control({
      x: -0.5,
      y: -0.5,
      cursorStyleHandler: a,
      actionHandler: h
    }), d.tr = new e.Control({
      x: 0.5,
      y: -0.5,
      cursorStyleHandler: a,
      actionHandler: h
    }), d.bl = new e.Control({
      x: -0.5,
      y: 0.5,
      cursorStyleHandler: a,
      actionHandler: h
    }), d.br = new e.Control({
      x: 0.5,
      y: 0.5,
      cursorStyleHandler: a,
      actionHandler: h
    }), d.mtr = new e.Control({
      x: 0,
      y: -0.5,
      actionHandler: l.rotationWithSnapping,
      cursorStyleHandler: l.rotationStyleHandler,
      offsetY: -40,
      withConnection: !0,
      actionName: "rotate"
    }), e.Textbox) {
      var m = e.Textbox.prototype.controls = {};
      m.mtr = d.mtr, m.tr = d.tr, m.br = d.br, m.tl = d.tl, m.bl = d.bl, m.mt = d.mt, m.mb = d.mb, m.mr = new e.Control({
        x: 0.5,
        y: 0,
        actionHandler: l.changeWidth,
        cursorStyleHandler: s,
        actionName: "resizing"
      }), m.ml = new e.Control({
        x: -0.5,
        y: 0,
        actionHandler: l.changeWidth,
        cursorStyleHandler: s,
        actionName: "resizing"
      });
    }
  }();
})(we);
const Sg = {
  lockScalingFlip: !0,
  originY: "center",
  originX: "center",
  lockMovementX: !0,
  lockMovementY: !0,
  borderColor: "transparent"
};
function nc(t = 36) {
  let e = "";
  const n = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
  for (let r = 0; r < t; r += 1)
    e += n.charAt(Math.floor(Math.random() * n.length));
  return e;
}
function GS(t) {
  var g;
  const e = new we.fabric.Canvas(t, { width: 1, height: 1 });
  e.preserveObjectStacking = !0, e.selection = !1, e.renderOnAddRemove = !1;
  const n = O().config.textureSize;
  n && (we.fabric.textureSize = n);
  const i = {
    ...(g = O().config.objectDefaults) == null ? void 0 : g.global,
    ...Sg
  };
  Object.keys(i).forEach((l) => {
    we.fabric.Object.prototype[l] = i[l];
  }), e.on("object:added", (l) => {
    var s, a;
    l.target && !((a = (s = l.target) == null ? void 0 : s.data) != null && a.id) && (l.target.data || (l.target.data = {}), l.target.data.id = nc(10));
  });
  const f = we.fabric.Object.prototype.controls;
  return Object.keys(f).forEach((l) => {
    delete f[l];
  }), e;
}
let Fi = null;
function Dr(t) {
  Fi = t;
}
class KS {
  constructor() {
    Te(this, "maxZoom", 2);
    Te(this, "minZoom", 1);
    Te(this, "step", 0.05);
    this.allowUserZoom && this.bindMouseWheel(), ue.subscribe(
      (e) => e.stageSize,
      () => {
        setTimeout(() => {
          this.fitToScreen();
        }, 1);
      }
    );
  }
  get allowUserZoom() {
    var e, n, r;
    return ((r = (n = (e = O().config) == null ? void 0 : e.tools) == null ? void 0 : n.zoom) == null ? void 0 : r.allowUserZoom) ?? !0;
  }
  get currentZoom() {
    return O().zoom;
  }
  zoomIn(e = this.step) {
    this.set(this.currentZoom + e);
  }
  canZoomIn(e = this.step) {
    return this.currentZoom + e <= this.maxZoom;
  }
  canZoomOut(e = this.step) {
    return this.currentZoom - e >= this.minZoom;
  }
  zoomOut(e = this.step) {
    this.set(this.currentZoom - e);
  }
  /**
   * Zoom canvas to specified scale.
   */
  set(e, n = !0) {
    if (e < this.minZoom || e > this.maxZoom)
      return;
    const r = la.round(O().original.width * e, 0), i = la.round(O().original.height * e, 0);
    he().setZoom(e), n && he().setDimensions({ width: r, height: i }), O().setZoom(e);
  }
  /**
   * Resize canvas to fit available screen space.
   */
  fitToScreen() {
    var f, g;
    if (!((g = (f = O().config.tools) == null ? void 0 : f.zoom) != null && g.fitImageToScreen))
      return;
    const { width: e, height: n } = O().stageSize, r = Math.max(n, 1), i = Math.max(e, 1);
    if (O().original.height > r || O().original.width > i) {
      const l = Math.min(
        r / O().original.height,
        i / O().original.width
      );
      this.minZoom = Math.min(l, 1);
    } else
      this.minZoom = 1;
    this.set(this.minZoom);
  }
  bindMouseWheel() {
    he().on("mouse:wheel", (e) => {
      e.e.preventDefault(), e.e.stopPropagation(), Fi == null && (e.e.deltaY < 0 ? this.zoomIn() : this.zoomOut());
    });
  }
}
function Tg(t) {
  return new Promise((e) => {
    we.fabric.util.loadImage(
      t,
      (n) => e(new we.fabric.Image(n)),
      null,
      O().config.crossOrigin ? "anonymous" : void 0
    );
  });
}
function Eg() {
  return !O().config.image && !O().config.blankCanvasSize && (!he() || he().getObjects().length === 0);
}
class qS {
  constructor() {
    Te(this, "minWidth", 50);
    Te(this, "minHeight", 50);
  }
  resize(e, n, {
    applyZoom: r = !1,
    resizeHelper: i = !0
  } = {}) {
    const f = O().zoom;
    he().setWidth(e * (r ? f : 1)), he().setHeight(n * (r ? f : 1)), O().setOriginal(e, n), i && R().transform.resetStraightenAnchor();
  }
  async addMainImage(e, n = "mainImage") {
    var i, f;
    O().toggleLoading(n);
    const r = await Tg(e);
    if (r)
      return this.clear(), r.set(Zn), r.name = Ve.MainImage, he().add(r), this.resize(r.width, r.height), r.center(), r.setCoords(), R().zoom.fitToScreen(), O().toggleLoading(!1), (f = (i = O().config).onMainImageLoaded) == null || f.call(i, r), r;
  }
  openNew(e, n, r) {
    return e = Math.max(this.minWidth, e), n = Math.max(this.minHeight, n), this.clear(), this.resize(e, n), he().backgroundColor = r, R().zoom.fitToScreen(), O().toggleLoading("newCanvas"), requestAnimationFrame(() => {
      O().toggleLoading(!1);
    }), Promise.resolve({ width: e, height: n });
  }
  /**
   * Get main image object, if it exists.
   */
  getMainImage() {
    return he().getObjects().find((e) => e.name === Ve.MainImage);
  }
  render() {
    he().requestRenderAll();
  }
  async loadInitialContent() {
    var i, f;
    const e = O().config.image, n = O().config.blankCanvasSize, r = O().config.state;
    if (e && e.endsWith("json")) {
      const g = await no(e);
      await R().import.loadState(g);
    } else
      e && e.startsWith('{"canvas') ? await R().import.loadState(e) : e ? await this.addMainImage(e) : r ? await R().import.loadState(r) : n && await this.openNew(n.width, n.height);
    return Eg() && ((f = (i = O().config.ui) == null ? void 0 : i.openImageDialog) != null && f.show) && O().togglePanel("newImage", !0), new Promise((g) => {
      setTimeout(() => {
        R().history.addInitial(), g();
      }, 10);
    });
  }
  clear() {
    he().clear(), R().frame.remove(), R().transform.resetStraightenAnchor();
  }
}
function ZS(t) {
  return t.name === Ve.Sticker && "forEachObject" in t;
}
const JS = [
  "fontSize",
  "fontFamily",
  "left",
  "top",
  "width",
  "height",
  "scaleX",
  "scaleY",
  "flipX",
  "flipY",
  "angle",
  "src",
  "strokeWidth"
];
function kg(t = {}) {
  he().fire("object:modified", QS(t));
}
function QS(t) {
  return {
    values: t,
    sizeOrPositionChanged: e4(t)
  };
}
function e4(t) {
  return Object.keys(t).some(
    (e) => JS.includes(e)
  );
}
function t4() {
  O().fabric.on("selection:created", (t) => {
    var e;
    (e = t.selected) != null && e[0] && !rh(t) && Xo(t.selected[0]);
  }), O().fabric.on("selection:updated", (t) => {
    var e;
    rh(t) || Xo((e = t.selected) == null ? void 0 : e[0]);
  }), O().fabric.on("selection:cleared", () => {
    Xo();
  });
}
function rh(t) {
  var r, i;
  const [e] = up((r = t.selected) == null ? void 0 : r[0]), n = e === O().activeTool;
  return O().dirty && (!((i = t.selected) != null && i[0]) || !n) ? (t.deselected && R().objects.select(t.deselected[0]), !0) : !1;
}
function Xo(t) {
  (t == null ? void 0 : t.data.id) !== O().objects.active.id && (O().objects.setActive(t ?? null), O().activeTool !== Me.DRAW && Rl());
}
class n4 {
  constructor() {
    this.syncObjects(), t4(), O().fabric.on("text:editing:entered", () => {
      O().objects.setIsEditingText(!0);
    }), O().fabric.on("text:editing:exited", () => {
      O().objects.setIsEditingText(!1);
    }), O().fabric.on("object:added", () => {
      this.syncObjects();
    }), O().fabric.on("object:removed", () => {
      this.syncObjects();
    });
  }
  /**
   * Get all objects that are currently on canvas.
   */
  getAll() {
    return he().getObjects().filter((e) => {
      var n;
      return !((n = e == null ? void 0 : e.data) != null && n.pixieInternal);
    });
  }
  /**
   * Get object with specified name from canvas.
   */
  get(e) {
    return this.getAll().find((n) => n.name === e);
  }
  /**
   * Get object with specified id from canvas.
   */
  getById(e) {
    return this.getAll().find((n) => n.data.id === e);
  }
  /**
   * Check whether specified object is currently selected.
   */
  isActive(e) {
    var r;
    const n = typeof e == "string" ? e : e.data.id;
    return ((r = O().objects.active) == null ? void 0 : r.id) === n;
  }
  /**
   * Get currently active object.
   */
  getActive() {
    return he().getActiveObject();
  }
  /**
   * Check if object with specified name exists on canvas.
   */
  has(e) {
    return this.getAll().findIndex((n) => n.name === e) > -1;
  }
  /**
   * Select specified object.
   */
  select(e) {
    const n = typeof e == "string" ? this.getById(e) : e;
    n && (he().setActiveObject(n), he().requestRenderAll());
  }
  /**
   * Deselect currently active object.
   */
  deselectActive() {
    he().discardActiveObject(), he().requestRenderAll();
  }
  /**
   * Apply values to specified or currently active object.
   */
  setValues(e, n) {
    if (n = n || this.getActive(), !n)
      return;
    let r = !1;
    ZS(n) && e.fill && e.fill !== n.fill && n.forEachObject((i) => i.set("fill", e.fill)), Tn(n) ? ((e.fontFamily !== n.fontFamily || e.fontSize !== n.fontSize) && (r = !0), n.selectionStart !== n.selectionEnd ? n.setSelectionStyles(e) : n.set(e)) : n.set(e), r ? setTimeout(() => {
      he().requestRenderAll();
    }, 50) : he().requestRenderAll(), O().objects.setActive(n), kg(e);
  }
  /**
   * Move specified or currently active object in given direction.
   */
  move(e, n = 1, r) {
    r = r || this.getActive(), r && (e === "up" ? this.setValues({ top: r.top - n }) : e === "down" ? this.setValues({ top: r.top + n }) : e === "left" ? this.setValues({ left: r.left - n }) : e === "right" && this.setValues({ left: r.left + n }), R().canvas.render());
  }
  /**
   * Bring specified or currently active object to front of canvas.
   */
  bringToFront(e) {
    e = e || this.getActive(), e && (e.bringToFront(), R().canvas.render());
  }
  /**
   * Send specified or currently active object to the back of canvas.
   */
  sendToBack(e) {
    e = e || this.getActive(), e && (e.sendToBack(), R().canvas.render());
  }
  /**
   * Flip specified or currently active object horizontally.
   */
  flipHorizontally(e) {
    e = e || this.getActive(), e && (this.setValues({ flipX: !e.flipX }), R().canvas.render());
  }
  /**
   * Duplicate specified or currently active object.
   */
  duplicate(e) {
    const n = e || this.getActive();
    n && (this.deselectActive(), n.clone((r) => {
      r.set({
        left: n.left + 40,
        top: n.top + 40,
        data: { ...n.data, id: nc(10) },
        name: n.name
      }), he().add(r), this.select(r), R().canvas.render();
    }));
  }
  /**
   * Delete specified or currently active object.
   */
  delete(e) {
    e = e || this.getActive(), e && (this.deselectActive(), he().remove(e), he().requestRenderAll(), R().history.addHistoryItem({ name: "deletedObject" }));
  }
  /**
   * Sync layers list with fabric.js objects.
   * @hidden
   */
  syncObjects() {
    const e = this.getAll().map((n) => ({
      name: n.name,
      selectable: n.selectable ?? !1,
      id: n.data.id
    }));
    ue.setState({
      objects: {
        ...O().objects,
        all: e
      }
    });
  }
}
const r4 = {
  frame: null,
  fonts: []
};
function ih(t) {
  return t.state || (t.state = xs()), {
    ...t.state || xs(),
    name: t.name,
    id: nc(15)
  };
}
function Og(t) {
  return t ? /^[a-zA-Z][a-zA-Z\d+\-.]*?:/.test(t) : !1;
}
function bt(t) {
  return t ? Og(t) ? t : `${O().config.baseUrl ? `${O().config.baseUrl}/` : ""}${t}` : "";
}
class i4 {
  constructor() {
    Te(this, "loadedAssets", {});
  }
  loadAsset(e, n = { type: "js" }) {
    var f;
    e = e.startsWith("//") ? `${window.location.protocol}${e}` : e;
    const r = (f = this.loadedAssets[e]) == null ? void 0 : f.state;
    return r === "loaded" && !n.force ? new Promise((g) => g()) : !r || this.loadedAssets[e].doc !== n.document || n.force && r === "loaded" ? (this.loadedAssets[e] = {
      state: new Promise((g) => {
        const l = Og(e) ? e : `assets/${e}`, s = Yo(e, n.id), a = {
          url: l,
          id: s,
          resolve: g,
          parentEl: n.parentEl,
          document: n.document
        };
        n.type === "css" ? this.loadStyleAsset(a) : this.loadScriptAsset(a);
      }),
      doc: n.document
    }, this.loadedAssets[e].state) : this.loadedAssets[e].state;
  }
  /**
   * Check whether asset is loading or has already loaded.
   */
  isLoadingOrLoaded(e) {
    return this.loadedAssets[e] != null;
  }
  loadStyleAsset(e) {
    var g;
    const n = e.document || document, r = e.parentEl || n.head, i = n.createElement("link"), f = Yo(e.url, e.id);
    i.rel = "stylesheet", i.id = f, i.href = e.url;
    try {
      r.querySelector(`#${f}`) && ((g = r.querySelector(`#${f}`)) == null || g.remove());
    } catch {
    }
    i.onload = () => {
      this.loadedAssets[e.url].state = "loaded", e.resolve();
    }, r.appendChild(i);
  }
  loadScriptAsset(e) {
    var g;
    const n = e.document || document, r = e.parentEl || n.body, i = n.createElement("script"), f = Yo(e.url, e.id);
    i.async = !0, i.id = f, i.src = e.url;
    try {
      r.querySelector(`#${f}`) && ((g = r.querySelector(`#${f}`)) == null || g.remove());
    } catch {
    }
    i.onload = () => {
      this.loadedAssets[e.url].state = "loaded", e.resolve();
    }, (r || r).appendChild(i);
  }
}
function Yo(t, e) {
  return e || btoa(t.split("/").pop());
}
const s4 = new i4();
function o4(t) {
  return `be-fonts-${t}`;
}
function Dg(t, e) {
  const n = e.document || document, r = [], i = [];
  let f = [];
  if (t.forEach((g) => {
    "google" in g && g.google ? r.push(g) : "src" in g && i.push(g);
  }), r != null && r.length) {
    const g = e.weights || [400], l = t.map((a) => `${a.family}:${g.join(",")}`).join("|"), s = s4.loadAsset(
      `https://fonts.googleapis.com/css?family=${l}&display=swap`,
      {
        type: "css",
        id: o4(e.id),
        force: e.forceAssetLoad,
        document: n
      }
    );
    f.push(s);
  }
  if (i != null && i.length) {
    const g = i.map(async (l) => {
      const s = Array.from(n.fonts.values()).find((h) => h.family === l.family);
      if (s)
        return s.loaded;
      const a = new FontFace(
        l.family,
        `url(${e != null && e.prefixSrc ? e.prefixSrc(l.src) : l.src})`,
        l.descriptors
      );
      return n.fonts.add(a), a.load();
    });
    f = f.concat(g);
  }
  return Promise.all(f);
}
class a4 {
  /**
   * Undo last canvas operation.
   */
  async undo() {
    if (this.canUndo()) {
      const e = O().history.items[O().history.pointer - 1];
      await this.load(e);
    }
  }
  /**
   * Redo last canvas operation.
   */
  async redo() {
    if (this.canRedo()) {
      const e = O().history.items[O().history.pointer + 1];
      await this.load(e);
    }
  }
  /**
   * Check if there are any actions to undo.
   */
  canUndo() {
    return O().history.canUndo;
  }
  /**
   * Check if there are any actions to redo.
   */
  canRedo() {
    return O().history.canRedo;
  }
  /**
   * Reload current history state, undoing any actions that were not yet applied.
   */
  reload() {
    return this.load(O().history.items[O().history.pointer]);
  }
  /**
   * Replace current history item with current canvas state.
   */
  replaceCurrent() {
    const e = O().history.items[O().history.pointer], n = [...O().history.items];
    n[O().history.pointer] = ih({
      name: e.name,
      state: e
    });
  }
  /**
   * Create a new history item from current canvas state.
   */
  addHistoryItem(e) {
    const n = ih(e), i = [...O().history.items.slice(
      0,
      O().history.pointer + 1
    ), n];
    O().history.update(i.length - 1, i);
  }
  /**
   * Replace current canvas state with specified history item.
   */
  load(e) {
    return e = { ...e, editor: e.editor || r4 }, new Promise((n) => {
      Dg(l4(e.canvas.objects), {
        prefixSrc: bt,
        id: "pixie-fonts"
      }).finally(() => {
        he().loadFromJSON(e.canvas, () => {
          R().zoom.set(1), e.canvasWidth && e.canvasHeight && R().canvas.resize(e.canvasWidth, e.canvasHeight, {
            resizeHelper: !1,
            applyZoom: !1
          }), R().frame.remove(), e.editor.frame && R().frame.add(
            e.editor.frame.name,
            e.editor.frame.sizePercent
          ), R().objects.syncObjects(), R().objects.getAll().forEach((r) => {
            var i, f;
            if (!r.data.pixieInternal && r.originX === "left" && r.originY === "top") {
              const g = r.getPointByOrigin("center", "center");
              r.set("left", g.x), r.set("top", g.y);
            }
            r.set({ ...Sg }), r.type === "i-text" && (r.padding = (f = (i = O().config.tools) == null ? void 0 : i.text) == null ? void 0 : f.controlsPadding);
          }), R().canvas.render(), he().calcOffset(), R().zoom.fitToScreen(), O().history.updatePointerById(e.id), R().transform.resetStraightenAnchor(), n();
        });
      });
    });
  }
  /**
   * @hidden
   */
  addInitial(e) {
    !O().history.items.find((r) => r.name === "initial") && (e || !Eg()) && this.addHistoryItem({ name: "initial", state: e });
  }
}
function l4(t) {
  const e = [];
  return t.forEach((n) => {
    var i, f, g;
    if (!Tn(n))
      return;
    const r = (g = (f = (i = O().config.tools) == null ? void 0 : i.text) == null ? void 0 : f.items) == null ? void 0 : g.find(
      (l) => l.family === n.fontFamily
    );
    r && e.push(r);
  }), e;
}
class c4 {
  canMerge() {
    return R().objects.getAll().filter((e) => e.name !== Ve.MainImage).length > 0;
  }
  async apply() {
    O().toggleLoading("merge");
    const e = R().export.getDataUrl();
    e && await R().canvas.addMainImage(e, "merge");
  }
}
const ts = [
  { name: "grayscale" },
  { name: "blackWhite", fabricType: "blackwhite" },
  {
    name: "sharpen",
    uses: "Convolute",
    matrix: [0, -1, 0, -1, 5, -1, 0, -1, 0]
  },
  { name: "invert" },
  { name: "vintage" },
  { name: "polaroid" },
  { name: "kodachrome" },
  { name: "technicolor" },
  { name: "brownie" },
  { name: "sepia" },
  {
    name: "removeColor",
    fabricType: "removecolor",
    options: {
      distance: { type: "slider", current: 0.1, min: 0, max: 1, step: 0.01 },
      color: { current: "#fff", type: "colorPicker" }
    }
  },
  {
    name: "brightness",
    options: {
      brightness: { type: "slider", current: 0.1, min: -1, max: 1, step: 0.1 }
    }
  },
  {
    name: "gamma",
    options: {
      red: { type: "slider", current: 0.1, min: 0.2, max: 2.2, step: 3921e-6 },
      green: { type: "slider", current: 0.1, min: 0.2, max: 2.2, step: 3921e-6 },
      blue: { type: "slider", current: 0.1, min: 0.2, max: 2.2, step: 3921e-6 }
    },
    apply: (t) => {
      t.gamma = [t.red, t.green, t.blue];
    }
  },
  {
    name: "noise",
    options: {
      noise: { type: "slider", current: 40, min: 1, max: 600 }
    }
  },
  {
    name: "pixelate",
    options: {
      blocksize: { type: "slider", min: 1, max: 40, current: 6 }
    }
  },
  {
    name: "blur",
    uses: "Convolute",
    matrix: [1 / 9, 1 / 9, 1 / 9, 1 / 9, 1 / 9, 1 / 9, 1 / 9, 1 / 9, 1 / 9]
  },
  {
    name: "emboss",
    uses: "Convolute",
    matrix: [1, 1, 1, 1, 0.7, -1, -1, -1, -1]
  },
  {
    name: "blendColor",
    fabricType: "blendcolor",
    options: {
      alpha: { type: "slider", current: 0.5, min: 0.1, max: 1, step: 0.1 },
      mode: {
        current: "add",
        type: "select",
        available: [
          { key: "add" },
          { key: "multiply" },
          { key: "subtract" },
          { key: "diff" },
          { key: "screen" },
          { key: "lighten" },
          { key: "darken" }
        ]
      },
      color: { type: "colorPicker", current: "#FF4081" }
    }
  }
], u4 = {
  grayscale: oe("grayscale"),
  blackWhite: oe("Black & White"),
  sharpen: oe("Sharpen"),
  invert: oe("Invert"),
  vintage: oe("Vintage"),
  polaroid: oe("Polaroid"),
  kodachrome: oe("Kodachrome"),
  technicolor: oe("Technicolor"),
  brownie: oe("Brownie"),
  sepia: oe("Sepia"),
  removeColor: oe("Remove Color"),
  brightness: oe("Brightness"),
  gamma: oe("Gamma"),
  noise: oe("Noise"),
  pixelate: oe("Pixelate"),
  blur: oe("Blur"),
  emboss: oe("Emboss"),
  blendColor: oe("Blend Color")
}, Go = {
  distance: oe("distance"),
  color: oe("color"),
  brightness: oe("brightness"),
  red: oe("red"),
  green: oe("green"),
  blue: oe("blue"),
  noise: oe("noise"),
  blocksize: oe("blocksize"),
  mode: oe("mode"),
  alpha: oe("alpha")
};
function ns(t) {
  return t && t.charAt(0).toUpperCase() + t.slice(1);
}
class h4 {
  constructor() {
    ue.subscribe(
      (e) => e.history.pointer,
      () => {
        this.syncState();
      }
    );
  }
  /**
   * Apply specified filter to all images.
   */
  apply(e) {
    O().filter.select(e, this.hasOptions(e));
    const n = this.getByName(e);
    if (this.isApplied(n.name)) {
      this.remove(n.name);
      return;
    }
    const r = this.create(n);
    this.getImages().forEach((i) => {
      var f;
      (f = i.filters) == null || f.push(r), i.applyFilters();
    }), this.syncState(), R().canvas.render();
  }
  /**
   * Remove specified filter from all images.
   */
  remove(e) {
    O().filter.deselect(e);
    const n = this.getByName(e);
    this.getImages().forEach((r) => {
      var f;
      const i = this.findFilterIndex(
        n.name,
        r.filters
      );
      (f = r.filters) == null || f.splice(i, 1), r.applyFilters();
    }), this.syncState(), R().canvas.render();
  }
  /**
   * Get a list of all available filters.
   */
  getAll() {
    return ts;
  }
  /**
   * Get configuration for specified filter.
   */
  getByName(e) {
    return ts.find((n) => n.name === e);
  }
  /**
   * Check if specified filter is currently applied.
   */
  isApplied(e) {
    const n = R().canvas.getMainImage();
    return n ? this.findFilterIndex(e, n.filters) > -1 : !1;
  }
  /**
   * Change specified value for an active filter.
   */
  applyValue(e, n, r) {
    const i = this.getByName(e);
    this.getImages().forEach((f) => {
      const g = (f.filters || []).find(
        (l) => l.type.toLowerCase() === i.name.toLowerCase()
      );
      g && (g[n] = r, i.apply && i.apply(g, n, r), f.applyFilters());
    }), R().canvas.render();
  }
  /**
   * Create a custom filter.
   */
  addCustom(e, n, r, i) {
    const f = we.fabric.Image.filters;
    f[ns(e)] = we.fabric.util.createClass(
      f.BaseFilter,
      n
    ), f[ns(e)].fromObject = f.BaseFilter.fromObject, ts.push({
      name: e,
      options: r,
      initialConfig: i
    });
  }
  /**
   * @hidden
   */
  create(e) {
    const n = e.initialConfig || {};
    let r;
    return e.uses ? (n.matrix = e.matrix, r = new we.fabric.Image.filters[ns(e.uses)](n)) : (Object.entries(e.options || {}).forEach(([i, f]) => {
      n[i] = f.current;
    }), r = new we.fabric.Image.filters[ns(e.name)](n)), r.name = e.name, r;
  }
  /**
   * @hidden
   */
  hasOptions(e) {
    return !!this.getByName(e).options;
  }
  /**
   * @hidden
   */
  findFilterIndex(e, n) {
    if (!(n != null && n.length))
      return -1;
    const r = this.getByName(e);
    return n.findIndex((i) => this.configMatchesFabricFilter(r, i));
  }
  /**
   * @hidden
   */
  syncState() {
    var r;
    const e = [];
    (((r = this.getImages()[0]) == null ? void 0 : r.filters) || []).forEach((i) => {
      const f = this.getByFabricFilter(i);
      f && e.push(f.name);
    }), ue.setState({
      filter: {
        ...O().filter,
        applied: e
      }
    });
  }
  getByFabricFilter(e) {
    return ts.find((n) => this.configMatchesFabricFilter(n, e));
  }
  configMatchesFabricFilter(e, n) {
    const r = n.type.toLowerCase().replace(" ", "");
    return r === e.fabricType || r === e.name ? !0 : r === "convolute" && this.matrixAreEqual(e.matrix, n.matrix);
  }
  matrixAreEqual(e, n) {
    if (!e || !n || e.length !== n.length)
      return !1;
    for (let r = e.length; r--; )
      if (e[r] !== n[r])
        return !1;
    return !0;
  }
  getImages() {
    return R().objects.getAll().filter((e) => e.name === Ve.Image || e.name === Ve.MainImage);
  }
}
function f4(t) {
  return t.width < sh(t.usePercentages) && (t.width = sh(t.usePercentages), t.maintainAspect && (t.height = Ps(t.width, t.usePercentages))), t.width > oh(t.usePercentages) && (t.width = oh(t.usePercentages), t.maintainAspect && (t.height = Ps(t.width, t.usePercentages))), t.height < ah(t.usePercentages) && (t.height = ah(t.usePercentages), t.maintainAspect && (t.width = Ya(t.height, t.usePercentages))), t.height > lh(t.usePercentages) && (t.height = lh(t.usePercentages), t.maintainAspect && (t.width = Ya(t.height, t.usePercentages))), t;
}
function sh(t) {
  var n, r;
  const e = ((r = (n = O().config.tools) == null ? void 0 : n.resize) == null ? void 0 : r.minWidth) || 50;
  return t ? Math.ceil(e * 100 / O().original.width) : e;
}
function oh(t) {
  var n, r;
  const e = ((r = (n = O().config.tools) == null ? void 0 : n.resize) == null ? void 0 : r.maxWidth) || 2400;
  return t ? Math.ceil(e * 100 / O().original.width) : e;
}
function ah(t) {
  var n, r;
  const e = ((r = (n = O().config.tools) == null ? void 0 : n.resize) == null ? void 0 : r.minHeight) || 50;
  return t ? Math.ceil(e * 100 / O().original.height) : e;
}
function lh(t) {
  var n, r;
  const e = ((r = (n = O().config.tools) == null ? void 0 : n.resize) == null ? void 0 : r.maxHeight) || 2400;
  return t ? Math.ceil(e * 100 / O().original.height) : e;
}
function Ya(t, e) {
  if (e)
    return t;
  const n = O().original.height / t;
  return Math.floor(O().original.width / n);
}
function Ps(t, e) {
  if (e)
    return t;
  const n = O().original.width / t;
  return Math.floor(O().original.height / n);
}
class d4 {
  /**
   * Resize image and other canvas objects.
   * If "usePercentages" is false, width/height should be pixels.
   */
  apply(e) {
    const { width: n, height: r, usePercentages: i } = f4(e), f = Math.ceil(O().original.width), g = Math.ceil(O().original.height), l = Math.ceil(n), s = Math.ceil(r);
    let a, h;
    i ? (a = n / 100, h = r / 100) : (a = n / O().original.width, h = r / O().original.height), !(f === l && g === s) && this.resize(a, h);
  }
  /**
   * Resize canvas and all objects to specified scale.
   */
  resize(e, n) {
    R().zoom.set(1, !1);
    const r = Math.round(O().original.height * n), i = Math.round(O().original.width * e);
    R().canvas.resize(i, r, {
      applyZoom: !1,
      resizeHelper: !0
    }), R().objects.getAll().forEach((f) => {
      const g = f.scaleX || 1, l = f.scaleY || 1, s = f.left || 0, a = f.top || 0, h = g * e, o = l * n, u = s * e, c = a * n;
      f.scaleX = h, f.scaleY = o, f.left = u, f.top = c, f.setCoords();
    }), R().zoom.fitToScreen(), he().requestRenderAll();
  }
}
function p4(t, e) {
  e.innerZone !== null && (e = e, g4(t, e), m4(t, e), v4(t, e));
}
function g4(t, e) {
  e.innerZone.style.width = `${t.width}px`, e.innerZone.style.height = `${t.height}px`, e.innerZone.style.transform = `translate(${t.left}px, ${t.top}px)`;
}
function m4(t, e) {
  const n = O().canvasSize.width, r = O().canvasSize.height;
  e.maskTop.style.height = `${t.top}px`, e.maskTop.style.width = `${n}px`, e.maskLeft.style.top = `${t.top}px`, e.maskLeft.style.height = `${t.height}px`, e.maskLeft.style.width = `${t.left}px`;
  const i = t.left + t.width;
  e.maskRight.style.left = `${i}px`, e.maskRight.style.top = `${t.top}px`, e.maskRight.style.height = `${t.height}px`, e.maskRight.style.width = `${n - i}px`, e.maskBottom.style.height = `${r - (t.top + t.height)}px`, e.maskBottom.style.width = `${n}px`;
}
function v4(t, e) {
  const n = (t.width - 2) / 3;
  e.lineVer1.style.height = `${t.height}px`, e.lineVer1.style.transform = `translate(${n}px, 0)`, e.lineVer2.style.height = `${t.height}px`, e.lineVer2.style.transform = `translate(${n * 2}px, 0)`;
  const r = (t.height - 2) / 3;
  e.lineHor1.style.width = `${t.width}px`, e.lineHor1.style.transform = `translate(0, ${r}px)`, e.lineHor2.style.width = `${t.width}px`, e.lineHor2.style.transform = `translate(0, ${r * 2}px)`;
}
function rc(t, e, n) {
  let r = e, i = n;
  return t && (n * t > e ? i = e / t : r = n * t), { width: Math.floor(r), height: Math.floor(i) };
}
function ic(t) {
  if (!t)
    return null;
  const e = t.split(":");
  return parseInt(e[0]) / parseInt(e[1]);
}
function b4(t, e = null) {
  const n = {
    width: t.width,
    height: t.height,
    top: 0,
    left: 0,
    angle: 0
  };
  if (e) {
    const r = rc(
      e,
      n.width,
      n.height
    );
    n.width = r.width, n.height = r.height;
  }
  return n.left = (t.width - n.width) / 2, n.top = (t.height - n.height) / 2, n;
}
class y4 {
  constructor() {
    Te(this, "refs", null);
  }
  apply(e) {
    var i;
    const n = (i = R().frame.active.config) == null ? void 0 : i.name, r = R().frame.active.currentSizeInPercent;
    return R().frame.active.hide(), R().merge.apply().then(() => {
      R().canvas.resize(Math.round(e.width), Math.round(e.height), {
        applyZoom: !0,
        resizeHelper: !0
      });
      const f = R().canvas.getMainImage();
      f.cropX = Math.round(e.left), f.cropY = Math.round(e.top), f.width = Math.round(e.width), f.height = Math.round(e.height), f.viewportCenter(), n && R().frame.add(n, r), R().zoom.fitToScreen(), R().canvas.render();
    });
  }
  drawZone(e) {
    var n;
    (n = this.refs) != null && n.current && (O().crop.setCropzoneRect(e), p4(e, this.refs.current));
  }
  resetCropzone(e) {
    const n = O().canvasSize, r = ic(e);
    if (!n)
      return;
    O().crop.setAspectRatio(e);
    const i = b4(n, r);
    this.drawZone(i);
  }
  registerRefs(e) {
    this.refs = e;
  }
}
class w4 {
  getShapeByName(e) {
    var r, i;
    const n = (i = (r = O().config.tools) == null ? void 0 : r.shapes) == null ? void 0 : i.items;
    return (n == null ? void 0 : n.find((f) => f.name === e)) || null;
  }
  addBasicShape(e) {
    var s;
    const n = this.getShapeByName(e);
    if (!n)
      return null;
    const { width: r, height: i, ...f } = ((s = O().config.objectDefaults) == null ? void 0 : s.shape) || {}, g = {
      ...f,
      ...n.options
    };
    let l;
    if (n.name === "circle")
      l = new we.fabric.Circle({
        ...g,
        radius: 100
      });
    else if (n.name === "ellipse")
      l = new we.fabric.Ellipse({
        ...g,
        rx: 100,
        ry: 50
      });
    else if (n.type === "Path")
      l = new we.fabric.Path(g.path, {
        // @ts-ignore
        displayName: n.name,
        ...g
      });
    else {
      const a = n.type;
      l = new we.fabric[a]({
        ...g,
        width: 150,
        height: 150
      });
    }
    return this.addAndPositionShape(l, Ve.Shape, { width: r, height: i }), l;
  }
  addSticker(e, n) {
    var i, f, g;
    const r = (g = (f = (i = O().config.tools) == null ? void 0 : i.stickers) == null ? void 0 : f.items) == null ? void 0 : g.find(
      (l) => l.name === e
    );
    if (!r)
      return Promise.resolve();
    if (r.type === "svg") {
      const l = Ga(r, n);
      return this.addSvgSticker(l);
    }
    return this.addRegularSticker(r, n);
  }
  addRegularSticker(e, n) {
    return new Promise((r) => {
      we.fabric.util.loadImage(Ga(e, n), (i) => {
        var a;
        const { width: f, height: g, ...l } = ((a = O().config.objectDefaults) == null ? void 0 : a.sticker) || {}, s = new we.fabric.Image(i, l);
        this.addAndPositionShape(s, Ve.Sticker, { width: f, height: g }), r();
      });
    });
  }
  addSvgSticker(e, n = Ve.Sticker) {
    return new Promise((r) => {
      we.fabric.loadSVGFromURL(e, (i, f) => {
        var h;
        const { width: g, height: l, ...s } = ((h = O().config.objectDefaults) == null ? void 0 : h.sticker) || {}, a = we.fabric.util.groupSVGElements(i, f);
        a.set(s), this.addAndPositionShape(a, n, { width: g, height: l }), r();
      });
    });
  }
  addAndPositionShape(e, n, { width: r }) {
    e.name = n, e.scaleX = 1, e.scaleY = 1, he().add(e);
    const i = r || O().original.width * O().zoom / 4;
    e.scaleToWidth(Math.min(150, i)), e.viewportCenter(), e.setCoords(), R().canvas.render(), he().setActiveObject(e);
  }
}
function Ga(t, e) {
  return bt(
    `images/stickers/${t.name}/${e}.${t.type}`
  );
}
class x4 {
  constructor(e) {
    Te(this, "patternCache", []);
    this.activeFrame = e;
  }
  /**
   * Fill frame part objects with matching pattern images.
   */
  fillParts(e) {
    this.patternCache.forEach((n) => {
      this.fillPartWithPattern(n, e);
    });
  }
  /**
   * Fill specified frame part with matching pattern.
   */
  fillPartWithPattern(e, n) {
    if (!this.activeFrame.parts)
      return;
    e.canvas = new we.fabric.StaticCanvas(null), e.canvas.add(e.img);
    const r = new we.fabric.Pattern({
      source: e.canvas.getElement(),
      repeat: n === "repeat" ? "repeat" : "no-repeat"
    });
    this.activeFrame.parts[e.name] && this.activeFrame.parts[e.name].set("fill", r);
  }
  /**
   * Scale all frame patterns to fill their container rect objects.
   */
  scale(e) {
    if (!this.activeFrame.config || !this.patternCache)
      return;
    const n = this.activeFrame.config.mode;
    e /= he().getRetinaScaling(), this.patternCache.forEach((r) => {
      this.activeFrame.parts && (r.name === "top" || r.name === "bottom" ? n === "stretch" ? (this.scalePatternToWidth(
        r.img,
        this.activeFrame.parts.top.getScaledWidth()
      ), this.scalePatternToHeight(r.img, e)) : r.img.scaleToHeight(e) : r.name === "left" || r.name === "right" ? n === "stretch" ? (this.scalePatternToWidth(r.img, e), this.scalePatternToHeight(
        r.img,
        this.activeFrame.parts.left.getScaledHeight()
      )) : r.img.scaleToWidth(e) : n === "stretch" ? (this.scalePatternToWidth(r.img, e), this.scalePatternToHeight(r.img, e)) : r.img.scaleToWidth(e), r.canvas.setDimensions({
        width: r.img.getScaledWidth(),
        height: r.img.getScaledHeight()
      }));
    }), R().canvas.render();
  }
  /**
   * Scale pattern image to specified width.
   */
  scalePatternToWidth(e, n) {
    if (!e.width)
      return;
    const r = e.getBoundingRect().width / e.getScaledWidth();
    e.set("scaleX", n / e.width / r), e.setCoords();
  }
  /**
   * Scale pattern image to specified height.
   */
  scalePatternToHeight(e, n) {
    if (!e.height)
      return;
    const r = e.getBoundingRect().height / e.getScaledHeight();
    e.set("scaleY", n / e.height / r), e.setCoords();
  }
  /**
   * Load all images needed to build specified frame.
   */
  load(e) {
    const n = this.activeFrame.getPartNames().map((r) => new Promise((i) => {
      const f = {
        ...Zn,
        originX: "left",
        originY: "top"
      };
      O().config.crossOrigin && (f.crossOrigin = "anonymous"), we.fabric.Image.fromURL(
        this.getPartUrl(e, r),
        (g) => {
          i({ name: r, img: g });
        },
        f
      );
    }));
    return Promise.all(n).then((r) => {
      this.patternCache = r, this.fillParts(e.mode);
    });
  }
  getPartUrl(e, n) {
    return bt(`images/frames/${e.name}/${n}.png`);
  }
}
class C4 {
  constructor(e, n) {
    this.activeFrame = e, this.patterns = n;
  }
  get defaultColor() {
    var e, n;
    return (n = (e = O().config.objectDefaults) == null ? void 0 : e.global) == null ? void 0 : n.fill;
  }
  /**
   * Build a new canvas frame group.
   */
  build(e, n) {
    if (this.createParts(e), this.resize(n), this.activeFrame.config = e, e.mode === "basic") {
      R().canvas.render();
      return;
    }
    this.patterns.load(e).then(() => {
      this.patterns.scale(n), R().canvas.render();
    });
  }
  /**
   * Create rect object for each frame part.
   */
  createParts(e) {
    const n = {};
    this.activeFrame.getPartNames().forEach((r) => {
      const i = e.mode === "basic" ? this.defaultColor : void 0;
      n[r] = new we.fabric.Rect({
        ...Zn,
        fill: i,
        originX: "left",
        originY: "top",
        name: `frame.rect.${r}`,
        objectCaching: !1,
        // patterns are not redrawn correctly when resizing frame without this
        data: { pixieInternal: !0 }
      }), he().add(n[r]);
    }), this.activeFrame.parts = n;
  }
  /**
   * Position and resize all frame parts.
   */
  resize(e) {
    const n = O().original.width, r = O().original.height, i = this.activeFrame, f = e;
    i.parts && (i.parts.topLeft.set({
      width: f,
      height: f
    }), i.parts.topRight.set({
      left: n - i.parts.topLeft.getScaledWidth(),
      width: f,
      height: f
    }), i.parts.top.set({
      left: i.parts.topLeft.getScaledWidth() - 1,
      width: n - i.parts.topLeft.getScaledWidth() - i.parts.topRight.getScaledWidth() + 3,
      height: f
    }), i.parts.bottomLeft.set({
      top: r - i.parts.topLeft.getScaledHeight(),
      width: f,
      height: f
    }), i.parts.left.set({
      top: i.parts.topLeft.getScaledHeight() - 1,
      width: f,
      height: r - i.parts.topLeft.getScaledHeight() - i.parts.bottomLeft.getScaledHeight() + 3
    }), i.parts.bottomRight.set({
      left: n - i.parts.bottomLeft.getScaledWidth(),
      top: r - i.parts.topRight.getScaledWidth(),
      width: f,
      height: f
    }), i.parts.bottom.set({
      left: i.parts.top.left,
      top: r - i.parts.top.getScaledHeight(),
      width: i.parts.top.getScaledWidth(),
      height: f
    }), i.parts.right.set({
      left: n - i.parts.left.getScaledWidth(),
      top: i.parts.left.top,
      width: i.parts.left.width,
      height: i.parts.left.getScaledHeight()
    }));
  }
}
class _4 {
  constructor() {
    /**
     * List of frame corner names.
     */
    Te(this, "corners", [
      "topLeft",
      "topRight",
      "bottomLeft",
      "bottomRight"
    ]);
    /**
     * List of frame side names.
     */
    Te(this, "sides", ["top", "right", "bottom", "left"]);
    Te(this, "parts", null);
    /**
     * Configuration for currently active frame.
     */
    Te(this, "config", null);
    /**
     * Current size of frame in percents relative to canvas size.
     */
    Te(this, "currentSizeInPercent", 100);
  }
  getPartNames() {
    return [...this.corners, ...this.sides];
  }
  hide() {
    this.parts && (Object.values(this.parts).forEach((e) => e.set({ visible: !1 })), R().canvas.render());
  }
  show() {
    this.parts && (Object.values(this.parts).forEach((e) => e.set({ visible: !0 })), R().canvas.render());
  }
  /**
   * Remove currently active frame.
   */
  remove() {
    this.parts && (this.config = null, Object.values(this.parts).forEach((e) => {
      he().remove(e);
    }), this.parts = null, R().canvas.render());
  }
  /**
   * Check if specified frame is active.
   */
  is(e) {
    return this.config ? this.config.name === e.name : !1;
  }
  /**
   * Change color of basic frame.
   */
  changeColor(e) {
    var n;
    ((n = this.config) == null ? void 0 : n.mode) !== "basic" || !this.parts || (Object.values(this.parts).forEach((r) => {
      r.set("fill", e);
    }), R().canvas.render());
  }
  getMinSize() {
    var e;
    return ((e = this.config) == null ? void 0 : e.size.min) ?? 1;
  }
  getMaxSize() {
    var e;
    return ((e = this.config) == null ? void 0 : e.size.max) ?? 35;
  }
}
class S4 {
  constructor() {
    Te(this, "patterns");
    Te(this, "builder");
    Te(this, "active");
    this.active = new _4(), this.patterns = new x4(this.active), this.builder = new C4(this.active, this.patterns), he().on("object:added", () => {
      Object.values(this.active.parts || []).forEach((e) => e.moveTo(98));
    });
  }
  /**
   * Add a new frame to canvas.
   */
  add(e, n) {
    const r = this.getByName(e);
    if (!r || this.active.is(r))
      return;
    this.active.remove(), this.active.currentSizeInPercent = n ?? r.size.default;
    const i = this.calcFrameSizeInPixels(this.active.currentSizeInPercent);
    this.builder.build(r, i), O().frame.select(r);
  }
  /**
   * Resize active frame to specified percentage relative to canvas size.
   */
  resize(e) {
    if (!this.active.parts || !this.active.config)
      return;
    e ? this.active.currentSizeInPercent = e : e = this.active.currentSizeInPercent;
    const n = this.calcFrameSizeInPixels(e);
    this.builder.resize(n), this.patterns.scale(n), R().canvas.render();
  }
  /**
   * Change color of currently active frame. Only works for "basic" frame.
   */
  changeColor(e) {
    this.active.changeColor(e);
  }
  /**
   * Remove currently active frame.
   */
  remove() {
    this.active.remove(), O().frame.deselect();
  }
  /**
   * Get frame by specified name.
   */
  getByName(e) {
    var r, i;
    const n = (i = (r = O().config.tools) == null ? void 0 : r.frame) == null ? void 0 : i.items;
    if (n)
      return n.find((f) => f.name === e);
  }
  /**
   * @hidden
   */
  getActiveFrameConfig() {
    return this.active.config;
  }
  /**
   * Calculate frame size in pixels based on specified percentage relative to canvas size.
   */
  calcFrameSizeInPixels(e) {
    const n = Math.min(O().original.width, O().original.height);
    return Math.ceil(e / 100 * n);
  }
}
class T4 {
  constructor() {
    Te(this, "minWidth", 250);
  }
  /**
   * Add specified text to canvas.
   */
  add(e, n = {}) {
    var f, g, l, s, a;
    if (e = e || ((g = (f = O().config.tools) == null ? void 0 : f.text) == null ? void 0 : g.defaultText), !e)
      return;
    const r = {
      ...(l = O().config.objectDefaults) == null ? void 0 : l.text,
      ...n,
      name: Ve.Text,
      padding: (a = (s = O().config.tools) == null ? void 0 : s.text) == null ? void 0 : a.controlsPadding,
      editingBorderColor: Pl.fill
    }, i = new we.fabric.IText(e, r);
    he().add(i), n.left == null && n.top == null && this.autoPositionText(i), R().objects.select(i);
  }
  autoPositionText(e) {
    const n = he().getWidth(), r = he().getHeight(), i = Math.min(he().getWidth(), this.minWidth);
    e.scaleToWidth(Math.max(n / 3, i)), e.getScaledHeight() > r && e.scaleToHeight(r - e.getScaledHeight() - 20), e.viewportCenter(), he().getObjects("i-text").forEach((f) => {
      if (f !== e && f.intersectsWithObject(e)) {
        const g = f.top - e.top + f.getScaledHeight();
        let l = e.top + g;
        l > O().original.height - f.getScaledHeight() && (l = 0), e.set("top", l), e.setCoords();
      }
    });
  }
  /**
   * Select first text object on canvas if it exists, otherwise add a new one.
   */
  selectOrAddText(e, n = {}) {
    if (O().objects.active.isText)
      return !1;
    const r = R().objects.getAll().find((i) => Tn(i));
    return r ? (R().objects.select(r), !1) : (this.add(e, n), !0);
  }
}
const E4 = (t) => {
  const e = new we.fabric.PatternBrush(t);
  return e.getPatternSrc = function() {
    const r = we.fabric.document.createElement("canvas");
    r.width = 10, r.height = 10;
    const i = r.getContext("2d");
    return i.strokeStyle = this.color, i.lineWidth = 5, i.beginPath(), i.moveTo(0, 5), i.lineTo(10, 5), i.closePath(), i.stroke(), r;
  }, e;
}, k4 = (t) => {
  const e = new we.fabric.PatternBrush(t);
  return e.getPatternSrc = function() {
    const r = document.createElement("canvas");
    r.width = 10, r.height = 10;
    const i = r.getContext("2d");
    return i.strokeStyle = this.color, i.lineWidth = 5, i.beginPath(), i.moveTo(5, 0), i.lineTo(5, 10), i.closePath(), i.stroke(), r;
  }, e;
}, O4 = (t) => {
  const e = new we.fabric.PatternBrush(t);
  return e.getPatternSrc = function() {
    const r = this.width / 2, i = 5, f = document.createElement("canvas"), g = new we.fabric.Rect({
      width: r,
      height: r,
      angle: 45,
      fill: this.color
    }), l = g.getBoundingRect().width;
    f.width = l + i, f.height = l + i, g.set({ left: l / 2, top: l / 2 });
    const s = f.getContext("2d");
    return g.render(s), f;
  }, e;
}, D4 = (t) => {
  const e = new we.fabric.PatternBrush(t);
  return e.getPatternSrc = function() {
    const f = document.createElement("canvas");
    f.width = 10 + 2, f.height = 10 + 2;
    const g = f.getContext("2d");
    return g.fillStyle = this.color, g.fillRect(0, 0, 10, 10), f;
  }, e;
};
var Ef, kf;
class A4 {
  constructor() {
    Te(this, "customBrushes", {
      VLineBrush: E4,
      HLineBrush: k4,
      DiamondBrush: O4,
      SquareBrush: D4
    });
    Te(this, "currentBrush", {
      type: "PencilBrush",
      color: (kf = (Ef = O().config.objectDefaults) == null ? void 0 : Ef.global) == null ? void 0 : kf.fill,
      width: Ld[1]
    });
    Te(this, "onPathCreated", (e) => {
      e.path.name = Ve.Drawing, e.path.set(P4()), O().setDirty(!0);
    });
  }
  /**
   * Enable drawing mode on canvas.
   */
  enable() {
    he().on("path:created", this.onPathCreated), he().isDrawingMode = !0, this.setBrushType(this.currentBrush.type), this.setBrushSize(this.currentBrush.width);
  }
  /**
   * Disable drawing mode on canvas.
   */
  disable() {
    he().off("path:created", this.onPathCreated), he().isDrawingMode = !1;
  }
  getBrushType() {
    return this.currentBrush.type;
  }
  setBrushType(e) {
    this.currentBrush.type = e, he().freeDrawingBrush = e in we.fabric ? (
      // @ts-ignore
      new we.fabric[e](he())
    ) : (
      // @ts-ignore
      this.customBrushes[e](he())
    ), this.applyBrushStyles();
  }
  /**
   * Apply current brush styles to fabric.js FreeDrawingBrush instance.
   */
  applyBrushStyles() {
    Object.keys(this.currentBrush).forEach((n) => {
      he().freeDrawingBrush[n] = this.currentBrush[n];
    });
    const e = he().freeDrawingBrush;
    e.getPatternSrc && (e.source = e.getPatternSrc.call(e));
  }
  setBrushSize(e) {
    this.currentBrush.width = e, this.applyBrushStyles();
  }
  getBrushSize() {
    return this.currentBrush.width;
  }
  /**
   * Change color of drawing brush.
   */
  setBrushColor(e) {
    this.currentBrush.color = e, this.applyBrushStyles();
  }
  /**
   * Get color of drawing brush.
   */
  getBrushColor() {
    return this.currentBrush.color;
  }
}
function P4() {
  const t = { ...Zn };
  return delete t.strokeWidth, t;
}
async function ch(t, e = !0, n = !0) {
  const r = await Tg(t);
  if (r)
    return new Promise((i) => {
      r.name = Ve.Image, r.opacity = 0;
      const f = O().original.width, g = O().original.height;
      if (e && (r.width >= f || r.height >= g)) {
        const l = f - 0.1 * f, s = g - 0.1 * g, a = 1 / Math.min(
          s / r.getScaledHeight(),
          l / r.getScaledWidth()
        );
        r.scaleX *= 1 / a, r.scaleY *= 1 / a;
      }
      O().fabric.add(r), n && O().fabric.setActiveObject(r), r.viewportCenter(), r.setCoords(), O().fabric.requestRenderAll(), R().zoom.fitToScreen(), r.animate("opacity", "1", {
        duration: 425,
        onChange: () => {
          O().fabric.requestRenderAll();
        },
        onComplete: () => {
          i(r);
        }
      });
    });
}
function Ag(t) {
  var n;
  return ((n = /(?:\.([^.]+))?$/.exec(t)) == null ? void 0 : n[1]) || "";
}
function M4(t) {
  const e = {
    md: "text/markdown",
    markdown: "text/markdown",
    mp4: "video/mp4",
    mp3: "audio/mp3",
    svg: "image/svg+xml",
    jpg: "image/jpeg",
    png: "image/png",
    gif: "image/gif",
    yaml: "text/yaml",
    yml: "text/yaml",
    log: "text/plain"
  }, n = t.name ? Ag(t.name) : null;
  return t.type ? t.type : n && n in e ? e[n] : "application/octet-stream";
}
class uo {
  constructor(e, n) {
    Te(this, "id");
    Te(this, "fingerprint");
    Te(this, "name");
    Te(this, "relativePath", "");
    Te(this, "size");
    Te(this, "mime", "");
    Te(this, "extension", "");
    Te(this, "native");
    Te(this, "lastModified");
    Te(this, "cachedData");
    this.id = hp(), this.name = e.name, this.size = e.size, this.mime = M4(e), this.lastModified = e.lastModified, this.extension = Ag(e.name) || "bin", this.native = e, n = n || e.webkitRelativePath || "", n = n.replace(/^\/+/g, ""), n && n.split("/").length > 1 && (this.relativePath = n), this.fingerprint = F4({
      name: this.name,
      size: this.size,
      mime: this.mime,
      lastModified: this.lastModified
    });
  }
  get data() {
    return new Promise((e) => {
      this.cachedData && e(this.cachedData);
      const n = new FileReader();
      n.addEventListener("load", () => {
        this.cachedData = n.result, e(this.cachedData);
      }), this.extension === "json" ? n.readAsText(this.native) : n.readAsDataURL(this.native);
    });
  }
}
function F4({
  name: t,
  mime: e,
  size: n,
  relativePath: r,
  lastModified: i
}) {
  let f = "be";
  return typeof t == "string" && (f += `-${uh(t.toLowerCase())}`), e && (f += `-${e}`), typeof r == "string" && (f += `-${uh(r.toLowerCase())}`), n !== void 0 && (f += `-${n}`), i !== void 0 && (f += `-${i}`), f;
}
function I4(t) {
  return t.charCodeAt(0).toString(32);
}
function uh(t) {
  let e = "";
  return t.replace(/[^A-Z0-9]/gi, (n) => (e += `-${I4(n)}`, "/")) + e;
}
function R4(t = {}) {
  const e = document.querySelector("#hidden-file-upload-input");
  e && e.remove();
  const n = document.createElement("input");
  return n.type = "file", n.multiple = t.multiple ?? !1, n.classList.add("hidden"), n.style.display = "none", n.style.visibility = "hidden", n.id = "hidden-file-upload-input", n.accept = L4(t), t.directory && (n.webkitdirectory = !0), document.body.appendChild(n), n;
}
function L4({
  extensions: t = [],
  types: e = []
}) {
  const n = [];
  return t != null && t.length && (t = t.map((r) => r.startsWith(".") ? r : `.${r}`), n.push(t.join(","))), e != null && e.length && n.push(e.join(",")), n.join(",");
}
function B4(t = {}) {
  return new Promise((e) => {
    const n = R4(t);
    n.onchange = (r) => {
      const i = r.target.files;
      if (!i)
        return e([]);
      const f = Array.from(i).filter((g) => g.name !== ".DS_Store").map((g) => new uo(g));
      e(f), n.remove();
    }, document.body.appendChild(n), n.click();
  });
}
function z4(t, e) {
  if (t == null)
    return 0;
  switch (e) {
    case "KB":
      return t * 1024;
    case "MB":
      return t * 1024 ** 2;
    case "GB":
      return t * 1024 ** 3;
    case "TB":
      return t * 1024 ** 4;
    case "PB":
      return t * 1024 ** 5;
    default:
      return t;
  }
}
var sc = /* @__PURE__ */ ((t) => (t.image = "image/*", t.audio = "audio/*", t.text = "text/*", t.json = "application/json", t.video = "video/mp4,video/mpeg,video/x-m4v,video/*", t))(sc || {});
function N4(t, e = 1) {
  if (t == null || Number.isNaN(t))
    return "";
  const n = t < 0, r = ["B", "KB", "MB", "GB", "TB", "PB", "EB", "ZB", "YB"];
  if (n && (t = -t), t < 1)
    return `${(n ? "-" : "") + t} B`;
  const i = Math.min(
    Math.floor(Math.log(t) / Math.log(1024)),
    r.length - 1
  );
  t = Number(t / Math.pow(1024, i));
  const f = r[i];
  return t >= 10 || t % 1 === 0 ? `${(n ? "-" : "") + t.toFixed(0)} ${f}` : `${(n ? "-" : "") + t.toFixed(e)} ${f}`;
}
function Pg(t, e) {
  this.text = t = t || "", this.hasWild = ~t.indexOf("*"), this.separator = e, this.parts = t.split(e);
}
Pg.prototype.match = function(t) {
  var e = !0, n = this.parts, r, i = n.length, f;
  if (typeof t == "string" || t instanceof String)
    if (!this.hasWild && this.text != t)
      e = !1;
    else {
      for (f = (t || "").split(this.separator), r = 0; e && r < i; r++)
        n[r] !== "*" && (r < f.length ? e = n[r] === f[r] : e = !1);
      e = e && f;
    }
  else if (typeof t.splice == "function")
    for (e = [], r = t.length; r--; )
      this.match(t[r]) && (e[e.length] = t[r]);
  else if (typeof t == "object") {
    e = {};
    for (var g in t)
      this.match(g) && (e[g] = t[g]);
  }
  return e;
};
var j4 = function(t, e, n) {
  var r = new Pg(t, n || /[\/\.]/);
  return typeof e < "u" ? r.match(e) : r;
}, $4 = j4, V4 = /[\/\+\.]/, H4 = function(t, e) {
  function n(r) {
    var i = $4(r, t, V4);
    return i && i.length >= 2;
  }
  return e ? n(e.split(";")[0]) : n;
};
const W4 = /* @__PURE__ */ ki(H4);
function U4(t, e) {
  if (!e)
    return;
  const { maxFileSize: n, allowedFileTypes: r, blockedFileTypes: i } = e;
  if (n && t.size != null && t.size > n)
    return oe("`:file` exceeds maximum allowed size of :size", {
      values: { file: t.name, size: N4(n) }
    });
  if (r != null && r.length && !hh(t, r) || i != null && i.length && hh(t, i))
    return oe("This file type is not allowed");
}
function hh(t, e) {
  return e.map((n) => n.split(",")).flat().some((n) => {
    if (n.includes("/"))
      return t.mime ? W4(t.mime.replace(/;.*?$/, ""), n) : !1;
    const r = n.replace(".", "").toLowerCase();
    return r && t.extension ? t.extension.toLowerCase() === r : !1;
  });
}
class X4 {
  /**
   * Open file upload window and add selected image to canvas.
   */
  async uploadAndAddImage(e = !0) {
    const n = await this.openUploadWindow();
    await this.openUploadedFile(n, e);
  }
  /**
   * Open file upload window and replace canvas contents with selected image.
   */
  async uploadAndReplaceMainImage() {
    const e = await this.openUploadWindow();
    e && await this.openBackgroundImage(e);
  }
  /**
   * Open file upload window and replace canvas contents with selected state file.
   */
  async uploadAndOpenStateFile() {
    const e = await this.openUploadWindow(G4);
    e && await this.loadState(await e.data);
  }
  /**
   * Add image at specified url to canvas.
   */
  async addImageFromUrl(e, n = !0) {
    var r, i;
    await ch(
      e,
      ((i = (r = O().config.tools) == null ? void 0 : r.import) == null ? void 0 : i.fitOverlayToScreen) ?? !0,
      n
    ), R().history.addHistoryItem({ name: "overlayImage" });
  }
  /**
   * Add specified image data to canvas.
   */
  async addImageFromData(e, n = !0) {
    var r, i;
    await ch(
      e,
      ((i = (r = O().config.tools) == null ? void 0 : r.import) == null ? void 0 : i.fitOverlayToScreen) ?? !0,
      n
    ), R().history.addHistoryItem({ name: "overlayImage" });
  }
  /**
   * @hidden
   */
  async openUploadedFile(e, n = !0) {
    if (!e)
      return;
    const r = await e.data;
    switch (e.extension) {
      case "json":
        await this.loadState(r);
        break;
      case "svg":
        await R().shape.addSvgSticker(r, Ve.Image), R().history.addHistoryItem({ name: "overlayImage" });
        break;
      default:
        await this.addImageFromData(r, n);
    }
  }
  /**
   * Replace current editor state with specified one.
   */
  async loadState(e) {
    O().toggleLoading("state"), await Ia();
    let n;
    typeof e == "string" ? e.endsWith(".json") ? n = await no(e) : n = JSON.parse(e) : n = e, n.history ? O().history.reset(n.history) : await R().history.addInitial(n), await R().history.reload(), O().toggleLoading(!1);
  }
  /**
   * @hidden
   */
  async openUploadWindow(e) {
    var r, i;
    e = e || Y4();
    const n = (await B4(e))[0];
    return this.fileIsValid(n) ? ((i = (r = O().config).onFileOpen) == null || i.call(r, n), n) : null;
  }
  /**
   * Open specified data or image as background image.
   */
  async openBackgroundImage(e) {
    await Ia();
    let n;
    e instanceof HTMLImageElement ? n = e.src : e instanceof uo ? n = await e.data : n = e;
    const r = await R().canvas.addMainImage(n);
    return await R().history.addInitial(), r;
  }
  fileIsValid(e) {
    var f, g, l, s;
    const n = ((g = (f = O().config.tools) == null ? void 0 : f.import) == null ? void 0 : g.maxFileSize) ?? z4(10, "MB"), r = [
      ...((s = (l = O().config.tools) == null ? void 0 : l.import) == null ? void 0 : s.validImgExtensions) ?? [],
      "json"
    ], i = U4(e, { maxFileSize: n, allowedFileTypes: r });
    return i ? (Fr.danger(i), !1) : !0;
  }
}
function Y4() {
  var e, n;
  const t = (n = (e = O().config.tools) == null ? void 0 : e.import) == null ? void 0 : n.validImgExtensions;
  return t ? { extensions: t } : { types: [sc.image] };
}
const G4 = {
  types: [".json", sc.json]
};
class K4 {
  constructor() {
    Te(this, "watermark", null);
    Te(this, "lineStyle", {
      stroke: "rgba(255,255,255,0.3)",
      strokeWidth: 5,
      strokeLineCap: "round",
      strokeLineJoin: "round"
    });
  }
  /**
   * Add a watermark to canvas.
   */
  add(e) {
    this.createGroup(), this.addText(e), this.addLines(), he().add(this.watermark), R().canvas.render();
  }
  /**
   * Remove watermark from canvas.
   */
  remove() {
    this.watermark && (he().remove(this.watermark), this.watermark = null, R().canvas.render());
  }
  createGroup() {
    this.watermark = new we.fabric.Group(void 0, {
      ...Zn,
      width: O().original.width,
      height: O().original.height,
      excludeFromExport: !0,
      top: 0,
      left: 0,
      originX: "left",
      originY: "top"
    });
  }
  addText(e) {
    var r;
    const n = new we.fabric.Text(e, {
      fill: "rgba(255,255,255,0.3)",
      strokeWidth: 2,
      stroke: "rgba(255,255,255,0.4)",
      originX: "center",
      originY: "center",
      fontWeight: 600,
      fontSize: 150,
      fontFamily: "Courier New"
    });
    n.scaleToWidth(O().original.width / 2), (r = this.watermark) == null || r.add(n);
  }
  addLines() {
    var h;
    if (!this.watermark)
      return;
    const e = (h = this.watermark) == null ? void 0 : h.getObjects("text")[0], n = O().original.width / 2, r = O().original.height / 2, i = 100, f = e.width / 4, g = new we.fabric.Line(void 0, this.lineStyle), l = new we.fabric.Line(void 0, this.lineStyle), s = new we.fabric.Line(void 0, this.lineStyle), a = new we.fabric.Line(void 0, this.lineStyle);
    this.watermark.add(g, l, s, a), g.set({
      x1: f,
      y1: -i,
      x2: n,
      y2: -r
    }), l.set({
      x1: f,
      y1: i,
      x2: n,
      y2: r
    }), s.set({
      x1: -f,
      y1: -i,
      x2: -n,
      y2: -r
    }), a.set({
      x1: -f,
      y1: i,
      x2: -n,
      y2: r
    });
  }
}
var Mg = { exports: {} };
(function(t, e) {
  (function(n, r) {
    r();
  })(cr, function() {
    function n(a, h) {
      return typeof h > "u" ? h = { autoBom: !1 } : typeof h != "object" && (console.warn("Deprecated: Expected third argument to be a object"), h = { autoBom: !h }), h.autoBom && /^\s*(?:text\/\S*|application\/xml|\S*\/\S*\+xml)\s*;.*charset\s*=\s*utf-8/i.test(a.type) ? new Blob(["\uFEFF", a], { type: a.type }) : a;
    }
    function r(a, h, o) {
      var u = new XMLHttpRequest();
      u.open("GET", a), u.responseType = "blob", u.onload = function() {
        s(u.response, h, o);
      }, u.onerror = function() {
        console.error("could not download file");
      }, u.send();
    }
    function i(a) {
      var h = new XMLHttpRequest();
      h.open("HEAD", a, !1);
      try {
        h.send();
      } catch {
      }
      return 200 <= h.status && 299 >= h.status;
    }
    function f(a) {
      try {
        a.dispatchEvent(new MouseEvent("click"));
      } catch {
        var h = document.createEvent("MouseEvents");
        h.initMouseEvent("click", !0, !0, window, 0, 0, 0, 80, 20, !1, !1, !1, !1, 0, null), a.dispatchEvent(h);
      }
    }
    var g = typeof window == "object" && window.window === window ? window : typeof self == "object" && self.self === self ? self : typeof cr == "object" && cr.global === cr ? cr : void 0, l = g.navigator && /Macintosh/.test(navigator.userAgent) && /AppleWebKit/.test(navigator.userAgent) && !/Safari/.test(navigator.userAgent), s = g.saveAs || (typeof window != "object" || window !== g ? function() {
    } : "download" in HTMLAnchorElement.prototype && !l ? function(a, h, o) {
      var u = g.URL || g.webkitURL, c = document.createElement("a");
      h = h || a.name || "download", c.download = h, c.rel = "noopener", typeof a == "string" ? (c.href = a, c.origin === location.origin ? f(c) : i(c.href) ? r(a, h, o) : f(c, c.target = "_blank")) : (c.href = u.createObjectURL(a), setTimeout(function() {
        u.revokeObjectURL(c.href);
      }, 4e4), setTimeout(function() {
        f(c);
      }, 0));
    } : "msSaveOrOpenBlob" in navigator ? function(a, h, o) {
      if (h = h || a.name || "download", typeof a != "string")
        navigator.msSaveOrOpenBlob(n(a, o), h);
      else if (i(a))
        r(a, h, o);
      else {
        var u = document.createElement("a");
        u.href = a, u.target = "_blank", setTimeout(function() {
          f(u);
        });
      }
    } : function(a, h, o, u) {
      if (u = u || open("", "_blank"), u && (u.document.title = u.document.body.innerText = "downloading..."), typeof a == "string")
        return r(a, h, o);
      var c = a.type === "application/octet-stream", d = /constructor/i.test(g.HTMLElement) || g.safari, m = /CriOS\/[\d]+/.test(navigator.userAgent);
      if ((m || c && d || l) && typeof FileReader < "u") {
        var p = new FileReader();
        p.onloadend = function() {
          var y = p.result;
          y = m ? y : y.replace(/^data:[^;]*;/, "data:attachment/file;"), u ? u.location.href = y : location = y, u = null;
        }, p.readAsDataURL(a);
      } else {
        var v = g.URL || g.webkitURL, b = v.createObjectURL(a);
        u ? u.location = b : location.href = b, u = null, setTimeout(function() {
          v.revokeObjectURL(b);
        }, 4e4);
      }
    });
    g.saveAs = s.saveAs = s, t.exports = s;
  });
})(Mg);
var q4 = Mg.exports;
function Z4(t, e, n) {
  e = e || "", n = n || 512;
  const r = atob(t), i = [];
  for (let f = 0; f < r.length; f += n) {
    const g = r.slice(f, f + n), l = new Array(g.length);
    for (let a = 0; a < g.length; a++)
      l[a] = g.charCodeAt(a);
    const s = new Uint8Array(l);
    i.push(s);
  }
  return new Blob(i, { type: e });
}
class J4 {
  /**
   * Primary "save" function. This is called when user clicks "Done" button in the toolbar.
   * It will apply watermark (if specified) and execute one of the actions below in the order of priority:
   *
   * 1. Send image data to url. If specified via "saveUrl" option in configuration.
   * 2. Execute "onSave" callback function. If provided in configuration.
   * 3. Download image or state file to user device with specified name, format and quality.
   */
  save(e, n, r) {
    var l, s, a;
    const i = (l = O().config.tools) == null ? void 0 : l.export;
    e = e || (i == null ? void 0 : i.defaultName), n = this.getFormat(n), r = this.getQuality(r);
    const f = `${e}.${n}`;
    this.applyWaterMark();
    const g = n === "json" ? this.getJsonState() : this.getDataUrl(n, r);
    if (R().watermark.remove(), !!g)
      if (O().config.saveUrl)
        fetch(O().config.saveUrl, {
          method: "POST",
          body: JSON.stringify({ data: g, filename: f, format: n })
        });
      else if (O().config.onSave)
        (a = (s = O().config).onSave) == null || a.call(s, g, f, n);
      else {
        const h = this.getCanvasBlob(n, g);
        q4.saveAs(h, f);
      }
  }
  /**
   * Returns base64 encoded data for current image.
   */
  getDataUrl(e, n) {
    try {
      return e === "svg" ? he().toSVG() : he().toDataURL({
        format: this.getFormat(e),
        quality: this.getQuality(n),
        multiplier: Math.max(
          O().original.width / he().width,
          O().original.height / he().height
        )
      });
    } catch (r) {
      r.message.toLowerCase().includes("tainted") && Fr.danger(oe("Could not export canvas with external image."));
    }
    return null;
  }
  getCanvasBlob(e, n) {
    if (e === "json")
      return new Blob([n], { type: "application/json" });
    if (e === "svg")
      return new Blob([n], { type: "image/svg+xml" });
    const r = `image/${e}`;
    return n = n.replace(/data:image\/([a-z]*)?;base64,/, ""), Z4(n, r);
  }
  getJsonState() {
    return JSON.stringify({
      ...xs(),
      history: O().history
    });
  }
  applyWaterMark() {
    const e = O().config.watermarkText;
    e && R().watermark.add(e);
  }
  getFormat(e) {
    var r;
    const n = (r = O().config.tools) == null ? void 0 : r.export;
    return e = e || (n == null ? void 0 : n.defaultFormat) || "png", e === "jpg" && (e = "jpeg"), e;
  }
  getQuality(e) {
    var r;
    const n = (r = O().config.tools) == null ? void 0 : r.export;
    return e = e || (n == null ? void 0 : n.defaultQuality) || 0.8, e;
  }
}
class Q4 {
  constructor() {
    Te(this, "previewRect", null);
  }
  async apply(e) {
    this.previewRect || this.showPreview(), this.updatePreview(e), he().remove(this.previewRect), he().clipPath = this.previewRect;
    const n = R().export.getDataUrl();
    n && R().canvas.clear(), this.hidePreview(), n && await R().canvas.addMainImage(n), he().clipPath = void 0;
  }
  getPreviewRadius() {
    var e;
    return ((e = this.previewRect) == null ? void 0 : e.rx) || 0;
  }
  updatePreview(e) {
    this.previewRect && (this.previewRect.set({
      rx: e,
      ry: e
    }), R().canvas.render());
  }
  showPreview() {
    const e = O().original.width * 0.04;
    this.previewRect = new we.fabric.Rect({
      width: O().original.width,
      height: O().original.height,
      rx: e,
      ry: e,
      objectCaching: !1,
      fill: "transparent",
      name: "round.rect",
      data: { pixieInternal: !0 },
      stroke: "rgba(255,255,255,0.8)",
      strokeWidth: 3,
      strokeDashArray: [4, 4],
      selectable: !1,
      evented: !1
    }), he().add(this.previewRect), this.previewRect.moveTo(99), this.previewRect.viewportCenter(), R().canvas.render();
  }
  hidePreview() {
    this.previewRect && (he().remove(this.previewRect), R().canvas.render(), this.previewRect = null);
  }
}
class e5 {
  get straightenAnchor() {
    return he().getObjects().find(
      (e) => e.name === Ve.StraightenAnchor
    );
  }
  /**
   * Rotate canvas left by 90 degrees.
   */
  rotateLeft() {
    this.rotateFixed(-90);
  }
  /**
   * Rotate canvas right by 90 degrees.
   */
  rotateRight() {
    this.rotateFixed(90);
  }
  /**
   * Straighten canvas by specified number of degrees.
   */
  straighten(e) {
    this.storeObjectsRelationToHelper(), R().objects.deselectActive();
    const n = (this.straightenAnchor.data.rotateAngle || 0) + e, r = this.getImageScale(n, this.straightenAnchor);
    this.straightenAnchor.angle = n, this.straightenAnchor.scaleX = r, this.straightenAnchor.scaleY = r, this.straightenAnchor.data.straightenAngle = e, this.transformObjectsBasedOnHelper();
  }
  /**
   * Flip canvas vertically or horizontally.
   */
  flip(e) {
    const n = e === "horizontal" ? "flipY" : "flipX";
    R().objects.getAll().forEach((r) => {
      r[n] = !r[n];
    }), R().canvas.render();
  }
  rotateFixed(e) {
    R().zoom.set(1, !1), R().objects.deselectActive();
    const n = this.straightenAnchor.data.rotateAngle || 0;
    e = Math.round(e / 90) * 90;
    const r = n + (this.straightenAnchor.data.straightenAngle || 0) + e;
    R().canvas.resize(O().original.height, O().original.width, {
      applyZoom: !1,
      resizeHelper: !1
    }), this.storeObjectsRelationToHelper(), this.straightenAnchor.rotate(r), this.straightenAnchor.data.rotateAngle = n + e, this.straightenAnchor.center(), this.transformObjectsBasedOnHelper(), R().frame.resize(R().frame.active.currentSizeInPercent), requestAnimationFrame(() => {
      R().zoom.fitToScreen();
    });
  }
  /**
   * Get minimum scale in order for image to fill the whole canvas, based on rotation.
   */
  getImageScale(e, n) {
    e = we.fabric.util.degreesToRadians(e);
    const r = O().original.width, i = O().original.height, f = r / 2, g = i / 2, l = n.width / 2, s = n.height / 2, a = Math.sqrt(f ** 2 + g ** 2), h = Math.asin(g / a);
    let o = (e % (Math.PI * 2) + Math.PI * 4) % (Math.PI * 2);
    o > Math.PI && (o -= Math.PI), o > Math.PI / 2 && o <= Math.PI && (o = Math.PI / 2 - (o - Math.PI / 2));
    const u = Math.PI / 2 - h - Math.abs(o), c = Math.abs(h - Math.abs(o)), d = Math.cos(u) * a, m = Math.cos(c) * a;
    return Math.max(m / l, d / s);
  }
  storeObjectsRelationToHelper() {
    R().objects.getAll().forEach((e) => {
      if (e !== this.straightenAnchor) {
        const n = we.fabric.util.multiplyTransformMatrices(
          we.fabric.util.invertTransform(
            this.straightenAnchor.calcTransformMatrix()
          ),
          e.calcTransformMatrix()
        );
        e.data = { ...e.data, relationToCanvas: n };
      }
    });
  }
  transformObjectsBasedOnHelper() {
    R().objects.getAll().forEach((e) => {
      if (e.data.relationToCanvas) {
        const n = we.fabric.util.multiplyTransformMatrices(
          this.straightenAnchor.calcTransformMatrix(),
          e.data.relationToCanvas
        ), r = we.fabric.util.qrDecompose(n);
        e.set({ flipX: !1, flipY: !1 }), e.setPositionByOrigin(
          { x: r.translateX, y: r.translateY },
          "center",
          "center"
        ), e.set(r), e.setCoords(), e.data.relationToCanvas = null;
      }
    });
  }
  /**
   * @hidden
   */
  resetStraightenAnchor() {
    const e = this.straightenAnchor;
    e && he().remove(e);
    const n = new we.fabric.Rect({
      ...Zn,
      name: Ve.StraightenAnchor,
      visible: !1,
      width: O().original.width,
      height: O().original.height,
      data: {
        pixieInternal: !0,
        straightenAngle: 0,
        rotateAngle: 0
      }
    });
    he().add(n), n.viewportCenter();
  }
}
function t5(t) {
  const e = GS(t);
  O().editor.fabric = e, ue.setState({ fabric: e }), O().editor.tools = {
    canvas: new qS(),
    objects: new n4(),
    zoom: new KS(),
    history: new a4(),
    filter: new h4(),
    resize: new d4(),
    crop: new y4(),
    merge: new c4(),
    shape: new w4(),
    frame: new S4(),
    text: new T4(),
    draw: new A4(),
    transform: new e5(),
    import: new X4(),
    watermark: new K4(),
    export: new J4(),
    corners: new Q4()
  };
}
function fh(t, e) {
  const n = new ResizeObserver((r) => {
    const i = r[0].contentRect;
    e({ width: i.width, height: i.height });
  });
  return t.current && n.observe(t.current), () => {
    t.current && n.unobserve(t.current);
  };
}
function dh(t) {
  const e = t.getBoundingClientRect();
  return {
    top: e.top,
    right: e.right,
    bottom: e.bottom,
    left: e.left,
    width: e.width,
    height: e.height
  };
}
const Fg = "flex flex-shrink-0 items-center justify-between px-12 py-[9px] w-full h-[54px]", Ig = {
  initial: { opacity: 0 },
  animate: { opacity: 1 },
  exit: { opacity: 0, position: "absolute" },
  transition: { type: "tween", duration: 0.15 }
};
function oc(t, { padding: e, equalWidth: n, variant: r } = {}) {
  switch (t) {
    case "2xs":
      return r === "link" ? "text-xs" : `text-xs h-24 ${n ? "w-24" : e || "px-10"}`;
    case "xs":
      return r === "link" ? "text-xs" : `text-xs h-30 ${n ? "w-30" : e || "px-14"}`;
    case "sm":
      return r === "link" ? "text-sm" : `text-sm h-36 ${n ? "w-36" : e || "px-18"}`;
    case "md":
      return r === "link" ? "text-base" : `text-base h-42 ${n ? "w-42" : e || "px-22"}`;
    case "lg":
      return r === "link" ? "text-lg" : `text-base h-50 ${n ? "w-50" : e || "px-26"}`;
    case "xl":
      return r === "link" ? "text-xl" : `text-lg h-60 ${n ? "w-60" : e || "px-32"}`;
    default:
      return t || "";
  }
}
function n5(t) {
  const {
    variant: e,
    shadow: n,
    whitespace: r = "whitespace-nowrap",
    display: i = "inline-flex"
  } = t, f = { ...t, border: t.border || "border" };
  let g = [];
  return e === "outline" ? g = r5(f) : e === "text" ? g = i5(f) : e === "flat" || e === "raised" ? g = o5(f) : e === "link" && (g = s5(f)), [
    ...g,
    n || e === "raised" && "shadow-md",
    r,
    i,
    e && "align-middle flex-shrink-0 items-center transition-button duration-200",
    "select-none appearance-none no-underline outline-none disabled:pointer-events-none disabled:cursor-default"
  ];
}
function r5({ color: t, border: e }) {
  const n = "disabled:text-disabled disabled:bg-transparent disabled:border-disabled-bg";
  switch (t) {
    case "primary":
      return [
        `text-primary bg-transparent ${e} border-primary/50`,
        "hover:bg-primary/hover hover:border-primary",
        n
      ];
    case "danger":
      return [
        `text-danger bg-transparent ${e} border-danger/50`,
        "hover:bg-danger/4 hover:border-danger",
        n
      ];
    case "positive":
      return [
        `text-positive bg-transparent ${e} border-positive/50`,
        "hover:bg-positive/4 hover:border-positive",
        n
      ];
    case "paper":
      return [`text bg-paper ${e}`, "hover:bg-hover", n];
    case "white":
      return [
        "text-white bg-transparent border border-white",
        "hover:bg-white/20",
        "disabled:text-white/70 disabled:border-white/70 disabled:bg-transparent"
      ];
    default:
      return [`bg-transparent ${e}`, "hover:bg-hover", n];
  }
}
function i5({ color: t }) {
  const e = "disabled:text-disabled disabled:bg-transparent";
  switch (t) {
    case "primary":
      return [
        "text-primary bg-transparent border-transparent",
        "hover:bg-primary/4",
        e
      ];
    case "danger":
      return [
        "text-danger bg-transparent border-transparent",
        "hover:bg-danger/4",
        e
      ];
    case "positive":
      return [
        "text-positive bg-transparent border-transparent",
        "hover:bg-positive/4",
        e
      ];
    case "white":
      return [
        "text-white bg-transparent border-transparent",
        "hover:bg-white/20",
        "disabled:text-white/70 disabled:bg-transparent"
      ];
    default:
      return ["bg-transparent border-transparent", "hover:bg-hover", e];
  }
}
function s5({ color: t }) {
  switch (t) {
    case "primary":
      return ["text-primary", "hover:underline", "disabled:text-disabled"];
    case "danger":
      return ["text-danger", "hover:underline", "disabled:text-disabled"];
    default:
      return ["text-main", "hover:underline", "disabled:text-disabled"];
  }
}
function o5({ color: t, border: e }) {
  const n = "disabled:text-disabled disabled:bg-disabled disabled:border-transparent disabled:shadow-none";
  switch (t) {
    case "primary":
      return [
        `text-on-primary bg-primary ${e} border-primary`,
        "hover:bg-primary-dark hover:border-primary-dark",
        n
      ];
    case "danger":
      return [
        `text-white bg-danger ${e} border-danger`,
        "hover:bg-danger/90 hover:border-danger/90",
        n
      ];
    case "chip":
      return [
        `text-main bg-chip ${e} border-chip`,
        "hover:bg-chip/90 hover:border-chip/90",
        n
      ];
    case "paper":
      return [
        `text-main bg-paper ${e} border-paper`,
        "hover:bg-paper/90 hover:border-paper/90",
        n
      ];
    case "white":
      return [
        `text-black bg-white ${e} border-white`,
        "hover:bg-white",
        n
      ];
    default:
      return [`bg ${e} border-background`, "hover:bg-hover", n];
  }
}
function ct(t) {
  return t && ((e) => {
    e.currentTarget.contains(e.target) && t(e);
  });
}
const rn = Je((t, e) => {
  const {
    children: n,
    color: r = null,
    variant: i,
    radius: f,
    shadow: g,
    whitespace: l,
    justify: s = "justify-center",
    className: a,
    href: h,
    form: o,
    border: u,
    elementType: c,
    to: d,
    relative: m,
    replace: p,
    end: v,
    display: b,
    type: y = "button",
    onClick: w,
    onPointerDown: C,
    onPointerUp: _,
    onKeyDown: S,
    ...k
  } = t, I = c || (h ? "a" : "button"), L = I === "a";
  return /* @__PURE__ */ x(
    I,
    {
      ref: e,
      form: L ? void 0 : o,
      href: h,
      to: d,
      relative: m,
      type: L ? void 0 : y,
      replace: p,
      end: v,
      onPointerDown: ct(C),
      onPointerUp: ct(_),
      onClick: ct(w),
      onKeyDown: ct(S),
      className: ae(
        "focus-visible:ring",
        n5({ variant: i, color: r, border: u, whitespace: l, display: b }),
        f,
        s,
        a
      ),
      ...k,
      children: n
    }
  );
}), st = ce.forwardRef(
  ({
    children: t,
    startIcon: e,
    endIcon: n,
    size: r = "sm",
    sizeClassName: i,
    className: f,
    equalWidth: g = !1,
    radius: l = "rounded-button",
    variant: s = "text",
    disabled: a,
    elementType: h,
    to: o,
    replace: u,
    href: c,
    download: d,
    ...m
  }, p) => {
    const v = ae(
      "font-semibold",
      i || oc(r, { equalWidth: g, variant: s }),
      f
    );
    return /* @__PURE__ */ ie(
      rn,
      {
        className: v,
        ref: p,
        radius: l,
        variant: s,
        disabled: a,
        to: a ? void 0 : o,
        href: a ? void 0 : c,
        download: a ? void 0 : d,
        elementType: a ? void 0 : h,
        replace: a ? void 0 : u,
        ...m,
        children: [
          e && /* @__PURE__ */ x(ph, { position: "start", icon: e, size: r }),
          t,
          n && /* @__PURE__ */ x(ph, { position: "end", icon: n, size: r })
        ]
      }
    );
  }
);
function ph({ icon: t, position: e, size: n }) {
  const r = ae(
    "m-auto",
    {
      "-ml-4 mr-8": e === "start",
      "-mr-4 ml-8": e === "end"
    },
    t.props.className
  );
  return ce.cloneElement(t, { className: r, size: n });
}
const Rg = Gn(null);
function ac() {
  return ze(Rg);
}
const Ka = be(
  /* @__PURE__ */ x("path", { d: "M9 16.17 4.83 12l-1.42 1.41L9 19 21 7l-1.41-1.41L9 16.17z" }),
  "CheckOutlined"
), a5 = ce.forwardRef(
  (t, e) => {
    let {
      startIcon: n,
      capitalizeFirst: r,
      children: i,
      description: f,
      endIcon: g,
      endSection: l,
      isDisabled: s,
      isActive: a,
      isSelected: h,
      showCheckmark: o,
      elementType: u = "div",
      radius: c,
      padding: d,
      ...m
    } = t;
    !n && o && (n = /* @__PURE__ */ x(
      Ka,
      {
        size: "sm",
        className: ae("text-primary", !h && "invisible")
      }
    ));
    const p = ae(
      "icon-sm rounded overflow-hidden flex-shrink-0",
      !s && "text-muted"
    ), v = ae(!s && "text-muted");
    return /* @__PURE__ */ ie(
      u,
      {
        ...m,
        "aria-disabled": s,
        className: l5(t),
        ref: e,
        children: [
          n && /* @__PURE__ */ x("div", { className: p, children: n }),
          /* @__PURE__ */ ie(
            "div",
            {
              className: ae(
                "min-w-auto mr-auto w-full overflow-hidden overflow-ellipsis",
                r && "first-letter:capitalize"
              ),
              children: [
                i,
                f && /* @__PURE__ */ x(
                  "div",
                  {
                    className: ae(
                      "mt-4 whitespace-normal text-xs",
                      s ? "text-disabled" : "text-muted"
                    ),
                    children: f
                  }
                )
              ]
            }
          ),
          (g || l) && /* @__PURE__ */ x("div", { className: g ? p : v, children: g || l })
        ]
      }
    );
  }
);
function l5({
  className: t,
  isSelected: e,
  isActive: n,
  isDisabled: r,
  showCheckmark: i,
  endIcon: f,
  endSection: g,
  radius: l,
  padding: s
}) {
  let a = "";
  r ? a = "text-disabled pointer-events-none" : e ? n ? a = "bg-primary/focus" : a = "bg-primary/selected hover:bg-primary/focus" : n ? a = "hover:bg-fg-base/15 bg-focus" : a = "hover:bg-hover";
  let h;
  return s ? h = s : i ? f || g ? h = "pl-8 pr-8 py-8" : h = "pl-8 pr-24 py-8" : h = "px-20 py-8", ae(
    "w-full select-none outline-none cursor-pointer",
    "text-sm truncate flex items-center gap-10",
    !r && "text-main",
    h,
    a,
    t,
    l
  );
}
function ho({
  children: t,
  value: e,
  startIcon: n,
  endIcon: r,
  endSection: i,
  description: f,
  capitalizeFirst: g,
  textLabel: l,
  isDisabled: s,
  onSelected: a,
  onClick: h,
  ...o
}) {
  var L;
  const {
    collection: u,
    showCheckmark: c,
    virtualFocus: d,
    listboxId: m,
    role: p,
    listItemsRef: v,
    handleItemSelection: b,
    state: { selectedValues: y, activeIndex: w, setActiveIndex: C }
  } = ac(), _ = y.includes(e), S = (L = u.get(e)) == null ? void 0 : L.index, k = w === S;
  if (S == null)
    return null;
  const I = k && !s ? -1 : 0;
  return /* @__PURE__ */ x(
    a5,
    {
      ...o,
      onFocus: () => {
        d || C(S);
      },
      onPointerEnter: (j) => {
        C(S), d || j.currentTarget.focus();
      },
      onPointerDown: (j) => {
        d && j.preventDefault();
      },
      onKeyDown: (j) => {
        (j.key === "Enter" || j.key === " ") && (j.preventDefault(), b(e), a == null || a());
      },
      onClick: (j) => {
        b(e), a == null || a(), h == null || h(j);
      },
      ref: (j) => v.current[S] = j,
      id: `${m}-${S}`,
      role: p === "menu" ? "menuitem" : "option",
      tabIndex: d ? void 0 : I,
      "aria-selected": k && _,
      showCheckmark: c,
      isDisabled: s,
      isActive: k,
      isSelected: _,
      startIcon: n,
      description: f,
      endIcon: r,
      endSection: i,
      capitalizeFirst: g,
      "data-value": e,
      children: t
    }
  );
}
var Lg = { exports: {} };
(function(t) {
  (function() {
    var e = Object.assign;
    typeof e != "function" && (e = function() {
      var i = arguments, f = arguments[0];
      if (f == null)
        throw new TypeError("Cannot convert undefined or null to object");
      f = Object(f);
      for (var g = 1; g < i.length; g++)
        if (i[g] && typeof i[g] == "object")
          for (var l in i[g])
            f[l] = i[g][l];
      return f;
    });
    function n(i) {
      var f = i + "", g = f.indexOf("...");
      return g >= 0 && (g < f.indexOf(")") || f.indexOf("arguments") >= 0);
    }
    function r(i, f) {
      f || (f = {});
      var g = f.vargs || n(i), l = /* @__PURE__ */ Object.create(null), s = [], a = [], h, o = /* @__PURE__ */ new WeakMap(), u = function(y, w, C) {
        return setTimeout(function() {
          if (C) {
            w.splice(y, 1), C.splice(y, 1);
            return;
          }
          w instanceof WeakMap ? w.delete(y) : delete w[y];
        }, f.maxAge);
      }, c = f.maxAge > 0 && f.maxAge < 1 / 0 ? u : 0, d = f.equals ? f.equals : function(y, w) {
        return y === w;
      }, m = f.maxArgs, p = f.serializer, v, b;
      return i.length === 1 && !f.equals && !g ? (v = (function(y) {
        var w = typeof y;
        if (!p && (w === "object" && y || w === "function")) {
          var C;
          return o.get(y) || (!c || c(y, o), o.set(y, C = i.call(this, y)), C);
        }
        var _ = w === "number" || w === "boolean" || y == null ? y : w === "string" ? JSON.stringify(y) : p(y);
        return l[_] || (!c || c(_, l), l[_] = i.call(this, y));
      }).bind(this), b = 1) : v = (function() {
        var y = arguments.length;
        if (!y && h != null)
          return a[h];
        var w = m || y, C;
        for (C = s.length - 1; C >= 0; C--)
          if (!(!m && s[C].length !== w)) {
            for (var _ = w - 1; _ >= 0 && d(s[C][_], arguments[_]); _--)
              if (_ === 0)
                return a[C];
          }
        return C = s.length - (C + 1), !y && h == null && (h = C), !c || c(C, a, s), a[C] = i.apply(this, s[C] = arguments);
      }).bind(this), v.clear = function() {
        o = /* @__PURE__ */ new WeakMap(), l = /* @__PURE__ */ Object.create(null), s = [], a = [], h = void 0;
      }, v.keys = function() {
        return b ? null : s.slice();
      }, v.values = function() {
        return b ? null : a.slice();
      }, v.keyValues = function() {
        return b ? { primitives: e({}, l), objects: o } : null;
      }, v;
    }
    t.exports = r, typeof window < "u" && (window.nanomemoize = r);
  }).call(cr);
})(Lg);
var c5 = Lg.exports;
const Ii = /* @__PURE__ */ ki(c5);
function u5({ children: t, label: e, index: n }) {
  const r = Pt();
  return /* @__PURE__ */ ie(
    "div",
    {
      role: "group",
      className: ae(n !== 0 && "border-t my-4"),
      "aria-labelledby": e ? `be-select-${r}` : void 0,
      children: [
        e && /* @__PURE__ */ x(
          "div",
          {
            className: "block uppercase text-muted text-xs px-16 py-10",
            role: "presentation",
            id: `be-select-${r}`,
            "aria-hidden": "true",
            children: e
          }
        ),
        t
      ]
    }
  );
}
const h5 = Ii(
  ({ maxItems: t, children: e, items: n, inputValue: r }) => {
    let i = d5({ children: e, items: n }), f = f5({ collection: i, inputValue: r });
    return t && (i = new Map([...i.entries()].slice(0, t)), f = new Map(
      [...f.entries()].slice(0, t)
    )), { collection: i, filteredCollection: f };
  }
), f5 = Ii(
  ({ collection: t, inputValue: e }) => {
    let n = /* @__PURE__ */ new Map();
    const r = e ? `${e}`.toLowerCase().trim() : "";
    if (!r)
      n = t;
    else {
      let i = 0;
      t.forEach((f, g) => {
        (f.item ? JSON.stringify(f.item) : f.textLabel).toLowerCase().trim().includes(r) && n.set(g, { ...f, index: i++ });
      });
    }
    return n;
  }
), d5 = Ii(
  ({ children: t, items: e }) => {
    let n;
    e && typeof t == "function" ? n = e.map((g) => t(g)) : n = t;
    const r = /* @__PURE__ */ new Map();
    let i = 0;
    const f = (g, l, s, a) => {
      const h = i++, o = l ? (
        // get item from nested array
        e == null ? void 0 : e[s].items[a]
      ) : (
        // get item from flat array
        e == null ? void 0 : e[h]
      );
      r.set(g.props.value, {
        index: h,
        element: g,
        textLabel: p5(g),
        item: o,
        section: l,
        isDisabled: g.props.isDisabled,
        value: g.props.value
      });
    };
    return mn.forEach(n, (g, l) => {
      Jt(g) && (g.type === u5 ? mn.forEach(
        g.props.children,
        (s, a) => {
          f(s, g, l, a);
        }
      ) : f(g));
    }), r;
  }
);
function p5(t) {
  var n;
  const e = t.props.children;
  return t.props.textLabel ? t.props.textLabel : (n = e == null ? void 0 : e.props) != null && n.message ? e.props.message : `${e}` || "";
}
const Lt = Math.min, dt = Math.max, Ms = Math.round, rs = Math.floor, wn = (t) => ({
  x: t,
  y: t
}), g5 = {
  left: "right",
  right: "left",
  bottom: "top",
  top: "bottom"
}, m5 = {
  start: "end",
  end: "start"
};
function qa(t, e, n) {
  return dt(t, Lt(e, n));
}
function Lr(t, e) {
  return typeof t == "function" ? t(e) : t;
}
function xn(t) {
  return t.split("-")[0];
}
function Br(t) {
  return t.split("-")[1];
}
function Bg(t) {
  return t === "x" ? "y" : "x";
}
function lc(t) {
  return t === "y" ? "height" : "width";
}
function Ri(t) {
  return ["top", "bottom"].includes(xn(t)) ? "y" : "x";
}
function cc(t) {
  return Bg(Ri(t));
}
function v5(t, e, n) {
  n === void 0 && (n = !1);
  const r = Br(t), i = cc(t), f = lc(i);
  let g = i === "x" ? r === (n ? "end" : "start") ? "right" : "left" : r === "start" ? "bottom" : "top";
  return e.reference[f] > e.floating[f] && (g = Fs(g)), [g, Fs(g)];
}
function b5(t) {
  const e = Fs(t);
  return [Za(t), e, Za(e)];
}
function Za(t) {
  return t.replace(/start|end/g, (e) => m5[e]);
}
function y5(t, e, n) {
  const r = ["left", "right"], i = ["right", "left"], f = ["top", "bottom"], g = ["bottom", "top"];
  switch (t) {
    case "top":
    case "bottom":
      return n ? e ? i : r : e ? r : i;
    case "left":
    case "right":
      return e ? f : g;
    default:
      return [];
  }
}
function w5(t, e, n, r) {
  const i = Br(t);
  let f = y5(xn(t), n === "start", r);
  return i && (f = f.map((g) => g + "-" + i), e && (f = f.concat(f.map(Za)))), f;
}
function Fs(t) {
  return t.replace(/left|right|bottom|top/g, (e) => g5[e]);
}
function x5(t) {
  return {
    top: 0,
    right: 0,
    bottom: 0,
    left: 0,
    ...t
  };
}
function zg(t) {
  return typeof t != "number" ? x5(t) : {
    top: t,
    right: t,
    bottom: t,
    left: t
  };
}
function Is(t) {
  const {
    x: e,
    y: n,
    width: r,
    height: i
  } = t;
  return {
    width: r,
    height: i,
    top: n,
    left: e,
    right: e + r,
    bottom: n + i,
    x: e,
    y: n
  };
}
function gh(t, e, n) {
  let {
    reference: r,
    floating: i
  } = t;
  const f = Ri(e), g = cc(e), l = lc(g), s = xn(e), a = f === "y", h = r.x + r.width / 2 - i.width / 2, o = r.y + r.height / 2 - i.height / 2, u = r[l] / 2 - i[l] / 2;
  let c;
  switch (s) {
    case "top":
      c = {
        x: h,
        y: r.y - i.height
      };
      break;
    case "bottom":
      c = {
        x: h,
        y: r.y + r.height
      };
      break;
    case "right":
      c = {
        x: r.x + r.width,
        y: o
      };
      break;
    case "left":
      c = {
        x: r.x - i.width,
        y: o
      };
      break;
    default:
      c = {
        x: r.x,
        y: r.y
      };
  }
  switch (Br(e)) {
    case "start":
      c[g] -= u * (n && a ? -1 : 1);
      break;
    case "end":
      c[g] += u * (n && a ? -1 : 1);
      break;
  }
  return c;
}
const C5 = async (t, e, n) => {
  const {
    placement: r = "bottom",
    strategy: i = "absolute",
    middleware: f = [],
    platform: g
  } = n, l = f.filter(Boolean), s = await (g.isRTL == null ? void 0 : g.isRTL(e));
  let a = await g.getElementRects({
    reference: t,
    floating: e,
    strategy: i
  }), {
    x: h,
    y: o
  } = gh(a, r, s), u = r, c = {}, d = 0;
  for (let m = 0; m < l.length; m++) {
    const {
      name: p,
      fn: v
    } = l[m], {
      x: b,
      y,
      data: w,
      reset: C
    } = await v({
      x: h,
      y: o,
      initialPlacement: r,
      placement: u,
      strategy: i,
      middlewareData: c,
      rects: a,
      platform: g,
      elements: {
        reference: t,
        floating: e
      }
    });
    h = b ?? h, o = y ?? o, c = {
      ...c,
      [p]: {
        ...c[p],
        ...w
      }
    }, C && d <= 50 && (d++, typeof C == "object" && (C.placement && (u = C.placement), C.rects && (a = C.rects === !0 ? await g.getElementRects({
      reference: t,
      floating: e,
      strategy: i
    }) : C.rects), {
      x: h,
      y: o
    } = gh(a, u, s)), m = -1);
  }
  return {
    x: h,
    y: o,
    placement: u,
    strategy: i,
    middlewareData: c
  };
};
async function uc(t, e) {
  var n;
  e === void 0 && (e = {});
  const {
    x: r,
    y: i,
    platform: f,
    rects: g,
    elements: l,
    strategy: s
  } = t, {
    boundary: a = "clippingAncestors",
    rootBoundary: h = "viewport",
    elementContext: o = "floating",
    altBoundary: u = !1,
    padding: c = 0
  } = Lr(e, t), d = zg(c), p = l[u ? o === "floating" ? "reference" : "floating" : o], v = Is(await f.getClippingRect({
    element: (n = await (f.isElement == null ? void 0 : f.isElement(p))) == null || n ? p : p.contextElement || await (f.getDocumentElement == null ? void 0 : f.getDocumentElement(l.floating)),
    boundary: a,
    rootBoundary: h,
    strategy: s
  })), b = o === "floating" ? {
    x: r,
    y: i,
    width: g.floating.width,
    height: g.floating.height
  } : g.reference, y = await (f.getOffsetParent == null ? void 0 : f.getOffsetParent(l.floating)), w = await (f.isElement == null ? void 0 : f.isElement(y)) ? await (f.getScale == null ? void 0 : f.getScale(y)) || {
    x: 1,
    y: 1
  } : {
    x: 1,
    y: 1
  }, C = Is(f.convertOffsetParentRelativeRectToViewportRelativeRect ? await f.convertOffsetParentRelativeRectToViewportRelativeRect({
    elements: l,
    rect: b,
    offsetParent: y,
    strategy: s
  }) : b);
  return {
    top: (v.top - C.top + d.top) / w.y,
    bottom: (C.bottom - v.bottom + d.bottom) / w.y,
    left: (v.left - C.left + d.left) / w.x,
    right: (C.right - v.right + d.right) / w.x
  };
}
const _5 = (t) => ({
  name: "arrow",
  options: t,
  async fn(e) {
    const {
      x: n,
      y: r,
      placement: i,
      rects: f,
      platform: g,
      elements: l,
      middlewareData: s
    } = e, {
      element: a,
      padding: h = 0
    } = Lr(t, e) || {};
    if (a == null)
      return {};
    const o = zg(h), u = {
      x: n,
      y: r
    }, c = cc(i), d = lc(c), m = await g.getDimensions(a), p = c === "y", v = p ? "top" : "left", b = p ? "bottom" : "right", y = p ? "clientHeight" : "clientWidth", w = f.reference[d] + f.reference[c] - u[c] - f.floating[d], C = u[c] - f.reference[c], _ = await (g.getOffsetParent == null ? void 0 : g.getOffsetParent(a));
    let S = _ ? _[y] : 0;
    (!S || !await (g.isElement == null ? void 0 : g.isElement(_))) && (S = l.floating[y] || f.floating[d]);
    const k = w / 2 - C / 2, I = S / 2 - m[d] / 2 - 1, L = Lt(o[v], I), j = Lt(o[b], I), G = L, te = S - m[d] - j, W = S / 2 - m[d] / 2 + k, q = qa(G, W, te), K = !s.arrow && Br(i) != null && W !== q && f.reference[d] / 2 - (W < G ? L : j) - m[d] / 2 < 0, ne = K ? W < G ? W - G : W - te : 0;
    return {
      [c]: u[c] + ne,
      data: {
        [c]: q,
        centerOffset: W - q - ne,
        ...K && {
          alignmentOffset: ne
        }
      },
      reset: K
    };
  }
}), S5 = function(t) {
  return t === void 0 && (t = {}), {
    name: "flip",
    options: t,
    async fn(e) {
      var n, r;
      const {
        placement: i,
        middlewareData: f,
        rects: g,
        initialPlacement: l,
        platform: s,
        elements: a
      } = e, {
        mainAxis: h = !0,
        crossAxis: o = !0,
        fallbackPlacements: u,
        fallbackStrategy: c = "bestFit",
        fallbackAxisSideDirection: d = "none",
        flipAlignment: m = !0,
        ...p
      } = Lr(t, e);
      if ((n = f.arrow) != null && n.alignmentOffset)
        return {};
      const v = xn(i), b = xn(l) === l, y = await (s.isRTL == null ? void 0 : s.isRTL(a.floating)), w = u || (b || !m ? [Fs(l)] : b5(l));
      !u && d !== "none" && w.push(...w5(l, m, d, y));
      const C = [l, ...w], _ = await uc(e, p), S = [];
      let k = ((r = f.flip) == null ? void 0 : r.overflows) || [];
      if (h && S.push(_[v]), o) {
        const G = v5(i, g, y);
        S.push(_[G[0]], _[G[1]]);
      }
      if (k = [...k, {
        placement: i,
        overflows: S
      }], !S.every((G) => G <= 0)) {
        var I, L;
        const G = (((I = f.flip) == null ? void 0 : I.index) || 0) + 1, te = C[G];
        if (te)
          return {
            data: {
              index: G,
              overflows: k
            },
            reset: {
              placement: te
            }
          };
        let W = (L = k.filter((q) => q.overflows[0] <= 0).sort((q, K) => q.overflows[1] - K.overflows[1])[0]) == null ? void 0 : L.placement;
        if (!W)
          switch (c) {
            case "bestFit": {
              var j;
              const q = (j = k.map((K) => [K.placement, K.overflows.filter((ne) => ne > 0).reduce((ne, re) => ne + re, 0)]).sort((K, ne) => K[1] - ne[1])[0]) == null ? void 0 : j[0];
              q && (W = q);
              break;
            }
            case "initialPlacement":
              W = l;
              break;
          }
        if (i !== W)
          return {
            reset: {
              placement: W
            }
          };
      }
      return {};
    }
  };
};
async function T5(t, e) {
  const {
    placement: n,
    platform: r,
    elements: i
  } = t, f = await (r.isRTL == null ? void 0 : r.isRTL(i.floating)), g = xn(n), l = Br(n), s = Ri(n) === "y", a = ["left", "top"].includes(g) ? -1 : 1, h = f && s ? -1 : 1, o = Lr(e, t);
  let {
    mainAxis: u,
    crossAxis: c,
    alignmentAxis: d
  } = typeof o == "number" ? {
    mainAxis: o,
    crossAxis: 0,
    alignmentAxis: null
  } : {
    mainAxis: 0,
    crossAxis: 0,
    alignmentAxis: null,
    ...o
  };
  return l && typeof d == "number" && (c = l === "end" ? d * -1 : d), s ? {
    x: c * h,
    y: u * a
  } : {
    x: u * a,
    y: c * h
  };
}
const E5 = function(t) {
  return t === void 0 && (t = 0), {
    name: "offset",
    options: t,
    async fn(e) {
      var n, r;
      const {
        x: i,
        y: f,
        placement: g,
        middlewareData: l
      } = e, s = await T5(e, t);
      return g === ((n = l.offset) == null ? void 0 : n.placement) && (r = l.arrow) != null && r.alignmentOffset ? {} : {
        x: i + s.x,
        y: f + s.y,
        data: {
          ...s,
          placement: g
        }
      };
    }
  };
}, k5 = function(t) {
  return t === void 0 && (t = {}), {
    name: "shift",
    options: t,
    async fn(e) {
      const {
        x: n,
        y: r,
        placement: i
      } = e, {
        mainAxis: f = !0,
        crossAxis: g = !1,
        limiter: l = {
          fn: (p) => {
            let {
              x: v,
              y: b
            } = p;
            return {
              x: v,
              y: b
            };
          }
        },
        ...s
      } = Lr(t, e), a = {
        x: n,
        y: r
      }, h = await uc(e, s), o = Ri(xn(i)), u = Bg(o);
      let c = a[u], d = a[o];
      if (f) {
        const p = u === "y" ? "top" : "left", v = u === "y" ? "bottom" : "right", b = c + h[p], y = c - h[v];
        c = qa(b, c, y);
      }
      if (g) {
        const p = o === "y" ? "top" : "left", v = o === "y" ? "bottom" : "right", b = d + h[p], y = d - h[v];
        d = qa(b, d, y);
      }
      const m = l.fn({
        ...e,
        [u]: c,
        [o]: d
      });
      return {
        ...m,
        data: {
          x: m.x - n,
          y: m.y - r
        }
      };
    }
  };
}, O5 = function(t) {
  return t === void 0 && (t = {}), {
    name: "size",
    options: t,
    async fn(e) {
      const {
        placement: n,
        rects: r,
        platform: i,
        elements: f
      } = e, {
        apply: g = () => {
        },
        ...l
      } = Lr(t, e), s = await uc(e, l), a = xn(n), h = Br(n), o = Ri(n) === "y", {
        width: u,
        height: c
      } = r.floating;
      let d, m;
      a === "top" || a === "bottom" ? (d = a, m = h === (await (i.isRTL == null ? void 0 : i.isRTL(f.floating)) ? "start" : "end") ? "left" : "right") : (m = a, d = h === "end" ? "top" : "bottom");
      const p = c - s.top - s.bottom, v = u - s.left - s.right, b = Lt(c - s[d], p), y = Lt(u - s[m], v), w = !e.middlewareData.shift;
      let C = b, _ = y;
      if (o ? _ = h || w ? Lt(y, v) : v : C = h || w ? Lt(b, p) : p, w && !h) {
        const k = dt(s.left, 0), I = dt(s.right, 0), L = dt(s.top, 0), j = dt(s.bottom, 0);
        o ? _ = u - 2 * (k !== 0 || I !== 0 ? k + I : dt(s.left, s.right)) : C = c - 2 * (L !== 0 || j !== 0 ? L + j : dt(s.top, s.bottom));
      }
      await g({
        ...e,
        availableWidth: _,
        availableHeight: C
      });
      const S = await i.getDimensions(f.floating);
      return u !== S.width || c !== S.height ? {
        reset: {
          rects: !0
        }
      } : {};
    }
  };
};
function zr(t) {
  return Ng(t) ? (t.nodeName || "").toLowerCase() : "#document";
}
function yt(t) {
  var e;
  return (t == null || (e = t.ownerDocument) == null ? void 0 : e.defaultView) || window;
}
function sn(t) {
  var e;
  return (e = (Ng(t) ? t.ownerDocument : t.document) || window.document) == null ? void 0 : e.documentElement;
}
function Ng(t) {
  return t instanceof Node || t instanceof yt(t).Node;
}
function zt(t) {
  return t instanceof Element || t instanceof yt(t).Element;
}
function Nt(t) {
  return t instanceof HTMLElement || t instanceof yt(t).HTMLElement;
}
function mh(t) {
  return typeof ShadowRoot > "u" ? !1 : t instanceof ShadowRoot || t instanceof yt(t).ShadowRoot;
}
function Li(t) {
  const {
    overflow: e,
    overflowX: n,
    overflowY: r,
    display: i
  } = At(t);
  return /auto|scroll|overlay|hidden|clip/.test(e + r + n) && !["inline", "contents"].includes(i);
}
function D5(t) {
  return ["table", "td", "th"].includes(zr(t));
}
function hc(t) {
  const e = fc(), n = At(t);
  return n.transform !== "none" || n.perspective !== "none" || (n.containerType ? n.containerType !== "normal" : !1) || !e && (n.backdropFilter ? n.backdropFilter !== "none" : !1) || !e && (n.filter ? n.filter !== "none" : !1) || ["transform", "perspective", "filter"].some((r) => (n.willChange || "").includes(r)) || ["paint", "layout", "strict", "content"].some((r) => (n.contain || "").includes(r));
}
function A5(t) {
  let e = Cn(t);
  for (; Nt(e) && !Ar(e); ) {
    if (hc(e))
      return e;
    e = Cn(e);
  }
  return null;
}
function fc() {
  return typeof CSS > "u" || !CSS.supports ? !1 : CSS.supports("-webkit-backdrop-filter", "none");
}
function Ar(t) {
  return ["html", "body", "#document"].includes(zr(t));
}
function At(t) {
  return yt(t).getComputedStyle(t);
}
function fo(t) {
  return zt(t) ? {
    scrollLeft: t.scrollLeft,
    scrollTop: t.scrollTop
  } : {
    scrollLeft: t.pageXOffset,
    scrollTop: t.pageYOffset
  };
}
function Cn(t) {
  if (zr(t) === "html")
    return t;
  const e = (
    // Step into the shadow DOM of the parent of a slotted node.
    t.assignedSlot || // DOM Element detected.
    t.parentNode || // ShadowRoot detected.
    mh(t) && t.host || // Fallback.
    sn(t)
  );
  return mh(e) ? e.host : e;
}
function jg(t) {
  const e = Cn(t);
  return Ar(e) ? t.ownerDocument ? t.ownerDocument.body : t.body : Nt(e) && Li(e) ? e : jg(e);
}
function vi(t, e, n) {
  var r;
  e === void 0 && (e = []), n === void 0 && (n = !0);
  const i = jg(t), f = i === ((r = t.ownerDocument) == null ? void 0 : r.body), g = yt(i);
  return f ? e.concat(g, g.visualViewport || [], Li(i) ? i : [], g.frameElement && n ? vi(g.frameElement) : []) : e.concat(i, vi(i, [], n));
}
function $g(t) {
  const e = At(t);
  let n = parseFloat(e.width) || 0, r = parseFloat(e.height) || 0;
  const i = Nt(t), f = i ? t.offsetWidth : n, g = i ? t.offsetHeight : r, l = Ms(n) !== f || Ms(r) !== g;
  return l && (n = f, r = g), {
    width: n,
    height: r,
    $: l
  };
}
function dc(t) {
  return zt(t) ? t : t.contextElement;
}
function vr(t) {
  const e = dc(t);
  if (!Nt(e))
    return wn(1);
  const n = e.getBoundingClientRect(), {
    width: r,
    height: i,
    $: f
  } = $g(e);
  let g = (f ? Ms(n.width) : n.width) / r, l = (f ? Ms(n.height) : n.height) / i;
  return (!g || !Number.isFinite(g)) && (g = 1), (!l || !Number.isFinite(l)) && (l = 1), {
    x: g,
    y: l
  };
}
const P5 = /* @__PURE__ */ wn(0);
function Vg(t) {
  const e = yt(t);
  return !fc() || !e.visualViewport ? P5 : {
    x: e.visualViewport.offsetLeft,
    y: e.visualViewport.offsetTop
  };
}
function M5(t, e, n) {
  return e === void 0 && (e = !1), !n || e && n !== yt(t) ? !1 : e;
}
function Xn(t, e, n, r) {
  e === void 0 && (e = !1), n === void 0 && (n = !1);
  const i = t.getBoundingClientRect(), f = dc(t);
  let g = wn(1);
  e && (r ? zt(r) && (g = vr(r)) : g = vr(t));
  const l = M5(f, n, r) ? Vg(f) : wn(0);
  let s = (i.left + l.x) / g.x, a = (i.top + l.y) / g.y, h = i.width / g.x, o = i.height / g.y;
  if (f) {
    const u = yt(f), c = r && zt(r) ? yt(r) : r;
    let d = u, m = d.frameElement;
    for (; m && r && c !== d; ) {
      const p = vr(m), v = m.getBoundingClientRect(), b = At(m), y = v.left + (m.clientLeft + parseFloat(b.paddingLeft)) * p.x, w = v.top + (m.clientTop + parseFloat(b.paddingTop)) * p.y;
      s *= p.x, a *= p.y, h *= p.x, o *= p.y, s += y, a += w, d = yt(m), m = d.frameElement;
    }
  }
  return Is({
    width: h,
    height: o,
    x: s,
    y: a
  });
}
const F5 = [":popover-open", ":modal"];
function pc(t) {
  return F5.some((e) => {
    try {
      return t.matches(e);
    } catch {
      return !1;
    }
  });
}
function I5(t) {
  let {
    elements: e,
    rect: n,
    offsetParent: r,
    strategy: i
  } = t;
  const f = i === "fixed", g = sn(r), l = e ? pc(e.floating) : !1;
  if (r === g || l && f)
    return n;
  let s = {
    scrollLeft: 0,
    scrollTop: 0
  }, a = wn(1);
  const h = wn(0), o = Nt(r);
  if ((o || !o && !f) && ((zr(r) !== "body" || Li(g)) && (s = fo(r)), Nt(r))) {
    const u = Xn(r);
    a = vr(r), h.x = u.x + r.clientLeft, h.y = u.y + r.clientTop;
  }
  return {
    width: n.width * a.x,
    height: n.height * a.y,
    x: n.x * a.x - s.scrollLeft * a.x + h.x,
    y: n.y * a.y - s.scrollTop * a.y + h.y
  };
}
function R5(t) {
  return Array.from(t.getClientRects());
}
function Hg(t) {
  return Xn(sn(t)).left + fo(t).scrollLeft;
}
function L5(t) {
  const e = sn(t), n = fo(t), r = t.ownerDocument.body, i = dt(e.scrollWidth, e.clientWidth, r.scrollWidth, r.clientWidth), f = dt(e.scrollHeight, e.clientHeight, r.scrollHeight, r.clientHeight);
  let g = -n.scrollLeft + Hg(t);
  const l = -n.scrollTop;
  return At(r).direction === "rtl" && (g += dt(e.clientWidth, r.clientWidth) - i), {
    width: i,
    height: f,
    x: g,
    y: l
  };
}
function B5(t, e) {
  const n = yt(t), r = sn(t), i = n.visualViewport;
  let f = r.clientWidth, g = r.clientHeight, l = 0, s = 0;
  if (i) {
    f = i.width, g = i.height;
    const a = fc();
    (!a || a && e === "fixed") && (l = i.offsetLeft, s = i.offsetTop);
  }
  return {
    width: f,
    height: g,
    x: l,
    y: s
  };
}
function z5(t, e) {
  const n = Xn(t, !0, e === "fixed"), r = n.top + t.clientTop, i = n.left + t.clientLeft, f = Nt(t) ? vr(t) : wn(1), g = t.clientWidth * f.x, l = t.clientHeight * f.y, s = i * f.x, a = r * f.y;
  return {
    width: g,
    height: l,
    x: s,
    y: a
  };
}
function vh(t, e, n) {
  let r;
  if (e === "viewport")
    r = B5(t, n);
  else if (e === "document")
    r = L5(sn(t));
  else if (zt(e))
    r = z5(e, n);
  else {
    const i = Vg(t);
    r = {
      ...e,
      x: e.x - i.x,
      y: e.y - i.y
    };
  }
  return Is(r);
}
function Wg(t, e) {
  const n = Cn(t);
  return n === e || !zt(n) || Ar(n) ? !1 : At(n).position === "fixed" || Wg(n, e);
}
function N5(t, e) {
  const n = e.get(t);
  if (n)
    return n;
  let r = vi(t, [], !1).filter((l) => zt(l) && zr(l) !== "body"), i = null;
  const f = At(t).position === "fixed";
  let g = f ? Cn(t) : t;
  for (; zt(g) && !Ar(g); ) {
    const l = At(g), s = hc(g);
    !s && l.position === "fixed" && (i = null), (f ? !s && !i : !s && l.position === "static" && !!i && ["absolute", "fixed"].includes(i.position) || Li(g) && !s && Wg(t, g)) ? r = r.filter((h) => h !== g) : i = l, g = Cn(g);
  }
  return e.set(t, r), r;
}
function j5(t) {
  let {
    element: e,
    boundary: n,
    rootBoundary: r,
    strategy: i
  } = t;
  const g = [...n === "clippingAncestors" ? pc(e) ? [] : N5(e, this._c) : [].concat(n), r], l = g[0], s = g.reduce((a, h) => {
    const o = vh(e, h, i);
    return a.top = dt(o.top, a.top), a.right = Lt(o.right, a.right), a.bottom = Lt(o.bottom, a.bottom), a.left = dt(o.left, a.left), a;
  }, vh(e, l, i));
  return {
    width: s.right - s.left,
    height: s.bottom - s.top,
    x: s.left,
    y: s.top
  };
}
function $5(t) {
  const {
    width: e,
    height: n
  } = $g(t);
  return {
    width: e,
    height: n
  };
}
function V5(t, e, n) {
  const r = Nt(e), i = sn(e), f = n === "fixed", g = Xn(t, !0, f, e);
  let l = {
    scrollLeft: 0,
    scrollTop: 0
  };
  const s = wn(0);
  if (r || !r && !f)
    if ((zr(e) !== "body" || Li(i)) && (l = fo(e)), r) {
      const o = Xn(e, !0, f, e);
      s.x = o.x + e.clientLeft, s.y = o.y + e.clientTop;
    } else
      i && (s.x = Hg(i));
  const a = g.left + l.scrollLeft - s.x, h = g.top + l.scrollTop - s.y;
  return {
    x: a,
    y: h,
    width: g.width,
    height: g.height
  };
}
function Ko(t) {
  return At(t).position === "static";
}
function bh(t, e) {
  return !Nt(t) || At(t).position === "fixed" ? null : e ? e(t) : t.offsetParent;
}
function Ug(t, e) {
  const n = yt(t);
  if (pc(t))
    return n;
  if (!Nt(t)) {
    let i = Cn(t);
    for (; i && !Ar(i); ) {
      if (zt(i) && !Ko(i))
        return i;
      i = Cn(i);
    }
    return n;
  }
  let r = bh(t, e);
  for (; r && D5(r) && Ko(r); )
    r = bh(r, e);
  return r && Ar(r) && Ko(r) && !hc(r) ? n : r || A5(t) || n;
}
const H5 = async function(t) {
  const e = this.getOffsetParent || Ug, n = this.getDimensions, r = await n(t.floating);
  return {
    reference: V5(t.reference, await e(t.floating), t.strategy),
    floating: {
      x: 0,
      y: 0,
      width: r.width,
      height: r.height
    }
  };
};
function W5(t) {
  return At(t).direction === "rtl";
}
const U5 = {
  convertOffsetParentRelativeRectToViewportRelativeRect: I5,
  getDocumentElement: sn,
  getClippingRect: j5,
  getOffsetParent: Ug,
  getElementRects: H5,
  getClientRects: R5,
  getDimensions: $5,
  getScale: vr,
  isElement: zt,
  isRTL: W5
};
function X5(t, e) {
  let n = null, r;
  const i = sn(t);
  function f() {
    var l;
    clearTimeout(r), (l = n) == null || l.disconnect(), n = null;
  }
  function g(l, s) {
    l === void 0 && (l = !1), s === void 0 && (s = 1), f();
    const {
      left: a,
      top: h,
      width: o,
      height: u
    } = t.getBoundingClientRect();
    if (l || e(), !o || !u)
      return;
    const c = rs(h), d = rs(i.clientWidth - (a + o)), m = rs(i.clientHeight - (h + u)), p = rs(a), b = {
      rootMargin: -c + "px " + -d + "px " + -m + "px " + -p + "px",
      threshold: dt(0, Lt(1, s)) || 1
    };
    let y = !0;
    function w(C) {
      const _ = C[0].intersectionRatio;
      if (_ !== s) {
        if (!y)
          return g();
        _ ? g(!1, _) : r = setTimeout(() => {
          g(!1, 1e-7);
        }, 1e3);
      }
      y = !1;
    }
    try {
      n = new IntersectionObserver(w, {
        ...b,
        // Handle <iframe>s
        root: i.ownerDocument
      });
    } catch {
      n = new IntersectionObserver(w, b);
    }
    n.observe(t);
  }
  return g(!0), f;
}
function Y5(t, e, n, r) {
  r === void 0 && (r = {});
  const {
    ancestorScroll: i = !0,
    ancestorResize: f = !0,
    elementResize: g = typeof ResizeObserver == "function",
    layoutShift: l = typeof IntersectionObserver == "function",
    animationFrame: s = !1
  } = r, a = dc(t), h = i || f ? [...a ? vi(a) : [], ...vi(e)] : [];
  h.forEach((v) => {
    i && v.addEventListener("scroll", n, {
      passive: !0
    }), f && v.addEventListener("resize", n);
  });
  const o = a && l ? X5(a, n) : null;
  let u = -1, c = null;
  g && (c = new ResizeObserver((v) => {
    let [b] = v;
    b && b.target === a && c && (c.unobserve(e), cancelAnimationFrame(u), u = requestAnimationFrame(() => {
      var y;
      (y = c) == null || y.observe(e);
    })), n();
  }), a && !s && c.observe(a), c.observe(e));
  let d, m = s ? Xn(t) : null;
  s && p();
  function p() {
    const v = Xn(t);
    m && (v.x !== m.x || v.y !== m.y || v.width !== m.width || v.height !== m.height) && n(), m = v, d = requestAnimationFrame(p);
  }
  return n(), () => {
    var v;
    h.forEach((b) => {
      i && b.removeEventListener("scroll", n), f && b.removeEventListener("resize", n);
    }), o == null || o(), (v = c) == null || v.disconnect(), c = null, s && cancelAnimationFrame(d);
  };
}
const G5 = E5, K5 = k5, q5 = S5, Z5 = O5, yh = _5, J5 = (t, e, n) => {
  const r = /* @__PURE__ */ new Map(), i = {
    platform: U5,
    ...n
  }, f = {
    ...i.platform,
    _c: r
  };
  return C5(t, e, {
    ...i,
    platform: f
  });
}, Q5 = (t) => {
  function e(n) {
    return {}.hasOwnProperty.call(n, "current");
  }
  return {
    name: "arrow",
    options: t,
    fn(n) {
      const {
        element: r,
        padding: i
      } = typeof t == "function" ? t(n) : t;
      return r && e(r) ? r.current != null ? yh({
        element: r.current,
        padding: i
      }).fn(n) : {} : r ? yh({
        element: r,
        padding: i
      }).fn(n) : {};
    }
  };
};
var cs = typeof document < "u" ? Ci : Se;
function Rs(t, e) {
  if (t === e)
    return !0;
  if (typeof t != typeof e)
    return !1;
  if (typeof t == "function" && t.toString() === e.toString())
    return !0;
  let n, r, i;
  if (t && e && typeof t == "object") {
    if (Array.isArray(t)) {
      if (n = t.length, n != e.length)
        return !1;
      for (r = n; r-- !== 0; )
        if (!Rs(t[r], e[r]))
          return !1;
      return !0;
    }
    if (i = Object.keys(t), n = i.length, n !== Object.keys(e).length)
      return !1;
    for (r = n; r-- !== 0; )
      if (!{}.hasOwnProperty.call(e, i[r]))
        return !1;
    for (r = n; r-- !== 0; ) {
      const f = i[r];
      if (!(f === "_owner" && t.$$typeof) && !Rs(t[f], e[f]))
        return !1;
    }
    return !0;
  }
  return t !== t && e !== e;
}
function Xg(t) {
  return typeof window > "u" ? 1 : (t.ownerDocument.defaultView || window).devicePixelRatio || 1;
}
function wh(t, e) {
  const n = Xg(t);
  return Math.round(e * n) / n;
}
function xh(t) {
  const e = ge.useRef(t);
  return cs(() => {
    e.current = t;
  }), e;
}
function e3(t) {
  t === void 0 && (t = {});
  const {
    placement: e = "bottom",
    strategy: n = "absolute",
    middleware: r = [],
    platform: i,
    elements: {
      reference: f,
      floating: g
    } = {},
    transform: l = !0,
    whileElementsMounted: s,
    open: a
  } = t, [h, o] = ge.useState({
    x: 0,
    y: 0,
    strategy: n,
    placement: e,
    middlewareData: {},
    isPositioned: !1
  }), [u, c] = ge.useState(r);
  Rs(u, r) || c(r);
  const [d, m] = ge.useState(null), [p, v] = ge.useState(null), b = ge.useCallback((K) => {
    K != _.current && (_.current = K, m(K));
  }, [m]), y = ge.useCallback((K) => {
    K !== S.current && (S.current = K, v(K));
  }, [v]), w = f || d, C = g || p, _ = ge.useRef(null), S = ge.useRef(null), k = ge.useRef(h), I = xh(s), L = xh(i), j = ge.useCallback(() => {
    if (!_.current || !S.current)
      return;
    const K = {
      placement: e,
      strategy: n,
      middleware: u
    };
    L.current && (K.platform = L.current), J5(_.current, S.current, K).then((ne) => {
      const re = {
        ...ne,
        isPositioned: !0
      };
      G.current && !Rs(k.current, re) && (k.current = re, jv.flushSync(() => {
        o(re);
      }));
    });
  }, [u, e, n, L]);
  cs(() => {
    a === !1 && k.current.isPositioned && (k.current.isPositioned = !1, o((K) => ({
      ...K,
      isPositioned: !1
    })));
  }, [a]);
  const G = ge.useRef(!1);
  cs(() => (G.current = !0, () => {
    G.current = !1;
  }), []), cs(() => {
    if (w && (_.current = w), C && (S.current = C), w && C) {
      if (I.current)
        return I.current(w, C, j);
      j();
    }
  }, [w, C, j, I]);
  const te = ge.useMemo(() => ({
    reference: _,
    floating: S,
    setReference: b,
    setFloating: y
  }), [b, y]), W = ge.useMemo(() => ({
    reference: w,
    floating: C
  }), [w, C]), q = ge.useMemo(() => {
    const K = {
      position: n,
      left: 0,
      top: 0
    };
    if (!W.floating)
      return K;
    const ne = wh(W.floating, h.x), re = wh(W.floating, h.y);
    return l ? {
      ...K,
      transform: "translate(" + ne + "px, " + re + "px)",
      ...Xg(W.floating) >= 1.5 && {
        willChange: "transform"
      }
    } : {
      position: n,
      left: ne,
      top: re
    };
  }, [n, l, W.floating, h.x, h.y]);
  return ge.useMemo(() => ({
    ...h,
    update: j,
    refs: te,
    elements: W,
    floatingStyles: q
  }), [h, j, te, W, q]);
}
function t3(t) {
  return (e) => {
    t.forEach((n) => {
      typeof n == "function" ? n(e) : n != null && (n.current = e);
    });
  };
}
function gc({
  floatingWidth: t,
  ref: e,
  disablePositioning: n = !1,
  placement: r = "bottom",
  offset: i = 2,
  showArrow: f = !1,
  maxHeight: g,
  shiftCrossAxis: l = !0,
  fallbackPlacements: s
}) {
  const a = de(null), h = { placement: r, strategy: "fixed" };
  n || (h.whileElementsMounted = Y5, h.middleware = [
    G5(i),
    K5({ padding: 16, crossAxis: l, mainAxis: !0 }),
    q5({
      padding: 16,
      fallbackPlacements: s
    }),
    Z5({
      apply({ rects: v, availableHeight: b, availableWidth: y, elements: w }) {
        t === "matchTrigger" && g != null ? Object.assign(w.floating.style, {
          width: `${v.reference.width}px`,
          maxWidth: `${y}`,
          maxHeight: `${Math.min(b, g)}px`
        }) : g != null && Object.assign(w.floating.style, {
          maxHeight: `${Math.min(b, g)}px`
        });
      },
      padding: 16
    })
  ], f && h.middleware.push(Q5({ element: a })));
  const o = e3(h), u = He(
    () => t3([e, o.refs.setReference]),
    [o.refs.setReference, e]
  ), { x: c, y: d } = o.middlewareData.arrow || {}, m = {
    top: "bottom",
    right: "left",
    bottom: "top",
    left: "right"
  }[o.placement.split("-")[0]], p = {
    left: c,
    top: d,
    right: "",
    bottom: "",
    [m]: "-4px"
  };
  return {
    ...o,
    reference: u,
    arrowRef: a,
    arrowStyle: p
  };
}
function Yg(t, e) {
  const {
    children: n,
    items: r,
    role: i = "listbox",
    virtualFocus: f,
    focusLoopingMode: g = "stay",
    autoFocusFirstItem: l = !0,
    onItemSelected: s,
    clearInputOnItemSelection: a,
    blurReferenceOnItemSelection: h,
    floatingWidth: o = "matchTrigger",
    floatingMinWidth: u,
    floatingMaxHeight: c,
    offset: d,
    placement: m,
    showCheckmark: p,
    showEmptyMessage: v,
    maxItems: b,
    isAsync: y,
    allowCustomValue: w,
    clearSelectionOnInputClear: C
  } = t, _ = t.selectionMode || "none", k = `${Pt()}-listbox`, [I, L] = yn(
    t.inputValue,
    t.defaultInputValue || "",
    t.onInputValueChange
  ), [j, G] = De(
    "all"
  ), te = h5({
    children: n,
    items: r,
    // don't filter on client side if async, it will already be filtered on server
    inputValue: y ? void 0 : I,
    maxItems: b
  }), W = j === "all" ? te.collection : te.filteredCollection, q = de([]), K = He(() => [...W.values()].map(
    (B) => B.isDisabled ? null : B.textLabel
  ), [W]), { selectedValues: ne, selectValues: re } = r3(t), [T, P] = yn(
    t.isOpen,
    t.defaultIsOpen,
    t.onOpenChange
  ), [A, M] = De(null), $ = gc({
    floatingWidth: o,
    ref: e,
    placement: m,
    offset: d,
    maxHeight: c ?? 420,
    // don't shift floating menu on the sides of combobox, otherwise input might get obscured
    shiftCrossAxis: !f
  }), { refs: D, strategy: E, x: F, y: N } = $, H = _ === "none" ? void 0 : W.get(ne[0]), V = _ === "none" || H == null ? void 0 : H.index, J = (B) => {
    if (_ !== "none") {
      const X = [...W.values()][B];
      X && re(X.value);
    }
  }, ee = Oe(
    (B, X) => {
      var se, ve;
      const Q = [...W.values()], z = !Q.find((pe) => !pe.isDisabled), Y = W.size - 1;
      if (X == null || !W.size || X > Y || X < 0 || z) {
        M(null);
        return;
      }
      X = n3(
        Q,
        X,
        g,
        B
      ), M(X), X != null && (f ? (se = q.current[X]) == null || se.scrollIntoView({
        block: "nearest"
      }) : (ve = q.current[X]) == null || ve.focus());
    },
    [W, f, g]
  ), le = Oe(
    (B) => {
      L(B.target.value), G(B.target.value.trim() ? "filtered" : "all"), B.target.value ? P(!0) : C && re(""), l && A == null ? ee("increment", 0) : M(null);
    },
    [
      L,
      P,
      G,
      re,
      C,
      ee,
      l,
      A
    ]
  );
  return {
    // even handlers
    handleItemSelection: (B) => {
      const X = D.reference.current;
      _ !== "none" ? re(B) : X && "focus" in X && X.focus(), f && (L(a ? "" : `${B}`), h && X && "blur" in X && X.blur()), G("all"), P(!1), s == null || s(B), M(null);
    },
    onInputChange: le,
    focusLoopingMode: g,
    // config
    floatingWidth: o,
    floatingMinWidth: u,
    floatingMaxHeight: c,
    showCheckmark: p,
    collection: W,
    collections: te,
    virtualFocus: f,
    focusItem: ee,
    showEmptyMessage: v && !!I,
    allowCustomValue: w,
    // floating ui
    refs: D,
    reference: $.reference,
    floating: D.setFloating,
    positionStyle: {
      position: E,
      top: N ?? "",
      left: F ?? ""
    },
    listContent: K,
    listItemsRef: q,
    listboxId: k,
    role: i,
    state: {
      // currently focused or active (if virtual focus) option
      activeIndex: A,
      setActiveIndex: M,
      selectedIndex: V,
      setSelectedIndex: J,
      selectionMode: _,
      selectedValues: ne,
      selectValues: re,
      inputValue: I,
      setInputValue: L,
      isOpen: T,
      setIsOpen: P,
      setActiveCollection: G
    }
  };
}
function n3(t, e, n, r) {
  var f;
  const i = t.length - 1;
  for (; (f = t[e]) != null && f.isDisabled; )
    if (r === "increment") {
      if (e++, e >= i)
        if (n === "loop")
          e = 0;
        else
          return n === "stay" ? e - 1 : null;
    } else if (e--, e < 0)
      if (n === "loop")
        e = i;
      else
        return n === "stay" ? e + 1 : null;
  return e;
}
function r3(t) {
  const { selectionMode: e, allowEmptySelection: n } = t, r = e === "single" || e === "multiple", [i, f] = yn(
    r ? t.selectedValue : void 0,
    r ? t.defaultSelectedValue : void 0,
    r ? t.onSelectionChange : void 0
  ), g = He(() => typeof i > "u" ? [] : Array.isArray(i) ? i : [i], [i]), l = Oe(
    (s) => {
      const a = Array.isArray(s) ? s : [s];
      e === "single" ? f(a[0]) : a.forEach((h) => {
        const o = g.indexOf(h);
        o === -1 ? (g.push(h), f([...g])) : (g.length > 1 || n) && (g.splice(o, 1), f([...g]));
      });
    },
    [n, g, e, f]
  );
  return {
    selectedValues: g,
    selectValues: l
  };
}
const i3 = 768;
function s3() {
  return ec() || typeof window > "u" ? J2().is_mobile_device ?? !1 : window.screen.width <= i3;
}
let Bi = null, o3 = /* @__PURE__ */ new Set(), ri = /* @__PURE__ */ new Map(), Yn = !1, Ja = !1;
function mc(t, e) {
  for (let n of o3)
    n(t, e);
}
function a3(t) {
  return !(t.metaKey || !_g() && t.altKey || t.ctrlKey || t.key === "Control" || t.key === "Shift" || t.key === "Meta");
}
function Ls(t) {
  Yn = !0, a3(t) && (Bi = "keyboard", mc("keyboard", t));
}
function St(t) {
  Bi = "pointer", (t.type === "mousedown" || t.type === "pointerdown") && (Yn = !0, mc("pointer", t));
}
function Gg(t) {
  WS(t) && (Yn = !0, Bi = "virtual");
}
function Kg(t) {
  t.target === window || t.target === document || (!Yn && !Ja && (Bi = "virtual", mc("virtual", t)), Yn = !1, Ja = !1);
}
function qg() {
  Yn = !1, Ja = !0;
}
function Ch(t) {
  if (typeof window > "u" || ri.get(As(t)))
    return;
  const e = As(t), n = it(t);
  let r = e.HTMLElement.prototype.focus;
  e.HTMLElement.prototype.focus = function() {
    Yn = !0, r.apply(this, arguments);
  }, n.addEventListener("keydown", Ls, !0), n.addEventListener("keyup", Ls, !0), n.addEventListener("click", Gg, !0), e.addEventListener("focus", Kg, !0), e.addEventListener("blur", qg, !1), typeof PointerEvent < "u" ? (n.addEventListener("pointerdown", St, !0), n.addEventListener("pointermove", St, !0), n.addEventListener("pointerup", St, !0)) : (n.addEventListener("mousedown", St, !0), n.addEventListener("mousemove", St, !0), n.addEventListener("mouseup", St, !0)), e.addEventListener("beforeunload", () => {
    Zg(t);
  }, {
    once: !0
  }), ri.set(e, {
    focus: r
  });
}
const Zg = (t, e) => {
  const n = As(t), r = it(t);
  e && r.removeEventListener("DOMContentLoaded", e), ri.has(n) && (n.HTMLElement.prototype.focus = ri.get(n).focus, r.removeEventListener("keydown", Ls, !0), r.removeEventListener("keyup", Ls, !0), r.removeEventListener("click", Gg, !0), n.removeEventListener("focus", Kg, !0), n.removeEventListener("blur", qg, !1), typeof PointerEvent < "u" ? (r.removeEventListener("pointerdown", St, !0), r.removeEventListener("pointermove", St, !0), r.removeEventListener("pointerup", St, !0)) : (r.removeEventListener("mousedown", St, !0), r.removeEventListener("mousemove", St, !0), r.removeEventListener("mouseup", St, !0)), ri.delete(n));
};
function l3(t) {
  const e = it(t);
  let n;
  return e.readyState !== "loading" ? Ch(t) : (n = () => {
    Ch(t);
  }, e.addEventListener("DOMContentLoaded", n)), () => Zg(t, n);
}
typeof document < "u" && l3();
function c3() {
  return Bi;
}
function u3(t) {
  const e = it(t);
  if (c3() === "virtual") {
    let n = e.activeElement;
    VS(() => {
      e.activeElement === n && t.isConnected && eh(t);
    });
  } else
    eh(t);
}
function h3(t) {
  const e = As(t);
  if (!(t instanceof e.HTMLElement) && !(t instanceof e.SVGElement))
    return !1;
  let { display: n, visibility: r } = t.style, i = n !== "none" && r !== "hidden" && r !== "collapse";
  if (i) {
    const { getComputedStyle: f } = t.ownerDocument.defaultView;
    let { display: g, visibility: l } = f(t);
    i = g !== "none" && l !== "hidden" && l !== "collapse";
  }
  return i;
}
function f3(t, e) {
  return !t.hasAttribute("hidden") && // Ignore HiddenSelect when tree walking.
  !t.hasAttribute("data-react-aria-prevent-focus") && (t.nodeName === "DETAILS" && e && e.nodeName !== "SUMMARY" ? t.hasAttribute("open") : !0);
}
function Jg(t, e) {
  return t.nodeName !== "#comment" && h3(t) && f3(t, e) && (!t.parentElement || Jg(t.parentElement, t));
}
const Qa = /* @__PURE__ */ ce.createContext(null);
let Be = null;
function po(t) {
  let { children: e, contain: n, restoreFocus: r, autoFocus: i } = t, f = de(null), g = de(null), l = de([]), { parentNode: s } = ze(Qa) || {}, a = He(() => new tl({
    scopeRef: l
  }), [
    l
  ]);
  mt(() => {
    let u = s || Ue.root;
    if (Ue.getTreeNode(u.scopeRef) && Be && !Bs(Be, u.scopeRef)) {
      let c = Ue.getTreeNode(Be);
      c && (u = c);
    }
    u.addChild(a), Ue.addNode(a);
  }, [
    a,
    s
  ]), mt(() => {
    let u = Ue.getTreeNode(l);
    u && (u.contain = !!n);
  }, [
    n
  ]), mt(() => {
    var u;
    let c = (u = f.current) === null || u === void 0 ? void 0 : u.nextSibling, d = [];
    for (; c && c !== g.current; )
      d.push(c), c = c.nextSibling;
    l.current = d;
  }, [
    e
  ]), y3(l, r, n), v3(l, n), x3(l, r, n), b3(l, i), Se(() => {
    const u = it(l.current ? l.current[0] : void 0).activeElement;
    let c = null;
    if (nt(u, l.current)) {
      for (let d of Ue.traverse())
        d.scopeRef && nt(u, d.scopeRef.current) && (c = d);
      c === Ue.getTreeNode(l) && (Be = c.scopeRef);
    }
  }, [
    l
  ]), mt(() => () => {
    var u, c, d;
    let m = (d = (c = Ue.getTreeNode(l)) === null || c === void 0 || (u = c.parent) === null || u === void 0 ? void 0 : u.scopeRef) !== null && d !== void 0 ? d : null;
    (l === Be || Bs(l, Be)) && (!m || Ue.getTreeNode(m)) && (Be = m), Ue.removeTreeNode(l);
  }, [
    l
  ]);
  let h = He(() => p3(l), []), o = He(() => ({
    focusManager: h,
    parentNode: a
  }), [
    a,
    h
  ]);
  return /* @__PURE__ */ ce.createElement(Qa.Provider, {
    value: o
  }, /* @__PURE__ */ ce.createElement("span", {
    "data-focus-scope-start": !0,
    hidden: !0,
    ref: f
  }), e, /* @__PURE__ */ ce.createElement("span", {
    "data-focus-scope-end": !0,
    hidden: !0,
    ref: g
  }));
}
function d3() {
  var t;
  return (t = ze(Qa)) === null || t === void 0 ? void 0 : t.focusManager;
}
function p3(t) {
  return {
    focusNext(e = {}) {
      let n = t.current, { from: r, tabbable: i, wrap: f, accept: g } = e, l = r || it(n[0]).activeElement, s = n[0].previousElementSibling, a = Ln(n), h = Ut(a, {
        tabbable: i,
        accept: g
      }, n);
      h.currentNode = nt(l, n) ? l : s;
      let o = h.nextNode();
      return !o && f && (h.currentNode = s, o = h.nextNode()), o && Wt(o, !0), o;
    },
    focusPrevious(e = {}) {
      let n = t.current, { from: r, tabbable: i, wrap: f, accept: g } = e, l = r || it(n[0]).activeElement, s = n[n.length - 1].nextElementSibling, a = Ln(n), h = Ut(a, {
        tabbable: i,
        accept: g
      }, n);
      h.currentNode = nt(l, n) ? l : s;
      let o = h.previousNode();
      return !o && f && (h.currentNode = s, o = h.previousNode()), o && Wt(o, !0), o;
    },
    focusFirst(e = {}) {
      let n = t.current, { tabbable: r, accept: i } = e, f = Ln(n), g = Ut(f, {
        tabbable: r,
        accept: i
      }, n);
      g.currentNode = n[0].previousElementSibling;
      let l = g.nextNode();
      return l && Wt(l, !0), l;
    },
    focusLast(e = {}) {
      let n = t.current, { tabbable: r, accept: i } = e, f = Ln(n), g = Ut(f, {
        tabbable: r,
        accept: i
      }, n);
      g.currentNode = n[n.length - 1].nextElementSibling;
      let l = g.previousNode();
      return l && Wt(l, !0), l;
    }
  };
}
const vc = [
  "input:not([disabled]):not([type=hidden])",
  "select:not([disabled])",
  "textarea:not([disabled])",
  "button:not([disabled])",
  "a[href]",
  "area[href]",
  "summary",
  "iframe",
  "object",
  "embed",
  "audio[controls]",
  "video[controls]",
  "[contenteditable]"
], g3 = vc.join(":not([hidden]),") + ",[tabindex]:not([disabled]):not([hidden])";
vc.push('[tabindex]:not([tabindex="-1"]):not([disabled])');
const m3 = vc.join(':not([hidden]):not([tabindex="-1"]),');
function Ln(t) {
  return t[0].parentElement;
}
function Jr(t) {
  let e = Ue.getTreeNode(Be);
  for (; e && e.scopeRef !== t; ) {
    if (e.contain)
      return !1;
    e = e.parent;
  }
  return !0;
}
function v3(t, e) {
  let n = de(), r = de();
  mt(() => {
    let i = t.current;
    if (!e) {
      r.current && (cancelAnimationFrame(r.current), r.current = void 0);
      return;
    }
    const f = it(i ? i[0] : void 0);
    let g = (a) => {
      if (a.key !== "Tab" || a.altKey || a.ctrlKey || a.metaKey || !Jr(t) || a.isComposing)
        return;
      let h = f.activeElement, o = t.current;
      if (!o || !nt(h, o))
        return;
      let u = Ln(o), c = Ut(u, {
        tabbable: !0
      }, o);
      if (!h)
        return;
      c.currentNode = h;
      let d = a.shiftKey ? c.previousNode() : c.nextNode();
      d || (c.currentNode = a.shiftKey ? o[o.length - 1].nextElementSibling : o[0].previousElementSibling, d = a.shiftKey ? c.previousNode() : c.nextNode()), a.preventDefault(), d && Wt(d, !0);
    }, l = (a) => {
      (!Be || Bs(Be, t)) && nt(a.target, t.current) ? (Be = t, n.current = a.target) : Jr(t) && !el(a.target, t) ? n.current ? n.current.focus() : Be && Be.current && zs(Be.current) : Jr(t) && (n.current = a.target);
    }, s = (a) => {
      r.current && cancelAnimationFrame(r.current), r.current = requestAnimationFrame(() => {
        if (f.activeElement && Jr(t) && !el(f.activeElement, t))
          if (Be = t, f.body.contains(a.target)) {
            var h;
            n.current = a.target, (h = n.current) === null || h === void 0 || h.focus();
          } else
            Be.current && zs(Be.current);
      });
    };
    return f.addEventListener("keydown", g, !1), f.addEventListener("focusin", l, !1), i == null || i.forEach((a) => a.addEventListener("focusin", l, !1)), i == null || i.forEach((a) => a.addEventListener("focusout", s, !1)), () => {
      f.removeEventListener("keydown", g, !1), f.removeEventListener("focusin", l, !1), i == null || i.forEach((a) => a.removeEventListener("focusin", l, !1)), i == null || i.forEach((a) => a.removeEventListener("focusout", s, !1));
    };
  }, [
    t,
    e
  ]), mt(() => () => {
    r.current && cancelAnimationFrame(r.current);
  }, [
    r
  ]);
}
function Qg(t) {
  return el(t);
}
function nt(t, e) {
  return !t || !e ? !1 : e.some((n) => n.contains(t));
}
function el(t, e = null) {
  if (t instanceof Element && t.closest("[data-react-aria-top-layer]"))
    return !0;
  for (let { scopeRef: n } of Ue.traverse(Ue.getTreeNode(e)))
    if (n && nt(t, n.current))
      return !0;
  return !1;
}
function Bs(t, e) {
  var n;
  let r = (n = Ue.getTreeNode(e)) === null || n === void 0 ? void 0 : n.parent;
  for (; r; ) {
    if (r.scopeRef === t)
      return !0;
    r = r.parent;
  }
  return !1;
}
function Wt(t, e = !1) {
  if (t != null && !e)
    try {
      u3(t);
    } catch {
    }
  else if (t != null)
    try {
      t.focus();
    } catch {
    }
}
function zs(t, e = !0) {
  let n = t[0].previousElementSibling, r = Ln(t), i = Ut(r, {
    tabbable: e
  }, t);
  i.currentNode = n;
  let f = i.nextNode();
  e && !f && (r = Ln(t), i = Ut(r, {
    tabbable: !1
  }, t), i.currentNode = n, f = i.nextNode()), Wt(f);
}
function b3(t, e) {
  const n = ce.useRef(e);
  Se(() => {
    if (n.current) {
      Be = t;
      const r = it(t.current ? t.current[0] : void 0);
      !nt(r.activeElement, Be.current) && t.current && zs(t.current);
    }
    n.current = !1;
  }, [
    t
  ]);
}
function y3(t, e, n) {
  mt(() => {
    if (e || n)
      return;
    let r = t.current;
    const i = it(r ? r[0] : void 0);
    let f = (g) => {
      let l = g.target;
      nt(l, t.current) ? Be = t : Qg(l) || (Be = null);
    };
    return i.addEventListener("focusin", f, !1), r == null || r.forEach((g) => g.addEventListener("focusin", f, !1)), () => {
      i.removeEventListener("focusin", f, !1), r == null || r.forEach((g) => g.removeEventListener("focusin", f, !1));
    };
  }, [
    t,
    e,
    n
  ]);
}
function w3(t) {
  let e = Ue.getTreeNode(Be);
  for (; e && e.scopeRef !== t; ) {
    if (e.nodeToRestore)
      return !1;
    e = e.parent;
  }
  return (e == null ? void 0 : e.scopeRef) === t;
}
function x3(t, e, n) {
  const r = de(typeof document < "u" ? it(t.current ? t.current[0] : void 0).activeElement : null);
  mt(() => {
    let i = t.current;
    const f = it(i ? i[0] : void 0);
    if (!e || n)
      return;
    let g = () => {
      (!Be || Bs(Be, t)) && nt(f.activeElement, t.current) && (Be = t);
    };
    return f.addEventListener("focusin", g, !1), i == null || i.forEach((l) => l.addEventListener("focusin", g, !1)), () => {
      f.removeEventListener("focusin", g, !1), i == null || i.forEach((l) => l.removeEventListener("focusin", g, !1));
    };
  }, [
    t,
    n
  ]), mt(() => {
    const i = it(t.current ? t.current[0] : void 0);
    if (!e)
      return;
    let f = (g) => {
      if (g.key !== "Tab" || g.altKey || g.ctrlKey || g.metaKey || !Jr(t) || g.isComposing)
        return;
      let l = i.activeElement;
      if (!nt(l, t.current))
        return;
      let s = Ue.getTreeNode(t);
      if (!s)
        return;
      let a = s.nodeToRestore, h = Ut(i.body, {
        tabbable: !0
      });
      h.currentNode = l;
      let o = g.shiftKey ? h.previousNode() : h.nextNode();
      if ((!a || !i.body.contains(a) || a === i.body) && (a = void 0, s.nodeToRestore = void 0), (!o || !nt(o, t.current)) && a) {
        h.currentNode = a;
        do
          o = g.shiftKey ? h.previousNode() : h.nextNode();
        while (nt(o, t.current));
        g.preventDefault(), g.stopPropagation(), o ? Wt(o, !0) : Qg(a) ? Wt(a, !0) : l.blur();
      }
    };
    return n || i.addEventListener("keydown", f, !0), () => {
      n || i.removeEventListener("keydown", f, !0);
    };
  }, [
    t,
    e,
    n
  ]), mt(() => {
    const i = it(t.current ? t.current[0] : void 0);
    if (!e)
      return;
    let f = Ue.getTreeNode(t);
    if (f) {
      var g;
      return f.nodeToRestore = (g = r.current) !== null && g !== void 0 ? g : void 0, () => {
        let l = Ue.getTreeNode(t);
        if (!l)
          return;
        let s = l.nodeToRestore;
        if (e && s && // eslint-disable-next-line react-hooks/exhaustive-deps
        (nt(i.activeElement, t.current) || i.activeElement === i.body && w3(t))) {
          let a = Ue.clone();
          requestAnimationFrame(() => {
            if (i.activeElement === i.body) {
              let h = a.getTreeNode(t);
              for (; h; ) {
                if (h.nodeToRestore && h.nodeToRestore.isConnected) {
                  Wt(h.nodeToRestore);
                  return;
                }
                h = h.parent;
              }
              for (h = a.getTreeNode(t); h; ) {
                if (h.scopeRef && h.scopeRef.current && Ue.getTreeNode(h.scopeRef)) {
                  zs(h.scopeRef.current, !0);
                  return;
                }
                h = h.parent;
              }
            }
          });
        }
      };
    }
  }, [
    t,
    e
  ]);
}
function Ut(t, e, n) {
  let r = e != null && e.tabbable ? m3 : g3, i = it(t).createTreeWalker(t, NodeFilter.SHOW_ELEMENT, {
    acceptNode(f) {
      var g;
      return !(e == null || (g = e.from) === null || g === void 0) && g.contains(f) ? NodeFilter.FILTER_REJECT : f.matches(r) && Jg(f) && (!n || nt(f, n)) && (!(e != null && e.accept) || e.accept(f)) ? NodeFilter.FILTER_ACCEPT : NodeFilter.FILTER_SKIP;
    }
  });
  return e != null && e.from && (i.currentNode = e.from), i;
}
class bc {
  get size() {
    return this.fastMap.size;
  }
  getTreeNode(e) {
    return this.fastMap.get(e);
  }
  addTreeNode(e, n, r) {
    let i = this.fastMap.get(n ?? null);
    if (!i)
      return;
    let f = new tl({
      scopeRef: e
    });
    i.addChild(f), f.parent = i, this.fastMap.set(e, f), r && (f.nodeToRestore = r);
  }
  addNode(e) {
    this.fastMap.set(e.scopeRef, e);
  }
  removeTreeNode(e) {
    if (e === null)
      return;
    let n = this.fastMap.get(e);
    if (!n)
      return;
    let r = n.parent;
    for (let f of this.traverse())
      f !== n && n.nodeToRestore && f.nodeToRestore && n.scopeRef && n.scopeRef.current && nt(f.nodeToRestore, n.scopeRef.current) && (f.nodeToRestore = n.nodeToRestore);
    let i = n.children;
    r && (r.removeChild(n), i.size > 0 && i.forEach((f) => r && r.addChild(f))), this.fastMap.delete(n.scopeRef);
  }
  // Pre Order Depth First
  *traverse(e = this.root) {
    if (e.scopeRef != null && (yield e), e.children.size > 0)
      for (let n of e.children)
        yield* this.traverse(n);
  }
  clone() {
    var e;
    let n = new bc();
    var r;
    for (let i of this.traverse())
      n.addTreeNode(i.scopeRef, (r = (e = i.parent) === null || e === void 0 ? void 0 : e.scopeRef) !== null && r !== void 0 ? r : null, i.nodeToRestore);
    return n;
  }
  constructor() {
    this.fastMap = /* @__PURE__ */ new Map(), this.root = new tl({
      scopeRef: null
    }), this.fastMap.set(null, this.root);
  }
}
class tl {
  addChild(e) {
    this.children.add(e), e.parent = this;
  }
  removeChild(e) {
    this.children.delete(e), e.parent = void 0;
  }
  constructor(e) {
    this.children = /* @__PURE__ */ new Set(), this.contain = !1, this.scopeRef = e.scopeRef;
  }
}
let Ue = new bc();
function yc() {
  const { width: t, height: e } = HS();
  return {
    "--be-viewport-height": `${e}px`,
    "--be-viewport-width": `${t}px`
  };
}
const go = {
  initial: { opacity: 0, y: 5 },
  animate: { opacity: 1, y: 0 },
  exit: { opacity: 0, y: 5 },
  transition: { type: "tween", duration: 0.125 }
}, us = Je(
  ({
    children: t,
    style: e,
    autoFocus: n = !1,
    restoreFocus: r = !0,
    isDismissable: i,
    isContextMenu: f,
    isOpen: g,
    onClose: l,
    triggerRef: s,
    arrowRef: a,
    arrowStyle: h,
    onPointerLeave: o,
    onPointerEnter: u
  }, c) => {
    const d = yc(), m = er(c), { domProps: p } = C3(
      {
        isDismissable: i,
        isOpen: g,
        onClose: l,
        triggerRef: s,
        isContextMenu: f
      },
      m
    );
    return /* @__PURE__ */ x(
      ot.div,
      {
        className: "isolate z-popover",
        role: "presentation",
        ref: m,
        style: { ...d, ...e, position: "fixed" },
        ...go,
        ...nn(p, { onPointerLeave: o, onPointerEnter: u }),
        children: /* @__PURE__ */ x(
          po,
          {
            restoreFocus: r,
            autoFocus: n,
            contain: !1,
            children: t
          }
        )
      }
    );
  }
), Ur = [];
function C3({
  onClose: t,
  isDismissable: e = !0,
  triggerRef: n,
  isContextMenu: r = !1
}, i) {
  const f = de({
    isPointerDown: !1,
    isContextMenu: r,
    onClose: t
  }), g = f.current;
  g.isContextMenu = r, g.onClose = t;
  const l = Oe(
    (d) => {
      const m = d.target;
      if (m) {
        const p = m.ownerDocument;
        if (!p || !p.documentElement.contains(m))
          return !1;
      }
      return i.current && !i.current.contains(m);
    },
    [i]
  ), s = Oe(() => Ur[Ur.length - 1] === i, [i]), a = Oe(() => {
    s() && g.onClose();
  }, [s, g]), h = Oe(
    (d) => {
      var m, p;
      return n.current && "contains" in n.current ? (p = (m = n.current).contains) == null ? void 0 : p.call(m, d) : !1;
    },
    [n]
  ), o = Oe(
    (d) => {
      h(d.target) || s() && (d.stopPropagation(), d.preventDefault());
    },
    [h, s]
  ), u = Oe(
    (d) => {
      h(d.target) || (s() && (d.stopPropagation(), d.preventDefault()), (!g.isContextMenu || d.button !== 2) && a());
    },
    [h, a, g, s]
  );
  return Se(() => {
    Ur.push(i);
    const d = (b) => {
      l(b) && (o(b), f.current.isPointerDown = !0);
    }, m = (b) => {
      f.current.isPointerDown && l(b) && (f.current.isPointerDown = !1, u(b));
    }, p = (b) => {
      b.preventDefault(), l(b) && a();
    }, v = (b) => {
      if (!n.current)
        return;
      const y = b.target;
      let w;
      n.current instanceof Node ? w = n.current : "contextElement" in n.current && (w = n.current.contextElement), (!(y instanceof Node) || !w || y.contains(w)) && g.onClose();
    };
    return document.addEventListener("pointerdown", d, !0), document.addEventListener("pointerup", m, !0), document.addEventListener("contextmenu", p, !0), document.addEventListener("scroll", v, !0), () => {
      const b = Ur.indexOf(i);
      b >= 0 && Ur.splice(b, 1), document.removeEventListener("pointerdown", d, !0), document.removeEventListener("pointerup", m, !0), document.removeEventListener("contextmenu", p, !0), document.removeEventListener("scroll", v, !0);
    };
  }, [
    i,
    l,
    g,
    u,
    o,
    n,
    h,
    a
  ]), {
    domProps: {
      onKeyDown: (d) => {
        d.key === "Escape" && (d.stopPropagation(), d.preventDefault(), a());
      }
    }
  };
}
const _3 = {
  initial: { opacity: 0 },
  animate: { opacity: 1 },
  exit: { opacity: 0 },
  transition: { duration: 0.2 }
};
function wc({
  position: t = "absolute",
  className: e,
  isTransparent: n = !1,
  disableInitialTransition: r,
  ...i
}) {
  return /* @__PURE__ */ x(
    ot.div,
    {
      ...i,
      className: ae(
        e,
        !n && "bg-background/80",
        "inset-0 z-10 h-full w-full",
        t,
        "backdrop-blur-sm"
      ),
      "aria-hidden": !0,
      initial: r ? void 0 : { opacity: 0 },
      animate: { opacity: 1 },
      exit: { opacity: 0 },
      ..._3,
      transition: { duration: 0.15 }
    }
  );
}
const em = Je(
  ({
    children: t,
    autoFocus: e = !1,
    restoreFocus: n = !0,
    isDismissable: r,
    isOpen: i,
    onClose: f
  }, g) => {
    const l = yc(), s = er(g);
    return /* @__PURE__ */ ie("div", { className: "fixed inset-0 isolate z-tray", style: l, children: [
      /* @__PURE__ */ x(
        wc,
        {
          onClick: () => {
            r && f();
          }
        },
        "tray-underlay"
      ),
      /* @__PURE__ */ x(
        ot.div,
        {
          ref: s,
          className: "absolute bottom-0 left-0 right-0 z-20 mx-auto max-h-tray w-full max-w-375 overflow-hidden rounded-t pb-safe-area",
          role: "presentation",
          initial: { opacity: 0, y: "100%" },
          animate: { opacity: 1, y: 0 },
          exit: { opacity: 0, y: "100%" },
          transition: { type: "tween", duration: 0.2 },
          children: /* @__PURE__ */ x(po, { restoreFocus: n, autoFocus: e, contain: !0, children: t })
        }
      )
    ] });
  }
);
function nl(t, e) {
  if (t === e)
    return !0;
  if (!t || !e)
    return !1;
  const n = Object.keys(t), r = Object.keys(e), i = n.length;
  if (r.length !== i)
    return !1;
  for (let f = 0; f < i; f++) {
    const g = n[f];
    if (t[g] !== e[g] || !Object.prototype.hasOwnProperty.call(e, g))
      return !1;
  }
  return !0;
}
function mo() {
  const { i18n: t } = to((e) => e.data);
  return {
    locale: t,
    localeCode: (t == null ? void 0 : t.language) || "en",
    lines: t == null ? void 0 : t.lines
  };
}
function tm(t, { message: e, values: n }) {
  const r = e.match(/\[(.+?)]/), i = n == null ? void 0 : n.count;
  if (r && r[1] && !Number.isNaN(i)) {
    const [f, g] = r, l = g.split("|");
    if (!l.length)
      return e;
    const a = S3(t).select(i);
    let h = l.find((u) => u.startsWith(a));
    h || (h = l[0]);
    const o = h.substring(h.indexOf(" ") + 1);
    return e.replace(f, o);
  }
  return e;
}
const S3 = Ii((t) => new Intl.PluralRules(t));
function _h(t, e) {
  return t == null ? !1 : Object.hasOwn !== void 0 ? Object.hasOwn(t, e) : Object.hasOwnProperty(e);
}
const ye = zv((t) => {
  const { message: e, values: n } = t, { lines: r, localeCode: i } = mo();
  let f;
  if (_h(r, e) ? f = r == null ? void 0 : r[e] : _h(r, e == null ? void 0 : e.toLowerCase()) ? f = r == null ? void 0 : r[e == null ? void 0 : e.toLowerCase()] : f = e, !n || !f)
    return /* @__PURE__ */ x(Xt, { children: f });
  f = tm(i, {
    message: f,
    values: n
  });
  const g = [], l = [];
  if (Object.entries(n).forEach(([s, a]) => {
    typeof a == "function" ? l.push(s) : Jt(a) ? g.push(s) : a != null && (f = f == null ? void 0 : f.replace(`:${s}`, `${a}`));
  }), l.length || g.length) {
    const s = [];
    if (l.length) {
      const u = l.join("");
      s.push(`(<[${u}]>.+?<\\/[${u}]>)`);
    }
    if (g.length) {
      const u = g.join("|");
      s.push(`(:(?:${u}))`);
    }
    const a = new RegExp(s.join("|"), "gm"), o = f.split(a).filter(Boolean).map((u, c) => {
      if (u.startsWith("<") && u.endsWith(">")) {
        const d = u.match(/<([a-z]+)>(.+?)<\/([a-z]+)>/);
        if (d) {
          const [, m, p] = d, v = n == null ? void 0 : n[m];
          if (typeof v == "function") {
            const b = v(p);
            return ut(b, { key: c });
          }
        }
      }
      if (u.startsWith(":")) {
        const d = u.replace(":", ""), m = n == null ? void 0 : n[d];
        if (Jt(m))
          return ut(m, { key: c });
      }
      return u;
    });
    return /* @__PURE__ */ x(Xt, { children: o });
  }
  return /* @__PURE__ */ x(Xt, { children: f });
}, T3);
function T3(t, e) {
  const { values: n, ...r } = t, { values: i, ...f } = e;
  return nl(i, n) && nl(r, f);
}
function nm({
  listbox: t,
  children: e,
  isLoading: n,
  mobileOverlay: r = em,
  searchField: i,
  onClose: f,
  prepend: g,
  className: l,
  ...s
}) {
  const a = s3(), {
    floatingWidth: h,
    floatingMinWidth: o = "min-w-180",
    collection: u,
    showEmptyMessage: c,
    state: { isOpen: d, setIsOpen: m },
    positionStyle: p,
    floating: v,
    refs: b
  } = t, y = !g && a ? r : us, w = ae(
    "text-base sm:text-sm outline-none bg max-h-inherit flex flex-col",
    !g && "shadow-xl border py-4",
    l,
    // tray will apply its own rounding and max width
    y === us && "rounded-panel",
    y === us && h === "auto" ? `max-w-288 ${o}` : ""
  ), C = He(() => {
    let k = 0;
    const I = [];
    return [...u.values()].reduce((L, j) => {
      if (!j.section)
        L.push(
          ut(j.element, {
            key: j.element.key || j.element.props.value
          })
        );
      else if (!I.includes(j.section)) {
        const G = ut(j.section, {
          key: j.section.key || k,
          index: k
        });
        L.push(G), I.push(j.section), k++;
      }
      return L;
    }, []);
  }, [u]), _ = C.length > 0 || c && !n, S = _ ? /* @__PURE__ */ ie("div", { className: w, role: "presentation", children: [
    i,
    /* @__PURE__ */ x(E3, { isLoading: n, ...s, children: C })
  ] }) : null;
  return /* @__PURE__ */ ie(Rg.Provider, { value: t, children: [
    e,
    g ? S : Un && vl(
      /* @__PURE__ */ x(tn, { children: d && _ && /* @__PURE__ */ x(
        y,
        {
          triggerRef: b.reference,
          restoreFocus: !0,
          isOpen: d,
          onClose: () => {
            f == null || f(), m(!1);
          },
          isDismissable: !0,
          style: p,
          ref: v,
          children: S
        }
      ) }),
      Un
    )
  ] });
}
function E3({
  className: t,
  children: e,
  isLoading: n,
  ...r
}) {
  const {
    role: i,
    listboxId: f,
    virtualFocus: g,
    focusItem: l,
    state: { activeIndex: s, setActiveIndex: a, selectedIndex: h }
  } = ac(), o = de(!0), u = de(null);
  return Se(() => () => a(null), [a]), Se(() => {
    if (o.current) {
      const c = s ?? h;
      c == null && !g ? requestAnimationFrame(() => {
        var d;
        (d = u.current) == null || d.focus({ preventScroll: !0 });
      }) : c != null && requestAnimationFrame(() => {
        l("increment", c);
      });
    }
    o.current = !1;
  }, [s, h, l, g]), /* @__PURE__ */ x(
    "div",
    {
      tabIndex: g ? void 0 : -1,
      role: i,
      id: f,
      className: "flex-auto overflow-y-auto overscroll-contain outline-none",
      ref: u,
      ...r,
      children: e.length ? e : /* @__PURE__ */ x(k3, {})
    }
  );
}
function k3() {
  return /* @__PURE__ */ x("div", { className: "px-8 py-4 text-sm italic text-muted", children: /* @__PURE__ */ x(ye, { message: "There are no items matching your query" }) });
}
function rm({
  state: {
    isOpen: t,
    setIsOpen: e,
    selectedIndex: n,
    activeIndex: r,
    setInputValue: i,
    setActiveIndex: f
  },
  focusLoopingMode: g,
  collection: l,
  focusItem: s,
  handleItemSelection: a,
  allowCustomValue: h
}) {
  const o = (d) => {
    if (!(t || !d.currentTarget.contains(d.target))) {
      if (d.key === "ArrowDown")
        return d.preventDefault(), e(!0), s("increment", n ?? 0), !0;
      if (d.key === "ArrowUp")
        return d.preventDefault(), e(!0), s(
          "decrement",
          n ?? l.size - 1
        ), !0;
      if (d.key === "Enter" || d.key === "Space")
        return d.preventDefault(), e(!0), s("increment", n ?? 0), !0;
    }
  }, u = (d) => {
    const m = Math.max(0, l.size - 1);
    if (!(!t || !d.currentTarget.contains(d.target)))
      switch (d.key) {
        case "ArrowDown":
          return d.preventDefault(), r == null ? s("increment", 0) : r >= m ? g === "loop" ? s("increment", 0) : g === "deselect" && f(null) : s("increment", r + 1), !0;
        case "ArrowUp":
          return d.preventDefault(), r == null ? s("decrement", m) : r <= 0 ? g === "loop" ? s("decrement", m) : g === "deselect" && f(null) : s("decrement", r - 1), !0;
        case "Home":
          return d.preventDefault(), s("increment", 0), !0;
        case "End":
          return d.preventDefault(), s("decrement", m), !0;
        case "Tab":
          return e(!1), !0;
      }
  };
  return {
    handleTriggerKeyDown: o,
    handleListboxKeyboardNavigation: u,
    handleListboxSearchFieldKeydown: (d) => {
      var p, v;
      if (d.key === "Enter" && r != null && l.size) {
        d.preventDefault();
        const [b, y] = [...l.entries()][r];
        b && (a(b), (v = (p = y.element.props).onSelected) == null || v.call(p));
        return;
      }
      d.key === "Escape" && t && (e(!1), h || i("")), o(d) || u(d);
    }
  };
}
const qo = /* @__PURE__ */ new Map();
function O3(t) {
  const { localeCode: e } = mo(), n = e + (t ? Object.entries(t).sort((i, f) => i[0] < f[0] ? -1 : 1).join() : "");
  if (qo.has(n))
    return qo.get(n);
  const r = new Intl.Collator(e, t);
  return qo.set(n, r), r;
}
function im() {
  const t = O3({ usage: "search", sensitivity: "base" }), e = de({
    search: "",
    timeout: void 0
  }).current, n = (i, f) => {
    let g = f ?? 0;
    for (; g != null; ) {
      const l = i[g], s = l == null ? void 0 : l.slice(0, e.search.length);
      if (s && t.compare(s, e.search) === 0)
        return g;
      if (g < i.length - 1)
        g++;
      else
        return null;
    }
    return null;
  };
  return { findMatchingItem: (i, f, g = 0) => {
    const l = D3(i.key);
    if (!l || i.ctrlKey || i.metaKey)
      return null;
    l === " " && e.search.trim().length > 0 && (i.preventDefault(), i.stopPropagation()), e.search += l;
    let s = n(f, g);
    return s == null && (s = n(f, 0)), clearTimeout(e.timeout), e.timeout = setTimeout(() => {
      e.search = "";
    }, 500), s ?? null;
  } };
}
function D3(t) {
  return t.length === 1 || !/^[A-Z]/i.test(t) ? t : "";
}
function A3(t, { noSSR: e } = { noSSR: !0 }) {
  const n = typeof window < "u" && typeof window.matchMedia == "function", [r, i] = De(
    e ? () => n ? window.matchMedia(t).matches : !1 : null
  );
  return Se(() => {
    if (!n)
      return;
    const f = window.matchMedia(t), g = () => {
      i(f.matches);
    };
    return f.addEventListener("change", g), e || g(), () => {
      f.removeEventListener("change", g);
    };
  }, [n, t, e]), typeof window > "u" ? null : r;
}
function vo(t) {
  return A3("(max-width: 768px)", t);
}
const sm = be(
  /* @__PURE__ */ x("path", { d: "M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z" }),
  "SearchOutlined"
);
var P3 = (t) => t.type === "checkbox", M3 = (t) => t instanceof Date, om = (t) => t == null;
const F3 = (t) => typeof t == "object";
var Nr = (t) => !om(t) && !Array.isArray(t) && F3(t) && !M3(t), I3 = (t) => Nr(t) && t.target ? P3(t.target) ? t.target.checked : t.target.value : t, R3 = (t) => t.substring(0, t.search(/\.\d+(\.|$)/)) || t, L3 = (t, e) => t.has(R3(e)), B3 = (t) => {
  const e = t.constructor && t.constructor.prototype;
  return Nr(e) && e.hasOwnProperty("isPrototypeOf");
}, z3 = typeof window < "u" && typeof window.HTMLElement < "u" && typeof document < "u";
function xc(t) {
  let e;
  const n = Array.isArray(t);
  if (t instanceof Date)
    e = new Date(t);
  else if (t instanceof Set)
    e = new Set(t);
  else if (!(z3 && (t instanceof Blob || t instanceof FileList)) && (n || Nr(t)))
    if (e = n ? [] : {}, !n && !B3(t))
      e = t;
    else
      for (const r in t)
        t.hasOwnProperty(r) && (e[r] = xc(t[r]));
  else
    return t;
  return e;
}
var am = (t) => Array.isArray(t) ? t.filter(Boolean) : [], rl = (t) => t === void 0, Qe = (t, e, n) => {
  if (!e || !Nr(t))
    return n;
  const r = am(e.split(/[,[\].]+?/)).reduce((i, f) => om(i) ? i : i[f], t);
  return rl(r) || r === t ? rl(t[e]) ? n : t[e] : r;
}, Sh = (t) => typeof t == "boolean", N3 = (t) => /^\w*$/.test(t), j3 = (t) => am(t.replace(/["|']|\]/g, "").split(/\.|\[/)), Th = (t, e, n) => {
  let r = -1;
  const i = N3(e) ? [e] : j3(e), f = i.length, g = f - 1;
  for (; ++r < f; ) {
    const l = i[r];
    let s = n;
    if (r !== g) {
      const a = t[l];
      s = Nr(a) || Array.isArray(a) ? a : isNaN(+i[r + 1]) ? {} : [];
    }
    if (l === "__proto__")
      return;
    t[l] = s, t = t[l];
  }
  return t;
};
const Eh = {
  BLUR: "blur",
  FOCUS_OUT: "focusout",
  CHANGE: "change"
}, il = {
  onBlur: "onBlur",
  onChange: "onChange",
  onSubmit: "onSubmit",
  onTouched: "onTouched",
  all: "all"
}, $3 = ce.createContext(null), Cc = () => ce.useContext($3);
var V3 = (t, e, n, r = !0) => {
  const i = {
    defaultValues: e._defaultValues
  };
  for (const f in t)
    Object.defineProperty(i, f, {
      get: () => {
        const g = f;
        return e._proxyFormState[g] !== il.all && (e._proxyFormState[g] = !r || il.all), n && (n[g] = !0), t[g];
      }
    });
  return i;
}, H3 = (t) => Nr(t) && !Object.keys(t).length, W3 = (t, e, n, r) => {
  n(t);
  const { name: i, ...f } = t;
  return H3(f) || Object.keys(f).length >= Object.keys(e).length || Object.keys(f).find((g) => e[g] === (!r || il.all));
}, U3 = (t) => Array.isArray(t) ? t : [t], lm = (t, e, n) => !t || !e || t === e || U3(t).some((r) => r && (n ? r === e : r.startsWith(e) || e.startsWith(r)));
function cm(t) {
  const e = ce.useRef(t);
  e.current = t, ce.useEffect(() => {
    const n = !t.disabled && e.current.subject && e.current.subject.subscribe({
      next: e.current.next
    });
    return () => {
      n && n.unsubscribe();
    };
  }, [t.disabled]);
}
function X3(t) {
  const e = Cc(), { control: n = e.control, disabled: r, name: i, exact: f } = t || {}, [g, l] = ce.useState(n._formState), s = ce.useRef(!0), a = ce.useRef({
    isDirty: !1,
    isLoading: !1,
    dirtyFields: !1,
    touchedFields: !1,
    validatingFields: !1,
    isValidating: !1,
    isValid: !1,
    errors: !1
  }), h = ce.useRef(i);
  return h.current = i, cm({
    disabled: r,
    next: (o) => s.current && lm(h.current, o.name, f) && W3(o, a.current, n._updateFormState) && l({
      ...n._formState,
      ...o
    }),
    subject: n._subjects.state
  }), ce.useEffect(() => (s.current = !0, a.current.isValid && n._updateValid(!0), () => {
    s.current = !1;
  }), [n]), V3(g, n, a.current, !1);
}
var Y3 = (t) => typeof t == "string", G3 = (t, e, n, r, i) => Y3(t) ? (r && e.watch.add(t), Qe(n, t, i)) : Array.isArray(t) ? t.map((f) => (r && e.watch.add(f), Qe(n, f))) : (r && (e.watchAll = !0), n);
function K3(t) {
  const e = Cc(), { control: n = e.control, name: r, defaultValue: i, disabled: f, exact: g } = t || {}, l = ce.useRef(r);
  l.current = r, cm({
    disabled: f,
    subject: n._subjects.values,
    next: (h) => {
      lm(l.current, h.name, g) && a(xc(G3(l.current, n._names, h.values || n._formValues, !1, i)));
    }
  });
  const [s, a] = ce.useState(n._getWatch(r, i));
  return ce.useEffect(() => n._removeUnmounted()), s;
}
function q3(t) {
  const e = Cc(), { name: n, disabled: r, control: i = e.control, shouldUnregister: f } = t, g = L3(i._names.array, n), l = K3({
    control: i,
    name: n,
    defaultValue: Qe(i._formValues, n, Qe(i._defaultValues, n, t.defaultValue)),
    exact: !0
  }), s = X3({
    control: i,
    name: n
  }), a = ce.useRef(i.register(n, {
    ...t.rules,
    value: l,
    ...Sh(t.disabled) ? { disabled: t.disabled } : {}
  }));
  return ce.useEffect(() => {
    const h = i._options.shouldUnregister || f, o = (u, c) => {
      const d = Qe(i._fields, u);
      d && (d._f.mount = c);
    };
    if (o(n, !0), h) {
      const u = xc(Qe(i._options.defaultValues, n));
      Th(i._defaultValues, n, u), rl(Qe(i._formValues, n)) && Th(i._formValues, n, u);
    }
    return () => {
      (g ? h && !i._state.action : h) ? i.unregister(n) : o(n, !1);
    };
  }, [n, i, g, f]), ce.useEffect(() => {
    Qe(i._fields, n) && i._updateDisabledField({
      disabled: r,
      fields: i._fields,
      name: n,
      value: Qe(i._fields, n)._f.value
    });
  }, [r, n, i]), {
    field: {
      name: n,
      value: l,
      ...Sh(r) || s.disabled ? { disabled: s.disabled || r } : {},
      onChange: ce.useCallback((h) => a.current.onChange({
        target: {
          value: I3(h),
          name: n
        },
        type: Eh.CHANGE
      }), [n]),
      onBlur: ce.useCallback(() => a.current.onBlur({
        target: {
          value: Qe(i._formValues, n),
          name: n
        },
        type: Eh.BLUR
      }), [n, i]),
      ref: (h) => {
        const o = Qe(i._fields, n);
        o && h && (o._f.ref = {
          focus: () => h.focus(),
          select: () => h.select(),
          setCustomValidity: (u) => h.setCustomValidity(u),
          reportValidity: () => h.reportValidity()
        });
      }
    },
    formState: s,
    fieldState: Object.defineProperties({}, {
      invalid: {
        enumerable: !0,
        get: () => !!Qe(s.errors, n)
      },
      isDirty: {
        enumerable: !0,
        get: () => !!Qe(s.dirtyFields, n)
      },
      isTouched: {
        enumerable: !0,
        get: () => !!Qe(s.touchedFields, n)
      },
      isValidating: {
        enumerable: !0,
        get: () => !!Qe(s.validatingFields, n)
      },
      error: {
        enumerable: !0,
        get: () => Qe(s.errors, n)
      }
    })
  };
}
function tr(t = {}) {
  const {
    size: e = "md",
    startAppend: n,
    endAppend: r,
    className: i,
    labelPosition: f,
    labelDisplay: g = "block",
    inputClassName: l,
    inputWrapperClassName: s,
    unstyled: a,
    invalid: h,
    disabled: o,
    background: u = "bg-transparent",
    flexibleHeight: c,
    inputShadow: d = "shadow-sm",
    descriptionPosition: m = "bottom",
    inputRing: p,
    inputFontSize: v,
    labelSuffix: b
  } = { ...t };
  if (a)
    return {
      label: "",
      input: l || "",
      wrapper: i || "",
      inputWrapper: s || "",
      adornment: "",
      append: { size: "", radius: "" },
      size: { font: "", height: "" },
      description: "",
      error: ""
    };
  const y = eT({
    size: t.size,
    flexibleHeight: c
  });
  v && (y.font = v);
  const w = n || r, _ = p || `focus:ring ${h ? "focus:ring-danger/focus focus:border-danger/60" : "focus:ring-primary/focus focus:border-primary/60"}`, S = Q3(t);
  return {
    label: ae(
      g,
      "first-letter:capitalize text-left whitespace-nowrap",
      o && "text-disabled",
      y.font,
      b ? "" : f === "side" ? "mr-16" : "mb-4"
    ),
    input: ae(
      "block text-left relative w-full appearance-none transition-shadow text",
      u,
      // radius
      S.input,
      Z3(t),
      !o && `${_} focus:outline-none ${d}`,
      o && "text-disabled cursor-not-allowed",
      l,
      y.font,
      y.height,
      J3(t)
    ),
    adornment: tT(e),
    append: {
      size: oc(e),
      radius: S.append
    },
    wrapper: ae(i, y.font, {
      "flex items-center": f === "side"
    }),
    inputWrapper: ae(
      "isolate relative",
      s,
      w && "flex items-stretch"
    ),
    size: y,
    description: `text-muted ${m === "bottom" ? "pt-10" : "pb-10"} text-xs`,
    error: "text-danger pt-10 text-xs"
  };
}
function Z3({
  startAppend: t,
  endAppend: e,
  inputBorder: n,
  invalid: r
}) {
  if (n)
    return n;
  const i = t || e, f = r ? "border-danger" : "border-divider";
  return i ? t ? `${f} border-y border-r` : `${f} border-y border-l` : `${f} border`;
}
function J3({
  startAdornment: t,
  endAdornment: e,
  inputRadius: n
}) {
  return n === "rounded-full" ? ae(
    t ? "pl-54" : "pl-28",
    e ? "pr-54" : "pr-28"
  ) : ae(
    t ? "pl-46" : "pl-12",
    e ? "pr-46" : "pr-12"
  );
}
function Q3(t) {
  const { startAppend: e, endAppend: n, inputRadius: r } = t, i = e || n;
  return r === "rounded-full" ? {
    input: ae(
      !i && "rounded-full",
      e && "rounded-r-full rounded-l-none",
      n && "rounded-l-full rounded-r-none"
    ),
    append: e ? "rounded-l-full" : "rounded-r-full"
  } : r === "rounded-none" ? {
    input: "",
    append: ""
  } : r ? {
    input: r,
    append: r
  } : {
    input: ae(
      !i && "rounded-input",
      e && "rounded-r-input rounded-l-none",
      n && "rounded-l-input rounded-r-none"
    ),
    append: e ? "rounded-l-input" : "rounded-r-input"
  };
}
function eT({ size: t, flexibleHeight: e }) {
  switch (t) {
    case "2xs":
      return { font: "text-xs", height: e ? "min-h-24" : "h-24" };
    case "xs":
      return { font: "text-xs", height: e ? "min-h-30" : "h-30" };
    case "sm":
      return { font: "text-sm", height: e ? "min-h-36" : "h-36" };
    case "lg":
      return {
        font: "text-md md:text-lg",
        height: e ? "min-h-50" : "h-50"
      };
    case "xl":
      return { font: "text-xl", height: e ? "min-h-60" : "h-60" };
    default:
      return { font: "text-sm", height: e ? "min-h-42" : "h-42" };
  }
}
function tT(t) {
  switch (t) {
    case "2xs":
      return "icon-2xs";
    case "xs":
      return "icon-xs";
    case "sm":
      return "icon-sm";
    case "md":
      return "icon-sm";
    case "lg":
      return "icon-lg";
    case "xl":
      return "icon-xl";
    default:
      return "";
  }
}
function kh({
  children: t,
  direction: e,
  className: n,
  position: r = e === "start" ? "left-0" : "right-0"
}) {
  return t ? /* @__PURE__ */ x(
    "div",
    {
      className: ae(
        "pointer-events-none absolute top-0 z-10 flex h-full min-w-42 items-center justify-center text-muted",
        r,
        n
      ),
      children: t
    }
  ) : null;
}
function um(t, e) {
  const n = (e == null ? void 0 : e.copy) ?? !0, r = n ? { ...t } : t;
  return Object.keys(r).forEach((i) => {
    const f = i;
    e != null && e.arrays && Array.isArray(r[f]) && r[f].length === 0 ? delete r[f] : e != null && e.deep && r[f] && typeof r[f] == "object" ? (r[f] = um(r[f], e), Object.keys(r[f]).length === 0 && delete r[f]) : (r[f] == null || r[f] === "") && delete r[f];
  }), n ? r : t;
}
const hm = ce.forwardRef(
  (t, e) => {
    const {
      children: n,
      // Not every component that uses <Field> supports help text.
      description: r,
      errorMessage: i,
      descriptionProps: f = {},
      errorMessageProps: g = {},
      startAdornment: l,
      endAdornment: s,
      adornmentPosition: a,
      startAppend: h,
      endAppend: o,
      fieldClassNames: u,
      disabled: c,
      wrapperProps: d
    } = t;
    return /* @__PURE__ */ ie("div", { className: u.wrapper, ref: e, ...d, children: [
      /* @__PURE__ */ x(nT, { ...t }),
      /* @__PURE__ */ ie("div", { className: u.inputWrapper, children: [
        /* @__PURE__ */ x(
          kh,
          {
            direction: "start",
            className: u.adornment,
            position: a,
            children: l
          }
        ),
        h && /* @__PURE__ */ x(Oh, { style: u.append, disabled: c, children: h }),
        n,
        o && /* @__PURE__ */ x(Oh, { style: u.append, disabled: c, children: o }),
        /* @__PURE__ */ x(
          kh,
          {
            direction: "end",
            className: u.adornment,
            position: a,
            children: s
          }
        )
      ] }),
      r && !i && /* @__PURE__ */ x("div", { className: u.description, ...f, children: r }),
      i && /* @__PURE__ */ x("div", { className: u.error, ...g, children: i })
    ] });
  }
);
function nT({
  labelElementType: t,
  fieldClassNames: e,
  labelProps: n,
  label: r,
  labelSuffix: i,
  labelSuffixPosition: f = "spaced",
  required: g
}) {
  if (!r)
    return null;
  const s = /* @__PURE__ */ ie(t || "label", { className: e.label, ...n, children: [
    r,
    g && /* @__PURE__ */ x("span", { className: "text-danger", children: " *" })
  ] });
  return i ? /* @__PURE__ */ ie(
    "div",
    {
      className: ae(
        "mb-4 flex w-full gap-4",
        f === "spaced" ? "items-end" : "items-center"
      ),
      children: [
        s,
        /* @__PURE__ */ x(
          "div",
          {
            className: ae(
              "text-xs text-muted",
              f === "spaced" ? "ml-auto" : ""
            ),
            children: i
          }
        )
      ]
    }
  ) : s;
}
function Oh({ children: t, style: e, disabled: n }) {
  return ce.cloneElement(t, {
    ...t.props,
    disabled: t.props.disabled || n,
    // make sure append styles are not overwritten with empty values
    ...um(e)
  });
}
function _c({ autoFocus: t, autoSelectText: e }, n) {
  const r = de(t);
  Se(() => {
    r.current && n.current && requestAnimationFrame(() => {
      var i, f;
      (i = n.current) == null || i.focus(), e && ((f = n.current) == null ? void 0 : f.nodeName.toLowerCase()) === "input" && n.current.select();
    }), r.current = !1;
  }, [n, e]);
}
function fm(t) {
  const {
    focusRef: e,
    labelElementType: n = "label",
    label: r,
    labelSuffix: i,
    labelSuffixPosition: f,
    autoFocus: g,
    autoSelectText: l,
    labelPosition: s,
    descriptionPosition: a,
    size: h,
    errorMessage: o,
    description: u,
    flexibleHeight: c,
    startAdornment: d,
    endAdornment: m,
    startAppend: p,
    adornmentPosition: v,
    endAppend: b,
    className: y,
    inputClassName: w,
    inputWrapperClassName: C,
    unstyled: _,
    background: S,
    invalid: k,
    disabled: I,
    id: L,
    inputRadius: j,
    inputBorder: G,
    inputShadow: te,
    inputRing: W,
    inputFontSize: q,
    ...K
  } = t;
  _c(t, e);
  const ne = Pt(), re = L || ne, T = `${re}-label`, P = `${re}-description`, A = `${re}-error`, M = {
    id: T,
    htmlFor: n === "label" ? re : void 0
  }, $ = {
    id: P
  }, D = {
    id: A
  }, F = {
    "aria-label": !t.label && !t["aria-label"] && t.placeholder ? t.placeholder : t["aria-label"],
    "aria-invalid": k || void 0,
    id: re,
    disabled: I,
    ...K
  }, N = [];
  r && N.push(M.id), F["aria-labelledby"] && N.push(F["aria-labelledby"]), F["aria-labelledby"] = N.length ? N.join(" ") : void 0;
  const H = [];
  return u && H.push($.id), o && H.push(D.id), F["aria-describedby"] && H.push(F["aria-describedby"]), F["aria-describedby"] = H.length ? H.join(" ") : void 0, {
    fieldProps: {
      errorMessageProps: D,
      descriptionProps: $,
      labelProps: M,
      disabled: I,
      label: r,
      labelSuffix: i,
      labelSuffixPosition: f,
      autoFocus: g,
      autoSelectText: l,
      labelPosition: s,
      descriptionPosition: a,
      size: h,
      errorMessage: o,
      description: u,
      flexibleHeight: c,
      startAdornment: d,
      endAdornment: m,
      startAppend: p,
      adornmentPosition: v,
      endAppend: b,
      className: y,
      inputClassName: w,
      inputWrapperClassName: C,
      unstyled: _,
      background: S,
      invalid: k
    },
    inputProps: F
  };
}
const Qt = Je(
  ({
    inputElementType: t = "input",
    flexibleHeight: e,
    inputRef: n,
    inputTestId: r,
    ...i
  }, f) => {
    const g = er(n), { fieldProps: l, inputProps: s } = fm({
      ...i,
      focusRef: g
    }), a = t === "textarea", h = a ? "textarea" : "input", o = tr({
      ...i,
      flexibleHeight: e || t === "textarea"
    });
    return t === "textarea" && !i.unstyled && (o.input = `${o.input} py-12`), /* @__PURE__ */ x(hm, { ref: f, fieldClassNames: o, ...l, children: /* @__PURE__ */ x(
      h,
      {
        "data-testid": r,
        ref: g,
        ...s,
        rows: a ? s.rows || 4 : void 0,
        className: o.input
      }
    ) });
  }
);
ce.forwardRef(({ name: t, ...e }, n) => {
  const {
    field: { onChange: r, onBlur: i, value: f = "", ref: g },
    fieldState: { invalid: l, error: s }
  } = q3({
    name: t
  }), a = {
    onChange: r,
    onBlur: i,
    value: f ?? "",
    // avoid issues with "null" value when setting form defaults from backend model
    invalid: l,
    errorMessage: s == null ? void 0 : s.message,
    inputRef: g,
    name: t
  };
  return /* @__PURE__ */ x(Qt, { ref: n, ...nn(a, e) });
});
const rT = Je(
  (t, e) => {
    const {
      searchPlaceholder: n,
      showSearchField: r,
      children: [i, f],
      floatingWidth: g = "auto",
      isLoading: l
    } = t, s = Pt(), a = vo(), h = Yg(
      {
        ...t,
        clearInputOnItemSelection: !0,
        showEmptyMessage: r,
        // on mobile menu will be shown as bottom drawer, so make it fullscreen width always
        floatingWidth: a ? "auto" : g,
        virtualFocus: r,
        role: r ? "listbox" : "menu",
        focusLoopingMode: r ? "stay" : "loop",
        children: f.props.children
      },
      e
    ), {
      state: { isOpen: o, setIsOpen: u, activeIndex: c, inputValue: d, setInputValue: m },
      listboxId: p,
      focusItem: v,
      listContent: b,
      reference: y,
      onInputChange: w
    } = h, {
      handleTriggerKeyDown: C,
      handleListboxKeyboardNavigation: _,
      handleListboxSearchFieldKeydown: S
    } = rm(h), { findMatchingItem: k } = im();
    return /* @__PURE__ */ x(
      nm,
      {
        onClick: (L) => L.stopPropagation(),
        listbox: h,
        onKeyDownCapture: r ? void 0 : (L) => {
          if (!o)
            return;
          const j = k(L, b, c);
          j != null && v("increment", j);
        },
        onKeyDown: _,
        onClose: r ? () => m("") : void 0,
        "aria-labelledby": s,
        isLoading: l,
        searchField: r ? /* @__PURE__ */ x(
          Qt,
          {
            size: "sm",
            placeholder: n,
            startAdornment: /* @__PURE__ */ x(sm, {}),
            className: "flex-shrink-0 px-8 pb-8 pt-4",
            autoFocus: !0,
            "aria-expanded": o ? "true" : "false",
            "aria-haspopup": "listbox",
            "aria-controls": o ? p : void 0,
            "aria-autocomplete": "list",
            autoComplete: "off",
            autoCorrect: "off",
            spellCheck: "false",
            value: d,
            onChange: w,
            onKeyDown: (L) => {
              S(L);
            }
          }
        ) : null,
        children: ut(i, {
          id: s,
          "aria-expanded": o ? "true" : "false",
          "aria-haspopup": "menu",
          "aria-controls": o ? p : void 0,
          ref: y,
          onKeyDown: C,
          onClick: ct((L) => {
            var j, G;
            (G = (j = i.props) == null ? void 0 : j.onClick) == null || G.call(j, L), u(!o);
          })
        })
      }
    );
  }
);
function iT({ children: t }) {
  return t;
}
function sT({ item: t, button: e }) {
  return /* @__PURE__ */ ie(rT, { children: [
    e,
    /* @__PURE__ */ x(iT, { children: (t.menuItems || []).map((n) => /* @__PURE__ */ x(
      ho,
      {
        value: n.label,
        onSelected: () => {
          n.action(O().editor);
        },
        children: n.label
      },
      n.label
    )) })
  ] });
}
const Fe = Je(
  ({
    children: t,
    size: e = "md",
    // only set icon size based on button size if "ButtonSize" is passed in and not custom className
    iconSize: n = e && e.length <= 3 ? e : "md",
    variant: r = "text",
    radius: i = "rounded-button",
    className: f,
    padding: g,
    equalWidth: l = !0,
    badge: s,
    ...a
  }, h) => {
    const o = ae(
      oc(e, { padding: g, equalWidth: l, variant: r }),
      f,
      s && "relative"
    );
    return /* @__PURE__ */ ie(
      rn,
      {
        ...a,
        ref: h,
        radius: i,
        variant: r,
        className: o,
        children: [
          ut(t, { size: n }),
          s
        ]
      }
    );
  }
);
function oT({ icon: t, className: e, size: n }) {
  let r;
  return ce.isValidElement(t) ? r = ce.cloneElement(t, {
    className: "svg-iconEl"
  }) : typeof t == "string" ? r = /* @__PURE__ */ x("img", { className: "w-font h-font", src: t, alt: "" }) : Array.isArray(t) ? r = ce.createElement(B1(t), { size: n }) : r = ce.createElement(t, { size: n }), /* @__PURE__ */ x("span", { className: ae(e, "leading-none"), children: r });
}
const Sc = ce.memo(oT);
function sl({ value: t }) {
  return t ? typeof t == "string" ? /* @__PURE__ */ x(ye, { message: t }) : /* @__PURE__ */ x(ye, { ...t }) : null;
}
function aT({ item: t }) {
  const e = t.label ? /* @__PURE__ */ x(cT, { item: t }) : /* @__PURE__ */ x(lT, { item: t });
  return t.menuItems ? /* @__PURE__ */ x(sT, { item: t, button: e }) : ce.cloneElement(e, {
    onClick: () => {
      var n;
      (n = t.action) == null || n.call(t, O().editor);
    }
  });
}
const lT = Je(
  ({ item: t, ...e }, n) => /* @__PURE__ */ x(Fe, { ref: n, radius: "rounded-full", size: "sm", ...e, children: /* @__PURE__ */ x(Sc, { icon: t.icon }) })
), cT = Je(
  ({ item: t, ...e }, n) => /* @__PURE__ */ x(
    st,
    {
      ref: n,
      radius: "rounded-full",
      size: "xs",
      color: t.buttonColor || "primary",
      variant: t.buttonVariant || "flat",
      startIcon: t.icon && /* @__PURE__ */ x(Sc, { icon: t.icon }),
      ...e,
      children: /* @__PURE__ */ x(sl, { value: t.label })
    }
  )
);
function bo({
  children: t,
  color: e,
  variant: n,
  radius: r = "rounded-button",
  size: i,
  className: f,
  value: g,
  onChange: l,
  multiple: s,
  disabled: a
}) {
  const h = (c) => g === void 0 ? !1 : s ? g.includes(c) : c === g, o = (c) => {
    const d = [...g], m = g.indexOf(c);
    return m > -1 ? d.splice(m, 1) : d.push(c), d;
  }, u = ce.Children.map(t, (c, d) => {
    if (ce.isValidElement(c)) {
      const m = h(c.props.value), p = m ? "primary" : e;
      return ce.cloneElement(c, {
        color: m ? "primary" : e,
        variant: n,
        size: i,
        radius: null,
        disabled: c.props.disabled || a,
        ...c.props,
        onClick: (v) => {
          c.props.onClick && c.props.onClick(v), l && (s ? l == null || l(o(c.props.value)) : l == null || l(c.props.value));
        },
        className: ae(
          c.props.className,
          // borders are hidden via negative margin, make sure both are visible for active item
          m ? "z-20" : "z-10",
          uT(d, t, r, p)
        )
      });
    }
  });
  return /* @__PURE__ */ x("div", { className: ae(r, "isolate inline-flex", f), children: u });
}
function uT(t, e, n, r) {
  return t === 0 ? ae(
    n,
    "rounded-tr-none rounded-br-none",
    !r && "border-r-transparent disabled:border-r-transparent"
  ) : t === e.length - 1 ? ae(n, "rounded-tl-none rounded-bl-none -ml-1") : ae(
    "rounded-none -ml-1",
    !r && "border-r-transparent disabled:border-r-transparent"
  );
}
const hT = be(
  /* @__PURE__ */ x("path", { d: "M12.5 8c-2.65 0-5.05.99-6.9 2.6L2 7v9h9l-3.62-3.62c1.39-1.16 3.16-1.88 5.12-1.88 3.54 0 6.55 2.31 7.6 5.5l2.37-.78C21.08 11.03 17.15 8 12.5 8z" }),
  "UndoOutlined"
), fT = be(
  /* @__PURE__ */ x("path", { d: "M18.4 10.6C16.55 8.99 14.15 8 11.5 8c-4.65 0-8.58 3.03-9.96 7.22L3.9 16c1.05-3.19 4.05-5.5 7.6-5.5 1.95 0 3.73.72 5.12 1.88L13 16h9V7l-3.6 3.6z" }),
  "RedoOutlined"
);
function dT() {
  const t = ue((n) => n.history.canUndo), e = ue((n) => n.history.canRedo);
  return /* @__PURE__ */ ie(bo, { variant: "outline", children: [
    /* @__PURE__ */ x(
      Fe,
      {
        equalWidth: !1,
        size: "xs",
        padding: "pl-12 pr-10",
        radius: "rounded-full",
        disabled: !t,
        onClick: () => {
          R().history.undo();
        },
        children: /* @__PURE__ */ x(hT, {})
      },
      "undo"
    ),
    /* @__PURE__ */ x(
      Fe,
      {
        equalWidth: !1,
        padding: "pl-10 pr-12",
        size: "xs",
        radius: "rounded-full",
        disabled: !e,
        onClick: () => {
          R().history.redo();
        },
        children: /* @__PURE__ */ x(fT, {})
      },
      "redo"
    )
  ] });
}
const pT = be(
  /* @__PURE__ */ x("path", { d: "M19 13H5v-2h14v2z" }),
  "RemoveOutlined"
), gT = be(
  /* @__PURE__ */ x("path", { d: "M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z" }),
  "AddOutlined"
);
function mT() {
  var n, r;
  const t = ue((i) => i.zoom) || 1;
  return ue((i) => {
    var f, g;
    return (g = (f = i.config.tools) == null ? void 0 : f.zoom) == null ? void 0 : g.allowUserZoom;
  }) ?? !0 ? /* @__PURE__ */ ie("div", { className: "flex items-center select-none", children: [
    /* @__PURE__ */ x(
      Fe,
      {
        size: "sm",
        disabled: !((n = R().zoom) != null && n.canZoomOut()),
        onClick: () => {
          R().zoom.zoomOut(R().zoom.step);
        },
        children: /* @__PURE__ */ x(pT, {})
      }
    ),
    /* @__PURE__ */ ie("div", { className: "w-[4ch] text-sm text-center", children: [
      Math.round(t * 100),
      "%"
    ] }),
    /* @__PURE__ */ x(
      Fe,
      {
        size: "sm",
        disabled: !((r = R().zoom) != null && r.canZoomIn()),
        onClick: () => {
          R().zoom.zoomIn(R().zoom.step);
        },
        children: /* @__PURE__ */ x(gT, {})
      }
    )
  ] }) : null;
}
function Zo({ item: t }) {
  switch (t.type) {
    case "undoWidget":
      return /* @__PURE__ */ x(dT, {});
    case "zoomWidget":
      return /* @__PURE__ */ x(mT, {});
    case "button":
      return /* @__PURE__ */ x(aT, { item: t });
    case "image":
      return /* @__PURE__ */ x("img", { className: "h-30 object-cover", src: bt(t.src), alt: "" });
    default:
      return null;
  }
}
const _n = be(
  /* @__PURE__ */ x("path", { d: "M19 6.41 17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12 19 6.41z" }),
  "CloseOutlined"
);
function yo() {
  var r;
  let t = ue((i) => {
    var f;
    return ((f = i.config.ui) == null ? void 0 : f.mode) === Al.OVERLAY;
  });
  const { width: e } = ue((i) => i.stageSize), n = e <= 700;
  return n && ((r = O().config.ui) != null && r.forceOverlayModeOnMobile) && (t = !0), { isModal: t, isMobile: n };
}
function vT() {
  const { isModal: t, isMobile: e } = yo(), n = ue((s) => {
    var a;
    return (a = s.config.ui) == null ? void 0 : a.allowEditorClose;
  }) ?? !0, r = ue((s) => {
    var a, h;
    return (h = (a = s.config.ui) == null ? void 0 : a.menubar) == null ? void 0 : h.items;
  }), { left: i, center: f, right: g } = He(() => bT(r || [], e), [r, e]), l = t && e && n && /* @__PURE__ */ x(
    Fe,
    {
      size: "sm",
      className: "ml-10",
      onClick: () => {
        O().editor.close();
      },
      children: /* @__PURE__ */ x(_n, {})
    }
  );
  return /* @__PURE__ */ ie(ot.div, { className: Fg, ...Ig, children: [
    /* @__PURE__ */ x("div", { className: "mr-auto flex items-center gap-8", children: i.map((s, a) => (
      // eslint-disable-next-line react/no-array-index-key
      /* @__PURE__ */ x(Zo, { item: s }, a)
    )) }),
    /* @__PURE__ */ x("div", { className: "flex items-center gap-10", children: f.map((s, a) => (
      // eslint-disable-next-line react/no-array-index-key
      /* @__PURE__ */ x(Zo, { item: s }, a)
    )) }),
    /* @__PURE__ */ x("div", { className: "ml-auto flex items-center gap-8", children: g.map((s, a) => (
      // eslint-disable-next-line react/no-array-index-key
      /* @__PURE__ */ x(Zo, { item: s }, a)
    )) }),
    l
  ] });
}
function bT(t, e) {
  const n = {
    left: [],
    center: [],
    right: []
  };
  (t || []).filter(
    (i) => !e && !i.mobileOnly || e && !i.desktopOnly
  ).forEach((i) => {
    i.align === "left" ? n.left.push({ ...i, position: i.position ?? 1 }) : i.align === "right" ? n.right.push({ ...i, position: i.position ?? 1 }) : n.center.push({ ...i, position: i.position ?? 1 });
  });
  const r = Object.entries(n).map(([i, f]) => [i, f.sort((g, l) => (g.position ?? 0) - (l.position ?? 0))]);
  return Object.fromEntries(r);
}
function yT() {
  const t = ue((n) => {
    var r;
    return (r = n.crop.zoneRect) == null ? void 0 : r.width;
  }) || 1, e = ue((n) => {
    var r;
    return (r = n.crop.zoneRect) == null ? void 0 : r.height;
  }) || 1;
  return /* @__PURE__ */ x("div", { className: "text-sm", children: `${t}x${e}` });
}
function wT() {
  const t = ue((e) => e.activeTool);
  return /* @__PURE__ */ ie(ot.div, { className: Fg, ...Ig, children: [
    /* @__PURE__ */ x(xT, {}),
    CT(t),
    /* @__PURE__ */ x(_T, {})
  ] });
}
function xT() {
  const { isMobile: t } = yo(), e = ue((n) => n.dirty);
  return t ? /* @__PURE__ */ x(
    Fe,
    {
      size: "sm",
      onClick: () => {
        O().cancelChanges();
      },
      children: /* @__PURE__ */ x(_n, {})
    }
  ) : /* @__PURE__ */ x(
    st,
    {
      variant: "outline",
      size: "xs",
      startIcon: /* @__PURE__ */ x(_n, {}),
      radius: "rounded-full",
      className: "min-w-92",
      onClick: () => {
        O().cancelChanges();
      },
      children: e ? /* @__PURE__ */ x(ye, { message: "Cancel" }) : /* @__PURE__ */ x(ye, { message: "Close" })
    }
  );
}
function CT(t) {
  var n, r;
  if (!t)
    return null;
  const e = /* @__PURE__ */ x("div", { className: "capitalize text-sm", children: /* @__PURE__ */ x(ye, { message: t }) });
  switch (t) {
    case Me.CROP:
      return ((r = (n = O().config.tools) == null ? void 0 : n.crop) == null ? void 0 : r.allowCustomRatio) ?? !0 ? /* @__PURE__ */ x(yT, {}) : e;
    default:
      return e;
  }
}
function _T() {
  const { isMobile: t } = yo(), e = ue((n) => n.dirty);
  return t ? /* @__PURE__ */ x(
    Fe,
    {
      size: "sm",
      disabled: !e,
      onClick: () => {
        O().applyChanges();
      },
      children: /* @__PURE__ */ x(Ka, {})
    }
  ) : /* @__PURE__ */ x(
    st,
    {
      variant: "flat",
      color: "primary",
      size: "xs",
      disabled: !e,
      startIcon: /* @__PURE__ */ x(Ka, {}),
      radius: "rounded-full",
      onClick: () => {
        O().applyChanges();
      },
      children: /* @__PURE__ */ x(ye, { message: "Apply" })
    }
  );
}
function Dh() {
  const t = ue((e) => e.activeTool);
  return /* @__PURE__ */ x(tn, { initial: !1, children: t ? /* @__PURE__ */ x(wT, {}, "activeToolbar") : /* @__PURE__ */ x(vT, {}, "mainToolbar") });
}
const ST = {
  newCanvas: oe("Loading Canvas"),
  mainImage: oe("Loading Image"),
  state: oe("Loading State"),
  merge: oe("Processing Image")
};
function TT() {
  const [t, e] = De(
    !1
  );
  return Se(() => {
    ue.subscribe(
      (n) => n.loading,
      (n) => {
        n && e(n);
      }
    );
  }, []), /* @__PURE__ */ x(tn, { children: t && /* @__PURE__ */ x(
    ot.div,
    {
      initial: { y: "60%", opacity: 0 },
      animate: { y: 0, opacity: 1 },
      exit: { y: "-60%", opacity: 0 },
      transition: { type: "tween", duration: 0.3 },
      onAnimationComplete: () => {
        setTimeout(() => {
          e(!1);
        }, 400);
      },
      className: "absolute z-loading-indicator inset-0 m-auto p-6 w-144 h-32 text-center text-sm bg-paper rounded-full shadow-lg",
      children: /* @__PURE__ */ x(ye, { ...ST[t] })
    }
  ) });
}
function ET(t, e, n) {
  return Math.max(e, Math.min(t, n));
}
const Ge = {
  toVector(t, e) {
    return t === void 0 && (t = e), Array.isArray(t) ? t : [t, t];
  },
  add(t, e) {
    return [t[0] + e[0], t[1] + e[1]];
  },
  sub(t, e) {
    return [t[0] - e[0], t[1] - e[1]];
  },
  addTo(t, e) {
    t[0] += e[0], t[1] += e[1];
  },
  subTo(t, e) {
    t[0] -= e[0], t[1] -= e[1];
  }
};
function Ah(t, e, n) {
  return e === 0 || Math.abs(e) === 1 / 0 ? Math.pow(t, n * 5) : t * e * n / (e + n * t);
}
function Ph(t, e, n, r = 0.15) {
  return r === 0 ? ET(t, e, n) : t < e ? -Ah(e - t, n - e, r) + e : t > n ? +Ah(t - n, n - e, r) + n : t;
}
function kT(t, [e, n], [r, i]) {
  const [[f, g], [l, s]] = t;
  return [Ph(e, f, g, r), Ph(n, l, s, i)];
}
function OT(t, e) {
  if (typeof t != "object" || t === null)
    return t;
  var n = t[Symbol.toPrimitive];
  if (n !== void 0) {
    var r = n.call(t, e || "default");
    if (typeof r != "object")
      return r;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (e === "string" ? String : Number)(t);
}
function DT(t) {
  var e = OT(t, "string");
  return typeof e == "symbol" ? e : String(e);
}
function et(t, e, n) {
  return e = DT(e), e in t ? Object.defineProperty(t, e, {
    value: n,
    enumerable: !0,
    configurable: !0,
    writable: !0
  }) : t[e] = n, t;
}
function Mh(t, e) {
  var n = Object.keys(t);
  if (Object.getOwnPropertySymbols) {
    var r = Object.getOwnPropertySymbols(t);
    e && (r = r.filter(function(i) {
      return Object.getOwnPropertyDescriptor(t, i).enumerable;
    })), n.push.apply(n, r);
  }
  return n;
}
function Ne(t) {
  for (var e = 1; e < arguments.length; e++) {
    var n = arguments[e] != null ? arguments[e] : {};
    e % 2 ? Mh(Object(n), !0).forEach(function(r) {
      et(t, r, n[r]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(t, Object.getOwnPropertyDescriptors(n)) : Mh(Object(n)).forEach(function(r) {
      Object.defineProperty(t, r, Object.getOwnPropertyDescriptor(n, r));
    });
  }
  return t;
}
const dm = {
  pointer: {
    start: "down",
    change: "move",
    end: "up"
  },
  mouse: {
    start: "down",
    change: "move",
    end: "up"
  },
  touch: {
    start: "start",
    change: "move",
    end: "end"
  },
  gesture: {
    start: "start",
    change: "change",
    end: "end"
  }
};
function Fh(t) {
  return t ? t[0].toUpperCase() + t.slice(1) : "";
}
const AT = ["enter", "leave"];
function PT(t = !1, e) {
  return t && !AT.includes(e);
}
function MT(t, e = "", n = !1) {
  const r = dm[t], i = r && r[e] || e;
  return "on" + Fh(t) + Fh(i) + (PT(n, i) ? "Capture" : "");
}
const FT = ["gotpointercapture", "lostpointercapture"];
function IT(t) {
  let e = t.substring(2).toLowerCase();
  const n = !!~e.indexOf("passive");
  n && (e = e.replace("passive", ""));
  const r = FT.includes(e) ? "capturecapture" : "capture", i = !!~e.indexOf(r);
  return i && (e = e.replace("capture", "")), {
    device: e,
    capture: i,
    passive: n
  };
}
function RT(t, e = "") {
  const n = dm[t], r = n && n[e] || e;
  return t + r;
}
function wo(t) {
  return "touches" in t;
}
function pm(t) {
  return wo(t) ? "touch" : "pointerType" in t ? t.pointerType : "mouse";
}
function LT(t) {
  return Array.from(t.touches).filter((e) => {
    var n, r;
    return e.target === t.currentTarget || ((n = t.currentTarget) === null || n === void 0 || (r = n.contains) === null || r === void 0 ? void 0 : r.call(n, e.target));
  });
}
function BT(t) {
  return t.type === "touchend" || t.type === "touchcancel" ? t.changedTouches : t.targetTouches;
}
function gm(t) {
  return wo(t) ? BT(t)[0] : t;
}
function ol(t, e) {
  try {
    const n = e.clientX - t.clientX, r = e.clientY - t.clientY, i = (e.clientX + t.clientX) / 2, f = (e.clientY + t.clientY) / 2, g = Math.hypot(n, r);
    return {
      angle: -(Math.atan2(n, r) * 180) / Math.PI,
      distance: g,
      origin: [i, f]
    };
  } catch {
  }
  return null;
}
function zT(t) {
  return LT(t).map((e) => e.identifier);
}
function Ih(t, e) {
  const [n, r] = Array.from(t.touches).filter((i) => e.includes(i.identifier));
  return ol(n, r);
}
function Jo(t) {
  const e = gm(t);
  return wo(t) ? e.identifier : e.pointerId;
}
function Rh(t) {
  const e = gm(t);
  return [e.clientX, e.clientY];
}
const Lh = 40, Bh = 800;
function NT(t) {
  let {
    deltaX: e,
    deltaY: n,
    deltaMode: r
  } = t;
  return r === 1 ? (e *= Lh, n *= Lh) : r === 2 && (e *= Bh, n *= Bh), [e, n];
}
function jT(t) {
  const e = {};
  if ("buttons" in t && (e.buttons = t.buttons), "shiftKey" in t) {
    const {
      shiftKey: n,
      altKey: r,
      metaKey: i,
      ctrlKey: f
    } = t;
    Object.assign(e, {
      shiftKey: n,
      altKey: r,
      metaKey: i,
      ctrlKey: f
    });
  }
  return e;
}
function Ns(t, ...e) {
  return typeof t == "function" ? t(...e) : t;
}
function $T() {
}
function VT(...t) {
  return t.length === 0 ? $T : t.length === 1 ? t[0] : function() {
    let e;
    for (const n of t)
      e = n.apply(this, arguments) || e;
    return e;
  };
}
function zh(t, e) {
  return Object.assign({}, e, t || {});
}
const HT = 32;
class mm {
  constructor(e, n, r) {
    this.ctrl = e, this.args = n, this.key = r, this.state || (this.state = {}, this.computeValues([0, 0]), this.computeInitial(), this.init && this.init(), this.reset());
  }
  get state() {
    return this.ctrl.state[this.key];
  }
  set state(e) {
    this.ctrl.state[this.key] = e;
  }
  get shared() {
    return this.ctrl.state.shared;
  }
  get eventStore() {
    return this.ctrl.gestureEventStores[this.key];
  }
  get timeoutStore() {
    return this.ctrl.gestureTimeoutStores[this.key];
  }
  get config() {
    return this.ctrl.config[this.key];
  }
  get sharedConfig() {
    return this.ctrl.config.shared;
  }
  get handler() {
    return this.ctrl.handlers[this.key];
  }
  reset() {
    const {
      state: e,
      shared: n,
      ingKey: r,
      args: i
    } = this;
    n[r] = e._active = e.active = e._blocked = e._force = !1, e._step = [!1, !1], e.intentional = !1, e._movement = [0, 0], e._distance = [0, 0], e._direction = [0, 0], e._delta = [0, 0], e._bounds = [[-1 / 0, 1 / 0], [-1 / 0, 1 / 0]], e.args = i, e.axis = void 0, e.memo = void 0, e.elapsedTime = e.timeDelta = 0, e.direction = [0, 0], e.distance = [0, 0], e.overflow = [0, 0], e._movementBound = [!1, !1], e.velocity = [0, 0], e.movement = [0, 0], e.delta = [0, 0], e.timeStamp = 0;
  }
  start(e) {
    const n = this.state, r = this.config;
    n._active || (this.reset(), this.computeInitial(), n._active = !0, n.target = e.target, n.currentTarget = e.currentTarget, n.lastOffset = r.from ? Ns(r.from, n) : n.offset, n.offset = n.lastOffset, n.startTime = n.timeStamp = e.timeStamp);
  }
  computeValues(e) {
    const n = this.state;
    n._values = e, n.values = this.config.transform(e);
  }
  computeInitial() {
    const e = this.state;
    e._initial = e._values, e.initial = e.values;
  }
  compute(e) {
    const {
      state: n,
      config: r,
      shared: i
    } = this;
    n.args = this.args;
    let f = 0;
    if (e && (n.event = e, r.preventDefault && e.cancelable && n.event.preventDefault(), n.type = e.type, i.touches = this.ctrl.pointerIds.size || this.ctrl.touchIds.size, i.locked = !!document.pointerLockElement, Object.assign(i, jT(e)), i.down = i.pressed = i.buttons % 2 === 1 || i.touches > 0, f = e.timeStamp - n.timeStamp, n.timeStamp = e.timeStamp, n.elapsedTime = n.timeStamp - n.startTime), n._active) {
      const _ = n._delta.map(Math.abs);
      Ge.addTo(n._distance, _);
    }
    this.axisIntent && this.axisIntent(e);
    const [g, l] = n._movement, [s, a] = r.threshold, {
      _step: h,
      values: o
    } = n;
    if (r.hasCustomTransform ? (h[0] === !1 && (h[0] = Math.abs(g) >= s && o[0]), h[1] === !1 && (h[1] = Math.abs(l) >= a && o[1])) : (h[0] === !1 && (h[0] = Math.abs(g) >= s && Math.sign(g) * s), h[1] === !1 && (h[1] = Math.abs(l) >= a && Math.sign(l) * a)), n.intentional = h[0] !== !1 || h[1] !== !1, !n.intentional)
      return;
    const u = [0, 0];
    if (r.hasCustomTransform) {
      const [_, S] = o;
      u[0] = h[0] !== !1 ? _ - h[0] : 0, u[1] = h[1] !== !1 ? S - h[1] : 0;
    } else
      u[0] = h[0] !== !1 ? g - h[0] : 0, u[1] = h[1] !== !1 ? l - h[1] : 0;
    this.restrictToAxis && !n._blocked && this.restrictToAxis(u);
    const c = n.offset, d = n._active && !n._blocked || n.active;
    d && (n.first = n._active && !n.active, n.last = !n._active && n.active, n.active = i[this.ingKey] = n._active, e && (n.first && ("bounds" in r && (n._bounds = Ns(r.bounds, n)), this.setup && this.setup()), n.movement = u, this.computeOffset()));
    const [m, p] = n.offset, [[v, b], [y, w]] = n._bounds;
    n.overflow = [m < v ? -1 : m > b ? 1 : 0, p < y ? -1 : p > w ? 1 : 0], n._movementBound[0] = n.overflow[0] ? n._movementBound[0] === !1 ? n._movement[0] : n._movementBound[0] : !1, n._movementBound[1] = n.overflow[1] ? n._movementBound[1] === !1 ? n._movement[1] : n._movementBound[1] : !1;
    const C = n._active ? r.rubberband || [0, 0] : [0, 0];
    if (n.offset = kT(n._bounds, n.offset, C), n.delta = Ge.sub(n.offset, c), this.computeMovement(), d && (!n.last || f > HT)) {
      n.delta = Ge.sub(n.offset, c);
      const _ = n.delta.map(Math.abs);
      Ge.addTo(n.distance, _), n.direction = n.delta.map(Math.sign), n._direction = n._delta.map(Math.sign), !n.first && f > 0 && (n.velocity = [_[0] / f, _[1] / f], n.timeDelta = f);
    }
  }
  emit() {
    const e = this.state, n = this.shared, r = this.config;
    if (e._active || this.clean(), (e._blocked || !e.intentional) && !e._force && !r.triggerAllEvents)
      return;
    const i = this.handler(Ne(Ne(Ne({}, n), e), {}, {
      [this.aliasKey]: e.values
    }));
    i !== void 0 && (e.memo = i);
  }
  clean() {
    this.eventStore.clean(), this.timeoutStore.clean();
  }
}
function WT([t, e], n) {
  const r = Math.abs(t), i = Math.abs(e);
  if (r > i && r > n)
    return "x";
  if (i > r && i > n)
    return "y";
}
class UT extends mm {
  constructor(...e) {
    super(...e), et(this, "aliasKey", "xy");
  }
  reset() {
    super.reset(), this.state.axis = void 0;
  }
  init() {
    this.state.offset = [0, 0], this.state.lastOffset = [0, 0];
  }
  computeOffset() {
    this.state.offset = Ge.add(this.state.lastOffset, this.state.movement);
  }
  computeMovement() {
    this.state.movement = Ge.sub(this.state.offset, this.state.lastOffset);
  }
  axisIntent(e) {
    const n = this.state, r = this.config;
    if (!n.axis && e) {
      const i = typeof r.axisThreshold == "object" ? r.axisThreshold[pm(e)] : r.axisThreshold;
      n.axis = WT(n._movement, i);
    }
    n._blocked = (r.lockDirection || !!r.axis) && !n.axis || !!r.axis && r.axis !== n.axis;
  }
  restrictToAxis(e) {
    if (this.config.axis || this.config.lockDirection)
      switch (this.state.axis) {
        case "x":
          e[1] = 0;
          break;
        case "y":
          e[0] = 0;
          break;
      }
  }
}
const XT = (t) => t, Nh = 0.15, vm = {
  enabled(t = !0) {
    return t;
  },
  eventOptions(t, e, n) {
    return Ne(Ne({}, n.shared.eventOptions), t);
  },
  preventDefault(t = !1) {
    return t;
  },
  triggerAllEvents(t = !1) {
    return t;
  },
  rubberband(t = 0) {
    switch (t) {
      case !0:
        return [Nh, Nh];
      case !1:
        return [0, 0];
      default:
        return Ge.toVector(t);
    }
  },
  from(t) {
    if (typeof t == "function")
      return t;
    if (t != null)
      return Ge.toVector(t);
  },
  transform(t, e, n) {
    const r = t || n.shared.transform;
    return this.hasCustomTransform = !!r, r || XT;
  },
  threshold(t) {
    return Ge.toVector(t, 0);
  }
}, YT = 0, zi = Ne(Ne({}, vm), {}, {
  axis(t, e, {
    axis: n
  }) {
    if (this.lockDirection = n === "lock", !this.lockDirection)
      return n;
  },
  axisThreshold(t = YT) {
    return t;
  },
  bounds(t = {}) {
    if (typeof t == "function")
      return (f) => zi.bounds(t(f));
    if ("current" in t)
      return () => t.current;
    if (typeof HTMLElement == "function" && t instanceof HTMLElement)
      return t;
    const {
      left: e = -1 / 0,
      right: n = 1 / 0,
      top: r = -1 / 0,
      bottom: i = 1 / 0
    } = t;
    return [[e, n], [r, i]];
  }
}), jh = {
  ArrowRight: (t, e = 1) => [t * e, 0],
  ArrowLeft: (t, e = 1) => [-1 * t * e, 0],
  ArrowUp: (t, e = 1) => [0, -1 * t * e],
  ArrowDown: (t, e = 1) => [0, t * e]
};
class GT extends UT {
  constructor(...e) {
    super(...e), et(this, "ingKey", "dragging");
  }
  reset() {
    super.reset();
    const e = this.state;
    e._pointerId = void 0, e._pointerActive = !1, e._keyboardActive = !1, e._preventScroll = !1, e._delayed = !1, e.swipe = [0, 0], e.tap = !1, e.canceled = !1, e.cancel = this.cancel.bind(this);
  }
  setup() {
    const e = this.state;
    if (e._bounds instanceof HTMLElement) {
      const n = e._bounds.getBoundingClientRect(), r = e.currentTarget.getBoundingClientRect(), i = {
        left: n.left - r.left + e.offset[0],
        right: n.right - r.right + e.offset[0],
        top: n.top - r.top + e.offset[1],
        bottom: n.bottom - r.bottom + e.offset[1]
      };
      e._bounds = zi.bounds(i);
    }
  }
  cancel() {
    const e = this.state;
    e.canceled || (e.canceled = !0, e._active = !1, setTimeout(() => {
      this.compute(), this.emit();
    }, 0));
  }
  setActive() {
    this.state._active = this.state._pointerActive || this.state._keyboardActive;
  }
  clean() {
    this.pointerClean(), this.state._pointerActive = !1, this.state._keyboardActive = !1, super.clean();
  }
  pointerDown(e) {
    const n = this.config, r = this.state;
    if (e.buttons != null && (Array.isArray(n.pointerButtons) ? !n.pointerButtons.includes(e.buttons) : n.pointerButtons !== -1 && n.pointerButtons !== e.buttons))
      return;
    const i = this.ctrl.setEventIds(e);
    n.pointerCapture && e.target.setPointerCapture(e.pointerId), !(i && i.size > 1 && r._pointerActive) && (this.start(e), this.setupPointer(e), r._pointerId = Jo(e), r._pointerActive = !0, this.computeValues(Rh(e)), this.computeInitial(), n.preventScrollAxis && pm(e) !== "mouse" ? (r._active = !1, this.setupScrollPrevention(e)) : n.delay > 0 ? (this.setupDelayTrigger(e), n.triggerAllEvents && (this.compute(e), this.emit())) : this.startPointerDrag(e));
  }
  startPointerDrag(e) {
    const n = this.state;
    n._active = !0, n._preventScroll = !0, n._delayed = !1, this.compute(e), this.emit();
  }
  pointerMove(e) {
    const n = this.state, r = this.config;
    if (!n._pointerActive)
      return;
    const i = Jo(e);
    if (n._pointerId !== void 0 && i !== n._pointerId)
      return;
    const f = Rh(e);
    if (document.pointerLockElement === e.target ? n._delta = [e.movementX, e.movementY] : (n._delta = Ge.sub(f, n._values), this.computeValues(f)), Ge.addTo(n._movement, n._delta), this.compute(e), n._delayed && n.intentional) {
      this.timeoutStore.remove("dragDelay"), n.active = !1, this.startPointerDrag(e);
      return;
    }
    if (r.preventScrollAxis && !n._preventScroll)
      if (n.axis)
        if (n.axis === r.preventScrollAxis || r.preventScrollAxis === "xy") {
          n._active = !1, this.clean();
          return;
        } else {
          this.timeoutStore.remove("startPointerDrag"), this.startPointerDrag(e);
          return;
        }
      else
        return;
    this.emit();
  }
  pointerUp(e) {
    this.ctrl.setEventIds(e);
    try {
      this.config.pointerCapture && e.target.hasPointerCapture(e.pointerId) && e.target.releasePointerCapture(e.pointerId);
    } catch {
    }
    const n = this.state, r = this.config;
    if (!n._active || !n._pointerActive)
      return;
    const i = Jo(e);
    if (n._pointerId !== void 0 && i !== n._pointerId)
      return;
    this.state._pointerActive = !1, this.setActive(), this.compute(e);
    const [f, g] = n._distance;
    if (n.tap = f <= r.tapsThreshold && g <= r.tapsThreshold, n.tap && r.filterTaps)
      n._force = !0;
    else {
      const [l, s] = n._delta, [a, h] = n._movement, [o, u] = r.swipe.velocity, [c, d] = r.swipe.distance, m = r.swipe.duration;
      if (n.elapsedTime < m) {
        const p = Math.abs(l / n.timeDelta), v = Math.abs(s / n.timeDelta);
        p > o && Math.abs(a) > c && (n.swipe[0] = Math.sign(l)), v > u && Math.abs(h) > d && (n.swipe[1] = Math.sign(s));
      }
    }
    this.emit();
  }
  pointerClick(e) {
    !this.state.tap && e.detail > 0 && (e.preventDefault(), e.stopPropagation());
  }
  setupPointer(e) {
    const n = this.config, r = n.device;
    n.pointerLock && e.currentTarget.requestPointerLock(), n.pointerCapture || (this.eventStore.add(this.sharedConfig.window, r, "change", this.pointerMove.bind(this)), this.eventStore.add(this.sharedConfig.window, r, "end", this.pointerUp.bind(this)), this.eventStore.add(this.sharedConfig.window, r, "cancel", this.pointerUp.bind(this)));
  }
  pointerClean() {
    this.config.pointerLock && document.pointerLockElement === this.state.currentTarget && document.exitPointerLock();
  }
  preventScroll(e) {
    this.state._preventScroll && e.cancelable && e.preventDefault();
  }
  setupScrollPrevention(e) {
    this.state._preventScroll = !1, KT(e);
    const n = this.eventStore.add(this.sharedConfig.window, "touch", "change", this.preventScroll.bind(this), {
      passive: !1
    });
    this.eventStore.add(this.sharedConfig.window, "touch", "end", n), this.eventStore.add(this.sharedConfig.window, "touch", "cancel", n), this.timeoutStore.add("startPointerDrag", this.startPointerDrag.bind(this), this.config.preventScrollDelay, e);
  }
  setupDelayTrigger(e) {
    this.state._delayed = !0, this.timeoutStore.add("dragDelay", () => {
      this.state._step = [0, 0], this.startPointerDrag(e);
    }, this.config.delay);
  }
  keyDown(e) {
    const n = jh[e.key];
    if (n) {
      const r = this.state, i = e.shiftKey ? 10 : e.altKey ? 0.1 : 1;
      this.start(e), r._delta = n(this.config.keyboardDisplacement, i), r._keyboardActive = !0, Ge.addTo(r._movement, r._delta), this.compute(e), this.emit();
    }
  }
  keyUp(e) {
    e.key in jh && (this.state._keyboardActive = !1, this.setActive(), this.compute(e), this.emit());
  }
  bind(e) {
    const n = this.config.device;
    e(n, "start", this.pointerDown.bind(this)), this.config.pointerCapture && (e(n, "change", this.pointerMove.bind(this)), e(n, "end", this.pointerUp.bind(this)), e(n, "cancel", this.pointerUp.bind(this)), e("lostPointerCapture", "", this.pointerUp.bind(this))), this.config.keys && (e("key", "down", this.keyDown.bind(this)), e("key", "up", this.keyUp.bind(this))), this.config.filterTaps && e("click", "", this.pointerClick.bind(this), {
      capture: !0,
      passive: !1
    });
  }
}
function KT(t) {
  "persist" in t && typeof t.persist == "function" && t.persist();
}
const Ni = typeof window < "u" && window.document && window.document.createElement;
function bm() {
  return Ni && "ontouchstart" in window;
}
function qT() {
  return bm() || Ni && window.navigator.maxTouchPoints > 1;
}
function ZT() {
  return Ni && "onpointerdown" in window;
}
function JT() {
  return Ni && "exitPointerLock" in window.document;
}
function QT() {
  try {
    return "constructor" in GestureEvent;
  } catch {
    return !1;
  }
}
const Tt = {
  isBrowser: Ni,
  gesture: QT(),
  touch: bm(),
  touchscreen: qT(),
  pointer: ZT(),
  pointerLock: JT()
}, eE = 250, tE = 180, nE = 0.5, rE = 50, iE = 250, sE = 10, $h = {
  mouse: 0,
  touch: 0,
  pen: 8
}, oE = Ne(Ne({}, zi), {}, {
  device(t, e, {
    pointer: {
      touch: n = !1,
      lock: r = !1,
      mouse: i = !1
    } = {}
  }) {
    return this.pointerLock = r && Tt.pointerLock, Tt.touch && n ? "touch" : this.pointerLock ? "mouse" : Tt.pointer && !i ? "pointer" : Tt.touch ? "touch" : "mouse";
  },
  preventScrollAxis(t, e, {
    preventScroll: n
  }) {
    if (this.preventScrollDelay = typeof n == "number" ? n : n || n === void 0 && t ? eE : void 0, !(!Tt.touchscreen || n === !1))
      return t || (n !== void 0 ? "y" : void 0);
  },
  pointerCapture(t, e, {
    pointer: {
      capture: n = !0,
      buttons: r = 1,
      keys: i = !0
    } = {}
  }) {
    return this.pointerButtons = r, this.keys = i, !this.pointerLock && this.device === "pointer" && n;
  },
  threshold(t, e, {
    filterTaps: n = !1,
    tapsThreshold: r = 3,
    axis: i = void 0
  }) {
    const f = Ge.toVector(t, n ? r : i ? 1 : 0);
    return this.filterTaps = n, this.tapsThreshold = r, f;
  },
  swipe({
    velocity: t = nE,
    distance: e = rE,
    duration: n = iE
  } = {}) {
    return {
      velocity: this.transform(Ge.toVector(t)),
      distance: this.transform(Ge.toVector(e)),
      duration: n
    };
  },
  delay(t = 0) {
    switch (t) {
      case !0:
        return tE;
      case !1:
        return 0;
      default:
        return t;
    }
  },
  axisThreshold(t) {
    return t ? Ne(Ne({}, $h), t) : $h;
  },
  keyboardDisplacement(t = sE) {
    return t;
  }
});
function aE(t) {
  const [e, n] = t.overflow, [r, i] = t._delta, [f, g] = t._direction;
  (e < 0 && r > 0 && f < 0 || e > 0 && r < 0 && f > 0) && (t._movement[0] = t._movementBound[0]), (n < 0 && i > 0 && g < 0 || n > 0 && i < 0 && g > 0) && (t._movement[1] = t._movementBound[1]);
}
const lE = 30, cE = 100;
class uE extends mm {
  constructor(...e) {
    super(...e), et(this, "ingKey", "pinching"), et(this, "aliasKey", "da");
  }
  init() {
    this.state.offset = [1, 0], this.state.lastOffset = [1, 0], this.state._pointerEvents = /* @__PURE__ */ new Map();
  }
  reset() {
    super.reset();
    const e = this.state;
    e._touchIds = [], e.canceled = !1, e.cancel = this.cancel.bind(this), e.turns = 0;
  }
  computeOffset() {
    const {
      type: e,
      movement: n,
      lastOffset: r
    } = this.state;
    e === "wheel" ? this.state.offset = Ge.add(n, r) : this.state.offset = [(1 + n[0]) * r[0], n[1] + r[1]];
  }
  computeMovement() {
    const {
      offset: e,
      lastOffset: n
    } = this.state;
    this.state.movement = [e[0] / n[0], e[1] - n[1]];
  }
  axisIntent() {
    const e = this.state, [n, r] = e._movement;
    if (!e.axis) {
      const i = Math.abs(n) * lE - Math.abs(r);
      i < 0 ? e.axis = "angle" : i > 0 && (e.axis = "scale");
    }
  }
  restrictToAxis(e) {
    this.config.lockDirection && (this.state.axis === "scale" ? e[1] = 0 : this.state.axis === "angle" && (e[0] = 0));
  }
  cancel() {
    const e = this.state;
    e.canceled || setTimeout(() => {
      e.canceled = !0, e._active = !1, this.compute(), this.emit();
    }, 0);
  }
  touchStart(e) {
    this.ctrl.setEventIds(e);
    const n = this.state, r = this.ctrl.touchIds;
    if (n._active && n._touchIds.every((f) => r.has(f)) || r.size < 2)
      return;
    this.start(e), n._touchIds = Array.from(r).slice(0, 2);
    const i = Ih(e, n._touchIds);
    i && this.pinchStart(e, i);
  }
  pointerStart(e) {
    if (e.buttons != null && e.buttons % 2 !== 1)
      return;
    this.ctrl.setEventIds(e), e.target.setPointerCapture(e.pointerId);
    const n = this.state, r = n._pointerEvents, i = this.ctrl.pointerIds;
    if (n._active && Array.from(r.keys()).every((g) => i.has(g)) || (r.size < 2 && r.set(e.pointerId, e), n._pointerEvents.size < 2))
      return;
    this.start(e);
    const f = ol(...Array.from(r.values()));
    f && this.pinchStart(e, f);
  }
  pinchStart(e, n) {
    const r = this.state;
    r.origin = n.origin, this.computeValues([n.distance, n.angle]), this.computeInitial(), this.compute(e), this.emit();
  }
  touchMove(e) {
    if (!this.state._active)
      return;
    const n = Ih(e, this.state._touchIds);
    n && this.pinchMove(e, n);
  }
  pointerMove(e) {
    const n = this.state._pointerEvents;
    if (n.has(e.pointerId) && n.set(e.pointerId, e), !this.state._active)
      return;
    const r = ol(...Array.from(n.values()));
    r && this.pinchMove(e, r);
  }
  pinchMove(e, n) {
    const r = this.state, i = r._values[1], f = n.angle - i;
    let g = 0;
    Math.abs(f) > 270 && (g += Math.sign(f)), this.computeValues([n.distance, n.angle - 360 * g]), r.origin = n.origin, r.turns = g, r._movement = [r._values[0] / r._initial[0] - 1, r._values[1] - r._initial[1]], this.compute(e), this.emit();
  }
  touchEnd(e) {
    this.ctrl.setEventIds(e), this.state._active && this.state._touchIds.some((n) => !this.ctrl.touchIds.has(n)) && (this.state._active = !1, this.compute(e), this.emit());
  }
  pointerEnd(e) {
    const n = this.state;
    this.ctrl.setEventIds(e);
    try {
      e.target.releasePointerCapture(e.pointerId);
    } catch {
    }
    n._pointerEvents.has(e.pointerId) && n._pointerEvents.delete(e.pointerId), n._active && n._pointerEvents.size < 2 && (n._active = !1, this.compute(e), this.emit());
  }
  gestureStart(e) {
    e.cancelable && e.preventDefault();
    const n = this.state;
    n._active || (this.start(e), this.computeValues([e.scale, e.rotation]), n.origin = [e.clientX, e.clientY], this.compute(e), this.emit());
  }
  gestureMove(e) {
    if (e.cancelable && e.preventDefault(), !this.state._active)
      return;
    const n = this.state;
    this.computeValues([e.scale, e.rotation]), n.origin = [e.clientX, e.clientY];
    const r = n._movement;
    n._movement = [e.scale - 1, e.rotation], n._delta = Ge.sub(n._movement, r), this.compute(e), this.emit();
  }
  gestureEnd(e) {
    this.state._active && (this.state._active = !1, this.compute(e), this.emit());
  }
  wheel(e) {
    const n = this.config.modifierKey;
    n && (Array.isArray(n) ? !n.find((r) => e[r]) : !e[n]) || (this.state._active ? this.wheelChange(e) : this.wheelStart(e), this.timeoutStore.add("wheelEnd", this.wheelEnd.bind(this)));
  }
  wheelStart(e) {
    this.start(e), this.wheelChange(e);
  }
  wheelChange(e) {
    "uv" in e || e.cancelable && e.preventDefault();
    const r = this.state;
    r._delta = [-NT(e)[1] / cE * r.offset[0], 0], Ge.addTo(r._movement, r._delta), aE(r), this.state.origin = [e.clientX, e.clientY], this.compute(e), this.emit();
  }
  wheelEnd() {
    this.state._active && (this.state._active = !1, this.compute(), this.emit());
  }
  bind(e) {
    const n = this.config.device;
    n && (e(n, "start", this[n + "Start"].bind(this)), e(n, "change", this[n + "Move"].bind(this)), e(n, "end", this[n + "End"].bind(this)), e(n, "cancel", this[n + "End"].bind(this)), e("lostPointerCapture", "", this[n + "End"].bind(this))), this.config.pinchOnWheel && e("wheel", "", this.wheel.bind(this), {
      passive: !1
    });
  }
}
const hE = Ne(Ne({}, vm), {}, {
  device(t, e, {
    shared: n,
    pointer: {
      touch: r = !1
    } = {}
  }) {
    if (n.target && !Tt.touch && Tt.gesture)
      return "gesture";
    if (Tt.touch && r)
      return "touch";
    if (Tt.touchscreen) {
      if (Tt.pointer)
        return "pointer";
      if (Tt.touch)
        return "touch";
    }
  },
  bounds(t, e, {
    scaleBounds: n = {},
    angleBounds: r = {}
  }) {
    const i = (g) => {
      const l = zh(Ns(n, g), {
        min: -1 / 0,
        max: 1 / 0
      });
      return [l.min, l.max];
    }, f = (g) => {
      const l = zh(Ns(r, g), {
        min: -1 / 0,
        max: 1 / 0
      });
      return [l.min, l.max];
    };
    return typeof n != "function" && typeof r != "function" ? [i(), f()] : (g) => [i(g), f(g)];
  },
  threshold(t, e, n) {
    return this.lockDirection = n.axis === "lock", Ge.toVector(t, this.lockDirection ? [0.1, 3] : 0);
  },
  modifierKey(t) {
    return t === void 0 ? "ctrlKey" : t;
  },
  pinchOnWheel(t = !0) {
    return t;
  }
});
Ne(Ne({}, zi), {}, {
  mouseOnly: (t = !0) => t
});
Ne(Ne({}, zi), {}, {
  mouseOnly: (t = !0) => t
});
const Tc = /* @__PURE__ */ new Map(), al = /* @__PURE__ */ new Map();
function fE(t) {
  Tc.set(t.key, t.engine), al.set(t.key, t.resolver);
}
const dE = {
  key: "drag",
  engine: GT,
  resolver: oE
}, pE = {
  key: "pinch",
  engine: uE,
  resolver: hE
};
function gE(t, e) {
  if (t == null)
    return {};
  var n = {}, r = Object.keys(t), i, f;
  for (f = 0; f < r.length; f++)
    i = r[f], !(e.indexOf(i) >= 0) && (n[i] = t[i]);
  return n;
}
function mE(t, e) {
  if (t == null)
    return {};
  var n = gE(t, e), r, i;
  if (Object.getOwnPropertySymbols) {
    var f = Object.getOwnPropertySymbols(t);
    for (i = 0; i < f.length; i++)
      r = f[i], !(e.indexOf(r) >= 0) && Object.prototype.propertyIsEnumerable.call(t, r) && (n[r] = t[r]);
  }
  return n;
}
const vE = {
  target(t) {
    if (t)
      return () => "current" in t ? t.current : t;
  },
  enabled(t = !0) {
    return t;
  },
  window(t = Tt.isBrowser ? window : void 0) {
    return t;
  },
  eventOptions({
    passive: t = !0,
    capture: e = !1
  } = {}) {
    return {
      passive: t,
      capture: e
    };
  },
  transform(t) {
    return t;
  }
}, bE = ["target", "eventOptions", "window", "enabled", "transform"];
function hs(t = {}, e) {
  const n = {};
  for (const [r, i] of Object.entries(e))
    switch (typeof i) {
      case "function":
        n[r] = i.call(n, t[r], r, t);
        break;
      case "object":
        n[r] = hs(t[r], i);
        break;
      case "boolean":
        i && (n[r] = t[r]);
        break;
    }
  return n;
}
function yE(t, e, n = {}) {
  const r = t, {
    target: i,
    eventOptions: f,
    window: g,
    enabled: l,
    transform: s
  } = r, a = mE(r, bE);
  if (n.shared = hs({
    target: i,
    eventOptions: f,
    window: g,
    enabled: l,
    transform: s
  }, vE), e) {
    const h = al.get(e);
    n[e] = hs(Ne({
      shared: n.shared
    }, a), h);
  } else
    for (const h in a) {
      const o = al.get(h);
      o && (n[h] = hs(Ne({
        shared: n.shared
      }, a[h]), o));
    }
  return n;
}
class ym {
  constructor(e, n) {
    et(this, "_listeners", /* @__PURE__ */ new Set()), this._ctrl = e, this._gestureKey = n;
  }
  add(e, n, r, i, f) {
    const g = this._listeners, l = RT(n, r), s = this._gestureKey ? this._ctrl.config[this._gestureKey].eventOptions : {}, a = Ne(Ne({}, s), f);
    e.addEventListener(l, i, a);
    const h = () => {
      e.removeEventListener(l, i, a), g.delete(h);
    };
    return g.add(h), h;
  }
  clean() {
    this._listeners.forEach((e) => e()), this._listeners.clear();
  }
}
class wE {
  constructor() {
    et(this, "_timeouts", /* @__PURE__ */ new Map());
  }
  add(e, n, r = 140, ...i) {
    this.remove(e), this._timeouts.set(e, window.setTimeout(n, r, ...i));
  }
  remove(e) {
    const n = this._timeouts.get(e);
    n && window.clearTimeout(n);
  }
  clean() {
    this._timeouts.forEach((e) => void window.clearTimeout(e)), this._timeouts.clear();
  }
}
class xE {
  constructor(e) {
    et(this, "gestures", /* @__PURE__ */ new Set()), et(this, "_targetEventStore", new ym(this)), et(this, "gestureEventStores", {}), et(this, "gestureTimeoutStores", {}), et(this, "handlers", {}), et(this, "config", {}), et(this, "pointerIds", /* @__PURE__ */ new Set()), et(this, "touchIds", /* @__PURE__ */ new Set()), et(this, "state", {
      shared: {
        shiftKey: !1,
        metaKey: !1,
        ctrlKey: !1,
        altKey: !1
      }
    }), CE(this, e);
  }
  setEventIds(e) {
    if (wo(e))
      return this.touchIds = new Set(zT(e)), this.touchIds;
    if ("pointerId" in e)
      return e.type === "pointerup" || e.type === "pointercancel" ? this.pointerIds.delete(e.pointerId) : e.type === "pointerdown" && this.pointerIds.add(e.pointerId), this.pointerIds;
  }
  applyHandlers(e, n) {
    this.handlers = e, this.nativeHandlers = n;
  }
  applyConfig(e, n) {
    this.config = yE(e, n, this.config);
  }
  clean() {
    this._targetEventStore.clean();
    for (const e of this.gestures)
      this.gestureEventStores[e].clean(), this.gestureTimeoutStores[e].clean();
  }
  effect() {
    return this.config.shared.target && this.bind(), () => this._targetEventStore.clean();
  }
  bind(...e) {
    const n = this.config.shared, r = {};
    let i;
    if (!(n.target && (i = n.target(), !i))) {
      if (n.enabled) {
        for (const g of this.gestures) {
          const l = this.config[g], s = Vh(r, l.eventOptions, !!i);
          if (l.enabled) {
            const a = Tc.get(g);
            new a(this, e, g).bind(s);
          }
        }
        const f = Vh(r, n.eventOptions, !!i);
        for (const g in this.nativeHandlers)
          f(g, "", (l) => this.nativeHandlers[g](Ne(Ne({}, this.state.shared), {}, {
            event: l,
            args: e
          })), void 0, !0);
      }
      for (const f in r)
        r[f] = VT(...r[f]);
      if (!i)
        return r;
      for (const f in r) {
        const {
          device: g,
          capture: l,
          passive: s
        } = IT(f);
        this._targetEventStore.add(i, g, "", r[f], {
          capture: l,
          passive: s
        });
      }
    }
  }
}
function sr(t, e) {
  t.gestures.add(e), t.gestureEventStores[e] = new ym(t, e), t.gestureTimeoutStores[e] = new wE();
}
function CE(t, e) {
  e.drag && sr(t, "drag"), e.wheel && sr(t, "wheel"), e.scroll && sr(t, "scroll"), e.move && sr(t, "move"), e.pinch && sr(t, "pinch"), e.hover && sr(t, "hover");
}
const Vh = (t, e, n) => (r, i, f, g = {}, l = !1) => {
  var s, a;
  const h = (s = g.capture) !== null && s !== void 0 ? s : e.capture, o = (a = g.passive) !== null && a !== void 0 ? a : e.passive;
  let u = l ? r : MT(r, i, h);
  n && o && (u += "Passive"), t[u] = t[u] || [], t[u].push(f);
}, _E = /^on(Drag|Wheel|Scroll|Move|Pinch|Hover)/;
function SE(t) {
  const e = {}, n = {}, r = /* @__PURE__ */ new Set();
  for (let i in t)
    _E.test(i) ? (r.add(RegExp.lastMatch), n[i] = t[i]) : e[i] = t[i];
  return [n, e, r];
}
function or(t, e, n, r, i, f) {
  if (!t.has(n) || !Tc.has(r))
    return;
  const g = n + "Start", l = n + "End", s = (a) => {
    let h;
    return a.first && g in e && e[g](a), n in e && (h = e[n](a)), a.last && l in e && e[l](a), h;
  };
  i[r] = s, f[r] = f[r] || {};
}
function TE(t, e) {
  const [n, r, i] = SE(t), f = {};
  return or(i, n, "onDrag", "drag", f, e), or(i, n, "onWheel", "wheel", f, e), or(i, n, "onScroll", "scroll", f, e), or(i, n, "onPinch", "pinch", f, e), or(i, n, "onMove", "move", f, e), or(i, n, "onHover", "hover", f, e), {
    handlers: f,
    config: e,
    nativeHandlers: r
  };
}
function EE(t, e = {}, n, r) {
  const i = ce.useMemo(() => new xE(t), []);
  if (i.applyHandlers(t, r), i.applyConfig(e, n), ce.useEffect(i.effect.bind(i)), ce.useEffect(() => i.clean.bind(i), []), e.target === void 0)
    return i.bind.bind(i);
}
function kE(t) {
  return t.forEach(fE), function(n, r) {
    const {
      handlers: i,
      nativeHandlers: f,
      config: g
    } = TE(n, r || {});
    return EE(i, g, void 0, f);
  };
}
function Kt({
  e: t,
  rect: e,
  deltaX: n,
  deltaY: r
}) {
  return {
    rect: e,
    x: t.clientX,
    y: t.clientY,
    deltaX: n ?? 0,
    deltaY: r ?? 0,
    nativeEvent: t
  };
}
function xo({
  onMoveStart: t,
  onMove: e,
  onMoveEnd: n,
  minimumMovement: r = 0,
  preventDefault: i,
  stopPropagation: f = !0,
  onPress: g,
  onLongPress: l,
  ...s
}) {
  const h = de({
    lastPosition: { x: 0, y: 0 },
    started: !1,
    longPressTriggered: !1
  }).current, { addGlobalListener: o, removeGlobalListener: u } = tc(), c = (v) => {
    !h.el || (t == null ? void 0 : t(v, h.el)) === !1 || (h.originalTouchAction = h.el.style.touchAction, h.el.style.touchAction = "none", h.originalUserSelect = document.documentElement.style.userSelect, document.documentElement.style.userSelect = "none", h.started = !0);
  }, d = (v) => {
    var b;
    if (v.button === 0 && h.id == null) {
      if (h.started = !1, ((b = s.onPointerDown) == null ? void 0 : b.call(s, v)) === !1)
        return;
      f && v.stopPropagation(), i && v.preventDefault(), h.id = v.pointerId, h.el = v.currentTarget, h.lastPosition = { x: v.clientX, y: v.clientY }, l && (h.longPressTimer = setTimeout(() => {
        l(v, h.el), h.longPressTriggered = !0;
      }, 400)), (t || e) && o(window, "pointermove", m, !1), o(window, "pointerup", p, !1), o(window, "pointercancel", p, !1);
    }
  }, m = (v) => {
    if (v.pointerId === h.id) {
      const b = v.clientX - h.lastPosition.x, y = v.clientY - h.lastPosition.y;
      (Math.abs(b) >= r || Math.abs(y) >= r) && !h.started && c(v), h.started && (e == null || e(v, b, y), h.lastPosition = { x: v.clientX, y: v.clientY });
    }
  }, p = (v) => {
    var b;
    if (v.pointerId === h.id) {
      h.longPressTimer && clearTimeout(h.longPressTimer);
      const y = h.longPressTriggered;
      h.longPressTriggered = !1, h.started && (n == null || n(v)), h.el && (v.type !== "pointercancel" && ((b = s.onPointerUp) == null || b.call(s, v, h.el), v.target && h.el.contains(v.target) && (y ? l == null || l(v, h.el) : g == null || g(v, h.el))), document.documentElement.style.userSelect = h.originalUserSelect || "", h.el.style.touchAction = h.originalTouchAction || ""), h.id = void 0, h.started = !1, u(window, "pointermove", m, !1), u(window, "pointerup", p, !1), u(window, "pointercancel", p, !1);
    }
  };
  return {
    domProps: {
      onPointerDown: ct(d)
    }
  };
}
function OE(t, e) {
  const n = { ...t };
  n.left = Math.max(0, n.left);
  const r = n.left - t.left;
  r > 0 && (n.width -= r), n.top = Math.max(0, n.top);
  const i = n.top - t.top;
  return i > 0 && (n.height -= i), n.width = Math.min(
    n.width,
    e.width - n.left
  ), n.height = Math.min(
    n.height,
    e.height - n.top
  ), n;
}
function bi(t) {
  return {
    left: t.left,
    top: t.top,
    width: t.width,
    height: t.height
  };
}
var vt = /* @__PURE__ */ ((t) => (t.topLeft = "topLeft", t.topRight = "topRight", t.bottomLeft = "bottomLeft", t.bottomRight = "bottomRight", t))(vt || {});
let ke = {};
const Hh = (t = {}) => {
  Dr(null), ke = t;
};
function wm({
  aspectRatio: t,
  boundaryRef: e,
  boundaryRect: n,
  restrictWithinBoundary: r = !0,
  minWidth: i = 50,
  minHeight: f = 50,
  ...g
}) {
  const l = {
    onMoveStart: (a, h) => {
      var u;
      const o = a.target;
      if (!o.dataset.resizeHandle || Fi || (Hh({
        currentRect: bi(h.getBoundingClientRect()),
        resizeDir: o.dataset.resizeHandle
      }), !ke.currentRect))
        return !1;
      Dr("resize"), n ? ke.boundaryRect = n : e != null && e.current && (ke.boundaryRect = bi(
        e.current.getBoundingClientRect()
      )), ke.currentRect && ke.boundaryRect && (ke.currentRect.left -= ke.boundaryRect.left, ke.currentRect.top -= ke.boundaryRect.top), ke.initialAspectRatio = ke.currentRect.width / ke.currentRect.height, (u = g.onResizeStart) == null || u.call(g, Kt({ rect: ke.currentRect, e: a }));
    },
    onMove: (a, h, o) => {
      var m;
      if (!ke.resizeDir || !ke.currentRect)
        return;
      const u = t === "initial" ? ke.initialAspectRatio : t, c = DE(ke.currentRect, h, o, u), d = AE(c, i, f, u);
      (m = g.onResize) == null || m.call(
        g,
        Kt({ rect: d, e: a, deltaX: h, deltaY: o })
      ), ke.currentRect = c;
    },
    onMoveEnd: (a) => {
      var h;
      ke.currentRect && ((h = g.onResizeEnd) == null || h.call(g, Kt({ rect: ke.currentRect, e: a }))), Hh();
    }
  }, { domProps: s } = xo(l);
  return { resizeProps: s };
}
function DE(t, e, n, r) {
  const i = { ...t }, f = { ...t };
  return ke.resizeDir === "topRight" ? (f.width = Math.floor(f.width + e), r ? f.height = Math.floor(f.width / r) : f.height = Math.floor(f.height - n), f.top = Math.floor(f.top + (i.height - f.height))) : ke.resizeDir === "bottomRight" ? (f.width = Math.floor(f.width + e), r ? f.height = Math.floor(f.width / r) : f.height = Math.floor(f.height + n)) : ke.resizeDir === "topLeft" ? (f.width = Math.floor(f.width - e), r ? f.height = Math.floor(f.width / r) : f.height = Math.floor(f.height - n), f.left = Math.floor(f.left + (i.width - f.width)), f.top = Math.floor(f.top + (i.height - f.height))) : ke.resizeDir === "bottomLeft" && (f.width = Math.floor(f.width - e), r ? f.height = Math.floor(f.width / r) : f.height = Math.floor(f.height + n), f.left = Math.floor(f.left + e)), f;
}
function AE(t, e, n, r) {
  const i = ke.resizeDir === "bottomLeft" || ke.resizeDir === "topLeft", f = ke.resizeDir === "topRight" || ke.resizeDir === "topLeft";
  let g = { ...t };
  g.width = Math.max(e, t.width), g.height = Math.max(n, t.height);
  const l = g.width - t.width;
  i && l > 0 && (g.left -= l);
  const s = g.height - t.height;
  if (f && s > 0 && (g.top -= s), ke.boundaryRect && (g = OE(
    g,
    ke.boundaryRect
  )), r) {
    const a = g.width, h = g.height, o = rc(
      r,
      g.width,
      g.height
    );
    g.width = o.width, g.height = o.height, f && (g.top += h - g.height), i && (g.left += a - g.width);
  }
  return g;
}
function un({ position: t, inset: e = !1 }) {
  const n = PE(t, e);
  return /* @__PURE__ */ x(
    "div",
    {
      "data-resize-handle": t,
      className: `border-white absolute w-20 h-20 ${n}`
    }
  );
}
function PE(t, e) {
  const n = e ? "left-0" : "-left-5", r = e ? "top-0" : "-top-5", i = e ? "bottom-0" : "-bottom-5", f = e ? "right-0" : "-right-5";
  switch (t) {
    case vt.topLeft:
      return `${n} ${r} border-l-4 border-t-4 cursor-nwse-resize`;
    case vt.topRight:
      return `${f} ${r} border-r-4 border-t-4 cursor-nesw-resize`;
    case vt.bottomRight:
      return `${f} ${i} border-r-4 border-b-4 cursor-se-resize`;
    case vt.bottomLeft:
      return `${n} ${i} border-l-4 border-b-4 cursor-sw-resize`;
    default:
      return "";
  }
}
var Qr = /* @__PURE__ */ ((t) => (t.top = "maskTop", t.right = "maskRight", t.bottom = "maskBottom", t.left = "maskLeft", t))(Qr || {});
function is({ position: t, refs: e }) {
  const n = ME(t);
  return /* @__PURE__ */ x(
    "div",
    {
      className: `cropzone-transition bg-black/50 bottom absolute ${n}`,
      ref: (r) => e.current[t] = r
    }
  );
}
function ME(t) {
  switch (t) {
    case "maskTop":
      return "left-0 top-0";
    case "maskBottom":
      return "bottom-0 left-0";
    default:
      return "";
  }
}
function ss({ name: t, refs: e }) {
  const n = ae(
    "cropzone-transition pointer-events-none absolute left-0 top-0 bg-white/50",
    t.startsWith("lineHor") ? "h-px" : "w-px"
  );
  return /* @__PURE__ */ x(
    "div",
    {
      className: n,
      ref: (r) => {
        e.current[t] = r;
      }
    }
  );
}
function yi(t, e, n) {
  return Math.min(Math.max(t, e), n);
}
let $e = {};
function xm({
  boundaryRef: t,
  boundaryRect: e,
  minimumMovement: n,
  restrictWithinBoundary: r = !0,
  ...i
}) {
  const f = {
    minimumMovement: n,
    onMoveStart: (l, s) => {
      var a;
      if (Fi)
        return !1;
      $e = {
        currentRect: bi(s.getBoundingClientRect())
      }, Dr("move"), e ? $e.boundaryRect = e : t != null && t.current && ($e.boundaryRect = bi(
        t.current.getBoundingClientRect()
      )), $e.currentRect && $e.boundaryRect && ($e.currentRect.left -= $e.boundaryRect.left, $e.currentRect.top -= $e.boundaryRect.top), (a = i.onMoveStart) == null || a.call(i, Kt({ rect: $e.currentRect, e: l }));
    },
    onMove: (l, s, a) => {
      var u;
      if (!$e.currentRect)
        return;
      const h = {
        ...$e.currentRect,
        left: $e.currentRect.left + s,
        top: $e.currentRect.top + a
      }, o = { ...h };
      $e.boundaryRect && r && (o.left = yi(
        h.left,
        0,
        $e.boundaryRect.width - h.width
      ), o.top = yi(
        h.top,
        0,
        $e.boundaryRect.height - h.height
      )), (u = i.onMove) == null || u.call(i, Kt({ rect: o, e: l, deltaX: s, deltaY: a })), $e.currentRect = h;
    },
    onMoveEnd: (l) => {
      var s;
      $e.currentRect && ((s = i.onMoveEnd) == null || s.call(i, Kt({ rect: $e.currentRect, e: l })), Dr(null), $e = {});
    }
  }, { domProps: g } = xo(f);
  return { moveProps: g };
}
function FE() {
  const t = de({}), [e, n] = De(!0), r = ue((h) => h.canvasSize), i = ue((h) => {
    var o, u;
    return (u = (o = h.config.tools) == null ? void 0 : o.crop) == null ? void 0 : u.cropzone;
  }), f = ue((h) => {
    var o, u;
    return (u = (o = h.config.tools) == null ? void 0 : o.crop) == null ? void 0 : u.defaultRatio;
  }) || null, g = ue((h) => h.crop.selectedAspectRatio) || null, { moveProps: l } = xm({
    boundaryRect: r,
    onMoveStart: () => n(!0),
    onMove: (h) => R().crop.drawZone(h.rect),
    onMoveEnd: () => n(!1)
  }), { resizeProps: s } = wm({
    boundaryRect: r,
    minHeight: 50,
    minWidth: 50,
    aspectRatio: ic(g),
    onResizeStart: () => n(!0),
    onResize: (h) => R().crop.drawZone(h.rect),
    onResizeEnd: () => n(!1)
  });
  Ci(() => {
    R().crop.registerRefs(t), R().crop.resetCropzone(f);
  }, [f, r]);
  const a = ae(
    "cropzone absolute z-cropzone isolate left-0 top-0 w-full h-full overflow-hidden",
    e && "moving"
  );
  return /* @__PURE__ */ ie(
    "div",
    {
      className: a,
      onPointerDown: (h) => {
        h.stopPropagation(), h.preventDefault();
      },
      children: [
        /* @__PURE__ */ ie(
          "div",
          {
            className: "cropzone-transition border-white/50 absolute z-10 left-0 top-0 border",
            ...nn(s, l),
            ref: (h) => t.current.innerZone = h,
            children: [
              !(i != null && i.hideTopLeft) && /* @__PURE__ */ x(un, { position: vt.topLeft, inset: !0 }),
              !(i != null && i.hideTopRight) && /* @__PURE__ */ x(un, { position: vt.topRight, inset: !0 }),
              !(i != null && i.hideBottomLeft) && /* @__PURE__ */ x(un, { position: vt.bottomLeft, inset: !0 }),
              !(i != null && i.hideBottomRight) && /* @__PURE__ */ x(un, { position: vt.bottomRight, inset: !0 }),
              /* @__PURE__ */ x(ss, { name: "lineVer1", refs: t }),
              /* @__PURE__ */ x(ss, { name: "lineVer2", refs: t }),
              /* @__PURE__ */ x(ss, { name: "lineHor1", refs: t }),
              /* @__PURE__ */ x(ss, { name: "lineHor2", refs: t })
            ]
          }
        ),
        /* @__PURE__ */ x(is, { refs: t, position: Qr.top }),
        /* @__PURE__ */ x(is, { refs: t, position: Qr.left }),
        /* @__PURE__ */ x(is, { refs: t, position: Qr.right }),
        /* @__PURE__ */ x(is, { refs: t, position: Qr.bottom })
      ]
    }
  );
}
const IE = be(
  /* @__PURE__ */ x("path", { d: "M 7 2 C 6.448 2 6 2.448 6 3 C 6 3.552 6.448 4 7 4 L 20 4 L 20 17 C 20 17.552 20.448 18 21 18 C 21.552 18 22 17.552 22 17 L 22 4 C 22 2.895 21.105 2 20 2 L 7 2 z M 4 6 C 2.895 6 2 6.895 2 8 L 2 20 C 2 21.105 2.895 22 4 22 L 16 22 C 17.105 22 18 21.105 18 20 L 18 8 C 18 6.895 17.105 6 16 6 L 4 6 z M 10 10 C 10.552 10 11 10.448 11 11 L 11 13 L 13 13 C 13.552 13 14 13.448 14 14 C 14 14.552 13.552 15 13 15 L 11 15 L 11 17 C 11 17.552 10.552 18 10 18 C 9.448 18 9 17.552 9 17 L 9 15 L 7 15 C 6.448 15 6 14.552 6 14 C 6 13.448 6.448 13 7 13 L 9 13 L 9 11 C 9 10.448 9.448 10 10 10 z" })
), RE = be(
  /* @__PURE__ */ x("path", { d: "M 11 3 L 2 21 L 11 21 L 11 3 z M 13 3 L 13 21 L 22 21 L 13 3 z M 9 11.472656 L 9 19 L 5.2363281 19 L 9 11.472656 z" })
), LE = be(
  /* @__PURE__ */ x("path", { d: "M 16.476562 2.4511719 C 16.392047 2.4657656 16.308531 2.5061719 16.238281 2.5761719 L 14.130859 4.6835938 C 13.956859 4.8575938 13.956859 5.1394531 14.130859 5.3144531 L 16.238281 7.4238281 C 16.519281 7.7048281 17 7.5054219 17 7.1074219 L 17 6 L 20 6 L 20 9 A 1.0001 1.0001 0 1 0 22 9 L 22 6 C 22 4.9069372 21.093063 4 20 4 L 17 4 L 17 2.8925781 C 17 2.5940781 16.730109 2.4073906 16.476562 2.4511719 z M 4 5 C 2.9069372 5 2 5.9069372 2 7 L 2 14 C 2 15.093063 2.9069372 16 4 16 L 7 16 L 7 19 C 7 20.105 7.895 21 9 21 L 16 21 C 17.105 21 18 20.105 18 19 L 18 12 C 18 10.895 17.105 10 16 10 L 13 10 L 13 7 C 13 5.9069372 12.093063 5 11 5 L 4 5 z M 4 7 L 11 7 L 11 14 L 4 14 L 4 7 z" })
), BE = be(
  /* @__PURE__ */ x("path", { d: "M 10 2 L 9 3 L 3 3 L 3 5 L 21 5 L 21 3 L 15 3 L 14 2 L 10 2 z M 4.3652344 7 L 5.8925781 20.263672 C 6.0245781 21.253672 6.877 22 7.875 22 L 16.123047 22 C 17.121047 22 17.974422 21.254859 18.107422 20.255859 L 19.634766 7 L 4.3652344 7 z" })
), zE = {
  width: 120,
  height: 30
}, NE = [
  {
    name: "Duplicate",
    icon: IE,
    onClick: () => {
      R().objects.duplicate();
    }
  },
  {
    name: "Flip",
    icon: RE,
    onClick: () => {
      R().objects.flipHorizontally();
    }
  },
  {
    name: "Bring to front",
    icon: LE,
    onClick: () => {
      R().objects.bringToFront();
    }
  },
  {
    name: "Delete",
    icon: BE,
    onClick: () => {
      R().objects.delete();
    }
  }
], jE = ce.forwardRef(
  (t, e) => {
    const r = ue((i) => i.objects.active.isMoving) ? "opacity-0" : "opacity-100";
    return /* @__PURE__ */ x(
      "div",
      {
        ref: e,
        className: `${r} absolute z-obj-box left-0 top-0 flex items-center text-white bg-controls rounded shadow transition-opacity overflow-hidden`,
        children: NE.map((i) => {
          const f = i.icon;
          return /* @__PURE__ */ x(
            Fe,
            {
              size: "sm",
              className: "w-30 h-30 hover:bg-white/hover",
              radius: "rounded-none",
              onClick: i.onClick,
              children: /* @__PURE__ */ x(f, {})
            },
            i.name
          );
        })
      }
    );
  }
);
function $E(t, e) {
  if (!e)
    return;
  const n = t.angle || 0, r = n > 168 && n < 188 ? -30 : -15, i = O().canvasSize, f = O().stageSize, g = zE, l = i.top - f.top, s = i.left - f.left, a = f.width - (s + i.width), h = f.height - (l + i.height), o = -l, u = -(i.left - f.left), c = i.width - g.width + a, d = i.height - g.height + h, m = t.getBoundingRect();
  let p = m.top - g.height + r, v = m.left + m.width / 2 - g.width / 2;
  p = Math.min(d, Math.max(o, p)), v = Math.min(c, Math.max(u, v)), e.style.transform = `translate(${v}px, ${p}px) rotate(0deg)`;
}
function VE(t) {
  const e = R().objects.getActive();
  if (!e || !t.rect.angle)
    return;
  const n = we.fabric.util.radiansToDegrees(t.rect.angle);
  n !== e.angle && R().objects.setValues({ angle: n });
}
function HE(t) {
  const e = t.rect.width / 2, n = t.rect.height / 2;
  R().objects.setValues({
    left: (t.rect.left + e) / O().zoom,
    top: (t.rect.top + n) / O().zoom
  });
}
function WE(t) {
  const e = R().objects.getActive();
  if (!e)
    return;
  const n = {};
  Tn(e) ? (t.deltaX > 0 || e.getScaledHeight() >= 20 && e.getScaledWidth() >= 20) && (n.fontSize = (e.fontSize || 1) + t.deltaX) : (e.width && (n.scaleX = t.rect.width / O().zoom / e.width), e.height && (n.scaleY = t.rect.height / O().zoom / e.height)), R().objects.setValues(n);
}
function Wh(t, e) {
  const n = R().objects.getActive();
  if (!n || !t.current)
    return;
  const r = t.current, i = we.fabric.util.degreesToRadians(n.angle ?? 0);
  let f = Math.round(n.getScaledWidth() * O().zoom), g = Math.round(n.getScaledHeight() * O().zoom), l = Math.round((n.left ?? 0) * O().zoom), s = Math.round((n.top ?? 0) * O().zoom);
  const a = n.originX === "center" ? f / 2 : 0, h = n.originY === "center" ? g / 2 : 0;
  n.padding && (f += n.padding * 2, g += n.padding * 2, l -= n.padding, s -= n.padding), r.style.width = `${f}px`, r.style.height = `${g}px`, r.style.transform = `translate(${l - a}px, ${s - h}px) rotate(${i}rad)`, R().canvas.render(), $E(n, e.current);
}
function UE() {
  var e;
  const t = R().objects.getActive();
  Tn(t) && (t.enterEditing(), (e = t.hiddenTextarea) == null || e.focus());
}
function XE() {
  return /* @__PURE__ */ x("div", { className: "absolute -bottom-20 left-1/2 w-2 h-20 bg-white cursor-default -translate-x-1/2", children: /* @__PURE__ */ x(
    "div",
    {
      "data-rotate-handle": !0,
      className: "w-18 h-18 absolute -bottom-10 -left-8 bg-white rounded-full cursor-move"
    }
  ) });
}
let Ft = {};
function YE(t) {
  const e = {
    onMoveStart: (r, i) => {
      var a, h;
      if (!r.target.dataset.rotateHandle || Fi)
        return !1;
      const g = bi(i.getBoundingClientRect());
      if (!g)
        return !1;
      const l = (a = i.style.transform.match(/rotate\((.+?)\)/)) == null ? void 0 : a[1], [s = "0"] = l ? l.split(",") : [];
      Xh({
        currentRect: g,
        // store the center because the element has css `transform-origin: center center`
        centerX: g.left + g.width / 2,
        centerY: g.top + g.height / 2,
        startAngle: parseFloat(s)
      }), Dr("rotate"), Ft.startAngle = Uh(r), (h = t.onRotateStart) == null || h.call(t, Kt({ rect: g, e: r }));
    },
    onMove: (r, i, f) => {
      var l;
      if (!Ft.currentRect)
        return;
      const g = { ...Ft.currentRect };
      g.angle = Uh(r), g.left += i, g.top += f, (l = t.onRotate) == null || l.call(t, Kt({ rect: g, e: r, deltaX: i, deltaY: f })), Ft.currentRect = g;
    },
    onMoveEnd: (r) => {
      var i;
      Ft.currentRect && ((i = t.onRotateEnd) == null || i.call(t, Kt({ rect: Ft.currentRect, e: r }))), Xh();
    }
  }, { domProps: n } = xo(e);
  return { rotateProps: n };
}
function Uh(t) {
  const e = {
    x: Ft.centerX || 0,
    y: Ft.centerY || 0
  };
  return Math.atan2(e.y - t.pageY, e.x - t.pageX) - (Ft.startAngle || 0);
}
const Xh = (t = {}) => {
  Dr(null), Ft = t;
};
function GE() {
  const t = de(null), e = de(null), n = ue((u) => u.objects.active.id), r = ue((u) => u.objects.isEditingText), i = ue((u) => u.zoom), f = KE(), g = de(null), l = Oe(() => {
    g.current ? (clearTimeout(g.current), g.current = null, UE()) : g.current = setTimeout(() => {
      g.current = null;
    }, 300);
  }, []);
  let { moveProps: s } = xm({
    boundaryRef: O().canvasRef,
    restrictWithinBoundary: !1,
    onMoveEnd: () => {
      O().objects.setActiveIsMoving(!1);
    },
    onMove: (u) => {
      O().objects.setActiveIsMoving(!0), HE(u);
    }
  });
  f.lockMovement && (s = {});
  const { resizeProps: a } = wm({
    minWidth: 50,
    minHeight: 50,
    aspectRatio: f.unlockAspectRatio ? null : "initial",
    boundaryRef: f.containWithinCanvas ? O().canvasRef : void 0,
    restrictWithinBoundary: !1,
    onResizeEnd: () => {
      O().objects.setActiveIsMoving(!1);
    },
    onResize: (u) => {
      O().objects.setActiveIsMoving(!0), WE(u);
    }
  }), { rotateProps: h } = YE({
    boundaryRef: O().canvasRef,
    onRotateEnd: () => {
      O().objects.setActiveIsMoving(!1);
    },
    onRotate: (u) => {
      O().objects.setActiveIsMoving(!0), VE(u);
    }
  });
  return Se(() => {
    he() && O().editor.on("object:modified", (u) => {
      u.sizeOrPositionChanged && Wh(t, e);
    });
  }, []), Se(() => {
    Wh(t, e);
  }, [n, i, r]), /* @__PURE__ */ ie("div", { className: n && !r ? "block" : "hidden", children: [
    /* @__PURE__ */ ie(
      "div",
      {
        ref: t,
        ...nn(h, a, s),
        onClick: l,
        className: "absolute z-obj-box border-2 border-white shadow-md cursor-move",
        children: [
          !f.hideTopLeft && /* @__PURE__ */ x(un, { position: vt.topLeft }),
          !f.hideTopRight && /* @__PURE__ */ x(un, { position: vt.topRight }),
          !f.hideBottomLeft && /* @__PURE__ */ x(un, { position: vt.bottomLeft }),
          !f.hideBottomRight && /* @__PURE__ */ x(un, { position: vt.bottomRight }),
          !f.hideRotatingPoint && /* @__PURE__ */ x(XE, {})
        ]
      }
    ),
    /* @__PURE__ */ x(jE, { ref: e })
  ] });
}
function KE() {
  const t = R().objects.getActive();
  if (!t || !t.name)
    return {};
  const e = O().config.objectControls || {}, n = t.name;
  return {
    ...e.global,
    ...e[n]
  };
}
function qE() {
  const t = ue((n) => n.activeTool === Me.CROP), e = ue((n) => n.objects.active.id);
  return /* @__PURE__ */ ie("div", { children: [
    t && /* @__PURE__ */ x(FE, {}),
    e && /* @__PURE__ */ x(GE, {})
  ] });
}
const ZE = kE([dE, pE]), JE = ce.forwardRef(
  (t, e) => {
    const [n, r] = De(!1);
    Se(() => ue.subscribe(
      (f) => f.loading,
      (f) => {
        r(!f);
      }
    ), []);
    const i = {
      visible: {
        opacity: 1,
        transition: { duration: 0.35, delay: 0.5 }
      },
      hidden: { opacity: 0, transition: { duration: 0 } }
    };
    return /* @__PURE__ */ x(QE, { children: /* @__PURE__ */ ie(
      ot.div,
      {
        initial: { opacity: 0 },
        variants: i,
        animate: n ? "visible" : "hidden",
        className: "relative m-auto w-max",
        style: {
          backgroundImage: `url(${bt("images/empty-canvas-bg.png")})`
        },
        children: [
          /* @__PURE__ */ x(qE, {}),
          /* @__PURE__ */ x("canvas", { ref: e })
        ]
      }
    ) });
  }
);
function QE({ children: t }) {
  const e = de(null), n = ZE({
    onPinch: (r) => {
      if (!R().zoom.allowUserZoom || !Yh(r))
        return r.cancel();
      r.direction[0] === 1 ? R().zoom.zoomIn(0.01) : R().zoom.zoomOut(0.01), r.event.stopPropagation(), r.event.preventDefault();
    },
    onDrag: (r) => {
      if (r.pinching || !Yh(r))
        return r.cancel();
      e.current.scrollLeft -= r.delta[0], e.current.scrollTop -= r.delta[1];
    }
  });
  return /* @__PURE__ */ x(
    "div",
    {
      ref: e,
      className: "w-full h-full overflow-hidden touch-none flex",
      ...n(),
      children: t
    }
  );
}
function Yh(t) {
  return !(he().findTarget(t.event, !1) || he().isDrawingMode);
}
function Ec({
  actionBtn: t,
  children: e,
  className: n
}) {
  return /* @__PURE__ */ ie("div", { className: ae(n, "flex gap-16 items-center h-full"), children: [
    t && /* @__PURE__ */ x("div", { className: "flex-shrink-0", children: t }),
    /* @__PURE__ */ x("div", { className: "w-full flex-auto", children: e }),
    t && /* @__PURE__ */ x("div", { className: "w-96" })
  ] });
}
function jr() {
  return (jr = Object.assign || function(t) {
    for (var e = 1; e < arguments.length; e++) {
      var n = arguments[e];
      for (var r in n)
        Object.prototype.hasOwnProperty.call(n, r) && (t[r] = n[r]);
    }
    return t;
  }).apply(this, arguments);
}
function Co(t, e) {
  if (t == null)
    return {};
  var n, r, i = {}, f = Object.keys(t);
  for (r = 0; r < f.length; r++)
    e.indexOf(n = f[r]) >= 0 || (i[n] = t[n]);
  return i;
}
function wi(t) {
  var e = de(t), n = de(function(r) {
    e.current && e.current(r);
  });
  return e.current = t, n.current;
}
var xi = function(t, e, n) {
  return e === void 0 && (e = 0), n === void 0 && (n = 1), t > n ? n : t < e ? e : t;
}, ii = function(t) {
  return "touches" in t;
}, ll = function(t) {
  return t && t.ownerDocument.defaultView || self;
}, Gh = function(t, e, n) {
  var r = t.getBoundingClientRect(), i = ii(e) ? function(f, g) {
    for (var l = 0; l < f.length; l++)
      if (f[l].identifier === g)
        return f[l];
    return f[0];
  }(e.touches, n) : e;
  return { left: xi((i.pageX - (r.left + ll(t).pageXOffset)) / r.width), top: xi((i.pageY - (r.top + ll(t).pageYOffset)) / r.height) };
}, Kh = function(t) {
  !ii(t) && t.preventDefault();
}, Cm = ce.memo(function(t) {
  var e = t.onMove, n = t.onKey, r = Co(t, ["onMove", "onKey"]), i = de(null), f = wi(e), g = wi(n), l = de(null), s = de(!1), a = He(function() {
    var c = function(p) {
      Kh(p), (ii(p) ? p.touches.length > 0 : p.buttons > 0) && i.current ? f(Gh(i.current, p, l.current)) : m(!1);
    }, d = function() {
      return m(!1);
    };
    function m(p) {
      var v = s.current, b = ll(i.current), y = p ? b.addEventListener : b.removeEventListener;
      y(v ? "touchmove" : "mousemove", c), y(v ? "touchend" : "mouseup", d);
    }
    return [function(p) {
      var v = p.nativeEvent, b = i.current;
      if (b && (Kh(v), !function(w, C) {
        return C && !ii(w);
      }(v, s.current) && b)) {
        if (ii(v)) {
          s.current = !0;
          var y = v.changedTouches || [];
          y.length && (l.current = y[0].identifier);
        }
        b.focus(), f(Gh(b, v, l.current)), m(!0);
      }
    }, function(p) {
      var v = p.which || p.keyCode;
      v < 37 || v > 40 || (p.preventDefault(), g({ left: v === 39 ? 0.05 : v === 37 ? -0.05 : 0, top: v === 40 ? 0.05 : v === 38 ? -0.05 : 0 }));
    }, m];
  }, [g, f]), h = a[0], o = a[1], u = a[2];
  return Se(function() {
    return u;
  }, [u]), ce.createElement("div", jr({}, r, { onTouchStart: h, onMouseDown: h, className: "react-colorful__interactive", ref: i, onKeyDown: o, tabIndex: 0, role: "slider" }));
}), kc = function(t) {
  return t.filter(Boolean).join(" ");
}, _m = function(t) {
  var e = t.color, n = t.left, r = t.top, i = r === void 0 ? 0.5 : r, f = kc(["react-colorful__pointer", t.className]);
  return ce.createElement("div", { className: f, style: { top: 100 * i + "%", left: 100 * n + "%" } }, ce.createElement("div", { className: "react-colorful__pointer-fill", style: { backgroundColor: e } }));
}, Ze = function(t, e, n) {
  return e === void 0 && (e = 0), n === void 0 && (n = Math.pow(10, e)), Math.round(n * t) / n;
}, ek = function(t) {
  return sk(cl(t));
}, cl = function(t) {
  return t[0] === "#" && (t = t.substring(1)), t.length < 6 ? { r: parseInt(t[0] + t[0], 16), g: parseInt(t[1] + t[1], 16), b: parseInt(t[2] + t[2], 16), a: t.length === 4 ? Ze(parseInt(t[3] + t[3], 16) / 255, 2) : 1 } : { r: parseInt(t.substring(0, 2), 16), g: parseInt(t.substring(2, 4), 16), b: parseInt(t.substring(4, 6), 16), a: t.length === 8 ? Ze(parseInt(t.substring(6, 8), 16) / 255, 2) : 1 };
}, tk = function(t) {
  return ik(rk(t));
}, nk = function(t) {
  var e = t.s, n = t.v, r = t.a, i = (200 - e) * n / 100;
  return { h: Ze(t.h), s: Ze(i > 0 && i < 200 ? e * n / 100 / (i <= 100 ? i : 200 - i) * 100 : 0), l: Ze(i / 2), a: Ze(r, 2) };
}, ul = function(t) {
  var e = nk(t);
  return "hsl(" + e.h + ", " + e.s + "%, " + e.l + "%)";
}, rk = function(t) {
  var e = t.h, n = t.s, r = t.v, i = t.a;
  e = e / 360 * 6, n /= 100, r /= 100;
  var f = Math.floor(e), g = r * (1 - n), l = r * (1 - (e - f) * n), s = r * (1 - (1 - e + f) * n), a = f % 6;
  return { r: Ze(255 * [r, l, g, g, s, r][a]), g: Ze(255 * [s, r, r, l, g, g][a]), b: Ze(255 * [g, g, s, r, r, l][a]), a: Ze(i, 2) };
}, os = function(t) {
  var e = t.toString(16);
  return e.length < 2 ? "0" + e : e;
}, ik = function(t) {
  var e = t.r, n = t.g, r = t.b, i = t.a, f = i < 1 ? os(Ze(255 * i)) : "";
  return "#" + os(e) + os(n) + os(r) + f;
}, sk = function(t) {
  var e = t.r, n = t.g, r = t.b, i = t.a, f = Math.max(e, n, r), g = f - Math.min(e, n, r), l = g ? f === e ? (n - r) / g : f === n ? 2 + (r - e) / g : 4 + (e - n) / g : 0;
  return { h: Ze(60 * (l < 0 ? l + 6 : l)), s: Ze(f ? g / f * 100 : 0), v: Ze(f / 255 * 100), a: i };
}, ok = ce.memo(function(t) {
  var e = t.hue, n = t.onChange, r = kc(["react-colorful__hue", t.className]);
  return ce.createElement("div", { className: r }, ce.createElement(Cm, { onMove: function(i) {
    n({ h: 360 * i.left });
  }, onKey: function(i) {
    n({ h: xi(e + 360 * i.left, 0, 360) });
  }, "aria-label": "Hue", "aria-valuenow": Ze(e), "aria-valuemax": "360", "aria-valuemin": "0" }, ce.createElement(_m, { className: "react-colorful__hue-pointer", left: e / 360, color: ul({ h: e, s: 100, v: 100, a: 1 }) })));
}), ak = ce.memo(function(t) {
  var e = t.hsva, n = t.onChange, r = { backgroundColor: ul({ h: e.h, s: 100, v: 100, a: 1 }) };
  return ce.createElement("div", { className: "react-colorful__saturation", style: r }, ce.createElement(Cm, { onMove: function(i) {
    n({ s: 100 * i.left, v: 100 - 100 * i.top });
  }, onKey: function(i) {
    n({ s: xi(e.s + 100 * i.left, 0, 100), v: xi(e.v - 100 * i.top, 0, 100) });
  }, "aria-label": "Color", "aria-valuetext": "Saturation " + Ze(e.s) + "%, Brightness " + Ze(e.v) + "%" }, ce.createElement(_m, { className: "react-colorful__saturation-pointer", top: 1 - e.v / 100, left: e.s / 100, color: ul(e) })));
}), Sm = function(t, e) {
  if (t === e)
    return !0;
  for (var n in t)
    if (t[n] !== e[n])
      return !1;
  return !0;
}, lk = function(t, e) {
  return t.toLowerCase() === e.toLowerCase() || Sm(cl(t), cl(e));
};
function ck(t, e, n) {
  var r = wi(n), i = De(function() {
    return t.toHsva(e);
  }), f = i[0], g = i[1], l = de({ color: e, hsva: f });
  Se(function() {
    if (!t.equal(e, l.current.color)) {
      var a = t.toHsva(e);
      l.current = { hsva: a, color: e }, g(a);
    }
  }, [e, t]), Se(function() {
    var a;
    Sm(f, l.current.hsva) || t.equal(a = t.fromHsva(f), l.current.color) || (l.current = { hsva: f, color: a }, r(a));
  }, [f, t, r]);
  var s = Oe(function(a) {
    g(function(h) {
      return Object.assign({}, h, a);
    });
  }, []);
  return [f, s];
}
var uk = typeof window < "u" ? Ci : Se, hk = function() {
  return typeof __webpack_nonce__ < "u" ? __webpack_nonce__ : void 0;
}, qh = /* @__PURE__ */ new Map(), fk = function(t) {
  uk(function() {
    var e = t.current ? t.current.ownerDocument : document;
    if (e !== void 0 && !qh.has(e)) {
      var n = e.createElement("style");
      n.innerHTML = `.react-colorful{position:relative;display:flex;flex-direction:column;width:200px;height:200px;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:default}.react-colorful__saturation{position:relative;flex-grow:1;border-color:transparent;border-bottom:12px solid #000;border-radius:8px 8px 0 0;background-image:linear-gradient(0deg,#000,transparent),linear-gradient(90deg,#fff,hsla(0,0%,100%,0))}.react-colorful__alpha-gradient,.react-colorful__pointer-fill{content:"";position:absolute;left:0;top:0;right:0;bottom:0;pointer-events:none;border-radius:inherit}.react-colorful__alpha-gradient,.react-colorful__saturation{box-shadow:inset 0 0 0 1px rgba(0,0,0,.05)}.react-colorful__alpha,.react-colorful__hue{position:relative;height:24px}.react-colorful__hue{background:linear-gradient(90deg,red 0,#ff0 17%,#0f0 33%,#0ff 50%,#00f 67%,#f0f 83%,red)}.react-colorful__last-control{border-radius:0 0 8px 8px}.react-colorful__interactive{position:absolute;left:0;top:0;right:0;bottom:0;border-radius:inherit;outline:none;touch-action:none}.react-colorful__pointer{position:absolute;z-index:1;box-sizing:border-box;width:28px;height:28px;transform:translate(-50%,-50%);background-color:#fff;border:2px solid #fff;border-radius:50%;box-shadow:0 2px 4px rgba(0,0,0,.2)}.react-colorful__interactive:focus .react-colorful__pointer{transform:translate(-50%,-50%) scale(1.1)}.react-colorful__alpha,.react-colorful__alpha-pointer{background-color:#fff;background-image:url('data:image/svg+xml;charset=utf-8,<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill-opacity=".05"><path d="M8 0h8v8H8zM0 8h8v8H0z"/></svg>')}.react-colorful__saturation-pointer{z-index:3}.react-colorful__hue-pointer{z-index:2}`, qh.set(e, n);
      var r = hk();
      r && n.setAttribute("nonce", r), e.head.appendChild(n);
    }
  }, []);
}, dk = function(t) {
  var e = t.className, n = t.colorModel, r = t.color, i = r === void 0 ? n.defaultColor : r, f = t.onChange, g = Co(t, ["className", "colorModel", "color", "onChange"]), l = de(null);
  fk(l);
  var s = ck(n, i, f), a = s[0], h = s[1], o = kc(["react-colorful", e]);
  return ce.createElement("div", jr({}, g, { ref: l, className: o }), ce.createElement(ak, { hsva: a, onChange: h }), ce.createElement(ok, { hue: a.h, onChange: h, className: "react-colorful__last-control" }));
}, pk = { defaultColor: "000", toHsva: ek, fromHsva: function(t) {
  return tk({ h: t.h, s: t.s, v: t.v, a: 1 });
}, equal: lk }, gk = function(t) {
  return ce.createElement(dk, jr({}, t, { colorModel: pk }));
}, mk = /^#?([0-9A-F]{3,8})$/i, vk = function(t) {
  var e = t.color, n = e === void 0 ? "" : e, r = t.onChange, i = t.onBlur, f = t.escape, g = t.validate, l = t.format, s = t.process, a = Co(t, ["color", "onChange", "onBlur", "escape", "validate", "format", "process"]), h = De(function() {
    return f(n);
  }), o = h[0], u = h[1], c = wi(r), d = wi(i), m = Oe(function(v) {
    var b = f(v.target.value);
    u(b), g(b) && c(s ? s(b) : b);
  }, [f, s, g, c]), p = Oe(function(v) {
    g(v.target.value) || u(f(n)), d(v);
  }, [n, f, g, d]);
  return Se(function() {
    u(f(n));
  }, [n, f]), ce.createElement("input", jr({}, a, { value: l ? l(o) : o, spellCheck: "false", onChange: m, onBlur: p }));
}, Zh = function(t) {
  return "#" + t;
}, bk = function(t) {
  var e = t.prefixed, n = t.alpha, r = Co(t, ["prefixed", "alpha"]), i = Oe(function(g) {
    return g.replace(/([^0-9A-F]+)/gi, "").substring(0, n ? 8 : 6);
  }, [n]), f = Oe(function(g) {
    return function(l, s) {
      var a = mk.exec(l), h = a ? a[1].length : 0;
      return h === 3 || h === 6 || !!s && h === 4 || !!s && h === 8;
    }(g, n);
  }, [n]);
  return ce.createElement(vk, jr({}, r, { escape: i, format: e ? Zh : void 0, process: Zh, validate: f }));
}, Tm = {};
Tm = {
  alpha: "ألفا",
  black: "أسود",
  blue: "أزرق",
  "blue purple": "أرجواني مزرق",
  brightness: "السطوع",
  brown: "بني",
  "brown yellow": "أصفر بني",
  colorName: (t) => `${t.lightness} ${t.chroma} ${t.hue}`,
  cyan: "سماوي",
  "cyan blue": "أزرق سماوي",
  dark: "داكن",
  gray: "رمادي",
  grayish: "مائل للرمادي",
  green: "أخضر",
  "green cyan": "سماوي مخضر",
  hue: "درجة اللون",
  light: "فاتح",
  lightness: "الإضاءة",
  magenta: "أرجواني",
  "magenta pink": "أرجواني وردي",
  orange: "برتقالي",
  "orange yellow": "أصفر برتقالي",
  pale: "باهت",
  pink: "وردي",
  "pink red": "أحمر وردي",
  purple: "أرجواني",
  "purple magenta": "بنفسجي",
  red: "أحمر",
  "red orange": "برتقالي محمر",
  saturation: "التشبع",
  transparentColorName: (t) => `${t.lightness} ${t.chroma} ${t.hue}, ${t.percentTransparent} شفاف`,
  "very dark": "داكن جدًا",
  "very light": "فاتح جدًا",
  vibrant: "ساطع",
  white: "أبيض",
  yellow: "أصفر",
  "yellow green": "أخضر مصفر"
};
var Em = {};
Em = {
  alpha: "Алфа",
  black: "черно",
  blue: "Синьо",
  "blue purple": "синьо лилаво",
  brightness: "Яркост",
  brown: "кафяво",
  "brown yellow": "кафяво жълто",
  colorName: (t) => `${t.lightness} ${t.chroma} ${t.hue}`,
  cyan: "циан",
  "cyan blue": "циан синьо",
  dark: "тъмно",
  gray: "сиво",
  grayish: "сивкав",
  green: "Зелено",
  "green cyan": "зелен циан",
  hue: "Оттенък",
  light: "светло",
  lightness: "Лекота",
  magenta: "магента",
  "magenta pink": "магента розово",
  orange: "оранжево",
  "orange yellow": "оранжево жълто",
  pale: "бледо",
  pink: "розово",
  "pink red": "розово червено",
  purple: "лилаво",
  "purple magenta": "лилаво магента",
  red: "Червено",
  "red orange": "червен портокал",
  saturation: "Наситеност",
  transparentColorName: (t) => `${t.lightness} ${t.chroma} ${t.hue}, ${t.percentTransparent} прозрачен`,
  "very dark": "много тъмно",
  "very light": "много светло",
  vibrant: " ярко",
  white: "бяло",
  yellow: "жълто",
  "yellow green": "жълто зелен"
};
var km = {};
km = {
  alpha: "Alfa",
  black: "černá",
  blue: "Modrá",
  "blue purple": "modrofialová",
  brightness: "Jas",
  brown: "hnědá",
  "brown yellow": "hnědožlutá",
  colorName: (t) => `${t.lightness} ${t.chroma} ${t.hue}`,
  cyan: "tyrkysová",
  "cyan blue": "tyrkysovomodrá",
  dark: "tmavá",
  gray: "šedá",
  grayish: "našedlá",
  green: "Zelená",
  "green cyan": "zelenotyrkysová",
  hue: "Odstín",
  light: "světlá",
  lightness: "Světlost",
  magenta: "purpurová",
  "magenta pink": "purpurově růžová",
  orange: "oranžová",
  "orange yellow": "oranžovožlutá",
  pale: "bledá",
  pink: "růžová",
  "pink red": "růžovočervená",
  purple: "fialová",
  "purple magenta": "fialově purpurová",
  red: "Červená",
  "red orange": "červenooranžová",
  saturation: "Sytost",
  transparentColorName: (t) => `${t.lightness} ${t.chroma} ${t.hue}, ${t.percentTransparent} průhledné`,
  "very dark": "velmi tmavá",
  "very light": "velmi světlá",
  vibrant: "zářivá",
  white: "bílá",
  yellow: "žlutá",
  "yellow green": "žlutozelená"
};
var Om = {};
Om = {
  alpha: "Alfa",
  black: "sort",
  blue: "Blå",
  "blue purple": "blålilla",
  brightness: "Lysstyrke",
  brown: "brun",
  "brown yellow": "brungul",
  colorName: (t) => `${t.lightness} ${t.chroma} ${t.hue}`,
  cyan: "cyan",
  "cyan blue": "cyan blå",
  dark: "mørk",
  gray: "grå",
  grayish: "grålig",
  green: "Grøn",
  "green cyan": "grøn cyan",
  hue: "Tone",
  light: "lys",
  lightness: "Lyshed",
  magenta: "magenta",
  "magenta pink": "magenta pink",
  orange: "orange",
  "orange yellow": "orangegul",
  pale: "bleg",
  pink: "lyserød",
  "pink red": "lyserødlig rød",
  purple: "lilla",
  "purple magenta": "lilla magenta",
  red: "Rød",
  "red orange": "rødorange",
  saturation: "Farvemætning",
  transparentColorName: (t) => `${t.lightness} ${t.chroma} ${t.hue}, ${t.percentTransparent} gennemsigtig`,
  "very dark": "meget mørk",
  "very light": "meget lys",
  vibrant: "klar",
  white: "hvid",
  yellow: "gul",
  "yellow green": "gulgrøn"
};
var Dm = {};
Dm = {
  alpha: "Alpha",
  black: "Schwarz",
  blue: "Blau",
  "blue purple": "Blaulila",
  brightness: "Helligkeit",
  brown: "Braun",
  "brown yellow": "Braungelb",
  colorName: (t) => `${t.lightness} ${t.chroma} ${t.hue}`,
  cyan: "Cyan",
  "cyan blue": "Cyanblau",
  dark: "dunkles",
  gray: "Grau",
  grayish: "gräuliches",
  green: "Grün",
  "green cyan": "Grüncyan",
  hue: "Farbton",
  light: "helles",
  lightness: "Leuchtkraft",
  magenta: "Magenta",
  "magenta pink": "Magentarosa",
  orange: "Orange",
  "orange yellow": "Orangegelb",
  pale: "blasses",
  pink: "Rosa",
  "pink red": "Rosarot",
  purple: "Lila",
  "purple magenta": "Lilamagenta",
  red: "Rot",
  "red orange": "Rotorange",
  saturation: "Sättigung",
  transparentColorName: (t) => `${t.lightness} ${t.chroma} ${t.hue}, zu ${t.percentTransparent} transparent`,
  "very dark": "sehr dunkles",
  "very light": "sehr helles",
  vibrant: "lebhaftes",
  white: "Weiß",
  yellow: "Gelb",
  "yellow green": "Gelbgrün"
};
var Am = {};
Am = {
  alpha: "Άλφα",
  black: "μαύρο",
  blue: "Μπλε",
  "blue purple": "μπλε μωβ",
  brightness: "Φωτεινότητα",
  brown: "καφέ",
  "brown yellow": "καφέ κίτρινο",
  colorName: (t) => `${t.lightness} ${t.chroma} ${t.hue}`,
  cyan: "κυανό",
  "cyan blue": "κυανό μπλε",
  dark: "σκούρο",
  gray: "γκρι",
  grayish: "γκριζωπό",
  green: "Πράσινο",
  "green cyan": "πράσινο κυανό",
  hue: "Τόνος",
  light: "ανοιχτό",
  lightness: "Φωτεινότητα",
  magenta: "ματζέντα",
  "magenta pink": "ματζέντα ροζ",
  orange: "πορτοκαλί",
  "orange yellow": "πορτοκαλί κίτρινο",
  pale: "ανοιχτό",
  pink: "ροζ",
  "pink red": "ροζ κόκκινο",
  purple: "μωβ",
  "purple magenta": "μωβ ματζέντα",
  red: "Κόκκινο",
  "red orange": "κόκκινο πορτοκαλί",
  saturation: "Κορεσμός",
  transparentColorName: (t) => `${t.lightness} ${t.chroma} ${t.hue}, ${t.percentTransparent} διαφανές`,
  "very dark": "πολύ σκούρο",
  "very light": "πολύ ανοιχτό",
  vibrant: "έντονο",
  white: "λευκό",
  yellow: "κίτρινο",
  "yellow green": "κίτρινο πράσινο"
};
var Pm = {};
Pm = {
  hue: "Hue",
  saturation: "Saturation",
  lightness: "Lightness",
  brightness: "Brightness",
  red: "Red",
  green: "Green",
  blue: "Blue",
  alpha: "Alpha",
  colorName: (t) => `${t.lightness} ${t.chroma} ${t.hue}`,
  transparentColorName: (t) => `${t.lightness} ${t.chroma} ${t.hue}, ${t.percentTransparent} transparent`,
  "very dark": "very dark",
  dark: "dark",
  light: "light",
  "very light": "very light",
  pale: "pale",
  grayish: "grayish",
  vibrant: "vibrant",
  black: "black",
  white: "white",
  gray: "gray",
  pink: "pink",
  "pink red": "pink red",
  "red orange": "red orange",
  brown: "brown",
  orange: "orange",
  "orange yellow": "orange yellow",
  "brown yellow": "brown yellow",
  yellow: "yellow",
  "yellow green": "yellow green",
  "green cyan": "green cyan",
  cyan: "cyan",
  "cyan blue": "cyan blue",
  "blue purple": "blue purple",
  purple: "purple",
  "purple magenta": "purple magenta",
  magenta: "magenta",
  "magenta pink": "magenta pink"
};
var Mm = {};
Mm = {
  alpha: "Alpha",
  black: "negro",
  blue: "Azul",
  "blue purple": "púrpura azulado",
  brightness: "Brillo",
  brown: "marrón",
  "brown yellow": "amarillo amarronado",
  colorName: (t) => `${t.lightness} ${t.chroma} ${t.hue}`,
  cyan: "cian",
  "cyan blue": "azul cian",
  dark: "oscuro",
  gray: "gris",
  grayish: "grisáceo",
  green: "Verde",
  "green cyan": "cian verdoso",
  hue: "Tono",
  light: "claro",
  lightness: "Luminosidad",
  magenta: "magenta",
  "magenta pink": "rosa magenta",
  orange: "naranja",
  "orange yellow": "amarillo anaranjado",
  pale: "pálido",
  pink: "rosa",
  "pink red": "rojo rosado",
  purple: "morado",
  "purple magenta": "magenta violáceo",
  red: "Rojo",
  "red orange": "naranja rojizo",
  saturation: "Saturación",
  transparentColorName: (t) => `${t.lightness} ${t.chroma} ${t.hue}, ${t.percentTransparent} transparente`,
  "very dark": "muy oscuro",
  "very light": "muy claro",
  vibrant: "intenso",
  white: "blanco",
  yellow: "amarillo",
  "yellow green": "verde amarillento"
};
var Fm = {};
Fm = {
  alpha: "Alfa",
  black: "must",
  blue: "Sinine",
  "blue purple": "sinakaslilla",
  brightness: "Heledus",
  brown: "pruun",
  "brown yellow": "pruunikaskollane",
  colorName: (t) => `${t.lightness} ${t.chroma} ${t.hue}`,
  cyan: "tsüaan",
  "cyan blue": "tsüaansinine",
  dark: "tume",
  gray: "hall",
  grayish: "hallikas",
  green: "Roheline",
  "green cyan": "tsüaanroheline",
  hue: "Värv",
  light: "valgus",
  lightness: "Valgus",
  magenta: "magentapunane",
  "magenta pink": "magentaroosa",
  orange: "oranž",
  "orange yellow": "oranžikaskollane",
  pale: "kahvatu",
  pink: "roosa",
  "pink red": "vaarikapunane",
  purple: "lilla",
  "purple magenta": "purpurne magenta",
  red: "Punane",
  "red orange": "punakasoranž",
  saturation: "Küllastus",
  transparentColorName: (t) => `${t.lightness} ${t.chroma} ${t.hue}, ${t.percentTransparent} läbipaistev`,
  "very dark": "väga tume",
  "very light": "väga hele",
  vibrant: "ere",
  white: "valge",
  yellow: "kollane",
  "yellow green": "kollakasroheline"
};
var Im = {};
Im = {
  alpha: "Alpha",
  black: "musta",
  blue: "Sininen",
  "blue purple": "sinivioletti",
  brightness: "Kirkkaus",
  brown: "ruskea",
  "brown yellow": "ruskeankeltainen",
  colorName: (t) => `${t.lightness} ${t.chroma} ${t.hue}`,
  cyan: "syaani",
  "cyan blue": "syaaninsininen",
  dark: "tumma",
  gray: "harmaa",
  grayish: "harmahtava",
  green: "Vihreä",
  "green cyan": "vihreänsyaani",
  hue: "Sävy",
  light: "vaalea",
  lightness: "Valomäärä",
  magenta: "magenta",
  "magenta pink": "magentapinkki",
  orange: "oranssi",
  "orange yellow": "oranssinkeltainen",
  pale: "vaalea",
  pink: "pinkki",
  "pink red": "vaaleanpunainen",
  purple: "violetti",
  "purple magenta": "violettimagenta",
  red: "Punainen",
  "red orange": "punaoranssi",
  saturation: "Värikylläisyys",
  transparentColorName: (t) => `${t.lightness} ${t.chroma} ${t.hue}, ${t.percentTransparent} läpinäkyvä`,
  "very dark": "hyvin tumma",
  "very light": "erittäin vaalea",
  vibrant: "eloisa",
  white: "valkea",
  yellow: "keltainen",
  "yellow green": "keltavihreä"
};
var Rm = {};
Rm = {
  alpha: "Alpha",
  black: "Noir",
  blue: "Bleu",
  "blue purple": "Violet bleu",
  brightness: "Luminosité",
  brown: "Brun",
  "brown yellow": "Jaune brun",
  colorName: (t) => `${t.lightness} ${t.chroma} ${t.hue}`,
  cyan: "Cyan",
  "cyan blue": "Bleu cyan",
  dark: "Sombre",
  gray: "Gris",
  grayish: "Grisâtre",
  green: "Vert",
  "green cyan": "Cyan vert",
  hue: "Teinte",
  light: "Clair",
  lightness: "Luminosité",
  magenta: "Magenta",
  "magenta pink": "Rose magenta",
  orange: "Orange",
  "orange yellow": "Jaune orangé",
  pale: "Pâle",
  pink: "Rose",
  "pink red": "Rouge rosé",
  purple: "Violet",
  "purple magenta": "Magenta violet",
  red: "Rouge",
  "red orange": "Orange rouge",
  saturation: "Saturation",
  transparentColorName: (t) => `${t.lightness} ${t.chroma} ${t.hue}, ${t.percentTransparent} transparent`,
  "very dark": "Très sombre",
  "very light": "Très clair",
  vibrant: "Vif",
  white: "Blanc",
  yellow: "Jaune",
  "yellow green": "Vert jaune"
};
var Lm = {};
Lm = {
  alpha: "אלפא",
  black: "שחור",
  blue: "כחול",
  "blue purple": "כחול סגול",
  brightness: "בהירות",
  brown: "חום",
  "brown yellow": "חום צהוב",
  colorName: (t) => `${t.lightness} ${t.chroma} ${t.hue}`,
  cyan: "טורקיז",
  "cyan blue": "כחול ציאן",
  dark: "כהה",
  gray: "אפור",
  grayish: "אפרפר",
  green: "ירוק",
  "green cyan": "ציאן ירוק",
  hue: "גוון",
  light: "אור",
  lightness: "כמות אור",
  magenta: "מג'נטה",
  "magenta pink": "ורוד מג'נטה",
  orange: "כתום",
  "orange yellow": "כתום צהוב",
  pale: "חיוור",
  pink: "ורוד",
  "pink red": "ורוד אדום",
  purple: "סגול",
  "purple magenta": "מג'נטה סגול",
  red: "אדום",
  "red orange": "כתום אדום",
  saturation: "רוויה",
  transparentColorName: (t) => `${t.lightness} ${t.chroma} ${t.hue}, ${t.percentTransparent} שקוף`,
  "very dark": "כהה מאוד",
  "very light": "בהיר מאוד",
  vibrant: "תוסס",
  white: "לבן",
  yellow: "צהוב",
  "yellow green": "צהוב ירוק"
};
var Bm = {};
Bm = {
  alpha: "Alfa",
  black: "crno",
  blue: "Plava",
  "blue purple": "plavo ljubičasta",
  brightness: "Svjetlina",
  brown: "smeđa",
  "brown yellow": "smeđe žuta",
  colorName: (t) => `${t.lightness} ${t.chroma} ${t.hue}`,
  cyan: "cijan",
  "cyan blue": "cijan plava",
  dark: "tamno",
  gray: "siva",
  grayish: "sivkasto",
  green: "Zelena",
  "green cyan": "zelena cijan",
  hue: "Nijansa",
  light: "svjetlo",
  lightness: "Osvijetljenost",
  magenta: "magenta",
  "magenta pink": "magentno ružičasta",
  orange: "narančasta",
  "orange yellow": "narančasto žuta",
  pale: "blijeda",
  pink: "ružičasta",
  "pink red": "ružičasto crvena",
  purple: "ljubičasta",
  "purple magenta": "ljubičasta magenta",
  red: "Crvena",
  "red orange": "crveno narančasta",
  saturation: "Zasićenost",
  transparentColorName: (t) => `${t.lightness} ${t.chroma} ${t.hue}, ${t.percentTransparent} prozirnosti`,
  "very dark": "jako tamna",
  "very light": "vrlo svijetlo",
  vibrant: "vibrantna",
  white: "bijela",
  yellow: "žuto",
  "yellow green": "žuto zelena"
};
var zm = {};
zm = {
  alpha: "Alfa",
  black: "fekete",
  blue: "Kék",
  "blue purple": "kék lila",
  brightness: "Fényesség",
  brown: "barna",
  "brown yellow": "barna sárga",
  colorName: (t) => `${t.lightness} ${t.chroma} ${t.hue}`,
  cyan: "ciánkék",
  "cyan blue": "ciánkék",
  dark: "sötét",
  gray: "szürke",
  grayish: "szürkés",
  green: "Zöld",
  "green cyan": "zöld ciánkék",
  hue: "Színárnyalat",
  light: "világos",
  lightness: "Világosság",
  magenta: "bíbor",
  "magenta pink": "bíbor rózsaszín",
  orange: "narancs",
  "orange yellow": "narancssárga",
  pale: "halvány",
  pink: "rózsaszín",
  "pink red": "rózsaszín piros",
  purple: "lila",
  "purple magenta": "lila bíbor",
  red: "Piros",
  "red orange": "piros narancs",
  saturation: "Telítettség",
  transparentColorName: (t) => `${t.lightness} ${t.chroma} ${t.hue}, ${t.percentTransparent} átlátszó`,
  "very dark": "nagyon sötét",
  "very light": "nagyon világos",
  vibrant: "élénk",
  white: "fehér",
  yellow: "sárga",
  "yellow green": "sárga zöld"
};
var Nm = {};
Nm = {
  alpha: "Alfa",
  black: "nero",
  blue: "Blu",
  "blue purple": "blu viola",
  brightness: "Luminosità",
  brown: "marrone",
  "brown yellow": "giallo bruno",
  colorName: (t) => `${t.hue} ${t.chroma} ${t.lightness}`,
  cyan: "ciano",
  "cyan blue": "blu ciano",
  dark: "scuro",
  gray: "grigio",
  grayish: "grigiastro",
  green: "Verde",
  "green cyan": "verde ciano",
  hue: "Tonalità",
  light: "chiaro",
  lightness: "Luminosità",
  magenta: "magenta",
  "magenta pink": "rosa magenta",
  orange: "arancio",
  "orange yellow": "giallo arancio",
  pale: "tenue",
  pink: "rosa",
  "pink red": "rosa rosso",
  purple: "viola",
  "purple magenta": "viola magenta",
  red: "Rosso",
  "red orange": "rosso arancio",
  saturation: "Saturazione",
  transparentColorName: (t) => `${t.hue} ${t.chroma} ${t.lightness}, trasparenza ${t.percentTransparent}`,
  "very dark": "molto scuro",
  "very light": "molto chiaro",
  vibrant: "vivace",
  white: "bianco",
  yellow: "giallo",
  "yellow green": "giallo verde"
};
var jm = {};
jm = {
  alpha: "アルファ",
  black: "ブラック",
  blue: "青",
  "blue purple": "ブルーパープル",
  brightness: "明るさ",
  brown: "ブラウン",
  "brown yellow": "ブラウンイエロー",
  colorName: (t) => `${t.lightness} ${t.chroma} ${t.hue}`,
  cyan: "シアン",
  "cyan blue": "シアンブルー",
  dark: "ダーク",
  gray: "グレー",
  grayish: "グレイッシュ",
  green: "緑",
  "green cyan": "グリーンシアン",
  hue: "色相",
  light: "ライト",
  lightness: "明度",
  magenta: "マゼンタ",
  "magenta pink": "マゼンタピンク",
  orange: "オレンジ",
  "orange yellow": "オレンジイエロー",
  pale: "ペール",
  pink: "ピンク",
  "pink red": "ピンクレッド",
  purple: "パープル",
  "purple magenta": "パープルマゼンタ",
  red: "赤",
  "red orange": "レッドオレンジ",
  saturation: "彩度",
  transparentColorName: (t) => `${t.lightness} ${t.chroma} ${t.hue}, ${t.percentTransparent} 透明`,
  "very dark": "最も暗い",
  "very light": "ベリーライト",
  vibrant: "鮮やか",
  white: "ホワイト",
  yellow: "イエロー",
  "yellow green": "イエローグリーン"
};
var $m = {};
$m = {
  alpha: "알파",
  black: "검은색",
  blue: "파랑",
  "blue purple": "청자색",
  brightness: "명도",
  brown: "갈색",
  "brown yellow": "황갈색",
  colorName: (t) => `${t.lightness} ${t.chroma} ${t.hue}`,
  cyan: "청록색",
  "cyan blue": "청록색",
  dark: "다크",
  gray: "회색",
  grayish: "회갈색",
  green: "초록",
  "green cyan": "청록색",
  hue: "색조",
  light: "라이트",
  lightness: "밝기",
  magenta: "자홍색",
  "magenta pink": "마젠타 핑크",
  orange: "주황색",
  "orange yellow": "불그스름한 노랑",
  pale: "흙색",
  pink: "분홍색",
  "pink red": "핑크 레드",
  purple: "자주색",
  "purple magenta": "보라빛 자홍색",
  red: "빨강",
  "red orange": "붉은 주황색",
  saturation: "채도",
  transparentColorName: (t) => `${t.lightness} ${t.chroma} ${t.hue}, ${t.percentTransparent} 투명도`,
  "very dark": "매우 어두운",
  "very light": "매우 연함",
  vibrant: "강렬한",
  white: "흰색",
  yellow: "노란색",
  "yellow green": "연두색"
};
var Vm = {};
Vm = {
  alpha: "Alfa",
  black: "juoda",
  blue: "Mėlyna",
  "blue purple": "melsvai violetinė",
  brightness: "Ryškumas",
  brown: "ruda",
  "brown yellow": "rusvai geltona",
  colorName: (t) => `${t.lightness} ${t.chroma} ${t.hue}`,
  cyan: "žalsvai mėlyna",
  "cyan blue": "žalsvai mėlyna",
  dark: "tamsi",
  gray: "pilka",
  grayish: "pilkšva",
  green: "Žalia",
  "green cyan": "žalsvai mėlyna",
  hue: "Atspalvis",
  light: "šviesi",
  lightness: "Šviesumas",
  magenta: "rausvai raudona",
  "magenta pink": "purpurinė",
  orange: "oranžinė",
  "orange yellow": "oranžinio atspalvio geltona",
  pale: "blyški",
  pink: "rožinė",
  "pink red": "rožinė raudona",
  purple: "violetinė",
  "purple magenta": "purpurinė rausvai raudona",
  red: "Raudona",
  "red orange": "rausvai oranžinė",
  saturation: "Įsotinimas",
  transparentColorName: (t) => `${t.lightness} ${t.chroma} ${t.hue}, ${t.percentTransparent} skaidri`,
  "very dark": "labai tamsi",
  "very light": "labai šviesi",
  vibrant: "ryški",
  white: "balta",
  yellow: "geltona",
  "yellow green": "gelsvai žalia"
};
var Hm = {};
Hm = {
  alpha: "Alfa",
  black: "melns",
  blue: "Zila",
  "blue purple": "zili violets",
  brightness: "Spilgtums",
  brown: "brūns",
  "brown yellow": "brūni dzeltens",
  colorName: (t) => `${t.lightness} ${t.chroma} ${t.hue}`,
  cyan: "ciāns",
  "cyan blue": "ciāna zils",
  dark: "tumšs",
  gray: "pelēks",
  grayish: "pelēcīgs",
  green: "Zaļa",
  "green cyan": "zaļš ciāns",
  hue: "Nokrāsa",
  light: "gaišs",
  lightness: "Gaišums",
  magenta: "fuksiju",
  "magenta pink": "fuksiju rozā",
  orange: "oranžs",
  "orange yellow": "oranži dzeltens",
  pale: "bāls",
  pink: "rozā",
  "pink red": "rozīgi sarkans",
  purple: "violets",
  "purple magenta": "violets fuksiju",
  red: "Sarkana",
  "red orange": "sarkanīgi oranžs",
  saturation: "Piesātinājums",
  transparentColorName: (t) => `${t.lightness} ${t.chroma} ${t.hue}, ${t.percentTransparent} caurspīdīgs`,
  "very dark": "ļoti tumšs",
  "very light": "ļoti gaišs",
  vibrant: "košs",
  white: "balts",
  yellow: "dzeltens",
  "yellow green": "dzelteni zaļš"
};
var Wm = {};
Wm = {
  alpha: "Alfa",
  black: "svart",
  blue: "Blå",
  "blue purple": "blålilla",
  brightness: "Lysstyrke",
  brown: "brun",
  "brown yellow": "brungul",
  colorName: (t) => `${t.lightness} ${t.chroma} ${t.hue}`,
  cyan: "cyan",
  "cyan blue": "cyanblå",
  dark: "mørk",
  gray: "grå",
  grayish: "gråaktig",
  green: "Grønn",
  "green cyan": "grønncyan",
  hue: "Fargetone",
  light: "lys",
  lightness: "Lyshet",
  magenta: "magenta",
  "magenta pink": "magentarosa",
  orange: "oransje",
  "orange yellow": "oransjegul",
  pale: "blek",
  pink: "rosa",
  "pink red": "rosarød",
  purple: "lilla",
  "purple magenta": "lillamagenta",
  red: "Rød",
  "red orange": "rødoransje",
  saturation: "Metning",
  transparentColorName: (t) => `${t.lightness} ${t.chroma} ${t.hue}, ${t.percentTransparent} gjennomsiktig`,
  "very dark": "svært mørk",
  "very light": "svært lys",
  vibrant: "levende",
  white: "hvit",
  yellow: "gul",
  "yellow green": "gulgrønn"
};
var Um = {};
Um = {
  alpha: "Alfa",
  black: "zwart",
  blue: "Blauw",
  "blue purple": "paarsblauw",
  brightness: "Helderheid",
  brown: "bruin",
  "brown yellow": "bruingeel",
  colorName: (t) => `${t.lightness} ${t.chroma} ${t.hue}`,
  cyan: "cyaan",
  "cyan blue": "cyaanblauw",
  dark: "donker",
  gray: "grijs",
  grayish: "grijsachtig",
  green: "Groen",
  "green cyan": "cyaangroen",
  hue: "Kleurtoon",
  light: "licht",
  lightness: "Lichtsterkte",
  magenta: "magenta",
  "magenta pink": "magentaroze",
  orange: "oranje",
  "orange yellow": "oranjegeel",
  pale: "bleek",
  pink: "roze",
  "pink red": "rozerood",
  purple: "paars",
  "purple magenta": "magentapaars",
  red: "Rood",
  "red orange": "roodoranje",
  saturation: "Verzadiging",
  transparentColorName: (t) => `${t.lightness} ${t.chroma} ${t.hue}, ${t.percentTransparent} transparant`,
  "very dark": "heel donker",
  "very light": "heel licht",
  vibrant: "levendig",
  white: "wit",
  yellow: "geel",
  "yellow green": "geelgroen"
};
var Xm = {};
Xm = {
  alpha: "Alfa",
  black: "czarny",
  blue: "Niebieski",
  "blue purple": "niebiesko-fioletowy",
  brightness: "Jasność",
  brown: "brązowy",
  "brown yellow": "brązowo-żółty",
  colorName: (t) => `${t.lightness} ${t.chroma} ${t.hue}`,
  cyan: "cyjanowy",
  "cyan blue": "cyjanowo-niebieski",
  dark: "ciemny",
  gray: "szary",
  grayish: "szarawy",
  green: "Zielony",
  "green cyan": "zielono-cyjanowy",
  hue: "Odcień",
  light: "jasny",
  lightness: "Jaskrawość",
  magenta: "purpurowy",
  "magenta pink": "purpurowo-różowy",
  orange: "pomarańczowy",
  "orange yellow": "pomarańczowo-żółty",
  pale: "blady",
  pink: "różowy",
  "pink red": "różowo-czerwony",
  purple: "fioletowy",
  "purple magenta": "fioletowo-purpurowy",
  red: "Czerwony",
  "red orange": "czerwono-pomarańczowy",
  saturation: "Nasycenie",
  transparentColorName: (t) => `${t.lightness} ${t.chroma} ${t.hue}, ${t.percentTransparent} przezroczystości`,
  "very dark": "bardzo ciemny",
  "very light": "bardzo jasny",
  vibrant: "intensywny",
  white: "biały",
  yellow: "żółty",
  "yellow green": "żółto-zielony"
};
var Ym = {};
Ym = {
  alpha: "Alfa",
  black: "preto",
  blue: "Azul",
  "blue purple": "roxo azulado",
  brightness: "Brilho",
  brown: "marrom",
  "brown yellow": "marrom amarelado",
  colorName: (t) => `${t.lightness} ${t.chroma} ${t.hue}`,
  cyan: "ciano",
  "cyan blue": "azul-ciano",
  dark: "escuro",
  gray: "cinza",
  grayish: "acinzentado",
  green: "Verde",
  "green cyan": "verde-ciano",
  hue: "Matiz",
  light: "claro",
  lightness: "Luminosidade",
  magenta: "magenta",
  "magenta pink": "rosa-magenta",
  orange: "laranja",
  "orange yellow": "amarelo alaranjado",
  pale: "pálido",
  pink: "rosa",
  "pink red": "rosa avermelhado",
  purple: "roxo",
  "purple magenta": "roxo-magenta",
  red: "Vermelho",
  "red orange": "laranja avermelhado",
  saturation: "Saturação",
  transparentColorName: (t) => `${t.lightness} ${t.chroma} ${t.hue}, ${t.percentTransparent} transparente`,
  "very dark": "muito escuro",
  "very light": "muito claro",
  vibrant: "vibrante",
  white: "branco",
  yellow: "amarelo",
  "yellow green": "verde amarelado"
};
var Gm = {};
Gm = {
  alpha: "Alfa",
  black: "preto",
  blue: "Azul",
  "blue purple": "azul-púrpura",
  brightness: "Luminosidade",
  brown: "castanho",
  "brown yellow": "amarelo-castanho",
  colorName: (t) => `${t.lightness} ${t.chroma} ${t.hue}`,
  cyan: "ciano",
  "cyan blue": "azul-ciano",
  dark: "escuro",
  gray: "cinzento",
  grayish: "acinzentado",
  green: "Verde",
  "green cyan": "verde-ciano",
  hue: "Tonalidade",
  light: "claro",
  lightness: "Claridade",
  magenta: "magenta",
  "magenta pink": "rosa-magenta",
  orange: "laranja",
  "orange yellow": "amarelo-laranja",
  pale: "pálido",
  pink: "cor-de-rosa",
  "pink red": "vermelho-rosa",
  purple: "púrpura",
  "purple magenta": "púrpura-magenta",
  red: "Vermelho",
  "red orange": "laranja-vermelho",
  saturation: "Saturação",
  transparentColorName: (t) => `${t.lightness} ${t.chroma} ${t.hue}, ${t.percentTransparent} transparente`,
  "very dark": "muito escuro",
  "very light": "muito claro",
  vibrant: "vibrante",
  white: "branco",
  yellow: "amarelo",
  "yellow green": "verde-amarelo"
};
var Km = {};
Km = {
  alpha: "Alfa",
  black: "negru",
  blue: "Albastru",
  "blue purple": "albastru-violet",
  brightness: "Luminozitate",
  brown: "maro",
  "brown yellow": "galben maro",
  colorName: (t) => `${t.lightness} ${t.chroma} ${t.hue}`,
  cyan: "bleu",
  "cyan blue": "albastru-bleu",
  dark: "închis",
  gray: "gri",
  grayish: "cenușiu",
  green: "Verde",
  "green cyan": "verde bleu",
  hue: "Nuanță",
  light: "deschis",
  lightness: "Luminozitate",
  magenta: "fucsia",
  "magenta pink": "roz-fucsia",
  orange: "portocaliu",
  "orange yellow": "galben-portocaliu",
  pale: "pal",
  pink: "roz",
  "pink red": "roz-roșu",
  purple: "violet",
  "purple magenta": "violet-fucsia",
  red: "Roșu",
  "red orange": "portocaliu-roșu",
  saturation: "Saturație",
  transparentColorName: (t) => `${t.lightness} ${t.chroma} ${t.hue}, ${t.percentTransparent} transparent`,
  "very dark": "foarte închis",
  "very light": "foarte deschis",
  vibrant: "plin de viață",
  white: "alb",
  yellow: "galben",
  "yellow green": "galben-verde"
};
var qm = {};
qm = {
  alpha: "Альфа",
  black: "черный",
  blue: "Синий",
  "blue purple": "сине-фиолетовый",
  brightness: "Яркость",
  brown: "коричневый",
  "brown yellow": "коричнево-желтый",
  colorName: (t) => `${t.lightness} ${t.chroma} ${t.hue}`,
  cyan: "голубой",
  "cyan blue": "цвет морской волны",
  dark: "темный",
  gray: "серый",
  grayish: "сероватый",
  green: "Зеленый",
  "green cyan": "сине-зеленый",
  hue: "Оттенок",
  light: "светлый",
  lightness: "Освещенность",
  magenta: "пурпурный",
  "magenta pink": "пурпурно-розовый",
  orange: "оранжевый",
  "orange yellow": "оранжево-желтый",
  pale: "бледный",
  pink: "розовый",
  "pink red": "розово-красный",
  purple: "фиолетовый",
  "purple magenta": "фиолетово-пурпурный",
  red: "Красный",
  "red orange": "красно-оранжевый",
  saturation: "Насыщенность",
  transparentColorName: (t) => `${t.lightness} ${t.chroma} ${t.hue}, прозрачный на ${t.percentTransparent}`,
  "very dark": "очень темный",
  "very light": "очень светлый",
  vibrant: "яркий",
  white: "белый",
  yellow: "желтый",
  "yellow green": "желто-зеленый"
};
var Zm = {};
Zm = {
  alpha: "Alfa",
  black: "čierna",
  blue: "Modrá",
  "blue purple": "modrofialová",
  brightness: "Jas",
  brown: "hnedá",
  "brown yellow": "hnedožltá",
  colorName: (t) => `${t.lightness} ${t.chroma} ${t.hue}`,
  cyan: "azúrová",
  "cyan blue": "azúrová modrá",
  dark: "tmavá",
  gray: "sivá",
  grayish: "sivastá",
  green: "Zelená",
  "green cyan": "zelená azúrová",
  hue: "Odtieň",
  light: "svetlá",
  lightness: "Svetlosť",
  magenta: "purpurová",
  "magenta pink": "ružová purpurová",
  orange: "oranžová",
  "orange yellow": "oranžovožltá",
  pale: "bledá",
  pink: "ružová",
  "pink red": "ružovočervená",
  purple: "fialová",
  "purple magenta": "fialová purpurová",
  red: "Červená",
  "red orange": "červenooranžová",
  saturation: "Sýtosť",
  transparentColorName: (t) => `${t.lightness} ${t.chroma} ${t.hue}, ${t.percentTransparent} priehľadná`,
  "very dark": "veľmi tmavá",
  "very light": "veľmi svetlá",
  vibrant: "energická",
  white: "biela",
  yellow: "žltá",
  "yellow green": "žltozelená"
};
var Jm = {};
Jm = {
  alpha: "Alfa",
  black: "črna",
  blue: "Modra",
  "blue purple": "modro vijolična",
  brightness: "Svetlost",
  brown: "rjava",
  "brown yellow": "rjavo rumena",
  colorName: (t) => `${t.lightness} ${t.chroma} ${t.hue}`,
  cyan: "cian",
  "cyan blue": "cian modra",
  dark: "temna",
  gray: "siva",
  grayish: "sivkasta",
  green: "Zelena",
  "green cyan": "zelena cian",
  hue: "Barva",
  light: "svetla",
  lightness: "Lahkost",
  magenta: "škrlatna",
  "magenta pink": "škrlatno roza",
  orange: "oranžna",
  "orange yellow": "oranžno rumena",
  pale: "bleda",
  pink: "roza",
  "pink red": "roza rdeča",
  purple: "vijolična",
  "purple magenta": "vijolično škrlatna",
  red: "Rdeča",
  "red orange": "rdeče oranžna",
  saturation: "Nasičenost",
  transparentColorName: (t) => `${t.lightness} ${t.chroma} ${t.hue}, ${t.percentTransparent} prozorna`,
  "very dark": "zelo temna",
  "very light": "zelo svetla",
  vibrant: "živahna",
  white: "bela",
  yellow: "rumena",
  "yellow green": "rumeno zelena"
};
var Qm = {};
Qm = {
  alpha: "Alfa",
  black: "crno",
  blue: "Plava",
  "blue purple": "plavoljubičasta",
  brightness: "Osvetljenost",
  brown: "smeđa",
  "brown yellow": "smeđežuta",
  colorName: (t) => `${t.lightness} ${t.chroma} ${t.hue}`,
  cyan: "cijan",
  "cyan blue": "cijan plava",
  dark: "tamno",
  gray: "siva",
  grayish: "sivkasta",
  green: "Zelena",
  "green cyan": "zeleno cijan",
  hue: "Nijansa",
  light: "svetla",
  lightness: "Osvetljenje",
  magenta: "purpurnocrvena",
  "magenta pink": "magenta ružičasta",
  orange: "narandžasta",
  "orange yellow": "narandžastožuta",
  pale: "bledo",
  pink: "ružičasta",
  "pink red": "ružičastocrvena",
  purple: "ljubičasta",
  "purple magenta": "ljubičasta magenta",
  red: "Crvena",
  "red orange": "crvenonarandžasta",
  saturation: "Zasićenje",
  transparentColorName: (t) => `${t.lightness} ${t.chroma} ${t.hue}, ${t.percentTransparent} prozirna`,
  "very dark": "veoma tamno",
  "very light": "vrlo svetlo",
  vibrant: "živopisna",
  white: "bela",
  yellow: "žuto",
  "yellow green": "žutozelena"
};
var ev = {};
ev = {
  alpha: "Alfa",
  black: "svart",
  blue: "Blått",
  "blue purple": "blålila",
  brightness: "Ljusstyrka",
  brown: "brun",
  "brown yellow": "brungul",
  colorName: (t) => `${t.lightness} ${t.chroma} ${t.hue}`,
  cyan: "cyan",
  "cyan blue": "cyanblå",
  dark: "mörk",
  gray: "grå",
  grayish: "gråaktig",
  green: "Grönt",
  "green cyan": "grön cyan",
  hue: "Nyans",
  light: "ljus",
  lightness: "Ljushet",
  magenta: "magenta",
  "magenta pink": "magentarosa",
  orange: "orange",
  "orange yellow": "orangegul",
  pale: "blek",
  pink: "rosa",
  "pink red": "rosaröd",
  purple: "lila",
  "purple magenta": "lila magenta",
  red: "Rött",
  "red orange": "rödorange",
  saturation: "Mättnad",
  transparentColorName: (t) => `${t.lightness} ${t.chroma} ${t.hue}, ${t.percentTransparent} genomskinlig`,
  "very dark": "mycket mörk",
  "very light": "mycket ljus",
  vibrant: "livfull",
  white: "vit",
  yellow: "gul",
  "yellow green": "gulgrön"
};
var tv = {};
tv = {
  alpha: "Alfa",
  black: "siyah",
  blue: "Mavi",
  "blue purple": "mavi mor",
  brightness: "Parlaklık",
  brown: "kahverengi",
  "brown yellow": "kahverengi sarı",
  colorName: (t) => `${t.lightness} ${t.chroma} ${t.hue}`,
  cyan: "camgöbeği",
  "cyan blue": "camgöbeği mavi",
  dark: "koyu",
  gray: "gri",
  grayish: "grimsi",
  green: "Yeşil",
  "green cyan": "yeşil camgöbeği",
  hue: "Ton",
  light: "açık",
  lightness: "Canlılık",
  magenta: "eflatun",
  "magenta pink": "eflatun pembe",
  orange: "turuncu",
  "orange yellow": "turuncu sarı",
  pale: "solgun",
  pink: "pembe",
  "pink red": "pembe kırmızı",
  purple: "mor",
  "purple magenta": "mor eflatun",
  red: "Kırmızı",
  "red orange": "kırmızı portakal",
  saturation: "Doygunluk",
  transparentColorName: (t) => `${t.lightness} ${t.chroma} ${t.hue}, ${t.percentTransparent} saydam`,
  "very dark": "çok koyu",
  "very light": "çok açık",
  vibrant: "canlı",
  white: "beyaz",
  yellow: "sarı",
  "yellow green": "sarı yeşil"
};
var nv = {};
nv = {
  alpha: "Альфа",
  black: "чорний",
  blue: "Синій",
  "blue purple": "синьо-фіолетовий",
  brightness: "Яскравість",
  brown: "коричневий",
  "brown yellow": "коричнево-жовтий",
  colorName: (t) => `${t.lightness} ${t.chroma} ${t.hue}`,
  cyan: "блакитний",
  "cyan blue": "синьо-блакитний",
  dark: "темний",
  gray: "сірий",
  grayish: "сіруватий",
  green: "Зелений",
  "green cyan": "зелено-блакитний",
  hue: "Тон",
  light: "світлий",
  lightness: "Освітленість",
  magenta: "пурпуровий",
  "magenta pink": "пурпурово-рожевий",
  orange: "помаранчевий",
  "orange yellow": "помаранчево-жовтий",
  pale: "блідий",
  pink: "рожевий",
  "pink red": "рожево-червоний",
  purple: "фіолетовий",
  "purple magenta": "фіолетово-пурпуровий",
  red: "Червоний",
  "red orange": "червоно-помаранчевий",
  saturation: "Насиченість",
  transparentColorName: (t) => `${t.lightness} ${t.chroma} ${t.hue}, прозорий на ${t.percentTransparent}`,
  "very dark": "дуже темний",
  "very light": "дуже світлий",
  vibrant: "яскравий",
  white: "білий",
  yellow: "жовтий",
  "yellow green": "жовто-зелений"
};
var rv = {};
rv = {
  alpha: "Alpha",
  black: "黑色",
  blue: "蓝色",
  "blue purple": "蓝紫色",
  brightness: "亮度",
  brown: "棕色的",
  "brown yellow": "棕黄色",
  colorName: (t) => `${t.lightness} ${t.chroma} ${t.hue}`,
  cyan: "蓝绿色",
  "cyan blue": "青蓝色",
  dark: "深色",
  gray: "灰色",
  grayish: "浅灰色的",
  green: "绿色",
  "green cyan": "绿青色",
  hue: "色相",
  light: "浅色",
  lightness: "明亮度",
  magenta: "紫红色",
  "magenta pink": "紫粉色",
  orange: "橙色",
  "orange yellow": "橙黄色",
  pale: "苍白的",
  pink: "粉色",
  "pink red": "粉红色",
  purple: "紫色",
  "purple magenta": "紫洋红色",
  red: "红色",
  "red orange": "红橙色",
  saturation: "饱和度",
  transparentColorName: (t) => `${t.lightness} ${t.chroma} ${t.hue}, ${t.percentTransparent} 透明`,
  "very dark": "很暗",
  "very light": "很浅",
  vibrant: "生机勃勃",
  white: "白色",
  yellow: "黄色",
  "yellow green": "黄色/绿色"
};
var iv = {};
iv = {
  alpha: "Alpha",
  black: "黑",
  blue: "藍色",
  "blue purple": "藍紫",
  brightness: "亮度",
  brown: "棕",
  "brown yellow": "棕黃",
  colorName: (t) => `${t.lightness} ${t.chroma} ${t.hue}`,
  cyan: "青",
  "cyan blue": "青藍",
  dark: "暗",
  gray: "灰",
  grayish: "偏灰",
  green: "綠色",
  "green cyan": "青綠",
  hue: "色相",
  light: "淺",
  lightness: "明亮",
  magenta: "洋紅",
  "magenta pink": "淺洋紅",
  orange: "橙",
  "orange yellow": "橙黃",
  pale: "淡",
  pink: "粉紅",
  "pink red": "粉紅",
  purple: "紫",
  "purple magenta": "紫洋紅",
  red: "紅色",
  "red orange": "橙紅",
  saturation: "飽和度",
  transparentColorName: (t) => `${t.lightness} ${t.chroma} ${t.hue}, ${t.percentTransparent} 透明`,
  "very dark": "很暗",
  "very light": "很淺",
  vibrant: "鮮豔",
  white: "白",
  yellow: "黃",
  "yellow green": "黃綠"
};
var sv = {};
sv = {
  "ar-AE": Tm,
  "bg-BG": Em,
  "cs-CZ": km,
  "da-DK": Om,
  "de-DE": Dm,
  "el-GR": Am,
  "en-US": Pm,
  "es-ES": Mm,
  "et-EE": Fm,
  "fi-FI": Im,
  "fr-FR": Rm,
  "he-IL": Lm,
  "hr-HR": Bm,
  "hu-HU": zm,
  "it-IT": Nm,
  "ja-JP": jm,
  "ko-KR": $m,
  "lt-LT": Vm,
  "lv-LV": Hm,
  "nb-NO": Wm,
  "nl-NL": Um,
  "pl-PL": Xm,
  "pt-BR": Ym,
  "pt-PT": Gm,
  "ro-RO": Km,
  "ru-RU": qm,
  "sk-SK": Zm,
  "sl-SI": Jm,
  "sr-SP": Qm,
  "sv-SE": ev,
  "tr-TR": tv,
  "uk-UA": nv,
  "zh-CN": rv,
  "zh-TW": iv
};
const yk = Symbol.for("react-aria.i18n.locale"), wk = Symbol.for("react-aria.i18n.strings");
let ar;
class br {
  /** Returns a localized string for the given key and locale. */
  getStringForLocale(e, n) {
    let i = this.getStringsForLocale(n)[e];
    if (!i)
      throw new Error(`Could not find intl message ${e} in ${n} locale`);
    return i;
  }
  /** Returns all localized strings for the given locale. */
  getStringsForLocale(e) {
    let n = this.strings[e];
    return n || (n = xk(e, this.strings, this.defaultLocale), this.strings[e] = n), n;
  }
  static getGlobalDictionaryForPackage(e) {
    if (typeof window > "u")
      return null;
    let n = window[yk];
    if (ar === void 0) {
      let i = window[wk];
      if (!i)
        return null;
      ar = {};
      for (let f in i)
        ar[f] = new br({
          [n]: i[f]
        }, n);
    }
    let r = ar == null ? void 0 : ar[e];
    if (!r)
      throw new Error(`Strings for package "${e}" were not included by LocalizedStringProvider. Please add it to the list passed to createLocalizedStringDictionary.`);
    return r;
  }
  constructor(e, n = "en-US") {
    this.strings = Object.fromEntries(Object.entries(e).filter(([, r]) => r)), this.defaultLocale = n;
  }
}
function xk(t, e, n = "en-US") {
  if (e[t])
    return e[t];
  let r = Ck(t);
  if (e[r])
    return e[r];
  for (let i in e)
    if (i.startsWith(r + "-"))
      return e[i];
  return e[n];
}
function Ck(t) {
  return Intl.Locale ? new Intl.Locale(t).language : t.split("-")[0];
}
const Jh = /* @__PURE__ */ new Map(), Qh = /* @__PURE__ */ new Map();
class _k {
  /** Formats a localized string for the given key with the provided variables. */
  format(e, n) {
    let r = this.strings.getStringForLocale(e, this.locale);
    return typeof r == "function" ? r(n, this) : r;
  }
  plural(e, n, r = "cardinal") {
    let i = n["=" + e];
    if (i)
      return typeof i == "function" ? i() : i;
    let f = this.locale + ":" + r, g = Jh.get(f);
    g || (g = new Intl.PluralRules(this.locale, {
      type: r
    }), Jh.set(f, g));
    let l = g.select(e);
    return i = n[l] || n.other, typeof i == "function" ? i() : i;
  }
  number(e) {
    let n = Qh.get(this.locale);
    return n || (n = new Intl.NumberFormat(this.locale), Qh.set(this.locale, n)), n.format(e);
  }
  select(e, n) {
    let r = e[n] || e.other;
    return typeof r == "function" ? r() : r;
  }
  constructor(e, n) {
    this.locale = e, this.strings = n;
  }
}
let Qo = /* @__PURE__ */ new Map(), hl = !1;
try {
  hl = new Intl.NumberFormat("de-DE", {
    signDisplay: "exceptZero"
  }).resolvedOptions().signDisplay === "exceptZero";
} catch {
}
let js = !1;
try {
  js = new Intl.NumberFormat("de-DE", {
    style: "unit",
    unit: "degree"
  }).resolvedOptions().style === "unit";
} catch {
}
const ov = {
  degree: {
    narrow: {
      default: "°",
      "ja-JP": " 度",
      "zh-TW": "度",
      "sl-SI": " °"
    }
  }
};
class ji {
  /** Formats a number value as a string, according to the locale and options provided to the constructor. */
  format(e) {
    let n = "";
    if (!hl && this.options.signDisplay != null ? n = Tk(this.numberFormatter, this.options.signDisplay, e) : n = this.numberFormatter.format(e), this.options.style === "unit" && !js) {
      var r;
      let { unit: i, unitDisplay: f = "short", locale: g } = this.resolvedOptions();
      if (!i)
        return n;
      let l = (r = ov[i]) === null || r === void 0 ? void 0 : r[f];
      n += l[g] || l.default;
    }
    return n;
  }
  /** Formats a number to an array of parts such as separators, digits, punctuation, and more. */
  formatToParts(e) {
    return this.numberFormatter.formatToParts(e);
  }
  /** Formats a number range as a string. */
  formatRange(e, n) {
    if (typeof this.numberFormatter.formatRange == "function")
      return this.numberFormatter.formatRange(e, n);
    if (n < e)
      throw new RangeError("End date must be >= start date");
    return `${this.format(e)} – ${this.format(n)}`;
  }
  /** Formats a number range as an array of parts. */
  formatRangeToParts(e, n) {
    if (typeof this.numberFormatter.formatRangeToParts == "function")
      return this.numberFormatter.formatRangeToParts(e, n);
    if (n < e)
      throw new RangeError("End date must be >= start date");
    let r = this.numberFormatter.formatToParts(e), i = this.numberFormatter.formatToParts(n);
    return [
      ...r.map((f) => ({
        ...f,
        source: "startRange"
      })),
      {
        type: "literal",
        value: " – ",
        source: "shared"
      },
      ...i.map((f) => ({
        ...f,
        source: "endRange"
      }))
    ];
  }
  /** Returns the resolved formatting options based on the values passed to the constructor. */
  resolvedOptions() {
    let e = this.numberFormatter.resolvedOptions();
    return !hl && this.options.signDisplay != null && (e = {
      ...e,
      signDisplay: this.options.signDisplay
    }), !js && this.options.style === "unit" && (e = {
      ...e,
      style: "unit",
      unit: this.options.unit,
      unitDisplay: this.options.unitDisplay
    }), e;
  }
  constructor(e, n = {}) {
    this.numberFormatter = Sk(e, n), this.options = n;
  }
}
function Sk(t, e = {}) {
  let { numberingSystem: n } = e;
  if (n && t.includes("-nu-") && (t.includes("-u-") || (t += "-u-"), t += `-nu-${n}`), e.style === "unit" && !js) {
    var r;
    let { unit: g, unitDisplay: l = "short" } = e;
    if (!g)
      throw new Error('unit option must be provided with style: "unit"');
    if (!(!((r = ov[g]) === null || r === void 0) && r[l]))
      throw new Error(`Unsupported unit ${g} with unitDisplay = ${l}`);
    e = {
      ...e,
      style: "decimal"
    };
  }
  let i = t + (e ? Object.entries(e).sort((g, l) => g[0] < l[0] ? -1 : 1).join() : "");
  if (Qo.has(i))
    return Qo.get(i);
  let f = new Intl.NumberFormat(t, e);
  return Qo.set(i, f), f;
}
function Tk(t, e, n) {
  if (e === "auto")
    return t.format(n);
  if (e === "never")
    return t.format(Math.abs(n));
  {
    let r = !1;
    if (e === "always" ? r = n > 0 || Object.is(n, 0) : e === "exceptZero" && (Object.is(n, -0) || Object.is(n, 0) ? n = Math.abs(n) : r = n > 0), r) {
      let i = t.format(-n), f = t.format(n), g = i.replace(f, "").replace(/\u200e|\u061C/, "");
      return [
        ...g
      ].length !== 1 && console.warn("@react-aria/i18n polyfill for NumberFormat signDisplay: Unsupported case"), i.replace(f, "!!!").replace(g, "+").replace("!!!", f);
    } else
      return t.format(n);
  }
}
function Ek(t) {
  return t && t.__esModule ? t.default : t;
}
let ea = new br(Ek(sv));
function kk(t) {
  let e = dn.parse(t) || pn.parse(t) || gn.parse(t);
  if (e)
    return e;
  throw new Error("Invalid color value: " + t);
}
const ef = 0.68, Ok = 0.85, tf = 0.55, nf = 1e-3, ta = [
  [
    0,
    "pink"
  ],
  [
    15,
    "red"
  ],
  [
    48,
    "orange"
  ],
  [
    94,
    "yellow"
  ],
  [
    135,
    "green"
  ],
  [
    175,
    "cyan"
  ],
  [
    264,
    "blue"
  ],
  [
    284,
    "purple"
  ],
  [
    320,
    "magenta"
  ],
  [
    349,
    "pink"
  ]
];
class Oc {
  toHexInt() {
    return this.toFormat("rgb").toHexInt();
  }
  getChannelValue(e) {
    if (e in this)
      return this[e];
    throw new Error("Unsupported color channel: " + e);
  }
  withChannelValue(e, n) {
    if (e in this) {
      let r = this.clone();
      return r[e] = n, r;
    }
    throw new Error("Unsupported color channel: " + e);
  }
  getChannelName(e, n) {
    return (br.getGlobalDictionaryForPackage("@react-stately/color") || ea).getStringForLocale(e, n);
  }
  getColorSpaceAxes(e) {
    let { xChannel: n, yChannel: r } = e, i = n || this.getColorChannels().find((l) => l !== r), f = r || this.getColorChannels().find((l) => l !== i), g = this.getColorChannels().find((l) => l !== i && l !== f);
    return {
      xChannel: i,
      yChannel: f,
      zChannel: g
    };
  }
  getColorName(e) {
    let [n, r, i] = rf(this), f = br.getGlobalDictionaryForPackage("@react-stately/color") || ea;
    if (n > 0.999)
      return f.getStringForLocale("white", e);
    if (n < 1e-3)
      return f.getStringForLocale("black", e);
    let g;
    [g, n] = this.getOklchHue(n, r, i, e);
    let l = "", s = "";
    r <= 0.1 && r >= nf ? n >= 0.7 ? s = "pale" : s = "grayish" : r >= 0.15 && (s = "vibrant"), n < 0.3 ? l = "very dark" : n < tf ? l = "dark" : n < 0.7 || (n < 0.85 ? l = "light" : l = "very light"), s && (s = f.getStringForLocale(s, e)), l && (l = f.getStringForLocale(l, e));
    let a = this.getChannelValue("alpha"), h = new _k(e, f);
    if (a < 1) {
      let o = new ji(e, {
        style: "percent"
      }).format(1 - a);
      return h.format("transparentColorName", {
        lightness: l,
        chroma: s,
        hue: g,
        percentTransparent: o
      }).replace(/\s+/g, " ").trim();
    } else
      return h.format("colorName", {
        lightness: l,
        chroma: s,
        hue: g
      }).replace(/\s+/g, " ").trim();
  }
  getOklchHue(e, n, r, i) {
    let f = br.getGlobalDictionaryForPackage("@react-stately/color") || ea;
    if (n < nf)
      return [
        f.getStringForLocale("gray", i),
        e
      ];
    for (let g = 0; g < ta.length; g++) {
      let [l, s] = ta[g], [a, h] = ta[g + 1] || [
        360,
        "pink"
      ];
      if (r >= l && r < a)
        return s === "orange" && (e < ef ? s = "brown" : e = e - ef + tf), r > l + (a - l) / 2 && s !== h ? s = `${s} ${h}` : s === "yellow" && e < Ok && (s = "yellow green"), [
          f.getStringForLocale(s, i).toLocaleLowerCase(i),
          e
        ];
    }
    throw new Error("Unexpected hue");
  }
  getHueName(e) {
    let [n, r, i] = rf(this), [f] = this.getOklchHue(n, r, i, e);
    return f;
  }
}
class dn extends Oc {
  static parse(e) {
    let n = [];
    if (/^#[\da-f]+$/i.test(e) && [
      4,
      5,
      7,
      9
    ].includes(e.length)) {
      const f = (e.length < 6 ? e.replace(/[^#]/gi, "$&$&") : e).slice(1).split("");
      for (; f.length > 0; )
        n.push(parseInt(f.splice(0, 2).join(""), 16));
      n[3] = n[3] !== void 0 ? n[3] / 255 : void 0;
    }
    const r = e.match(/^rgba?\((.*)\)$/);
    r != null && r[1] && (n = r[1].split(",").map((f) => Number(f.trim())), n = n.map((f, g) => Nn(f, 0, g < 3 ? 255 : 1)));
    var i;
    return n.length < 3 ? void 0 : new dn(n[0], n[1], n[2], (i = n[3]) !== null && i !== void 0 ? i : 1);
  }
  toString(e = "css") {
    switch (e) {
      case "hex":
        return "#" + (this.red.toString(16).padStart(2, "0") + this.green.toString(16).padStart(2, "0") + this.blue.toString(16).padStart(2, "0")).toUpperCase();
      case "hexa":
        return "#" + (this.red.toString(16).padStart(2, "0") + this.green.toString(16).padStart(2, "0") + this.blue.toString(16).padStart(2, "0") + Math.round(this.alpha * 255).toString(16).padStart(2, "0")).toUpperCase();
      case "rgb":
        return `rgb(${this.red}, ${this.green}, ${this.blue})`;
      case "css":
      case "rgba":
        return `rgba(${this.red}, ${this.green}, ${this.blue}, ${this.alpha})`;
      default:
        return this.toFormat(e).toString(e);
    }
  }
  toFormat(e) {
    switch (e) {
      case "hex":
      case "hexa":
      case "rgb":
      case "rgba":
        return this;
      case "hsb":
      case "hsba":
        return this.toHSB();
      case "hsl":
      case "hsla":
        return this.toHSL();
      default:
        throw new Error("Unsupported color conversion: rgb -> " + e);
    }
  }
  toHexInt() {
    return this.red << 16 | this.green << 8 | this.blue;
  }
  /**
  * Converts an RGB color value to HSB.
  * Conversion formula adapted from https://en.wikipedia.org/wiki/HSL_and_HSV#From_RGB.
  * @returns An HSBColor object.
  */
  toHSB() {
    const e = this.red / 255, n = this.green / 255, r = this.blue / 255, i = Math.min(e, n, r), f = Math.max(e, n, r), g = f - i, l = f === 0 ? 0 : g / f;
    let s = 0;
    if (g !== 0) {
      switch (f) {
        case e:
          s = (n - r) / g + (n < r ? 6 : 0);
          break;
        case n:
          s = (r - e) / g + 2;
          break;
        case r:
          s = (e - n) / g + 4;
          break;
      }
      s /= 6;
    }
    return new pn(Xe(s * 360, 2), Xe(l * 100, 2), Xe(f * 100, 2), this.alpha);
  }
  /**
  * Converts an RGB color value to HSL.
  * Conversion formula adapted from https://en.wikipedia.org/wiki/HSL_and_HSV#From_RGB.
  * @returns An HSLColor object.
  */
  toHSL() {
    const e = this.red / 255, n = this.green / 255, r = this.blue / 255, i = Math.min(e, n, r), f = Math.max(e, n, r), g = (f + i) / 2, l = f - i;
    let s, a;
    if (l === 0)
      s = a = 0;
    else {
      switch (a = l / (g < 0.5 ? f + i : 2 - f - i), f) {
        case e:
          s = (n - r) / l + (n < r ? 6 : 0);
          break;
        case n:
          s = (r - e) / l + 2;
          break;
        case r:
          s = (e - n) / l + 4;
          break;
      }
      s /= 6;
    }
    return new gn(Xe(s * 360, 2), Xe(a * 100, 2), Xe(g * 100, 2), this.alpha);
  }
  clone() {
    return new dn(this.red, this.green, this.blue, this.alpha);
  }
  getChannelRange(e) {
    switch (e) {
      case "red":
      case "green":
      case "blue":
        return {
          minValue: 0,
          maxValue: 255,
          step: 1,
          pageSize: 17
        };
      case "alpha":
        return {
          minValue: 0,
          maxValue: 1,
          step: 0.01,
          pageSize: 0.1
        };
      default:
        throw new Error("Unknown color channel: " + e);
    }
  }
  getChannelFormatOptions(e) {
    switch (e) {
      case "red":
      case "green":
      case "blue":
        return {
          style: "decimal"
        };
      case "alpha":
        return {
          style: "percent"
        };
      default:
        throw new Error("Unknown color channel: " + e);
    }
  }
  formatChannelValue(e, n) {
    let r = this.getChannelFormatOptions(e), i = this.getChannelValue(e);
    return new ji(n, r).format(i);
  }
  getColorSpace() {
    return "rgb";
  }
  getColorChannels() {
    return dn.colorChannels;
  }
  constructor(e, n, r, i) {
    super(), this.red = e, this.green = n, this.blue = r, this.alpha = i;
  }
}
dn.colorChannels = [
  "red",
  "green",
  "blue"
];
const Dk = /hsb\(([-+]?\d+(?:.\d+)?\s*,\s*[-+]?\d+(?:.\d+)?%\s*,\s*[-+]?\d+(?:.\d+)?%)\)|hsba\(([-+]?\d+(?:.\d+)?\s*,\s*[-+]?\d+(?:.\d+)?%\s*,\s*[-+]?\d+(?:.\d+)?%\s*,\s*[-+]?\d(.\d+)?)\)/;
class pn extends Oc {
  static parse(e) {
    let n;
    if (n = e.match(Dk)) {
      var r;
      const [i, f, g, l] = ((r = n[1]) !== null && r !== void 0 ? r : n[2]).split(",").map((s) => Number(s.trim().replace("%", "")));
      return new pn(av(i, 360), Nn(f, 0, 100), Nn(g, 0, 100), Nn(l ?? 1, 0, 1));
    }
  }
  toString(e = "css") {
    switch (e) {
      case "css":
        return this.toHSL().toString("css");
      case "hex":
        return this.toRGB().toString("hex");
      case "hexa":
        return this.toRGB().toString("hexa");
      case "hsb":
        return `hsb(${this.hue}, ${Xe(this.saturation, 2)}%, ${Xe(this.brightness, 2)}%)`;
      case "hsba":
        return `hsba(${this.hue}, ${Xe(this.saturation, 2)}%, ${Xe(this.brightness, 2)}%, ${this.alpha})`;
      default:
        return this.toFormat(e).toString(e);
    }
  }
  toFormat(e) {
    switch (e) {
      case "hsb":
      case "hsba":
        return this;
      case "hsl":
      case "hsla":
        return this.toHSL();
      case "rgb":
      case "rgba":
        return this.toRGB();
      default:
        throw new Error("Unsupported color conversion: hsb -> " + e);
    }
  }
  /**
  * Converts a HSB color to HSL.
  * Conversion formula adapted from https://en.wikipedia.org/wiki/HSL_and_HSV#HSV_to_HSL.
  * @returns An HSLColor object.
  */
  toHSL() {
    let e = this.saturation / 100, n = this.brightness / 100, r = n * (1 - e / 2);
    return e = r === 0 || r === 1 ? 0 : (n - r) / Math.min(r, 1 - r), new gn(Xe(this.hue, 2), Xe(e * 100, 2), Xe(r * 100, 2), this.alpha);
  }
  /**
  * Converts a HSV color value to RGB.
  * Conversion formula adapted from https://en.wikipedia.org/wiki/HSL_and_HSV#HSV_to_RGB_alternative.
  * @returns An RGBColor object.
  */
  toRGB() {
    let e = this.hue, n = this.saturation / 100, r = this.brightness / 100, i = (f, g = (f + e / 60) % 6) => r - n * r * Math.max(Math.min(g, 4 - g, 1), 0);
    return new dn(Math.round(i(5) * 255), Math.round(i(3) * 255), Math.round(i(1) * 255), this.alpha);
  }
  clone() {
    return new pn(this.hue, this.saturation, this.brightness, this.alpha);
  }
  getChannelRange(e) {
    switch (e) {
      case "hue":
        return {
          minValue: 0,
          maxValue: 360,
          step: 1,
          pageSize: 15
        };
      case "saturation":
      case "brightness":
        return {
          minValue: 0,
          maxValue: 100,
          step: 1,
          pageSize: 10
        };
      case "alpha":
        return {
          minValue: 0,
          maxValue: 1,
          step: 0.01,
          pageSize: 0.1
        };
      default:
        throw new Error("Unknown color channel: " + e);
    }
  }
  getChannelFormatOptions(e) {
    switch (e) {
      case "hue":
        return {
          style: "unit",
          unit: "degree",
          unitDisplay: "narrow"
        };
      case "saturation":
      case "brightness":
      case "alpha":
        return {
          style: "percent"
        };
      default:
        throw new Error("Unknown color channel: " + e);
    }
  }
  formatChannelValue(e, n) {
    let r = this.getChannelFormatOptions(e), i = this.getChannelValue(e);
    return (e === "saturation" || e === "brightness") && (i /= 100), new ji(n, r).format(i);
  }
  getColorSpace() {
    return "hsb";
  }
  getColorChannels() {
    return pn.colorChannels;
  }
  constructor(e, n, r, i) {
    super(), this.hue = e, this.saturation = n, this.brightness = r, this.alpha = i;
  }
}
pn.colorChannels = [
  "hue",
  "saturation",
  "brightness"
];
const Ak = /hsl\(([-+]?\d+(?:.\d+)?\s*,\s*[-+]?\d+(?:.\d+)?%\s*,\s*[-+]?\d+(?:.\d+)?%)\)|hsla\(([-+]?\d+(?:.\d+)?\s*,\s*[-+]?\d+(?:.\d+)?%\s*,\s*[-+]?\d+(?:.\d+)?%\s*,\s*[-+]?\d(.\d+)?)\)/;
function av(t, e) {
  return (t % e + e) % e;
}
class gn extends Oc {
  static parse(e) {
    let n;
    if (n = e.match(Ak)) {
      var r;
      const [i, f, g, l] = ((r = n[1]) !== null && r !== void 0 ? r : n[2]).split(",").map((s) => Number(s.trim().replace("%", "")));
      return new gn(av(i, 360), Nn(f, 0, 100), Nn(g, 0, 100), Nn(l ?? 1, 0, 1));
    }
  }
  toString(e = "css") {
    switch (e) {
      case "hex":
        return this.toRGB().toString("hex");
      case "hexa":
        return this.toRGB().toString("hexa");
      case "hsl":
        return `hsl(${this.hue}, ${Xe(this.saturation, 2)}%, ${Xe(this.lightness, 2)}%)`;
      case "css":
      case "hsla":
        return `hsla(${this.hue}, ${Xe(this.saturation, 2)}%, ${Xe(this.lightness, 2)}%, ${this.alpha})`;
      default:
        return this.toFormat(e).toString(e);
    }
  }
  toFormat(e) {
    switch (e) {
      case "hsl":
      case "hsla":
        return this;
      case "hsb":
      case "hsba":
        return this.toHSB();
      case "rgb":
      case "rgba":
        return this.toRGB();
      default:
        throw new Error("Unsupported color conversion: hsl -> " + e);
    }
  }
  /**
  * Converts a HSL color to HSB.
  * Conversion formula adapted from https://en.wikipedia.org/wiki/HSL_and_HSV#HSL_to_HSV.
  * @returns An HSBColor object.
  */
  toHSB() {
    let e = this.saturation / 100, n = this.lightness / 100, r = n + e * Math.min(n, 1 - n);
    return e = r === 0 ? 0 : 2 * (1 - n / r), new pn(Xe(this.hue, 2), Xe(e * 100, 2), Xe(r * 100, 2), this.alpha);
  }
  /**
  * Converts a HSL color to RGB.
  * Conversion formula adapted from https://en.wikipedia.org/wiki/HSL_and_HSV#HSL_to_RGB_alternative.
  * @returns An RGBColor object.
  */
  toRGB() {
    let e = this.hue, n = this.saturation / 100, r = this.lightness / 100, i = n * Math.min(r, 1 - r), f = (g, l = (g + e / 30) % 12) => r - i * Math.max(Math.min(l - 3, 9 - l, 1), -1);
    return new dn(Math.round(f(0) * 255), Math.round(f(8) * 255), Math.round(f(4) * 255), this.alpha);
  }
  clone() {
    return new gn(this.hue, this.saturation, this.lightness, this.alpha);
  }
  getChannelRange(e) {
    switch (e) {
      case "hue":
        return {
          minValue: 0,
          maxValue: 360,
          step: 1,
          pageSize: 15
        };
      case "saturation":
      case "lightness":
        return {
          minValue: 0,
          maxValue: 100,
          step: 1,
          pageSize: 10
        };
      case "alpha":
        return {
          minValue: 0,
          maxValue: 1,
          step: 0.01,
          pageSize: 0.1
        };
      default:
        throw new Error("Unknown color channel: " + e);
    }
  }
  getChannelFormatOptions(e) {
    switch (e) {
      case "hue":
        return {
          style: "unit",
          unit: "degree",
          unitDisplay: "narrow"
        };
      case "saturation":
      case "lightness":
      case "alpha":
        return {
          style: "percent"
        };
      default:
        throw new Error("Unknown color channel: " + e);
    }
  }
  formatChannelValue(e, n) {
    let r = this.getChannelFormatOptions(e), i = this.getChannelValue(e);
    return (e === "saturation" || e === "lightness") && (i /= 100), new ji(n, r).format(i);
  }
  getColorSpace() {
    return "hsl";
  }
  getColorChannels() {
    return gn.colorChannels;
  }
  constructor(e, n, r, i) {
    super(), this.hue = e, this.saturation = n, this.lightness = r, this.alpha = i;
  }
}
gn.colorChannels = [
  "hue",
  "saturation",
  "lightness"
];
function rf(t) {
  let e = t.toFormat("rgb"), n = e.getChannelValue("red") / 255, r = e.getChannelValue("green") / 255, i = e.getChannelValue("blue") / 255;
  [n, r, i] = Mk(n, r, i);
  let [f, g, l] = Fk(n, r, i), [s, a, h] = Ik(f, g, l);
  return Pk(s, a, h);
}
function Pk(t, e, n) {
  var r = Math.atan2(n, e) * 180 / Math.PI;
  return [
    t,
    Math.sqrt(e ** 2 + n ** 2),
    r >= 0 ? r : r + 360
    // Hue, in degrees [0 to 360)
  ];
}
function Mk(t, e, n) {
  return [
    na(t),
    na(e),
    na(n)
  ];
}
function na(t) {
  let e = t < 0 ? -1 : 1, n = Math.abs(t);
  return n <= 0.04045 ? t / 12.92 : e * Math.pow((n + 0.055) / 1.055, 2.4);
}
function Fk(t, e, n) {
  return fl([
    0.4123907992659595,
    0.35758433938387796,
    0.1804807884018343,
    0.21263900587151036,
    0.7151686787677559,
    0.07219231536073371,
    0.01933081871559185,
    0.11919477979462599,
    0.9505321522496606
  ], t, e, n);
}
function Ik(t, e, n) {
  const r = [
    0.819022437996703,
    0.3619062600528904,
    -0.1288737815209879,
    0.0329836539323885,
    0.9292868615863434,
    0.0361446663506424,
    0.0481771893596242,
    0.2642395317527308,
    0.6335478284694309
  ], i = [
    0.210454268309314,
    0.7936177747023054,
    -0.0040720430116193,
    1.9779985324311684,
    -2.42859224204858,
    0.450593709617411,
    0.0259040424655478,
    0.7827717124575296,
    -0.8086757549230774
  ];
  let [f, g, l] = fl(r, t, e, n);
  return fl(i, Math.cbrt(f), Math.cbrt(g), Math.cbrt(l));
}
function fl(t, e, n, r) {
  let i = t[0] * e + t[1] * n + t[2] * r, f = t[3] * e + t[4] * n + t[5] * r, g = t[6] * e + t[7] * n + t[8] * r;
  return [
    i,
    f,
    g
  ];
}
const Rk = [
  {
    color: "rgb(255, 255, 255)",
    name: oe("White")
  },
  {
    color: "rgb(239,245,245)",
    name: oe("Solitude")
  },
  {
    color: "rgb(245,213,174)",
    name: oe("Wheat")
  },
  {
    color: "rgb(253,227,167)",
    name: oe("Cape Honey")
  },
  {
    color: "rgb(242,222,186)",
    name: oe("Milk punch")
  },
  {
    color: "rgb(97,118,75)",
    name: oe("Dingy"),
    foreground: "rgb(255, 255, 255)"
  },
  {
    color: "rgb(4, 147, 114)",
    name: oe("Aquamarine"),
    foreground: "rgb(255, 255, 255)"
  },
  {
    color: "rgb(222,245,229)",
    name: oe("Cosmic Latte")
  },
  {
    color: "rgb(233,119,119)",
    name: oe("Geraldine"),
    foreground: "rgb(90,14,14)"
  },
  {
    color: "rgb(247,164,164)",
    name: oe("Sundown")
  },
  {
    color: "rgb(30,139,195)",
    name: oe("Pelorous"),
    foreground: "rgb(255, 255, 255)"
  },
  {
    color: "rgb(142,68,173)",
    name: oe("Deep Lilac"),
    foreground: "rgb(255, 255, 255)"
  },
  {
    color: "rgb(108,74,182)",
    name: oe("Blue marguerite"),
    foreground: "rgb(255, 255, 255)"
  },
  {
    color: "rgb(139,126,116)",
    name: oe("Americano"),
    foreground: "rgb(255, 255, 255)"
  },
  {
    color: "rgb(0,0,0)",
    name: oe("Black"),
    foreground: "rgb(255, 255, 255)"
  },
  {
    color: "rgb(64,66,88)",
    name: oe("Blue zodiac"),
    foreground: "rgb(255, 255, 255)"
  },
  {
    color: "rgb(101,100,124)",
    name: oe("Comet"),
    foreground: "rgb(255, 255, 255)"
  }
];
function Lk({ onChange: t, value: e, colors: n }) {
  const r = n.map((i) => {
    const f = e === i;
    return /* @__PURE__ */ x(
      rn,
      {
        onClick: () => {
          t == null || t(i);
        },
        className: ae(
          "relative block flex-shrink-0 w-26 h-26 border rounded",
          f && "shadow-md"
        ),
        style: { backgroundColor: i },
        children: f && /* @__PURE__ */ x("span", { className: "absolute inset-0 m-auto rounded-full w-8 h-8 bg-white" })
      },
      i
    );
  });
  return /* @__PURE__ */ x("div", { className: "flex flex-wrap gap-6", children: r });
}
const Bk = Rk.map(({ color: t }) => t).slice(0, 14);
function zk({
  defaultValue: t,
  onChange: e,
  colorPresets: n,
  showInput: r
}) {
  const [i, f] = De(t), g = n || Bk, l = tr({ size: "sm" });
  return /* @__PURE__ */ ie("div", { children: [
    /* @__PURE__ */ x(
      gk,
      {
        className: "!w-auto",
        color: i,
        onChange: (s) => {
          e == null || e(s), f(s);
        }
      }
    ),
    /* @__PURE__ */ ie("div", { className: "px-12 py-20", children: [
      g && /* @__PURE__ */ x(
        Lk,
        {
          colors: g,
          onChange: (s) => {
            if (s) {
              const a = kk(s).toString("hex");
              e == null || e(a), f(a);
            }
          },
          value: i
        }
      ),
      r && /* @__PURE__ */ x("div", { className: "pt-20", children: /* @__PURE__ */ x(
        bk,
        {
          autoComplete: "off",
          role: "textbox",
          autoCorrect: "off",
          spellCheck: "false",
          required: !0,
          "aria-label": "Hex color",
          prefixed: !0,
          className: l.input,
          color: i,
          onChange: (s) => {
            e == null || e(s), f(s);
          }
        }
      ) })
    ] })
  ] });
}
const _o = ce.createContext(null);
function lv() {
  return ze(_o);
}
function En() {
  const { lines: t, localeCode: e } = mo();
  return { trans: Oe(
    (r) => Nk({ ...r, lines: t, localeCode: e }),
    [t, e]
  ) };
}
const Nk = Ii(
  (t) => {
    let { lines: e, message: n, values: r, localeCode: i } = t;
    return n == null ? "" : (n = (e == null ? void 0 : e[n]) || (e == null ? void 0 : e[n.toLowerCase()]) || n, r && (n = tm(i, t), Object.entries(r).forEach(([f, g]) => {
      n = n.replace(`:${f}`, `${g}`);
    })), n);
  },
  { equals: nl, callTimeout: 0 }
);
function jk({ onDismiss: t }) {
  const { trans: e } = En(), n = () => {
    t && t();
  };
  return /* @__PURE__ */ x(
    "button",
    {
      className: "sr-only",
      "aria-label": e(oe("Dismiss")),
      tabIndex: -1,
      onClick: n
    }
  );
}
function So(t) {
  const {
    type: e = "modal",
    dialogProps: n,
    ...r
  } = ze(_o), {
    children: i,
    className: f,
    size: g = "md",
    background: l,
    radius: s = "rounded",
    maxWidth: a = "max-w-dialog",
    ...h
  } = t;
  let o = null;
  (e === "popover" || e === "tray") && (o = /* @__PURE__ */ x(jk, { onDismiss: r.close }));
  const u = g === "fullscreenTakeover" || e === "tray", c = ae(
    "mx-auto pointer-events-auto outline-none flex flex-col overflow-hidden",
    l || "bg",
    e !== "tray" && $k(g),
    e === "tray" && "rounded-t border-b-bg",
    g !== "fullscreenTakeover" && "shadow-2xl border max-h-dialog",
    !u && `${s} ${a}`,
    f
  );
  return /* @__PURE__ */ ie(
    "div",
    {
      ...nn({ role: "dialog", tabIndex: -1 }, n, h),
      style: { ...t.style, "--be-dialog-padding": "24px" },
      "aria-modal": !0,
      className: c,
      children: [
        mn.toArray(i).map((d) => Jt(d) ? ut(d, {
          size: d.props.size ?? g
        }) : d),
        o
      ]
    }
  );
}
function $k(t) {
  switch (t) {
    case "2xs":
      return "w-256";
    case "xs":
      return "w-320";
    case "sm":
      return "w-384";
    case "md":
      return "w-440";
    case "lg":
      return "w-620";
    case "xl":
      return "w-780";
    case "2xl":
      return "w-850";
    case "fullscreen":
      return "w-1280";
    case "fullscreenTakeover":
      return "w-full h-full";
    default:
      return t;
  }
}
const Dc = be(
  /* @__PURE__ */ x("path", { d: "M7.41 8.59 12 13.17l4.59-4.58L18 10l-6 6-6-6 1.41-1.41z" }),
  "KeyboardArrowDownOutlined"
), Vk = Je(
  ({
    children: t,
    autoFocus: e = !1,
    restoreFocus: n = !0,
    isDismissable: r = !0,
    isOpen: i = !1,
    placement: f = "center",
    onClose: g
  }, l) => {
    const s = yc(), a = er(l);
    return /* @__PURE__ */ ie(
      "div",
      {
        className: "fixed inset-0 isolate z-modal",
        style: s,
        onKeyDown: (h) => {
          h.key === "Escape" && (h.stopPropagation(), h.preventDefault(), g());
        },
        children: [
          /* @__PURE__ */ x(
            wc,
            {
              onClick: () => {
                r && g();
              }
            },
            "modal-underlay"
          ),
          /* @__PURE__ */ x(
            ot.div,
            {
              ref: a,
              className: ae(
                "pointer-events-none absolute inset-0 z-20 flex h-full w-full",
                f === "center" && "items-center justify-center",
                f === "top" && "items-start justify-center pt-40"
              ),
              role: "presentation",
              initial: { opacity: 0, scale: f === "top" ? 1 : 0.7 },
              animate: { opacity: 1, scale: 1 },
              exit: { opacity: 0, scale: 1 },
              transition: { duration: 0.1 },
              children: /* @__PURE__ */ x(po, { restoreFocus: n, autoFocus: e, contain: !0, children: t })
            }
          )
        ]
      }
    );
  }
);
function Hk({ x: t, y: e }, n) {
  return {
    getBoundingClientRect() {
      return {
        x: t,
        y: e,
        width: 0,
        height: 0,
        top: e,
        right: t,
        bottom: e,
        left: t
      };
    },
    contextElement: n
  };
}
function Wk(t) {
  const e = de(t);
  return Se(() => {
    e.current = t;
  }), He(() => (...n) => {
    var r;
    return (r = e.current) == null ? void 0 : r.call(e, ...n);
  }, []);
}
function To(t) {
  let {
    children: e,
    type: n,
    disableInitialTransition: r,
    isDismissable: i = !0,
    moveFocusToDialog: f = !0,
    returnFocusToTrigger: g = !0,
    triggerOnHover: l = !1,
    triggerOnContextMenu: s = !1,
    usePortal: a = !0,
    mobileType: h,
    alwaysReturnCurrentValueOnClose: o
  } = t;
  const u = de(null), c = s && !t.triggerRef ? u : t.triggerRef, d = de(t.value), [m, p] = yn(
    t.isOpen,
    t.defaultIsOpen,
    t.onOpenChange
  ), [v, b] = yn(
    t.value,
    t.defaultValue,
    t.onValueChange
  );
  vo() && n === "popover" && (n = h || "modal");
  const w = de(null), { x: C, y: _, reference: S, strategy: k, refs: I } = gc({
    ...t,
    disablePositioning: n === "modal"
  }), L = n === "popover" ? {
    position: k,
    top: _ ?? "",
    left: C ?? ""
  } : {}, j = Pt(), G = `${j}-label`, te = `${j}-description`, W = `${j}-form`, q = Wk(t.onClose), K = Oe(
    (H) => {
      typeof H > "u" && o && (H = v);
      const V = typeof H < "u" ? H : d.current;
      q == null || q(V, {
        initialValue: d.current,
        valueChanged: V !== d.current
      }), p(!1);
    },
    [q, p, v, o]
  ), ne = Oe(() => {
    p(!0), d.current = t.value;
  }, [t.value, p]);
  mt(() => {
    c != null && c.current && I.reference.current !== c.current && S(c.current);
  }, [S, c == null ? void 0 : c.current, I]);
  const re = He(() => ({
    "aria-labelledby": G,
    "aria-describedby": te
  }), [G, te]);
  let T;
  n === "modal" ? T = Vk : n === "tray" ? T = em : T = us;
  const P = He(() => ({
    dialogProps: re,
    type: n,
    labelId: G,
    descriptionId: te,
    isDismissable: i,
    close: K,
    value: v,
    initialValue: d.current,
    setValue: b,
    formId: W
  }), [
    K,
    te,
    re,
    W,
    G,
    n,
    i,
    v,
    b
  ]);
  l = l && n === "popover";
  const A = {
    onPointerEnter: ct((H) => {
      ne();
    }),
    onPointerLeave: ct((H) => {
      w.current = setTimeout(() => {
        K();
      }, 150);
    })
  }, M = {
    onPointerEnter: ct((H) => {
      w.current && clearTimeout(w.current);
    }),
    onPointerLeave: ct((H) => {
      K();
    })
  }, $ = {
    onContextMenu: ct((H) => {
      H.preventDefault(), u.current = Hk(
        { x: H.clientX, y: H.clientY },
        H.currentTarget
      ), ne();
    })
  }, D = {
    onClick: ct((H) => {
      H.stopPropagation(), m ? K() : ne();
    })
  }, { dialogTrigger: E, dialog: F } = Uk(e, P), N = /* @__PURE__ */ x(tn, { initial: !r, children: m && /* @__PURE__ */ x(_o.Provider, { value: P, children: /* @__PURE__ */ x(
    T,
    {
      ...l ? M : {},
      ref: I.setFloating,
      triggerRef: I.reference,
      style: L,
      restoreFocus: g,
      autoFocus: f,
      isOpen: m,
      onClose: K,
      isDismissable: i,
      isContextMenu: s,
      placement: t.placement,
      children: F
    }
  ) }) });
  return /* @__PURE__ */ ie(Xt, { children: [
    E && ut(
      E,
      nn(
        {
          // make sure ref specified on trigger element is not overwritten
          ...!c && !s ? { ref: S } : {},
          ...s ? {} : D,
          ...l ? A : {},
          ...s ? $ : {}
        },
        {
          ...E.props
        }
      )
    ),
    a ? Un && vl(N, Un) : N
  ] });
}
function Uk(t, e) {
  const n = Array.isArray(t) ? t : mn.toArray(t);
  let r = n.length === 2 ? n[1] : n[0];
  return r = typeof r == "function" ? r(e) : r, n.length === 2 ? {
    dialogTrigger: n[0],
    dialog: r
  } : { dialog: r };
}
function nr(t) {
  const { label: e, className: n, value: r, onChange: i, size: f, width: g = "w-max" } = t, l = ue((d) => {
    var m, p;
    return (p = (m = d.config.ui) == null ? void 0 : m.colorPresets) == null ? void 0 : p.items;
  }) || [], s = tr({ size: f }), [a, h] = De(r), [o, u] = De(!1), c = (d) => {
    h(d), i == null || i(d);
  };
  return /* @__PURE__ */ ie("div", { className: ae(n, g), children: [
    e && /* @__PURE__ */ x("span", { className: s.label, children: e }),
    /* @__PURE__ */ ie(To, { type: "popover", isOpen: o, onOpenChange: u, children: [
      /* @__PURE__ */ ie(
        rn,
        {
          className: ae(s.input, "inline-flex items-center"),
          "aria-label": t["aria-label"],
          children: [
            /* @__PURE__ */ x(
              "span",
              {
                className: "block flex-shrink-0 mr-5 border rounded h-2/4 aspect-square",
                style: { backgroundColor: a }
              }
            ),
            /* @__PURE__ */ x(Xk, { isActive: o, className: s.adornment })
          ]
        }
      ),
      /* @__PURE__ */ x(So, { size: "auto", children: /* @__PURE__ */ x(
        zk,
        {
          onChange: c,
          defaultValue: a,
          colorPresets: l
        }
      ) })
    ] })
  ] });
}
function Xk({ isActive: t, className: e }) {
  return /* @__PURE__ */ x(
    Dc,
    {
      size: "sm",
      className: `transition-transform ml-auto flex-shrink-0 ${t ? "rotate-180" : "rotate-0"} ${e}`
    }
  );
}
function Yk(t) {
  const {
    size: e = "md",
    inline: n,
    label: r,
    showValueLabel: i = !!r,
    className: f,
    width: g = "w-full",
    slider: l,
    children: s,
    trackColor: a = "primary",
    fillColor: h = "primary"
  } = t, {
    domProps: o,
    trackRef: u,
    getThumbPercent: c,
    getThumbValueLabel: d,
    labelId: m,
    groupId: p,
    thumbIds: v,
    isDisabled: b,
    numberFormatter: y,
    minValue: w,
    maxValue: C,
    step: _,
    values: S,
    getValueLabel: k
  } = l;
  let I = "", L = Math.max(
    [...y.format(w)].length,
    [...y.format(C)].length,
    [...y.format(_)].length
  );
  k ? I = k(S[0]) : S.length === 1 ? I = d(0) : S.length === 2 && (I = `${d(0)} – ${d(1)}`, L = 3 + 2 * Math.max(
    L,
    [...y.format(w)].length,
    [...y.format(C)].length
  ));
  const j = tr({
    size: e,
    disabled: b,
    labelDisplay: "flex"
  }), G = ae("touch-none", f, g, {
    "flex items-center": n
  });
  return /* @__PURE__ */ ie("div", { className: G, role: "group", id: p, children: [
    (r || i) && /* @__PURE__ */ ie("div", { className: ae(j.label, "select-none"), children: [
      r && /* @__PURE__ */ x(
        "label",
        {
          onClick: () => {
            var te;
            (te = document.getElementById(v[0])) == null || te.focus();
          },
          id: m,
          htmlFor: p,
          children: r
        }
      ),
      i && /* @__PURE__ */ x(
        "output",
        {
          htmlFor: v[0],
          className: "ml-auto text-right",
          "aria-live": "off",
          style: L ? {
            width: `${L}ch`,
            minWidth: `${L}ch`
          } : void 0,
          children: I
        }
      )
    ] }),
    /* @__PURE__ */ ie(
      "div",
      {
        ref: u,
        className: ae("relative", Gk(t)),
        ...o,
        role: "presentation",
        children: [
          /* @__PURE__ */ x(
            "div",
            {
              className: ae(
                "absolute inset-0 m-auto rounded",
                Kk(a, b),
                sf(e)
              )
            }
          ),
          /* @__PURE__ */ x(
            "div",
            {
              className: ae(
                "absolute inset-0 my-auto rounded",
                qk(h, b),
                sf(e)
              ),
              style: { width: `${Math.max(c(0) * 100, 0)}%` }
            }
          ),
          s
        ]
      }
    )
  ] });
}
function Gk({ size: t, wrapperHeight: e }) {
  if (e)
    return e;
  switch (t) {
    case "xs":
      return "h-14";
    case "sm":
      return "h-20";
    default:
      return "h-30";
  }
}
function sf(t) {
  switch (t) {
    case "xs":
      return "h-2";
    case "sm":
      return "h-3";
    default:
      return "h-4";
  }
}
function Kk(t, e) {
  switch (e && (t = "disabled"), t) {
    case "disabled":
      return "bg-slider-disabled/60";
    case "primary":
      return "bg-primary-light";
    case "neutral":
      return "bg-divider";
    default:
      return t;
  }
}
function qk(t, e) {
  switch (e && (t = "disabled"), t) {
    case "disabled":
      return "bg-slider-disabled";
    case "primary":
      return "bg-primary";
    default:
      return t;
  }
}
function cv(t = {}) {
  const { localeCode: e } = mo();
  return He(
    () => new ji(e, t),
    [e, t]
  );
}
function uv({
  minValue: t = 0,
  maxValue: e = 100,
  isDisabled: n = !1,
  step: r = 1,
  formatOptions: i,
  onChangeEnd: f,
  onPointerDown: g,
  label: l,
  getValueLabel: s,
  showThumbOnHoverOnly: a,
  thumbSize: h,
  onPointerMove: o,
  ...u
}) {
  const [c, d] = De(!1), m = cv(i), { addGlobalListener: p, removeGlobalListener: v } = tc(), b = de(null), [y, w] = yn(
    u.value ? u.value : void 0,
    u.defaultValue ?? [t],
    u.onChange
  ), C = de(null);
  C.current = y;
  const [_, S] = De(
    new Array(y.length).fill(!1)
  ), k = de(null);
  k.current = _;
  function I(z) {
    return m.format(z);
  }
  const L = (z) => {
    var Y;
    return ((Y = k.current) == null ? void 0 : Y[z]) || !1;
  }, j = (z) => I(y[z]), G = (z) => z === 0 ? t : y[z - 1], te = (z) => z === y.length - 1 ? e : y[z + 1], W = (z, Y) => {
    if (n || !D(z) || !C.current)
      return;
    const se = G(z), ve = te(z);
    Y = US(Y, se, ve, r), C.current = of(C.current, z, Y), w(C.current);
  }, q = (z, Y) => {
    var ve;
    if (n || !D(z))
      return;
    const se = (ve = k.current) == null ? void 0 : ve[z];
    k.current = of(
      k.current || [],
      z,
      Y
    ), S(k.current), f && se && !k.current.some(Boolean) && f(C.current || []);
  }, [K, ne] = De(
    void 0
  ), re = (z) => {
    const Y = Math.min(1, (z - t) / (e - t));
    return isNaN(Y) ? 0 : Y;
  }, T = (z) => re(C.current[z]), P = (z, Y) => {
    W(z, M(Y));
  }, A = (z) => Math.round((z - t) / r) * r + t, M = (z) => {
    const Y = z * (e - t) + t;
    return yi(A(Y), t, e);
  }, $ = de(
    new Array(y.length).fill(!0)
  ), D = (z) => $.current[z], E = (z, Y) => {
    $.current[z] = Y;
  }, F = de(null), N = de(void 0), H = (z) => {
    if (!(z.pointerType === "mouse" && (z.button !== 0 || z.altKey || z.ctrlKey || z.metaKey)) && (g == null || g(), b.current && !n && y.every((Y, se) => !_[se]))) {
      const Y = b.current.offsetWidth, se = b.current.getBoundingClientRect().left, pe = (z.clientX - se) / Y, Z = M(pe);
      let fe;
      const xe = y.findIndex((Ee) => Z - Ee < 0);
      if (xe === 0)
        fe = xe;
      else if (xe === -1)
        fe = y.length - 1;
      else {
        const Ee = y[xe - 1], Re = y[xe];
        Math.abs(Ee - Z) < Math.abs(Re - Z) ? fe = xe - 1 : fe = xe;
      }
      fe >= 0 && D(fe) ? (z.preventDefault(), F.current = fe, ne(fe), N.current = z.pointerId, q(F.current, !0), W(fe, Z), p(window, "pointerup", le, !1)) : F.current = null;
    }
  }, V = de(null), { domProps: J } = xo({
    onPointerDown: H,
    onMoveStart() {
      V.current = null;
    },
    onMove(z, Y) {
      var ve;
      const se = ((ve = b.current) == null ? void 0 : ve.offsetWidth) || 0;
      if (V.current == null && (V.current = T(F.current || 0) * se), V.current += Y, F.current != null && b.current) {
        const pe = yi(V.current / se, 0, 1);
        P(F.current, pe);
      }
    },
    onMoveEnd() {
      F.current != null && (q(F.current, !1), F.current = null);
    }
  }), ee = nn(J, {
    onPointerEnter: () => {
      d(!0);
    },
    onPointerLeave: () => {
      d(!1);
    },
    onPointerMove: (z) => {
      o == null || o(z);
    }
  }), le = (z) => {
    z.pointerId === N.current && (F.current != null && (q(F.current, !1), F.current = null), v(window, "pointerup", le, !1));
  }, U = Pt(), B = l ? `${U}-label` : void 0, X = `${U}-group`, Q = [...Array(y.length)].map((z, Y) => `${U}-thumb-${Y}`);
  return {
    domProps: ee,
    trackRef: b,
    isDisabled: n,
    step: r,
    values: y,
    minValue: t,
    maxValue: e,
    focusedThumb: K,
    labelId: B,
    groupId: X,
    thumbIds: Q,
    numberFormatter: m,
    getThumbPercent: T,
    getThumbMinValue: G,
    getThumbMaxValue: te,
    getThumbValueLabel: j,
    isThumbDragging: L,
    setThumbValue: W,
    updateDraggedThumbs: q,
    setThumbEditable: E,
    setFocusedThumb: ne,
    getValueLabel: s,
    isPointerOver: c,
    showThumbOnHoverOnly: a,
    thumbSize: h
  };
}
function of(t, e, n) {
  return t[e] === n ? t : [...t.slice(0, e), n, ...t.slice(e + 1)];
}
function Zk({
  index: t,
  slider: e,
  isDisabled: n,
  ariaLabel: r,
  inputRef: i,
  onBlur: f,
  fillColor: g = "primary"
}) {
  const l = er(i), { addGlobalListener: s, removeGlobalListener: a } = tc(), {
    step: h,
    values: o,
    focusedThumb: u,
    labelId: c,
    thumbIds: d,
    isDisabled: m,
    getThumbPercent: p,
    getThumbMinValue: v,
    getThumbMaxValue: b,
    getThumbValueLabel: y,
    setThumbValue: w,
    updateDraggedThumbs: C,
    isThumbDragging: _,
    setThumbEditable: S,
    setFocusedThumb: k,
    isPointerOver: I,
    showThumbOnHoverOnly: L,
    thumbSize: j = "w-18 h-18"
  } = e, G = _(t), te = o[t];
  S(t, !n);
  const W = n || m, q = Oe(() => {
    l.current && l.current.focus({ preventScroll: !0 });
  }, [l]), K = u === t;
  Se(() => {
    K && q();
  }, [K, q]);
  const ne = de(void 0), re = (P) => {
    P.pointerId === ne.current && (q(), C(t, !1), a(window, "pointerup", re, !1));
  }, T = ae(
    "outline-none rounded-full top-1/2 -translate-y-1/2 -translate-x-1/2 absolute inset-0 transition-button duration-200",
    j,
    !W && "shadow-md",
    Jk({ fillColor: g, isDisabled: W, isDragging: G }),
    // show thumb on hover and while dragging, otherwise "blur" event will fire on thumb and dragging will stop
    !L || L && G || I ? "visible" : "invisible"
  );
  return /* @__PURE__ */ x(
    "div",
    {
      role: "presentation",
      className: T,
      style: {
        left: `${Math.max(p(t) * 100, 0)}%`
      },
      onPointerDown: (P) => {
        P.button !== 0 || P.altKey || P.ctrlKey || P.metaKey || (q(), ne.current = P.pointerId, C(t, !0), s(window, "pointerup", re, !1));
      },
      children: /* @__PURE__ */ x(
        "input",
        {
          id: d[t],
          onKeyDown: ct(() => {
            C(t, !0);
          }),
          onKeyUp: ct(() => {
            C(t, !1);
          }),
          ref: l,
          tabIndex: W ? void 0 : 0,
          min: v(t),
          max: b(t),
          step: h,
          value: te,
          disabled: W,
          "aria-label": r,
          "aria-labelledby": c,
          "aria-orientation": "horizontal",
          "aria-valuetext": y(t),
          onFocus: () => {
            k(t);
          },
          onBlur: (P) => {
            k(void 0), C(t, !1), f == null || f(P);
          },
          onChange: (P) => {
            w(t, parseFloat(P.target.value));
          },
          type: "range",
          className: "sr-only"
        }
      )
    }
  );
}
function Jk({
  isDisabled: t,
  isDragging: e,
  fillColor: n
}) {
  return t ? "bg-slider-disabled cursor-default" : n && n !== "primary" ? n : ae(
    "hover:bg-primary-dark",
    e ? "bg-primary-dark" : "bg-primary"
  );
}
function rr({ inputRef: t, onBlur: e, ...n }) {
  const { onChange: r, onChangeEnd: i, value: f, defaultValue: g, ...l } = n, s = {
    ...l,
    // Normalize `value: number[]` to `value: number`
    value: f != null ? [f] : void 0,
    defaultValue: g != null ? [g] : void 0,
    onChange: (h) => {
      r == null || r(h[0]);
    },
    onChangeEnd: (h) => {
      i == null || i(h[0]);
    }
  }, a = uv(s);
  return /* @__PURE__ */ x(Yk, { ...s, slider: a, children: /* @__PURE__ */ x(
    Zk,
    {
      fillColor: n.fillColor,
      index: 0,
      slider: a,
      inputRef: t,
      onBlur: e
    }
  ) });
}
const hv = ce.forwardRef((t, e) => {
  let {
    value: n = 0,
    minValue: r = 0,
    maxValue: i = 100,
    size: f = "md",
    isIndeterminate: g = !1,
    className: l,
    position: s = "relative",
    trackColor: a,
    fillColor: h = "border-primary",
    ...o
  } = t;
  n = yi(n, r, i);
  const u = Qk(f), c = (n - r) / (i - r), d = cv({ style: "percent" });
  let m = "";
  !g && !m && (m = d.format(c));
  const p = {}, v = {};
  if (!g) {
    const b = (n - r) / (i - r) * 100;
    let y;
    b > 0 && b <= 50 ? (y = -180 + b / 50 * 180, p.transform = `rotate(${y}deg)`, v.transform = "rotate(-180deg)") : b > 50 && (y = -180 + (b - 50) / 50 * 180, p.transform = "rotate(0deg)", v.transform = `rotate(${y}deg)`);
  }
  return /* @__PURE__ */ ie(
    "div",
    {
      ...o,
      "aria-valuenow": g ? void 0 : n,
      "aria-valuemin": r,
      "aria-valuemax": i,
      "aria-valuetext": g ? void 0 : m,
      role: "progressbar",
      ref: e,
      className: ae(
        "progress-circle",
        s,
        u,
        g && "indeterminate",
        l
      ),
      children: [
        /* @__PURE__ */ x("div", { className: ae(u, a, "rounded-full border-4") }),
        /* @__PURE__ */ ie(
          "div",
          {
            className: ae(
              "fills absolute left-0 top-0 h-full w-full",
              g && "progress-circle-fills-animate"
            ),
            children: [
              /* @__PURE__ */ x(
                af,
                {
                  circleSize: u,
                  subMaskStyle: p,
                  isIndeterminate: g,
                  className: "rotate-180",
                  fillColor: h,
                  subMaskClassName: ae(
                    g && "progress-circle-fill-submask-1-animate"
                  )
                }
              ),
              /* @__PURE__ */ x(
                af,
                {
                  circleSize: u,
                  subMaskStyle: v,
                  isIndeterminate: g,
                  fillColor: h,
                  subMaskClassName: ae(
                    g && "progress-circle-fill-submask-2-animate"
                  )
                }
              )
            ]
          }
        )
      ]
    }
  );
});
function af({
  subMaskStyle: t,
  subMaskClassName: e,
  className: n,
  circleSize: r,
  isIndeterminate: i,
  fillColor: f
}) {
  return /* @__PURE__ */ x(
    "div",
    {
      className: ae(
        "absolute h-full w-1/2 origin-[100%] overflow-hidden",
        n
      ),
      children: /* @__PURE__ */ x(
        "div",
        {
          className: ae(
            "h-full w-full origin-[100%] rotate-180 overflow-hidden",
            !i && "transition-transform duration-100",
            e
          ),
          style: t,
          children: /* @__PURE__ */ x("div", { className: ae(r, f, "rounded-full border-4") })
        }
      )
    }
  );
}
function Qk(t) {
  switch (t) {
    case "xs":
      return "w-20 h-20";
    case "sm":
      return "w-24 h-24";
    case "md":
      return "w-32 h-32";
    case "lg":
      return "w-42 h-42";
    default:
      return t;
  }
}
function eO({ isLoading: t, icon: e }) {
  const n = de(null), { trans: r } = En(), [i, f] = De(!1), {
    state: { isOpen: g, inputValue: l }
  } = ac(), s = de(l);
  return Se(() => {
    t && !i ? (n.current === null && (n.current = setTimeout(() => {
      f(!0);
    }, 500)), l !== s.current && (clearTimeout(n.current), n.current = setTimeout(() => {
      f(!0);
    }, 500))) : t || (f(!1), clearTimeout(n.current), n.current = null), s.current = l;
  }, [t, i, l]), i && (g || t) ? /* @__PURE__ */ x(
    hv,
    {
      "aria-label": r({ message: "Loading" }),
      size: "sm",
      isIndeterminate: !0
    }
  ) : e || /* @__PURE__ */ x(Dc, {});
}
function tO(t, e) {
  const n = vo(), {
    hideCaret: r,
    placeholder: i = /* @__PURE__ */ x(ye, { message: "Select an option..." }),
    selectedValue: f,
    onItemSelected: g,
    onOpenChange: l,
    onInputValueChange: s,
    onSelectionChange: a,
    selectionMode: h,
    minWidth: o = "min-w-128",
    children: u,
    searchPlaceholder: c,
    showEmptyMessage: d,
    showSearchField: m,
    defaultInputValue: p,
    inputValue: v,
    isLoading: b,
    isAsync: y,
    valueClassName: w,
    floatingWidth: C = n ? "auto" : "matchTrigger",
    ..._
  } = t, S = Yg(
    {
      ...t,
      clearInputOnItemSelection: !0,
      showEmptyMessage: d || m,
      floatingWidth: C,
      selectionMode: "single",
      role: "listbox",
      virtualFocus: m
    },
    e
  ), {
    state: {
      selectedValues: k,
      isOpen: I,
      setIsOpen: L,
      activeIndex: j,
      setSelectedIndex: G,
      inputValue: te,
      setInputValue: W
    },
    collections: q,
    focusItem: K,
    listboxId: ne,
    reference: re,
    refs: T,
    listContent: P,
    onInputChange: A
  } = S, { fieldProps: M, inputProps: $ } = fm({
    ..._,
    focusRef: T.reference
  }), D = q.collection.get(k[0]), E = D ? /* @__PURE__ */ ie("span", { className: "flex items-center gap-10", children: [
    D.element.props.startIcon,
    /* @__PURE__ */ x(
      "span",
      {
        className: ae(
          "overflow-hidden overflow-ellipsis whitespace-nowrap",
          w
        ),
        children: D.element.props.children
      }
    )
  ] }) : /* @__PURE__ */ x("span", { className: "italic", children: i }), F = tr({
    ...t,
    endAdornment: !0
  }), {
    handleTriggerKeyDown: N,
    handleListboxKeyboardNavigation: H,
    handleListboxSearchFieldKeydown: V
  } = rm(S), { findMatchingItem: J } = im(), ee = (U) => {
    if (!I)
      return;
    const B = J(U, P, j);
    B != null && K("increment", B);
  }, le = (U) => {
    if (I)
      return;
    const B = J(U, P, j);
    B != null && G(B);
  };
  return /* @__PURE__ */ x(
    nm,
    {
      listbox: S,
      onKeyDownCapture: m ? void 0 : ee,
      onKeyDown: H,
      onClose: m ? () => W("") : void 0,
      isLoading: b,
      searchField: m && /* @__PURE__ */ x(
        Qt,
        {
          size: t.size === "xs" || t.size === "sm" ? "xs" : "sm",
          placeholder: c,
          startAdornment: /* @__PURE__ */ x(sm, {}),
          className: "flex-shrink-0 px-8 pb-8 pt-4",
          autoFocus: !0,
          "aria-expanded": I ? "true" : "false",
          "aria-haspopup": "listbox",
          "aria-controls": I ? ne : void 0,
          "aria-autocomplete": "list",
          autoComplete: "off",
          autoCorrect: "off",
          spellCheck: "false",
          value: te,
          onChange: A,
          onKeyDown: (U) => {
            V(U);
          }
        }
      ),
      children: /* @__PURE__ */ x(
        hm,
        {
          fieldClassNames: F,
          ...M,
          endAdornment: !r && /* @__PURE__ */ x(eO, { isLoading: b }),
          children: /* @__PURE__ */ x(
            "button",
            {
              ...$,
              type: "button",
              "data-selected-value": D == null ? void 0 : D.value,
              "aria-expanded": I ? "true" : "false",
              "aria-haspopup": "listbox",
              "aria-controls": I ? ne : void 0,
              ref: re,
              onKeyDown: N,
              onKeyDownCapture: m ? void 0 : le,
              disabled: _.disabled,
              onClick: () => {
                L(!I);
              },
              className: ae(
                F.input,
                !M.unstyled && o
              ),
              children: E
            }
          )
        }
      )
    }
  );
}
const Ac = ce.forwardRef(tO);
function nO() {
  const t = ue((g) => g.filter.selected);
  if (!t)
    return null;
  const e = R().filter.getByName(t).options, n = (g, l) => {
    var s;
    (s = R().filter) == null || s.applyValue(t, g, l), O().setDirty(!0);
  }, r = R().canvas.getMainImage().filters, i = R().filter.findFilterIndex(t, r), f = r == null ? void 0 : r[i];
  if (e) {
    const g = Object.entries(e).map(([l, s]) => {
      let a;
      const h = f ? f[l] : s.current;
      return s.type === "slider" ? a = /* @__PURE__ */ x(
        rr,
        {
          label: /* @__PURE__ */ x("span", { className: "capitalize", children: /* @__PURE__ */ x(ye, { ...Go[l] }) }),
          minValue: s.min,
          maxValue: s.max,
          step: s.step,
          defaultValue: h,
          formatOptions: { style: "percent" },
          size: "sm",
          onChange: (o) => {
            n(l, o);
          }
        }
      ) : s.type === "colorPicker" ? a = /* @__PURE__ */ x(
        nr,
        {
          label: /* @__PURE__ */ x(ye, { ...Go[l] }),
          size: "sm",
          width: "w-full",
          value: h,
          onChange: (o) => {
            n(l, o);
          }
        }
      ) : s.type === "select" && (a = /* @__PURE__ */ x(
        Ac,
        {
          selectionMode: "single",
          size: "sm",
          label: /* @__PURE__ */ x(ye, { ...Go[l] }),
          defaultValue: h,
          onSelectionChange: (o) => {
            n(l, o);
          },
          children: s.available.map((o) => /* @__PURE__ */ x(ho, { value: o.key, children: /* @__PURE__ */ x("span", { className: "capitalize", children: /* @__PURE__ */ x(ye, { message: o.key }) }) }, o.key))
        }
      )), /* @__PURE__ */ x("div", { className: "pb-10", children: a }, l);
    });
    return /* @__PURE__ */ x(Ec, { children: /* @__PURE__ */ x("div", { className: "max-w-240 pt-10 mx-auto", children: g }) });
  }
  return null;
}
function rO() {
  const t = ue((r) => r.frame.active), e = (t == null ? void 0 : t.mode) === "basic", n = Oe((r) => `${r}%`, []);
  return /* @__PURE__ */ x(Ec, { className: "pb-18 pt-6", children: /* @__PURE__ */ ie("div", { className: "max-w-288 m-auto", children: [
    e && /* @__PURE__ */ x(
      nr,
      {
        className: "mb-20",
        width: "w-full",
        size: "sm",
        label: /* @__PURE__ */ x(ye, { message: "Color" }),
        value: R().frame.builder.defaultColor,
        onChange: (r) => {
          R().frame.active.changeColor(r);
        }
      }
    ),
    /* @__PURE__ */ x(
      rr,
      {
        size: "sm",
        label: /* @__PURE__ */ x(ye, { message: "Size" }),
        step: 1,
        minValue: R().frame.active.getMinSize(),
        maxValue: R().frame.active.getMaxSize(),
        defaultValue: R().frame.active.currentSizeInPercent,
        getValueLabel: n,
        onChange: (r) => {
          R().frame.resize(r);
        }
      }
    )
  ] }) });
}
const $i = ce.createContext(null);
function iO() {
  const { tabsRef: t, selectedTab: e } = ze($i), [n, r] = De({
    width: void 0,
    transform: void 0,
    className: void 0
  });
  return mt(() => {
    if (e != null && t.current) {
      const i = t.current[e];
      if (!i)
        return;
      r((f) => ({
        width: `${i.offsetWidth}px`,
        transform: `translateX(${i.offsetLeft}px)`,
        // disable initial transition for tabline
        className: f.width === void 0 ? "" : "transition-all"
      }));
    }
  }, [r, e, t]), /* @__PURE__ */ x(
    "div",
    {
      className: ae(
        "absolute bottom-0 left-0 h-2 bg-primary",
        n.className
      ),
      role: "presentation",
      style: { width: n.width, transform: n.transform }
    }
  );
}
function sO({ children: t, center: e, expand: n, className: r }) {
  const i = mn.toArray(t);
  return /* @__PURE__ */ x(po, { children: /* @__PURE__ */ ie(
    "div",
    {
      className: ae(
        // hide scrollbar completely on mobile, show compact one on desktop
        "flex relative max-w-full overflow-auto border-b max-sm:hidden-scrollbar md:compact-scrollbar",
        r
      ),
      role: "tablist",
      "aria-orientation": "horizontal",
      children: [
        i.map((f, g) => Jt(f) ? ut(f, {
          index: g,
          className: ae(
            f.props.className,
            n && "flex-auto",
            e && g === 0 && "ml-auto",
            e && g === i.length - 1 && "mr-auto"
          )
        }) : null),
        /* @__PURE__ */ x(iO, {})
      ]
    }
  ) });
}
function oO(t) {
  const {
    size: e = "md",
    children: n,
    className: r,
    isLazy: i,
    overflow: f = "overflow-hidden"
  } = t, g = de([]), l = Pt(), [s, a] = yn(
    t.selectedTab,
    t.defaultSelectedTab || 0,
    t.onTabChange
  ), h = He(() => ({
    selectedTab: s,
    setSelectedTab: a,
    tabsRef: g,
    size: e,
    isLazy: i,
    id: l
  }), [s, l, i, a, e]);
  return /* @__PURE__ */ x($i.Provider, { value: h, children: /* @__PURE__ */ x("div", { className: ae(r, f, "max-w-full"), children: n }) });
}
const aO = be(
  /* @__PURE__ */ x("path", { d: "M12 17c3.31 0 6-2.69 6-6V3h-2.5v8c0 1.93-1.57 3.5-3.5 3.5S8.5 12.93 8.5 11V3H6v8c0 3.31 2.69 6 6 6zm-7 2v2h14v-2H5z" }),
  "FormatUnderlinedOutlined"
), lO = be(
  /* @__PURE__ */ x("path", { d: "M10 19h4v-3h-4v3zM5 4v3h5v3h4V7h5V4H5zM3 14h18v-2H3v2z" }),
  "FormatStrikethroughOutlined"
), cO = be(
  /* @__PURE__ */ x("path", { d: "M10 4v3h2.21l-3.42 8H6v3h8v-3h-2.21l3.42-8H18V4h-8z" }),
  "FormatItalicOutlined"
), uO = be(
  /* @__PURE__ */ x("path", { d: "M3 21h18v-2H3v2zm6-4h12v-2H9v2zm-6-4h18v-2H3v2zm6-4h12V7H9v2zM3 3v2h18V3H3z" }),
  "FormatAlignRightOutlined"
), hO = be(
  /* @__PURE__ */ x("path", { d: "M15 15H3v2h12v-2zm0-8H3v2h12V7zM3 13h18v-2H3v2zm0 8h18v-2H3v2zM3 3v2h18V3H3z" }),
  "FormatAlignLeftOutlined"
), fO = be(
  /* @__PURE__ */ x("path", { d: "M7 15v2h10v-2H7zm-4 6h18v-2H3v2zm0-8h18v-2H3v2zm4-6v2h10V7H7zM3 3v2h18V3H3z" }),
  "FormatAlignCenterOutlined"
);
function dO() {
  return /* @__PURE__ */ ie("div", { className: "flex gap-20 justify-center", children: [
    /* @__PURE__ */ x(pO, {}),
    /* @__PURE__ */ x(gO, {}),
    /* @__PURE__ */ x(mO, {})
  ] });
}
function pO() {
  const t = ue((n) => n.objects.active.editableProps.fontSize) ?? 40, { trans: e } = En();
  return /* @__PURE__ */ x(
    Qt,
    {
      type: "number",
      size: "xs",
      "aria-label": e({ message: "Font Size" }),
      min: 1,
      max: 300,
      className: "w-64 flex-shrink-0",
      value: t,
      onChange: (n) => {
        R().objects.setValues({
          fontSize: n.target.valueAsNumber
        }), O().setDirty(!0);
      }
    }
  );
}
function gO() {
  const t = ue((f) => f.objects.active.editableProps.fontStyle), e = ue((f) => f.objects.active.editableProps.underline), n = ue((f) => f.objects.active.editableProps.linethrough), [r, i] = De([
    t,
    e && "underline",
    n && "linethrough"
  ]);
  return /* @__PURE__ */ ie(
    bo,
    {
      size: "xs",
      variant: "outline",
      radius: "rounded",
      value: r,
      multiple: !0,
      onChange: (f) => {
        i(f), R().objects.setValues({
          underline: f.includes("underline"),
          linethrough: f.includes("linethrough"),
          fontStyle: f.includes("italic") ? "italic" : ""
        }), O().setDirty(!0);
      },
      children: [
        /* @__PURE__ */ x(Fe, { value: "underline", children: /* @__PURE__ */ x(aO, {}) }),
        /* @__PURE__ */ x(Fe, { value: "linethrough", children: /* @__PURE__ */ x(lO, {}) }),
        /* @__PURE__ */ x(Fe, { value: "italic", children: /* @__PURE__ */ x(cO, {}) })
      ]
    }
  );
}
function mO() {
  const t = ue((e) => e.objects.active.editableProps.textAlign);
  return /* @__PURE__ */ ie(
    bo,
    {
      size: "xs",
      variant: "outline",
      radius: "rounded",
      value: t,
      onChange: (e) => {
        R().objects.setValues({
          textAlign: e
        }), O().setDirty(!0);
      },
      children: [
        /* @__PURE__ */ x(Fe, { value: "left", children: /* @__PURE__ */ x(hO, {}) }),
        /* @__PURE__ */ x(Fe, { value: "center", children: /* @__PURE__ */ x(fO, {}) }),
        /* @__PURE__ */ x(Fe, { value: "right", children: /* @__PURE__ */ x(uO, {}) })
      ]
    }
  );
}
function vO({ children: t, className: e }) {
  const { selectedTab: n, isLazy: r } = ze($i), i = mn.toArray(t).filter((g) => !!g);
  let f;
  if (r) {
    const g = i[n];
    f = Jt(g) ? ut(i[n], {
      index: n
    }) : null;
  } else
    f = i.map((g, l) => {
      if (Jt(g)) {
        const s = l === n;
        return ut(g, {
          index: l,
          "aria-hidden": !s,
          className: s ? g.props.className : ae(g.props.className, "hidden")
        });
      }
      return null;
    });
  return /* @__PURE__ */ x("div", { className: e, children: f });
}
function Dn({
  className: t,
  children: e,
  index: n,
  ...r
}) {
  const { id: i } = ze($i), [f, g] = De(0), l = de(null);
  return mt(() => {
    if (l != null && l.current) {
      const s = () => {
        const h = Ut(l.current, { tabbable: !0 });
        g(h.nextNode() ? void 0 : 0);
      };
      s();
      const a = new MutationObserver(s);
      return a.observe(l.current, {
        subtree: !0,
        childList: !0,
        attributes: !0,
        attributeFilter: ["tabIndex", "disabled"]
      }), () => {
        a.disconnect();
      };
    }
  }, [l]), /* @__PURE__ */ x(
    "div",
    {
      tabIndex: f,
      ref: l,
      id: `${i}-${n}-tabpanel`,
      "aria-labelledby": `${i}-${n}-tab`,
      className: ae(t, "focus-visible:outline-primary-light"),
      role: "tabpanel",
      ...r,
      children: e
    }
  );
}
const lf = [
  {
    type: "linear",
    coords: {
      x1: -80,
      y1: 0,
      x2: 80,
      y2: 0
    },
    colorStops: [
      { color: "#ffe47b", offset: 0 },
      { color: "rgb(111,154,211)", offset: 1 }
    ]
  },
  {
    type: "linear",
    coords: {
      x1: 0,
      y1: -120,
      x2: 0,
      y2: 120
    },
    colorStops: [
      { color: "#ff4040", offset: 0 },
      { color: "#e6399b", offset: 1 }
    ]
  },
  {
    type: "linear",
    coords: {
      x1: -90,
      y1: -90,
      x2: 90,
      y2: 90
    },
    colorStops: [
      { offset: 0, color: "rgb(166,111,213)" },
      { offset: 0.5, color: "rgba(106, 72, 215, 0.5)" },
      { offset: 1, color: "#200772" }
    ]
  },
  {
    type: "radial",
    coords: {
      r1: 100,
      r2: 10,
      x1: 0,
      y1: 0,
      x2: 0,
      y2: 0
    },
    colorStops: [
      { offset: 0, color: "#FF4F4F" },
      { offset: 1, color: "rgb(255, 239, 64)" }
    ]
  },
  {
    type: "radial",
    coords: {
      r1: 100,
      r2: 10,
      x1: 0,
      y1: 0,
      x2: 20,
      y2: 20
    },
    colorStops: [
      { offset: 0, color: "#ffe47b" },
      { offset: 0.5, color: "rgb(111,154,211)" },
      { offset: 1, color: "rgb(166,111,213)" }
    ]
  },
  {
    type: "radial",
    coords: {
      r1: 50,
      r2: 80,
      x1: 45,
      y1: 45,
      x2: 52,
      y2: 50
    },
    colorStops: [
      { offset: 0, color: "rgb(155, 237, 0)" },
      { offset: 1, color: "rgba(0, 164, 128,0.4)" }
    ]
  },
  {
    type: "linear",
    coords: {
      x1: -90,
      y1: -90,
      x2: 90,
      y2: 90
    },
    colorStops: [
      { offset: 0, color: "#9ecb2d" },
      { offset: 0.5, color: "#72aa00" },
      { offset: 1, color: "#bfd255" }
    ]
  },
  {
    type: "radial",
    coords: {
      r1: 100,
      r2: 50,
      x1: 30,
      y1: 0,
      x2: 0,
      y2: 0
    },
    colorStops: [
      { offset: 0, color: "#aebcbf" },
      { offset: 1, color: "#0a0809" }
    ]
  },
  {
    type: "linear",
    coords: {
      x1: -80,
      y1: 0,
      x2: 80,
      y2: 0
    },
    colorStops: [
      { offset: 0, color: "#ffffff" },
      { offset: 1, color: "#f6f6f6" }
    ]
  },
  {
    type: "linear",
    coords: {
      x1: 0,
      y1: -120,
      x2: 0,
      y2: 120
    },
    colorStops: [
      { offset: 0, color: "#fefcea" },
      { offset: 1, color: "#f1da36" }
    ]
  },
  {
    type: "linear",
    coords: {
      x1: -90,
      y1: -90,
      x2: 90,
      y2: 90
    },
    colorStops: [
      { offset: 0, color: "rgb(166,111,213)" },
      { offset: 0.5, color: "rgba(106, 72, 215, 0.5)" },
      { offset: 1, color: "#ff1a00" }
    ]
  },
  {
    type: "linear",
    coords: {
      x1: 0,
      y1: -120,
      x2: 0,
      y2: 120
    },
    colorStops: [
      { offset: 0, color: "#b7deed" },
      { offset: 1, color: "#21b4e2" }
    ]
  },
  {
    type: "linear",
    coords: {
      x1: -80,
      y1: 100,
      x2: 80,
      y2: -100
    },
    colorStops: [
      { offset: 0, color: "#ffe47b" },
      { offset: 1, color: "rgb(111,154,211)" }
    ]
  }
], bO = be(
  /* @__PURE__ */ x("path", { d: "M19.51 3.08 3.08 19.51c.09.34.27.65.51.9.25.24.56.42.9.51L20.93 4.49c-.19-.69-.73-1.23-1.42-1.41zM11.88 3 3 11.88v2.83L14.71 3h-2.83zM5 3c-1.1 0-2 .9-2 2v2l4-4H5zm14 18c.55 0 1.05-.22 1.41-.59.37-.36.59-.86.59-1.41v-2l-4 4h2zm-9.71 0h2.83L21 12.12V9.29L9.29 21z" }),
  "TextureOutlined"
), yO = be(
  /* @__PURE__ */ x("path", { d: "M11 9h2v2h-2V9zm-2 2h2v2H9v-2zm4 0h2v2h-2v-2zm2-2h2v2h-2V9zM7 9h2v2H7V9zm12-6H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 18H7v-2h2v2zm4 0h-2v-2h2v2zm4 0h-2v-2h2v2zm2-7h-2v2h2v2h-2v-2h-2v2h-2v-2h-2v2H9v-2H7v2H5v-2h2v-2H5V5h14v6z" }),
  "GradientOutlined"
), wO = be(
  /* @__PURE__ */ x("path", { d: "M18 20H4V6h9V4H4c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2v-9h-2v9zm-7.79-3.17-1.96-2.36L5.5 18h11l-3.54-4.71zM20 4V1h-2v3h-3c.01.01 0 2 0 2h3v2.99c.01.01 2 0 2 0V6h3V4h-3z" }),
  "AddPhotoAlternateOutlined"
);
function cf({ property: t }) {
  const { trans: e } = En(), n = ue((r) => r.objects.active.editableProps[t]);
  return /* @__PURE__ */ ie("div", { className: "flex items-center justify-center gap-14", children: [
    /* @__PURE__ */ x(
      nr,
      {
        className: "flex-shrink-0",
        size: "xs",
        "aria-label": e({ message: "Color" }),
        value: typeof n == "string" ? n : Pl.fill,
        onChange: (r) => {
          R().objects.setValues({ [t]: r }), O().setDirty(!0);
        }
      }
    ),
    /* @__PURE__ */ x(uf, { type: "gradient", property: t }),
    /* @__PURE__ */ x(uf, { type: "texture", property: t })
  ] });
}
function uf({ type: t, property: e }) {
  const n = t === "texture" ? /* @__PURE__ */ x(bO, {}) : /* @__PURE__ */ x(yO, {});
  return /* @__PURE__ */ x(Xt, { children: /* @__PURE__ */ ie(To, { type: "popover", children: [
    /* @__PURE__ */ x(
      st,
      {
        className: "flex-shrink-0",
        id: `${t}-panel-trigger`,
        variant: "outline",
        size: "xs",
        startIcon: n,
        endIcon: /* @__PURE__ */ x(Dc, {}),
        children: /* @__PURE__ */ x("span", { className: "capitalize", children: t === "gradient" ? /* @__PURE__ */ x(ye, { message: "Gradient" }) : /* @__PURE__ */ x(ye, { message: "Texture" }) })
      }
    ),
    /* @__PURE__ */ x(So, { size: "auto", children: /* @__PURE__ */ x("div", { className: "grid gap-8 grid-cols-5-min-content p-10 bg-paper rounded shadow-md", children: /* @__PURE__ */ x(xO, { property: e, type: t }) }) })
  ] }) });
}
function xO({ type: t, property: e }) {
  const { close: n } = lv(), r = Array.from(
    Array(t === "gradient" ? lf.length : 28).keys()
  ), i = "w-56 h-56 bg border shadow-sm hover:scale-110", f = r.map((g) => {
    const l = bt(`images/${t}s/${g}.png`);
    return /* @__PURE__ */ x(
      rn,
      {
        radius: "rounded",
        className: i,
        style: { backgroundImage: `url(${l})` },
        "aria-label": `Select ${t} #${g}`,
        onClick: async () => {
          n();
          const s = t === "gradient" ? new we.fabric.Gradient(lf[g]) : await fv(l);
          R().objects.setValues({ [e]: s }), O().setDirty(!0);
        }
      },
      g
    );
  });
  return t === "texture" && f.unshift(
    /* @__PURE__ */ x(
      CO,
      {
        property: e,
        className: i
      },
      "upload-btn"
    )
  ), /* @__PURE__ */ x(Xt, { children: f });
}
function CO({ className: t, property: e }) {
  const { close: n } = lv();
  return /* @__PURE__ */ x(
    rn,
    {
      radius: "rounded",
      className: t,
      "aria-label": "Upload an image",
      onClick: async () => {
        const r = await R().import.openUploadWindow();
        if (n(), r) {
          const i = await fv(await r.data);
          R().objects.setValues({ [e]: i });
        }
      },
      children: /* @__PURE__ */ x(wO, { className: "icon-md" })
    }
  );
}
function fv(t) {
  return new Promise((e) => {
    we.fabric.util.loadImage(t, (n) => {
      const r = new we.fabric.Pattern({
        source: n,
        repeat: "repeat"
      });
      e(r);
    });
  });
}
function _O() {
  const t = ue((e) => e.objects.active.editableProps.opacity);
  return /* @__PURE__ */ x(
    rr,
    {
      className: "max-w-240 w-full mx-auto",
      "aria-label": "Opacity",
      value: t,
      minValue: 0.1,
      step: 0.1,
      maxValue: 1,
      onChange: (e) => {
        R().objects.setValues({ opacity: e }), O().setDirty(!0);
      }
    }
  );
}
function SO() {
  const { trans: t } = En(), e = ue((r) => r.objects.active.editableProps.stroke), n = ue(
    (r) => r.objects.active.editableProps.strokeWidth
  );
  return /* @__PURE__ */ ie("div", { className: "flex items-center gap-40", children: [
    /* @__PURE__ */ x(
      nr,
      {
        className: "ml-auto flex-shrink-0",
        size: "xs",
        value: e,
        "aria-label": t({ message: "Outline Color" }),
        onChange: (r) => {
          R().objects.setValues({ stroke: r }), O().setDirty(!0);
        }
      }
    ),
    /* @__PURE__ */ x(
      rr,
      {
        "aria-label": "Outline Width",
        className: "max-w-240 mr-auto flex-shrink-0",
        value: n,
        onChange: (r) => {
          R().objects.setValues({ strokeWidth: r }), O().setDirty(!0);
        }
      }
    )
  ] });
}
const TO = be(
  /* @__PURE__ */ x("path", { d: "M19 5v14H5V5h14m0-2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm-4.86 8.86-3 3.87L9 13.14 6 17h12l-3.86-5.14z" }),
  "ImageOutlined"
);
function EO() {
  return /* @__PURE__ */ x("div", { className: "flex justify-center", children: /* @__PURE__ */ x(
    st,
    {
      type: "button",
      variant: "outline",
      size: "xs",
      startIcon: /* @__PURE__ */ x(TO, {}),
      radius: "rounded-full",
      onClick: async () => {
        const t = await R().import.openUploadWindow();
        if (t) {
          const e = R().objects.getActive();
          if (e && "setSrc" in e) {
            const n = await t.data;
            e.setSrc(n, () => {
              kg({
                src: n
              }), R().canvas.render();
            });
          }
        }
      },
      children: /* @__PURE__ */ x(ye, { message: "Replace Image" })
    }
  ) });
}
const dv = {
  color: "rgba(0, 0, 0, 0.6)",
  blur: 3,
  offsetX: -1,
  offsetY: 0
};
function kO() {
  const { trans: t } = En(), e = ue((n) => n.objects.active.editableProps.shadow) || dv;
  return /* @__PURE__ */ ie("div", { className: "flex items-center gap-40", children: [
    /* @__PURE__ */ x(
      nr,
      {
        className: "ml-auto flex-shrink-0",
        value: e.color,
        size: "xs",
        "aria-label": t({ message: "Shadow Color" }),
        onChange: (n) => {
          R().objects.setValues({ shadow: hf({ color: n }) }), O().setDirty(!0);
        }
      }
    ),
    /* @__PURE__ */ x(
      rr,
      {
        "aria-label": "Shadow Blur",
        className: "max-w-240 mr-auto flex-shrink-0",
        defaultValue: e.blur,
        onChange: (n) => {
          R().objects.setValues({
            shadow: hf({ blur: n })
          }), O().setDirty(!0);
        }
      }
    )
  ] });
}
function hf(t) {
  var n;
  const e = (n = R().objects.getActive()) == null ? void 0 : n.shadow;
  return e ? (Object.entries(t).forEach(([r, i]) => {
    e[r] = i;
  }), e) : new we.fabric.Shadow({
    ...dv,
    ...t
  });
}
function An({
  index: t,
  className: e,
  isDisabled: n,
  children: r,
  padding: i,
  elementType: f = "button",
  to: g,
  relative: l,
  width: s = "min-w-min"
}) {
  const {
    selectedTab: a,
    setSelectedTab: h,
    tabsRef: o,
    size: u = "md",
    id: c
  } = ze($i), d = t === a, m = d3(), p = i || (u === "sm" ? "px-12" : "px-18"), v = ae(
    "tracking-wide overflow-hidden capitalize text-sm flex items-center justify-center outline-none transition-colors",
    "focus-visible:ring focus-visible:ring-2 ring-inset rounded whitespace-nowrap cursor-pointer",
    s,
    OO({ isDisabled: n, isSelected: d }),
    e,
    u === "md" && `${p} h-48`,
    u === "sm" && `${p} h-32`,
    n && "pointer-events-none"
  ), b = (C) => {
    switch (C.key) {
      case "ArrowLeft":
        m == null || m.focusPrevious();
        break;
      case "ArrowRight":
        m == null || m.focusNext();
        break;
      case "Home":
        m == null || m.focusFirst();
        break;
      case "End":
        m == null || m.focusLast();
        break;
    }
  }, y = d ? 0 : -1;
  return /* @__PURE__ */ x(
    f,
    {
      disabled: n,
      id: `${c}-${t}-tab`,
      "aria-controls": `${c}-${t}-tabpanel`,
      type: "button",
      role: "tab",
      "aria-selected": d,
      tabIndex: n ? void 0 : y,
      onKeyDown: b,
      onClick: () => {
        h(t);
      },
      to: g,
      relative: l,
      className: v,
      ref: (C) => {
        o.current && C && (o.current[t] = C);
      },
      children: r
    }
  );
}
function OO({ isDisabled: t, isSelected: e }) {
  return t ? "text-disabled cursor-default" : e ? "text-primary" : "text-muted hover:text-main";
}
function pv() {
  const t = ue((e) => e.objects.active);
  return /* @__PURE__ */ ie(oO, { size: "sm", className: "pb-18 pt-6", children: [
    /* @__PURE__ */ ie(sO, { center: !0, children: [
      t.isText && /* @__PURE__ */ x(An, { children: /* @__PURE__ */ x(ye, { message: "Font" }) }),
      !t.isImage && /* @__PURE__ */ x(An, { children: /* @__PURE__ */ x(ye, { message: "Color" }) }),
      !t.isImage && /* @__PURE__ */ x(An, { children: /* @__PURE__ */ x(ye, { message: "Background" }) }),
      t.isImage && /* @__PURE__ */ x(An, { children: /* @__PURE__ */ x(ye, { message: "Image" }) }),
      /* @__PURE__ */ x(An, { children: /* @__PURE__ */ x(ye, { message: "Opacity" }) }),
      /* @__PURE__ */ x(An, { children: /* @__PURE__ */ x(ye, { message: "Outline" }) }),
      /* @__PURE__ */ x(An, { children: /* @__PURE__ */ x(ye, { message: "Shadow" }) })
    ] }),
    /* @__PURE__ */ ie(vO, { className: "pt-16 h-50", children: [
      t.isText && /* @__PURE__ */ x(Dn, { children: /* @__PURE__ */ x(dO, {}) }, "font"),
      !t.isImage && /* @__PURE__ */ x(Dn, { children: /* @__PURE__ */ x(cf, { property: "fill" }) }),
      !t.isImage && /* @__PURE__ */ x(Dn, { children: /* @__PURE__ */ x(cf, { property: "backgroundColor" }) }),
      t.isImage && /* @__PURE__ */ x(Dn, { children: /* @__PURE__ */ x(EO, {}) }),
      /* @__PURE__ */ x(Dn, { children: /* @__PURE__ */ x(_O, {}) }),
      /* @__PURE__ */ x(Dn, { children: /* @__PURE__ */ x(SO, {}) }),
      /* @__PURE__ */ x(Dn, { children: /* @__PURE__ */ x(kO, {}) })
    ] })
  ] });
}
function DO() {
  const e = !vo() && /* @__PURE__ */ x(
    st,
    {
      size: "sm",
      color: "primary",
      variant: "outline",
      onClick: () => {
        R().text.add(), O().setDirty(!0);
      },
      children: /* @__PURE__ */ x(ye, { message: "New Text" })
    }
  );
  return /* @__PURE__ */ x(Ec, { actionBtn: e, children: /* @__PURE__ */ x(pv, {}) });
}
const AO = be(
  /* @__PURE__ */ x("path", { d: "m20 12-1.41-1.41L13 16.17V4h-2v12.17l-5.58-5.59L4 12l8 8 8-8z" }),
  "ArrowDownwardOutlined"
), ff = 500, Rt = {};
let Xr = !1, jt = null, Pn = null;
const df = (t) => {
  var e;
  for (const n in Rt)
    n !== t && ((e = Rt[n]) == null || e.call(Rt, !0), delete Rt[n]);
}, PO = Je(
  ({
    children: t,
    label: e,
    placement: n = "top",
    offset: r = 10,
    variant: i = "neutral",
    delay: f = 1500,
    isDisabled: g,
    usePortal: l = !0,
    ...s
  }, a) => {
    const { x: h, y: o, reference: u, strategy: c, arrowRef: d, arrowStyle: m, refs: p } = gc({
      placement: n,
      offset: r,
      ref: a,
      showArrow: !0
    }), [v, b] = De(!1), y = Pt(), w = de(), C = () => {
      clearTimeout(w.current), w.current = void 0, df(y), Rt[y] = _, Xr = !0, b(!0), jt && (clearTimeout(jt), jt = null), Pn && (clearTimeout(Pn), Pn = null);
    }, _ = Oe(
      (L) => {
        L ? (clearTimeout(w.current), w.current = void 0, b(!1)) : w.current || (w.current = setTimeout(() => {
          w.current = void 0, b(!1);
        }, ff)), jt && (clearTimeout(jt), jt = null), Xr && (Pn && clearTimeout(Pn), Pn = setTimeout(() => {
          delete Rt[y], Pn = null, Xr = !1;
        }, ff));
      },
      [y]
    ), S = () => {
      df(y), Rt[y] = _, !v && !jt && !Xr ? jt = setTimeout(() => {
        jt = null, Xr = !0, C();
      }, f) : v || C();
    }, k = (L) => {
      !L && f > 0 && !w.current ? S() : C();
    };
    Se(() => () => {
      clearTimeout(w.current), Rt[y] && delete Rt[y];
    }, [y]), Se(() => {
      const L = (j) => {
        j.key === "Escape" && _(!0);
      };
      if (v)
        return document.addEventListener("keydown", L, !0), () => {
          document.removeEventListener("keydown", L, !0);
        };
    }, [v, _]);
    const I = /* @__PURE__ */ x(tn, { children: v && /* @__PURE__ */ ie(
      ot.div,
      {
        ...go,
        ref: p.setFloating,
        id: y,
        role: "tooltip",
        onPointerEnter: () => {
          k(!0);
        },
        onPointerLeave: () => {
          _();
        },
        className: ae(
          "z-tooltip my-4 max-w-240 break-words rounded px-8 py-4 text-xs text-white shadow",
          i === "positive" && "bg-positive",
          i === "danger" && "bg-danger",
          i === "neutral" && "bg-toast"
        ),
        style: {
          position: c,
          top: o ?? "",
          left: h ?? ""
        },
        children: [
          /* @__PURE__ */ x(
            "div",
            {
              ref: d,
              className: "absolute h-8 w-8 rotate-45 bg-inherit",
              style: m
            }
          ),
          e
        ]
      }
    ) });
    return /* @__PURE__ */ ie(Xt, { children: [
      ut(
        t,
        // pass dom props down to child element, in case tooltip is wrapped in menu trigger
        nn(
          {
            "aria-describedby": v ? y : void 0,
            ref: u,
            onPointerEnter: (L) => {
              L.pointerType === "mouse" && k();
            },
            onFocus: (L) => {
              L.target.matches(":focus-visible") && k(!0);
            },
            onPointerLeave: (L) => {
              L.pointerType === "mouse" && _();
            },
            onPointerDown: () => {
              _(!0);
            },
            onBlur: () => {
              _();
            },
            "aria-label": typeof e == "string" ? e : e.props.message
          },
          s
        )
      ),
      l ? Un && vl(I, Un) : I
    ] });
  }
);
function MO() {
  const t = ue((f) => f.activeToolOverlay), e = ue((f) => f.objects.active.id), n = FO(t, e), [r, i] = De(!0);
  return /* @__PURE__ */ ie("div", { className: "relative z-tool-overlay text-sm", children: [
    n && /* @__PURE__ */ x(
      "div",
      {
        className: ae(
          "absolute right-16 text-muted z-50 transition-all",
          !r && "rotate-180",
          r ? "-top-144" : "-top-40"
        ),
        children: /* @__PURE__ */ x(
          PO,
          {
            label: r ? /* @__PURE__ */ x(ye, { message: "Hide options" }) : /* @__PURE__ */ x(ye, { message: "Show options" }),
            children: /* @__PURE__ */ x(
              Fe,
              {
                variant: "outline",
                radius: "rounded-lg",
                size: "xs",
                onClick: () => {
                  i(!r);
                },
                children: /* @__PURE__ */ x(AO, {})
              }
            )
          }
        )
      }
    ),
    /* @__PURE__ */ x(tn, { children: n && r && /* @__PURE__ */ x(
      ot.div,
      {
        initial: { y: 0, opacity: 0 },
        animate: { y: "-100%", opacity: 1 },
        exit: { y: 0, opacity: 0 },
        transition: { type: "tween", duration: 0.15 },
        className: "absolute inset-x-0 gap-16 px-5vw bg bg-opacity-95 border-t",
        children: n
      },
      "tool-controls-overlay"
    ) })
  ] });
}
function FO(t, e) {
  switch (t) {
    case Et.Filter:
      return /* @__PURE__ */ x(nO, {});
    case Et.Frame:
      return /* @__PURE__ */ x(rO, {});
    case Et.Text:
      return e && /* @__PURE__ */ x(DO, {});
    case Et.ActiveObject:
      return e && /* @__PURE__ */ x(pv, {});
    default:
      return null;
  }
}
const dl = be(
  /* @__PURE__ */ x("path", { d: "M12 2C6.47 2 2 6.47 2 12s4.47 10 10 10 10-4.47 10-10S17.53 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8zm3.59-13L12 10.59 8.41 7 7 8.41 10.59 12 7 15.59 8.41 17 12 13.41 15.59 17 17 15.59 13.41 12 17 8.41z" }),
  "CancelOutlined"
);
function IO({ filter: t }) {
  const e = ue((g) => g.filter.applied.includes(t)), n = R().filter.hasOptions(t), r = ae("block flex-shrink-0 rounded", {
    "text-primary border-primary": e
  }), i = u4[t], f = /* @__PURE__ */ ie(Xt, { children: [
    /* @__PURE__ */ ie("div", { className: "relative", children: [
      /* @__PURE__ */ x(RO, { filter: t }),
      e && /* @__PURE__ */ x(LO, { filter: t, hasOptions: n })
    ] }),
    /* @__PURE__ */ x("div", { className: "mt-4 text-center text-xs capitalize", children: i ? /* @__PURE__ */ x(ye, { ...i }) : t })
  ] });
  return e && n ? /* @__PURE__ */ x("div", { className: r, children: f }) : /* @__PURE__ */ x(
    rn,
    {
      className: r,
      onClick: () => {
        e ? R().filter.remove(t) : R().filter.apply(t);
      },
      children: f
    }
  );
}
function RO({ filter: t }) {
  const e = ue((r) => r.filter.selected === t), n = ae("m-auto w-96 h-56 border rounded object-cover", {
    shadow: e
  });
  return /* @__PURE__ */ x(
    "img",
    {
      src: bt(`images/filter/${t}.jpg`),
      className: n,
      alt: ""
    }
  );
}
function LO({ filter: t, hasOptions: e }) {
  return /* @__PURE__ */ ie("div", { className: "flex items-center justify-center bg-background/70 absolute inset-0 border-2 border-primary rounded", children: [
    e ? /* @__PURE__ */ x(
      Fe,
      {
        color: "primary",
        size: "md",
        onClick: () => {
          R().filter.remove(t);
        },
        children: /* @__PURE__ */ x(dl, {})
      }
    ) : /* @__PURE__ */ x(dl, { className: "svg-icon icon-md" }),
    e && /* @__PURE__ */ x(BO, { filter: t, hasOptions: e })
  ] });
}
function BO({ filter: t, hasOptions: e }) {
  return /* @__PURE__ */ x(
    Fe,
    {
      color: "primary",
      size: "md",
      onClick: () => {
        O().activeToolOverlay === Et.Filter && O().filter.selected === t ? O().setActiveTool(O().activeTool, null) : O().filter.select(t, e);
      },
      children: /* @__PURE__ */ x(Nd, {})
    }
  );
}
const ir = Je(
  ({ children: t, className: e, gap: n = "gap-10" }, r) => {
    const i = ce.Children.map(t, (f, g) => ce.isValidElement(f) ? ce.cloneElement(f, {
      isFirst: g === 0,
      isLast: ce.Children.count(t) === g + 1
    }) : f);
    return /* @__PURE__ */ x(
      "div",
      {
        ref: r,
        className: ae(
          "tiny-scrollbar pb-4 overflow-x-auto relative flex items-center",
          n,
          e
        ),
        children: i
      }
    );
  }
);
function qt({
  isFirst: t,
  isLast: e,
  children: n,
  className: r
}) {
  const i = ae(r, "flex-shrink-0", {
    "ml-auto": t,
    "mr-auto": e
  });
  return /* @__PURE__ */ x("div", { className: i, children: n });
}
function zO() {
  const t = ue((n) => {
    var r, i;
    return (i = (r = n.config.tools) == null ? void 0 : r.filter) == null ? void 0 : i.items;
  }) || [];
  Se(() => {
    R().filter.syncState();
  }, []);
  const e = t.map((n) => /* @__PURE__ */ x(qt, { children: /* @__PURE__ */ x(IO, { filter: n }) }, n));
  return /* @__PURE__ */ x(ir, { children: e });
}
const NO = be(
  /* @__PURE__ */ x("path", { d: "M18 8h-1V6c0-2.76-2.24-5-5-5S7 3.24 7 6v2H6c-1.1 0-2 .9-2 2v10c0 1.1.9 2 2 2h12c1.1 0 2-.9 2-2V10c0-1.1-.9-2-2-2zM9 6c0-1.66 1.34-3 3-3s3 1.34 3 3v2H9V6zm9 14H6V10h12v10zm-6-3c1.1 0 2-.9 2-2s-.9-2-2-2-2 .9-2 2 .9 2 2 2z" }),
  "LockOutlined"
), jO = be(
  /* @__PURE__ */ x("path", { d: "M18 8h-1V6c0-2.76-2.24-5-5-5S7 3.24 7 6h2c0-1.66 1.34-3 3-3s3 1.34 3 3v2H6c-1.1 0-2 .9-2 2v10c0 1.1.9 2 2 2h12c1.1 0 2-.9 2-2V10c0-1.1-.9-2-2-2zm0 12H6V10h12v10zm-6-3c1.1 0 2-.9 2-2s-.9-2-2-2-2 .9-2 2 .9 2 2 2z" }),
  "LockOpenOutlined"
), $O = be(
  /* @__PURE__ */ x("path", { d: "M19 5v14H5V5h14m0-2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2z" }),
  "CheckBoxOutlineBlankOutlined"
), VO = be(
  /* @__PURE__ */ x("path", { d: "M19 3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.11 0 2-.9 2-2V5c0-1.1-.89-2-2-2zm-9 14-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z" }),
  "CheckBox"
), pf = be(
  /* @__PURE__ */ x("path", { d: "M19,3H5C3.9,3,3,3.9,3,5v14c0,1.1,0.9,2,2,2h14c1.1,0,2-0.9,2-2V5C21,3.9,20.1,3,19,3z M17,13H7v-2h10V13z" }),
  "CheckBox"
), HO = Je(
  (t, e) => {
    const {
      size: n = "md",
      children: r,
      className: i,
      icon: f,
      checkedIcon: g,
      disabled: l,
      isIndeterminate: s,
      errorMessage: a,
      invalid: h,
      orientation: o = "horizontal",
      onChange: u,
      autoFocus: c,
      required: d,
      value: m,
      name: p,
      inputTestId: v
    } = t, b = tr({ ...t, label: r }), y = f || $O, w = g || (s ? pf : VO), C = er(e);
    _c({ autoFocus: c }, C), Se(() => {
      C.current && (C.current.indeterminate = s || !1);
    });
    const [_, S] = yn(
      t.checked,
      t.defaultChecked || !1
    ), k = Oe(
      (G) => {
        u == null || u(G), S(G.target.checked);
      },
      [u, S]
    ), I = ae(
      "select-none",
      i,
      h && "text-danger",
      !h && l && "text-disabled"
    );
    let L, j = h ? "text-danger" : null;
    return s ? (L = pf, j = j || "text-primary") : _ ? (L = w, j = j || "text-primary") : (L = y, j = j || "text-muted"), /* @__PURE__ */ ie("div", { children: [
      /* @__PURE__ */ x("label", { className: I, children: /* @__PURE__ */ ie(
        "div",
        {
          className: ae(
            "relative flex items-center",
            o === "vertical" && "flex-col flex-col-reverse"
          ),
          children: [
            /* @__PURE__ */ x(
              "input",
              {
                className: "absolute left-0 top-0 h-24 w-24 appearance-none overflow-hidden rounded outline-none ring-inset transition-shadow focus-visible:ring",
                type: "checkbox",
                "aria-checked": s ? "mixed" : _,
                "aria-invalid": h || void 0,
                onChange: k,
                ref: C,
                required: d,
                disabled: l,
                value: m,
                name: p,
                "data-testid": v
              }
            ),
            /* @__PURE__ */ x(
              L,
              {
                size: n,
                className: ae(
                  "pointer-events-none",
                  l ? "text-disabled" : j
                )
              }
            ),
            r && /* @__PURE__ */ x(
              "div",
              {
                className: ae(
                  "first-letter:capitalize",
                  b.size.font,
                  o === "vertical" ? "mb-6" : "ml-6"
                ),
                children: r
              }
            )
          ]
        }
      ) }),
      a && /* @__PURE__ */ x("div", { className: b.error, children: a })
    ] });
  }
);
function WO() {
  const { trans: t } = En(), {
    minWidth: e = 50,
    minHeight: n = 50,
    maxHeight: r = 2400,
    maxWidth: i = 2400
  } = ue((o) => {
    var u;
    return (u = o.config.tools) == null ? void 0 : u.resize;
  }) || {}, f = ue((o) => o.original), g = ue((o) => o.resize.formValue);
  Se(() => {
    O().resize.setFormValue({ ...f });
  }, [f]), Se(() => {
    O().setDirty(!0);
  }, []);
  const l = (o) => {
    const u = { ...g, width: o };
    g.maintainAspect && (u.height = Ps(o, g.usePercentages)), O().resize.setFormValue(u);
  }, s = (o) => {
    const u = { ...g, height: o };
    o && g.maintainAspect && (u.width = Ya(o, g.usePercentages)), O().resize.setFormValue(u);
  }, a = (o) => {
    const u = { ...g, maintainAspect: o };
    o && (u.height = Ps(u.width, u.usePercentages)), O().resize.setFormValue(u);
  };
  return /* @__PURE__ */ ie(
    "form",
    {
      className: "flex items-center justify-center gap-16 w-full",
      onSubmit: (o) => {
        o.preventDefault(), O().applyChanges();
      },
      children: [
        /* @__PURE__ */ x(
          Qt,
          {
            type: "number",
            min: e,
            max: i,
            size: "sm",
            className: "w-full max-w-112",
            label: /* @__PURE__ */ x(ye, { message: "Width" }),
            value: g.width,
            onChange: (o) => {
              l(o.target.valueAsNumber);
            }
          }
        ),
        /* @__PURE__ */ x("div", { className: "mt-24", children: /* @__PURE__ */ x(
          HO,
          {
            size: "md",
            checked: g.maintainAspect,
            onChange: (o) => {
              a(!g.maintainAspect);
            },
            "aria-label": t({ message: "Maintain aspect ratio" }),
            checkedIcon: NO,
            icon: jO
          }
        ) }),
        /* @__PURE__ */ x(
          Qt,
          {
            type: "number",
            min: n,
            max: r,
            size: "sm",
            className: "w-full max-w-112",
            label: /* @__PURE__ */ x(ye, { message: "Height" }),
            value: g.height,
            onChange: (o) => {
              s(o.target.valueAsNumber);
            }
          }
        ),
        /* @__PURE__ */ x("button", { type: "submit", className: "hidden", children: /* @__PURE__ */ x(ye, { message: "Resize" }) })
      ]
    }
  );
}
function UO() {
  const t = ue((i) => {
    var f, g;
    return (g = (f = i.config.tools) == null ? void 0 : f.crop) == null ? void 0 : g.presets;
  }) || [], e = ue((i) => i.crop.selectedAspectRatio), n = ue((i) => {
    var f, g;
    return (g = (f = i.config.tools) == null ? void 0 : f.crop) == null ? void 0 : g.allowCustomRatio;
  }) ?? !0, r = t.filter((i) => i.ratio || !i.ratio && n).map((i) => /* @__PURE__ */ x(qt, { children: /* @__PURE__ */ ie(
    rn,
    {
      onClick: () => R().crop.resetCropzone(i.ratio),
      className: "flex flex-col items-center justify-between cursor-pointer h-56",
      children: [
        /* @__PURE__ */ x(XO, { preset: i, selectedRatio: e }),
        /* @__PURE__ */ x(YO, { preset: i, selectedRatio: e })
      ]
    }
  ) }, i.ratio || i.name));
  return /* @__PURE__ */ x(ir, { gap: "gap-18", children: r });
}
function XO({ preset: t, selectedRatio: e }) {
  let n = 40, r = 30;
  if (t.ratio) {
    const f = ic(t.ratio);
    ({ width: n, height: r } = rc(f, n, r));
  }
  const i = ae("border-2", {
    "border-dotted": t.ratio === null,
    "border-primary": e === t.ratio
  });
  return /* @__PURE__ */ x(
    "div",
    {
      style: { width: `${n}px`, height: `${r}px` },
      className: i
    }
  );
}
function YO({ preset: t, selectedRatio: e }) {
  const n = ae("mt-4 text-center text-xs", {
    "text-primary": e === t.ratio
  });
  return /* @__PURE__ */ x("div", { className: n, children: t.name ? /* @__PURE__ */ x(ye, { message: t.name }) : t.ratio });
}
const gf = be(
  /* @__PURE__ */ x("path", { d: "M15 21h2v-2h-2v2zm4-12h2V7h-2v2zM3 5v14c0 1.1.9 2 2 2h4v-2H5V5h4V3H5c-1.1 0-2 .9-2 2zm16-2v2h2c0-1.1-.9-2-2-2zm-8 20h2V1h-2v22zm8-6h2v-2h-2v2zM15 5h2V3h-2v2zm4 8h2v-2h-2v2zm0 8c1.1 0 2-.9 2-2h-2v2z" }),
  "FlipOutlined"
);
function GO() {
  return /* @__PURE__ */ ie("div", { children: [
    /* @__PURE__ */ x(
      Fe,
      {
        size: "sm",
        onClick: () => {
          R().transform.flip("vertical"), O().setDirty(!0);
        },
        children: /* @__PURE__ */ x(gf, {})
      }
    ),
    /* @__PURE__ */ x(
      Fe,
      {
        size: "sm",
        onClick: () => {
          R().transform.flip("horizontal"), O().setDirty(!0);
        },
        children: /* @__PURE__ */ x(gf, { className: "rotate-90" })
      }
    )
  ] });
}
const KO = be(
  /* @__PURE__ */ x("path", { d: "M7.11 8.53 5.7 7.11C4.8 8.27 4.24 9.61 4.07 11h2.02c.14-.87.49-1.72 1.02-2.47zM6.09 13H4.07c.17 1.39.72 2.73 1.62 3.89l1.41-1.42c-.52-.75-.87-1.59-1.01-2.47zm1.01 5.32c1.16.9 2.51 1.44 3.9 1.61V17.9c-.87-.15-1.71-.49-2.46-1.03L7.1 18.32zM13 4.07V1L8.45 5.55 13 10V6.09c2.84.48 5 2.94 5 5.91s-2.16 5.43-5 5.91v2.02c3.95-.49 7-3.85 7-7.93s-3.05-7.44-7-7.93z" }),
  "RotateLeftOutlined"
), qO = be(
  /* @__PURE__ */ x("path", { d: "M15.55 5.55 11 1v3.07C7.06 4.56 4 7.92 4 12s3.05 7.44 7 7.93v-2.02c-2.84-.48-5-2.94-5-5.91s2.16-5.43 5-5.91V10l4.55-4.45zM19.93 11c-.17-1.39-.72-2.73-1.62-3.89l-1.42 1.42c.54.75.88 1.6 1.02 2.47h2.02zM13 17.9v2.02c1.39-.17 2.74-.71 3.9-1.61l-1.44-1.44c-.75.54-1.59.89-2.46 1.03zm3.89-2.42 1.42 1.41c.9-1.16 1.45-2.5 1.62-3.89h-2.02c-.14.87-.48 1.72-1.02 2.48z" }),
  "RotateRightOutlined"
);
function ZO() {
  return /* @__PURE__ */ ie("div", { children: [
    /* @__PURE__ */ x(
      Fe,
      {
        size: "sm",
        onClick: () => {
          R().transform.rotateLeft(), O().setDirty(!0);
        },
        children: /* @__PURE__ */ x(KO, {})
      }
    ),
    /* @__PURE__ */ x(
      Fe,
      {
        size: "sm",
        onClick: () => {
          R().transform.rotateRight(), O().setDirty(!0);
        },
        children: /* @__PURE__ */ x(qO, {})
      }
    )
  ] });
}
function JO() {
  return /* @__PURE__ */ ie("div", { className: "flex items-center justify-center gap-16", children: [
    /* @__PURE__ */ x(GO, {}),
    /* @__PURE__ */ x(QO, {}),
    /* @__PURE__ */ x(ZO, {})
  ] });
}
function QO() {
  const t = de(null), { domProps: e, groupId: n, thumbIds: r, trackRef: i, getThumbValueLabel: f } = uv(
    {
      minValue: -45,
      maxValue: 45,
      step: 1,
      defaultValue: [O().crop.straightenAngle],
      onChange: (g) => {
        const l = g[0];
        R().transform.straighten(l), O().crop.setTransformAngle(l), O().setDirty(!0), t.current.style.transform = `translateX(${l}px)`;
      }
    }
  );
  return /* @__PURE__ */ x(
    "div",
    {
      id: n,
      role: "group",
      className: "flex-auto flex-shrink-0 max-w-320 touch-none isolate",
      children: /* @__PURE__ */ ie("div", { ...e, ref: i, className: "h-36 relative", children: [
        /* @__PURE__ */ ie(
          "output",
          {
            htmlFor: r[0],
            "aria-live": "off",
            className: "absolute left-1/2 top-1/2 w-40 text-center bg -translate-x-1/2 -translate-y-1/2 z-10",
            children: [
              f(0),
              "°"
            ]
          }
        ),
        /* @__PURE__ */ x(eD, { ref: t })
      ] })
    }
  );
}
const eD = ce.forwardRef((t, e) => {
  const n = [...Array(80).keys()], r = n.map((i) => /* @__PURE__ */ x(
    "circle",
    {
      cx: 2 + i * 10,
      cy: "20",
      r: i % 5 ? 0.75 : 2
    },
    i
  ));
  return /* @__PURE__ */ x("div", { className: "relative h-full cursor-pointer overflow-hidden", children: /* @__PURE__ */ x(
    "svg",
    {
      ref: e,
      style: { width: n.length * 10 },
      className: "absolute -left-80 h-full fill-current",
      xmlns: "http://www.w3.org/2000/svg",
      "aria-hidden": "true",
      focusable: "false",
      children: r
    }
  ) });
});
function tD() {
  return Se(() => (O().setDirty(!0), R().frame.active.hide(), () => {
    R().frame.active.show();
  }), []), /* @__PURE__ */ ie("div", { className: "pb-16", children: [
    /* @__PURE__ */ x("div", { className: "mb-10", children: /* @__PURE__ */ x(JO, {}) }),
    /* @__PURE__ */ x(UO, {})
  ] });
}
const nD = be(
  /* @__PURE__ */ x("path", { d: "M 16 6 C 12.484375 6 9.273438 7.070313 6.90625 8.84375 C 4.539063 10.617188 3 13.15625 3 16 C 3 18.84375 4.539063 21.382813 6.90625 23.15625 C 9.273438 24.929688 12.484375 26 16 26 C 19.515625 26 22.726563 24.929688 25.09375 23.15625 C 27.460938 21.382813 29 18.84375 29 16 C 29 13.15625 27.460938 10.617188 25.09375 8.84375 C 22.726563 7.070313 19.515625 6 16 6 Z M 16 8 C 19.109375 8 21.898438 8.957031 23.875 10.4375 C 25.851563 11.917969 27 13.875 27 16 C 27 18.125 25.851563 20.082031 23.875 21.5625 C 21.898438 23.042969 19.109375 24 16 24 C 12.890625 24 10.101563 23.042969 8.125 21.5625 C 6.148438 20.082031 5 18.125 5 16 C 5 13.875 6.148438 11.917969 8.125 10.4375 C 10.101563 8.957031 12.890625 8 16 8 Z " })
), rD = be(
  /* @__PURE__ */ x("path", { d: "M 16 4 C 9.382813 4 4 9.382813 4 16 C 4 22.617188 9.382813 28 16 28 C 22.617188 28 28 22.617188 28 16 C 28 9.382813 22.617188 4 16 4 Z M 16 6 C 21.535156 6 26 10.464844 26 16 C 26 21.535156 21.535156 26 16 26 C 10.464844 26 6 21.535156 6 16 C 6 10.464844 10.464844 6 16 6 Z " })
), iD = be(
  /* @__PURE__ */ x("path", { d: "M 3 6 L 3 26 L 29 26 L 29 6 Z M 5 8 L 27 8 L 27 24 L 5 24 Z " })
), sD = be(
  /* @__PURE__ */ x("path", { d: "M 16 4.90625 L 15.125 6.40625 L 4.71875 24.5 L 3.875 26 L 28.125 26 L 27.28125 24.5 L 16.875 6.40625 Z M 16 8.9375 L 24.65625 24 L 7.34375 24 Z " })
);
function oD() {
  const e = (ue((n) => {
    var r, i;
    return (i = (r = n.config.tools) == null ? void 0 : r.shapes) == null ? void 0 : i.items;
  }) || []).map((n) => /* @__PURE__ */ x(qt, { children: /* @__PURE__ */ x(
    Fe,
    {
      variant: "outline",
      radius: "rounded-2xl",
      size: "xl",
      onClick: () => {
        R().shape.addBasicShape(n.name), O().setDirty(!0);
      },
      children: /* @__PURE__ */ x(aD, { shape: n })
    }
  ) }, n.name));
  return /* @__PURE__ */ x(ir, { children: e });
}
function aD({ shape: t }) {
  var e;
  return t.type === "Path" ? /* @__PURE__ */ x(
    "svg",
    {
      className: "m-auto w-36 h-36",
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 -100 512 700",
      children: /* @__PURE__ */ x(
        "path",
        {
          className: "fill-transparent stroke-current",
          d: (e = t.options) == null ? void 0 : e.path,
          strokeWidth: 25
        }
      )
    }
  ) : ce.cloneElement(lD[t.name], { className: "w-30 h-30" });
}
const lD = {
  circle: /* @__PURE__ */ x(rD, { viewBox: "0 0 32 32" }),
  square: /* @__PURE__ */ x(iD, { viewBox: "0 0 32 32" }),
  triangle: /* @__PURE__ */ x(sD, { viewBox: "0 0 32 32" }),
  ellipse: /* @__PURE__ */ x(nD, { viewBox: "0 0 32 32" })
};
function Yr(t, e, n) {
  let r = n.initialDeps ?? [], i;
  return () => {
    var f, g, l, s;
    let a;
    n.key && ((f = n.debug) != null && f.call(n)) && (a = Date.now());
    const h = t();
    if (!(h.length !== r.length || h.some((c, d) => r[d] !== c)))
      return i;
    r = h;
    let u;
    if (n.key && ((g = n.debug) != null && g.call(n)) && (u = Date.now()), i = e(...h), n.key && ((l = n.debug) != null && l.call(n))) {
      const c = Math.round((Date.now() - a) * 100) / 100, d = Math.round((Date.now() - u) * 100) / 100, m = d / 16, p = (v, b) => {
        for (v = String(v); v.length < b; )
          v = " " + v;
        return v;
      };
      console.info(
        `%c⏱ ${p(d, 5)} /${p(c, 5)} ms`,
        `
            font-size: .6rem;
            font-weight: bold;
            color: hsl(${Math.max(
          0,
          Math.min(120 - 120 * m, 120)
        )}deg 100% 31%);`,
        n == null ? void 0 : n.key
      );
    }
    return (s = n == null ? void 0 : n.onChange) == null || s.call(n, i), i;
  };
}
function ra(t, e) {
  if (t === void 0)
    throw new Error(`Unexpected undefined${e ? `: ${e}` : ""}`);
  return t;
}
const cD = (t, e) => Math.abs(t - e) < 1, uD = (t, e, n) => {
  let r;
  return function(...i) {
    t.clearTimeout(r), r = t.setTimeout(() => e.apply(this, i), n);
  };
}, hD = (t) => t, fD = (t) => {
  const e = Math.max(t.startIndex - t.overscan, 0), n = Math.min(t.endIndex + t.overscan, t.count - 1), r = [];
  for (let i = e; i <= n; i++)
    r.push(i);
  return r;
}, dD = (t, e) => {
  const n = t.scrollElement;
  if (!n)
    return;
  const r = t.targetWindow;
  if (!r)
    return;
  const i = (g) => {
    const { width: l, height: s } = g;
    e({ width: Math.round(l), height: Math.round(s) });
  };
  if (i(n.getBoundingClientRect()), !r.ResizeObserver)
    return () => {
    };
  const f = new r.ResizeObserver((g) => {
    const l = g[0];
    if (l != null && l.borderBoxSize) {
      const s = l.borderBoxSize[0];
      if (s) {
        i({ width: s.inlineSize, height: s.blockSize });
        return;
      }
    }
    i(n.getBoundingClientRect());
  });
  return f.observe(n, { box: "border-box" }), () => {
    f.unobserve(n);
  };
}, mf = {
  passive: !0
}, pD = typeof window > "u" ? !0 : "onscrollend" in window, gD = (t, e) => {
  const n = t.scrollElement;
  if (!n)
    return;
  const r = t.targetWindow;
  if (!r)
    return;
  let i = 0;
  const f = pD ? () => {
  } : uD(
    r,
    () => {
      e(i, !1);
    },
    t.options.isScrollingResetDelay
  ), g = (a) => () => {
    i = n[t.options.horizontal ? "scrollLeft" : "scrollTop"], f(), e(i, a);
  }, l = g(!0), s = g(!1);
  return s(), n.addEventListener("scroll", l, mf), n.addEventListener("scrollend", s, mf), () => {
    n.removeEventListener("scroll", l), n.removeEventListener("scrollend", s);
  };
}, mD = (t, e, n) => {
  if (e != null && e.borderBoxSize) {
    const r = e.borderBoxSize[0];
    if (r)
      return Math.round(
        r[n.options.horizontal ? "inlineSize" : "blockSize"]
      );
  }
  return Math.round(
    t.getBoundingClientRect()[n.options.horizontal ? "width" : "height"]
  );
}, vD = (t, {
  adjustments: e = 0,
  behavior: n
}, r) => {
  var i, f;
  const g = t + e;
  (f = (i = r.scrollElement) == null ? void 0 : i.scrollTo) == null || f.call(i, {
    [r.options.horizontal ? "left" : "top"]: g,
    behavior: n
  });
};
class bD {
  constructor(e) {
    this.unsubs = [], this.scrollElement = null, this.targetWindow = null, this.isScrolling = !1, this.scrollToIndexTimeoutId = null, this.measurementsCache = [], this.itemSizeCache = /* @__PURE__ */ new Map(), this.pendingMeasuredCacheIndexes = [], this.scrollDirection = null, this.scrollAdjustments = 0, this.measureElementCache = /* @__PURE__ */ new Map(), this.observer = /* @__PURE__ */ (() => {
      let n = null;
      const r = () => n || (!this.targetWindow || !this.targetWindow.ResizeObserver ? null : n = new this.targetWindow.ResizeObserver((i) => {
        i.forEach((f) => {
          this._measureElement(f.target, f);
        });
      }));
      return {
        disconnect: () => {
          var i;
          return (i = r()) == null ? void 0 : i.disconnect();
        },
        observe: (i) => {
          var f;
          return (f = r()) == null ? void 0 : f.observe(i, { box: "border-box" });
        },
        unobserve: (i) => {
          var f;
          return (f = r()) == null ? void 0 : f.unobserve(i);
        }
      };
    })(), this.range = null, this.setOptions = (n) => {
      Object.entries(n).forEach(([r, i]) => {
        typeof i > "u" && delete n[r];
      }), this.options = {
        debug: !1,
        initialOffset: 0,
        overscan: 1,
        paddingStart: 0,
        paddingEnd: 0,
        scrollPaddingStart: 0,
        scrollPaddingEnd: 0,
        horizontal: !1,
        getItemKey: hD,
        rangeExtractor: fD,
        onChange: () => {
        },
        measureElement: mD,
        initialRect: { width: 0, height: 0 },
        scrollMargin: 0,
        gap: 0,
        indexAttribute: "data-index",
        initialMeasurementsCache: [],
        lanes: 1,
        isScrollingResetDelay: 150,
        ...n
      };
    }, this.notify = (n, r) => {
      var i, f;
      const { startIndex: g, endIndex: l } = this.range ?? {
        startIndex: void 0,
        endIndex: void 0
      }, s = this.calculateRange();
      (n || g !== (s == null ? void 0 : s.startIndex) || l !== (s == null ? void 0 : s.endIndex)) && ((f = (i = this.options).onChange) == null || f.call(i, this, r));
    }, this.cleanup = () => {
      this.unsubs.filter(Boolean).forEach((n) => n()), this.unsubs = [], this.scrollElement = null;
    }, this._didMount = () => (this.measureElementCache.forEach(this.observer.observe), () => {
      this.observer.disconnect(), this.cleanup();
    }), this._willUpdate = () => {
      var n;
      const r = this.options.getScrollElement();
      this.scrollElement !== r && (this.cleanup(), this.scrollElement = r, this.scrollElement && "ownerDocument" in this.scrollElement ? this.targetWindow = this.scrollElement.ownerDocument.defaultView : this.targetWindow = ((n = this.scrollElement) == null ? void 0 : n.window) ?? null, this._scrollToOffset(this.scrollOffset, {
        adjustments: void 0,
        behavior: void 0
      }), this.unsubs.push(
        this.options.observeElementRect(this, (i) => {
          this.scrollRect = i, this.notify(!1, !1);
        })
      ), this.unsubs.push(
        this.options.observeElementOffset(this, (i, f) => {
          this.scrollAdjustments = 0, this.scrollDirection = f ? this.scrollOffset < i ? "forward" : "backward" : null, this.scrollOffset = i;
          const g = this.isScrolling;
          this.isScrolling = f, this.notify(g !== f, f);
        })
      ));
    }, this.getSize = () => this.scrollRect[this.options.horizontal ? "width" : "height"], this.getMeasurementOptions = Yr(
      () => [
        this.options.count,
        this.options.paddingStart,
        this.options.scrollMargin,
        this.options.getItemKey
      ],
      (n, r, i, f) => (this.pendingMeasuredCacheIndexes = [], {
        count: n,
        paddingStart: r,
        scrollMargin: i,
        getItemKey: f
      }),
      {
        key: !1
      }
    ), this.getFurthestMeasurement = (n, r) => {
      const i = /* @__PURE__ */ new Map(), f = /* @__PURE__ */ new Map();
      for (let g = r - 1; g >= 0; g--) {
        const l = n[g];
        if (i.has(l.lane))
          continue;
        const s = f.get(
          l.lane
        );
        if (s == null || l.end > s.end ? f.set(l.lane, l) : l.end < s.end && i.set(l.lane, !0), i.size === this.options.lanes)
          break;
      }
      return f.size === this.options.lanes ? Array.from(f.values()).sort((g, l) => g.end === l.end ? g.index - l.index : g.end - l.end)[0] : void 0;
    }, this.getMeasurements = Yr(
      () => [this.getMeasurementOptions(), this.itemSizeCache],
      ({ count: n, paddingStart: r, scrollMargin: i, getItemKey: f }, g) => {
        const l = this.pendingMeasuredCacheIndexes.length > 0 ? Math.min(...this.pendingMeasuredCacheIndexes) : 0;
        this.pendingMeasuredCacheIndexes = [];
        const s = this.measurementsCache.slice(0, l);
        for (let a = l; a < n; a++) {
          const h = f(a), o = this.options.lanes === 1 ? s[a - 1] : this.getFurthestMeasurement(s, a), u = o ? o.end + this.options.gap : r + i, c = g.get(h), d = typeof c == "number" ? c : this.options.estimateSize(a), m = u + d, p = o ? o.lane : a % this.options.lanes;
          s[a] = {
            index: a,
            start: u,
            size: d,
            end: m,
            key: h,
            lane: p
          };
        }
        return this.measurementsCache = s, s;
      },
      {
        key: !1,
        debug: () => this.options.debug
      }
    ), this.calculateRange = Yr(
      () => [this.getMeasurements(), this.getSize(), this.scrollOffset],
      (n, r, i) => this.range = n.length > 0 && r > 0 ? yD({
        measurements: n,
        outerSize: r,
        scrollOffset: i
      }) : null,
      {
        key: !1,
        debug: () => this.options.debug
      }
    ), this.getIndexes = Yr(
      () => [
        this.options.rangeExtractor,
        this.calculateRange(),
        this.options.overscan,
        this.options.count
      ],
      (n, r, i, f) => r === null ? [] : n({
        startIndex: r.startIndex,
        endIndex: r.endIndex,
        overscan: i,
        count: f
      }),
      {
        key: !1,
        debug: () => this.options.debug
      }
    ), this.indexFromElement = (n) => {
      const r = this.options.indexAttribute, i = n.getAttribute(r);
      return i ? parseInt(i, 10) : (console.warn(
        `Missing attribute name '${r}={index}' on measured element.`
      ), -1);
    }, this._measureElement = (n, r) => {
      const i = this.measurementsCache[this.indexFromElement(n)];
      if (!i || !n.isConnected) {
        this.measureElementCache.forEach((l, s) => {
          l === n && (this.observer.unobserve(n), this.measureElementCache.delete(s));
        });
        return;
      }
      const f = this.measureElementCache.get(i.key);
      f !== n && (f && this.observer.unobserve(f), this.observer.observe(n), this.measureElementCache.set(i.key, n));
      const g = this.options.measureElement(n, r, this);
      this.resizeItem(i, g);
    }, this.resizeItem = (n, r) => {
      const i = this.itemSizeCache.get(n.key) ?? n.size, f = r - i;
      f !== 0 && ((this.shouldAdjustScrollPositionOnItemSizeChange !== void 0 ? this.shouldAdjustScrollPositionOnItemSizeChange(n, f, this) : n.start < this.scrollOffset + this.scrollAdjustments) && this._scrollToOffset(this.scrollOffset, {
        adjustments: this.scrollAdjustments += f,
        behavior: void 0
      }), this.pendingMeasuredCacheIndexes.push(n.index), this.itemSizeCache = new Map(this.itemSizeCache.set(n.key, r)), this.notify(!0, !1));
    }, this.measureElement = (n) => {
      n && this._measureElement(n, void 0);
    }, this.getVirtualItems = Yr(
      () => [this.getIndexes(), this.getMeasurements()],
      (n, r) => {
        const i = [];
        for (let f = 0, g = n.length; f < g; f++) {
          const l = n[f], s = r[l];
          i.push(s);
        }
        return i;
      },
      {
        key: !1,
        debug: () => this.options.debug
      }
    ), this.getVirtualItemForOffset = (n) => {
      const r = this.getMeasurements();
      return ra(
        r[gv(
          0,
          r.length - 1,
          (i) => ra(r[i]).start,
          n
        )]
      );
    }, this.getOffsetForAlignment = (n, r) => {
      const i = this.getSize();
      r === "auto" && (n <= this.scrollOffset ? r = "start" : n >= this.scrollOffset + i ? r = "end" : r = "start"), r === "start" ? n = n : r === "end" ? n = n - i : r === "center" && (n = n - i / 2);
      const f = this.options.horizontal ? "scrollWidth" : "scrollHeight", l = (this.scrollElement ? "document" in this.scrollElement ? this.scrollElement.document.documentElement[f] : this.scrollElement[f] : 0) - this.getSize();
      return Math.max(Math.min(l, n), 0);
    }, this.getOffsetForIndex = (n, r = "auto") => {
      n = Math.max(0, Math.min(n, this.options.count - 1));
      const i = ra(this.getMeasurements()[n]);
      if (r === "auto")
        if (i.end >= this.scrollOffset + this.getSize() - this.options.scrollPaddingEnd)
          r = "end";
        else if (i.start <= this.scrollOffset + this.options.scrollPaddingStart)
          r = "start";
        else
          return [this.scrollOffset, r];
      const f = r === "end" ? i.end + this.options.scrollPaddingEnd : i.start - this.options.scrollPaddingStart;
      return [this.getOffsetForAlignment(f, r), r];
    }, this.isDynamicMode = () => this.measureElementCache.size > 0, this.cancelScrollToIndex = () => {
      this.scrollToIndexTimeoutId !== null && this.targetWindow && (this.targetWindow.clearTimeout(this.scrollToIndexTimeoutId), this.scrollToIndexTimeoutId = null);
    }, this.scrollToOffset = (n, { align: r = "start", behavior: i } = {}) => {
      this.cancelScrollToIndex(), i === "smooth" && this.isDynamicMode() && console.warn(
        "The `smooth` scroll behavior is not fully supported with dynamic size."
      ), this._scrollToOffset(this.getOffsetForAlignment(n, r), {
        adjustments: void 0,
        behavior: i
      });
    }, this.scrollToIndex = (n, { align: r = "auto", behavior: i } = {}) => {
      n = Math.max(0, Math.min(n, this.options.count - 1)), this.cancelScrollToIndex(), i === "smooth" && this.isDynamicMode() && console.warn(
        "The `smooth` scroll behavior is not fully supported with dynamic size."
      );
      const [f, g] = this.getOffsetForIndex(n, r);
      this._scrollToOffset(f, { adjustments: void 0, behavior: i }), i !== "smooth" && this.isDynamicMode() && this.targetWindow && (this.scrollToIndexTimeoutId = this.targetWindow.setTimeout(() => {
        if (this.scrollToIndexTimeoutId = null, this.measureElementCache.has(
          this.options.getItemKey(n)
        )) {
          const [s] = this.getOffsetForIndex(n, g);
          cD(s, this.scrollOffset) || this.scrollToIndex(n, { align: g, behavior: i });
        } else
          this.scrollToIndex(n, { align: g, behavior: i });
      }));
    }, this.scrollBy = (n, { behavior: r } = {}) => {
      this.cancelScrollToIndex(), r === "smooth" && this.isDynamicMode() && console.warn(
        "The `smooth` scroll behavior is not fully supported with dynamic size."
      ), this._scrollToOffset(this.scrollOffset + n, {
        adjustments: void 0,
        behavior: r
      });
    }, this.getTotalSize = () => {
      var n;
      const r = this.getMeasurements();
      let i;
      return r.length === 0 ? i = this.options.paddingStart : i = this.options.lanes === 1 ? ((n = r[r.length - 1]) == null ? void 0 : n.end) ?? 0 : Math.max(
        ...r.slice(-this.options.lanes).map((f) => f.end)
      ), i - this.options.scrollMargin + this.options.paddingEnd;
    }, this._scrollToOffset = (n, {
      adjustments: r,
      behavior: i
    }) => {
      this.options.scrollToFn(n, { behavior: i, adjustments: r }, this);
    }, this.measure = () => {
      var n, r;
      this.itemSizeCache = /* @__PURE__ */ new Map(), (r = (n = this.options).onChange) == null || r.call(n, this, !1);
    }, this.setOptions(e), this.scrollRect = this.options.initialRect, this.scrollOffset = typeof this.options.initialOffset == "function" ? this.options.initialOffset() : this.options.initialOffset, this.measurementsCache = this.options.initialMeasurementsCache, this.measurementsCache.forEach((n) => {
      this.itemSizeCache.set(n.key, n.size);
    }), this.notify(!1, !1);
  }
}
const gv = (t, e, n, r) => {
  for (; t <= e; ) {
    const i = (t + e) / 2 | 0, f = n(i);
    if (f < r)
      t = i + 1;
    else if (f > r)
      e = i - 1;
    else
      return i;
  }
  return t > 0 ? t - 1 : 0;
};
function yD({
  measurements: t,
  outerSize: e,
  scrollOffset: n
}) {
  const r = t.length - 1, f = gv(0, r, (l) => t[l].start, n);
  let g = f;
  for (; g < r && t[g].end < n + e; )
    g++;
  return { startIndex: f, endIndex: g };
}
const wD = typeof document < "u" ? ge.useLayoutEffect : ge.useEffect;
function xD(t) {
  const e = ge.useReducer(() => ({}), {})[1], n = {
    ...t,
    onChange: (i, f) => {
      var g;
      f ? $v(e) : e(), (g = t.onChange) == null || g.call(t, i, f);
    }
  }, [r] = ge.useState(
    () => new bD(n)
  );
  return r.setOptions(n), ge.useEffect(() => r._didMount(), []), wD(() => r._willUpdate()), r;
}
function CD(t) {
  return xD({
    observeElementRect: dD,
    observeElementOffset: gD,
    scrollToFn: vD,
    ...t
  });
}
function mv() {
  const t = ue((e) => {
    var n;
    return (n = e.config.ui) == null ? void 0 : n.activeTheme;
  });
  return ue(
    (e) => {
      var n;
      return (((n = e.config.ui) == null ? void 0 : n.themes) || []).find((r) => r.name === t);
    }
  );
}
function _D({ category: t }) {
  const e = mv(), n = t.name, r = t.list ? t.list : Array.from(Array(t.items).keys()), i = de(null), f = CD({
    horizontal: !0,
    count: r.length,
    getScrollElement: () => i.current,
    estimateSize: Oe(() => 52, []),
    overscan: 5
  });
  return Se(() => {
    f.scrollToIndex(0);
  }, [n]), /* @__PURE__ */ x(Xt, { children: /* @__PURE__ */ x(
    "div",
    {
      ref: i,
      className: "tiny-scrollbar overflow-x-auto overflow-y-hidden",
      style: { height: "52px" },
      children: /* @__PURE__ */ x(
        "div",
        {
          className: "h-full relative mx-auto",
          style: { width: `${f.getTotalSize()}px` },
          children: f.getVirtualItems().map((g) => {
            const l = `${r[g.index]}`;
            return /* @__PURE__ */ x(
              "div",
              {
                className: "absolute top-0 left-0 h-full",
                style: {
                  width: `${g.size}px`,
                  transform: `translateX(${g.start}px)`
                },
                children: /* @__PURE__ */ x(
                  st,
                  {
                    variant: "outline",
                    radius: "rounded-xl",
                    size: "md",
                    equalWidth: !0,
                    onClick: async () => {
                      await R().shape.addSticker(t.name, l), O().setDirty(!0);
                    },
                    children: /* @__PURE__ */ x(
                      "img",
                      {
                        className: ae(
                          "m-auto m-auto w-28 h-28",
                          t.invertPreview && (e == null ? void 0 : e.isDark) && "invert"
                        ),
                        src: Ga(t, l),
                        alt: l
                      }
                    )
                  }
                )
              },
              g.index
            );
          })
        }
      )
    }
  ) });
}
function SD() {
  const t = ue((i) => {
    var f, g;
    return (g = (f = i.config.tools) == null ? void 0 : f.stickers) == null ? void 0 : g.items;
  }) || [], [e, n] = De(t[0]), r = t.map((i) => {
    const f = e === i, g = F1[i.name];
    return /* @__PURE__ */ x(
      st,
      {
        size: "xs",
        color: f ? "primary" : null,
        value: i,
        children: /* @__PURE__ */ x("span", { className: "capitalize", children: g ? /* @__PURE__ */ x(ye, { ...g }) : i.name })
      },
      i.name
    );
  });
  return /* @__PURE__ */ ie("div", { className: "h-92", children: [
    /* @__PURE__ */ x("div", { className: "mb-10 w-full hide-scrollbar overflow-x-auto overflow-y-hidden flex", children: /* @__PURE__ */ x(
      bo,
      {
        value: e,
        onChange: (i) => n(i),
        variant: "outline",
        radius: "rounded-full",
        className: "mx-auto",
        children: r
      }
    ) }),
    e && /* @__PURE__ */ x(_D, { category: e })
  ] });
}
function TD() {
  const t = ue((r) => {
    var i, f;
    return (f = (i = r.config.tools) == null ? void 0 : i.frame) == null ? void 0 : f.items;
  }) || [], e = ue((r) => r.frame.active);
  Se(() => {
    O().frame.active && O().frame.showOptionsPanel();
  }, []);
  const n = t.map((r) => {
    const i = bt(`images/frames/${r.name}/thumbnail.png`), f = (e == null ? void 0 : e.name) === r.name;
    return /* @__PURE__ */ x(qt, { children: /* @__PURE__ */ ie(
      "button",
      {
        type: "button",
        className: `border-2 overflow-hidden relative rounded border cursor-pointer ${f ? "border-primary" : ""}`,
        onClick: () => {
          O().setDirty(!0), f ? R().frame.remove() : R().frame.add(r.name);
        },
        children: [
          f && /* @__PURE__ */ x(ED, {}),
          /* @__PURE__ */ x(
            "img",
            {
              draggable: "false",
              className: "w-64 h-64",
              src: i,
              alt: r.name
            }
          )
        ]
      }
    ) }, r.name);
  });
  return /* @__PURE__ */ x(ir, { children: n });
}
function ED() {
  return /* @__PURE__ */ x("span", { className: "bg-background/70 absolute inset-0 text-primary", children: /* @__PURE__ */ x(dl, { className: "svg-icon icon-md absolute inset-0 block m-auto" }) });
}
function kD() {
  const t = ue((n) => {
    var r, i;
    return (i = (r = n.config.tools) == null ? void 0 : r.text) == null ? void 0 : i.items;
  });
  Se(() => {
    t && Dg(t, { prefixSrc: bt, id: "pixie-fonts" }).catch(
      () => {
      }
    );
  }, [t]), Se(() => {
    R().text.selectOrAddText() && O().setDirty(!0);
  }, []);
  const e = (t || []).map((n) => /* @__PURE__ */ x(qt, { children: /* @__PURE__ */ x(OD, { fontConfig: n }) }, n.family));
  return /* @__PURE__ */ x(ir, { className: "pt-6", children: e });
}
function OD({ fontConfig: t }) {
  var r;
  const e = ue((i) => i.objects.active.editableProps.fontFamily), n = ae(
    "block px-6 w-110 h-68 text-sm bg border rounded-2xl",
    {
      "border-primary": e === t.family,
      "text-primary": e === t.family
    }
  );
  return /* @__PURE__ */ x(
    "button",
    {
      type: "button",
      className: n,
      style: {
        fontFamily: t.family.includes('"') ? t.family : `"${t.family}"`,
        fontWeight: ((r = t.descriptors) == null ? void 0 : r.weight) || "normal"
      },
      onClick: async () => {
        R().text.selectOrAddText(), O().setDirty(!0), R().objects.setValues({
          fontFamily: t.family
        });
      },
      children: t.family
    }
  );
}
const DD = be(
  /* @__PURE__ */ x("path", { d: "M290.7 57.4L57.4 290.7c-25 25-25 65.5 0 90.5l80 80c12 12 28.3 18.7 45.3 18.7H288h9.4H512c17.7 0 32-14.3 32-32s-14.3-32-32-32H387.9L518.6 285.3c25-25 25-65.5 0-90.5L381.3 57.4c-25-25-65.5-25-90.5 0zM297.4 416H288l-105.4 0-80-80L227.3 211.3 364.7 348.7 297.4 416z" }),
  "EraserFA",
  "0 0 576 512"
);
function AD() {
  return Se(() => (R().draw.enable(), () => {
    R().draw.disable();
  }), []), /* @__PURE__ */ ie(ir, { gap: "gap-16", children: [
    /* @__PURE__ */ x(qt, { children: /* @__PURE__ */ x(
      nr,
      {
        size: "sm",
        label: /* @__PURE__ */ x(ye, { message: "Brush Color" }),
        value: R().draw.currentBrush.color,
        onChange: (t) => {
          R().draw.setBrushColor(t);
        }
      }
    ) }),
    /* @__PURE__ */ x(qt, { children: /* @__PURE__ */ x(MD, {}) }),
    /* @__PURE__ */ x(qt, { children: /* @__PURE__ */ x(PD, {}) })
  ] });
}
function PD() {
  const t = ue((r) => {
    var i, f;
    return (f = (i = r.config.tools) == null ? void 0 : i.draw) == null ? void 0 : f.brushSizes;
  }) || [], [e, n] = De(
    R().draw.currentBrush.width
  );
  return /* @__PURE__ */ x(
    Ac,
    {
      selectionMode: "single",
      selectedValue: e,
      onSelectionChange: (r) => {
        n(r), R().draw.setBrushSize(r);
      },
      size: "sm",
      label: /* @__PURE__ */ x(ye, { message: "Brush Size" }),
      children: t.map((r) => /* @__PURE__ */ x(ho, { value: r, children: /* @__PURE__ */ ie("div", { className: "flex items-center", children: [
        /* @__PURE__ */ x(
          "div",
          {
            className: "flex-shrink-0 mr-8 border-[3px] rounded-full",
            style: { width: `${r}px`, height: `${r}px` }
          }
        ),
        r
      ] }) }, r))
    }
  );
}
function MD() {
  const t = ue((i) => {
    var f, g;
    return (g = (f = i.config.tools) == null ? void 0 : f.draw) == null ? void 0 : g.brushTypes;
  }) || [], e = mv(), [n, r] = De(
    R().draw.currentBrush.type
  );
  return /* @__PURE__ */ x(
    Ac,
    {
      selectionMode: "single",
      selectedValue: n,
      onSelectionChange: (i) => {
        r(i), R().draw.setBrushType(i);
      },
      size: "sm",
      label: /* @__PURE__ */ x(ye, { message: "Brush Type" }),
      children: t.map((i) => /* @__PURE__ */ x(ho, { value: i, children: /* @__PURE__ */ ie("div", { className: "flex items-center", children: [
        i === "EraserBrush" ? /* @__PURE__ */ x(DD, { className: "mr-8" }) : /* @__PURE__ */ x(
          "img",
          {
            className: "flex-shrink-0 mr-8 w-24 h-24",
            src: FD(i, e == null ? void 0 : e.isDark),
            alt: ""
          }
        ),
        /* @__PURE__ */ x(ye, { message: i.replace(/([A-Z])/g, " $1").trim() })
      ] }) }, i))
    }
  );
}
function FD(t, e = !1) {
  const n = t.replace("Brush", "").toLowerCase();
  return bt(`images/brushes/${e ? "white" : "black"}/${n}.png`);
}
function ID() {
  const { trans: t } = En(), e = ue((n) => n.corners.radius);
  return Se(() => (O().setDirty(!0), R().corners.showPreview(), () => R().corners.hidePreview()), []), /* @__PURE__ */ x("div", { className: "max-w-320 mx-auto", children: /* @__PURE__ */ x(
    rr,
    {
      minValue: 1,
      maxValue: 300,
      label: t({ message: "Radius" }),
      getValueLabel: (n) => `${n}px`,
      onChange: (n) => {
        R().corners.updatePreview(n), O().corners.setRadius(n);
      },
      value: e
    }
  ) });
}
const vv = {
  initial: { y: "130%", opacity: 0 },
  animate: { y: 0, opacity: 1 },
  exit: {
    y: "130%",
    opacity: 0,
    left: 0,
    position: "absolute",
    overflowY: "hidden"
  },
  transition: { type: "tween", duration: 0.15 }
};
function RD({ activeTool: t }) {
  const e = LD(t);
  return /* @__PURE__ */ x(
    ot.div,
    {
      className: "relative h-full w-full text-sm bg select-none overflow-hidden",
      ...vv,
      children: e
    }
  );
}
function LD(t) {
  switch (t) {
    case Me.FILTER:
      return /* @__PURE__ */ x(zO, {});
    case Me.RESIZE:
      return /* @__PURE__ */ x(WO, {});
    case Me.CROP:
      return /* @__PURE__ */ x(tD, {});
    case Me.DRAW:
      return /* @__PURE__ */ x(AD, {});
    case Me.TEXT:
      return /* @__PURE__ */ x(kD, {});
    case Me.SHAPES:
      return /* @__PURE__ */ x(oD, {});
    case Me.STICKERS:
      return /* @__PURE__ */ x(SD, {});
    case Me.FRAME:
      return /* @__PURE__ */ x(TD, {});
    case Me.CORNERS:
      return /* @__PURE__ */ x(ID, {});
    default:
      return null;
  }
}
function vf({ className: t }) {
  const e = ue((n) => n.activeTool);
  return /* @__PURE__ */ x(
    "nav",
    {
      className: ae(
        "z-navbar min-h-86 flex-shrink-0 px-16 relative overflow-hidden",
        t
      ),
      children: /* @__PURE__ */ x(tn, { initial: !1, children: e ? /* @__PURE__ */ x(RD, { activeTool: e }, "tool-controls") : /* @__PURE__ */ x(BD, {}, "nav-items") })
    }
  );
}
function BD() {
  const t = ue((e) => {
    var n, r;
    return (r = (n = e.config.ui) == null ? void 0 : n.nav) == null ? void 0 : r.items;
  }) || [];
  return /* @__PURE__ */ x(ot.div, { className: "w-full h-full bg-inherit", ...vv, children: /* @__PURE__ */ x(ir, { children: t.map((e) => /* @__PURE__ */ x(qt, { children: /* @__PURE__ */ x(zD, { item: e }) }, e.name)) }) });
}
function zD({ item: t }) {
  const e = () => {
    typeof t.action == "string" ? Rl(t.action) : typeof t.action == "function" && t.action(O().editor);
  }, n = Z1[t.name];
  return /* @__PURE__ */ ie(
    rn,
    {
      variant: "outline",
      color: "paper",
      className: "flex-col flex-shrink-0 w-68 h-68",
      radius: "rounded-2xl",
      onClick: e,
      children: [
        /* @__PURE__ */ x("div", { className: "mb-1", children: /* @__PURE__ */ x(Sc, { className: "icon-md", icon: t.icon }) }),
        /* @__PURE__ */ x("div", { className: "mt-6 text-xs capitalize max-w-[90%] overflow-hidden overflow-ellipsis", children: n ? /* @__PURE__ */ x(ye, { ...n }) : t.name })
      ]
    }
  );
}
function ND() {
  const t = ue((n) => n.history.items), e = ue((n) => n.history.pointer);
  return /* @__PURE__ */ ie(
    ot.div,
    {
      ...go,
      className: "absolute bottom-20 right-20 w-224 max-w-[calc(100%-40px)] max-h-[calc(100%-40px)] bg-paper shadow-xl border focus:outline-none rounded overflow-hidden",
      children: [
        /* @__PURE__ */ ie("div", { className: "px-10 py-2 mb-4 font-medium text-sm border-b flex items-center", children: [
          /* @__PURE__ */ x(ye, { message: "History" }),
          /* @__PURE__ */ x(
            Fe,
            {
              size: "xs",
              className: "ml-auto flex-shrink-0",
              onClick: () => {
                O().togglePanel("history", !1);
              },
              children: /* @__PURE__ */ x(_n, {})
            }
          )
        ] }),
        /* @__PURE__ */ x("div", { className: "p-10", children: t.map((n) => {
          const r = n.id === t[e].id, i = ln[n.name], f = i.icon && ce.createElement(i.icon, { className: "icon-sm" });
          return /* @__PURE__ */ x(
            st,
            {
              onClick: () => {
                r || R().history.load(n);
              },
              variant: "outline",
              color: r ? "primary" : null,
              size: "sm",
              className: ae("w-full mb-8", r && "pointer-events-none"),
              justify: "justify-start",
              startIcon: f,
              children: /* @__PURE__ */ x(ye, { ...i.name })
            },
            n.id
          );
        }) })
      ]
    }
  );
}
function jD(t) {
  const {
    children: e,
    className: n,
    color: r,
    onDismiss: i,
    leftAdornment: f,
    rightAdornment: g,
    hideDismissButton: l = !1,
    size: s,
    showDivider: a,
    justify: h = "justify-between",
    titleFontWeight: o = "font-semibold",
    titleTextSize: u = s === "xs" ? "text-xs" : "text-sm",
    closeButtonSize: c = s === "xs" ? "xs" : "sm",
    actions: d
  } = t, { labelId: m, isDismissable: p, close: v } = ze(_o);
  return /* @__PURE__ */ ie(
    "div",
    {
      className: ae(
        n,
        "flex flex-shrink-0 items-center gap-10",
        o,
        a && "border-b",
        $D(t),
        r || "text-main",
        h
      ),
      children: [
        f,
        /* @__PURE__ */ x(
          "h3",
          {
            id: m,
            className: ae(u, "mr-auto leading-5 opacity-90"),
            children: e
          }
        ),
        g,
        d,
        p && !l && /* @__PURE__ */ x(
          Fe,
          {
            "aria-label": "Dismiss",
            onClick: () => {
              i ? i() : v();
            },
            size: c,
            className: ae("-mr-8 text-muted", g && "sr-only"),
            children: /* @__PURE__ */ x(_n, {})
          }
        )
      ]
    }
  );
}
function $D({ size: t, padding: e }) {
  if (e)
    return e;
  switch (t) {
    case "2xs":
    case "xs":
      return "px-14 py-4";
    case "sm":
      return "px-18 py-4";
    default:
      return "px-24 py-6";
  }
}
const bv = Je(
  (t, e) => {
    const { children: n, className: r, padding: i, size: f, ...g } = t;
    return /* @__PURE__ */ x(
      "div",
      {
        ...g,
        ref: e,
        className: ae(
          r,
          VD(t),
          "overflow-y-auto overflow-x-hidden overscroll-contain text-sm flex-auto"
        ),
        children: n
      }
    );
  }
);
function VD({ size: t, padding: e }) {
  if (e)
    return e;
  switch (t) {
    case "xs":
      return "p-14";
    case "sm":
      return "p-18";
    default:
      return "px-24 py-20";
  }
}
function HD() {
  const t = ue((e) => e.openPanels.newImage);
  return /* @__PURE__ */ x(
    To,
    {
      isOpen: t,
      disableInitialTransition: !0,
      type: "modal",
      isDismissable: !1,
      children: /* @__PURE__ */ x(WD, {})
    }
  );
}
function WD() {
  const [t, e] = De("default");
  return /* @__PURE__ */ ie(So, { className: "text-center max-w-max text-main", size: "auto", children: [
    /* @__PURE__ */ x(jD, { padding: "px-24 pt-24 pb-12", showDivider: !1, children: /* @__PURE__ */ x(ye, { message: "Open a photo or design to get started" }) }),
    /* @__PURE__ */ x(bv, { children: t === "default" ? /* @__PURE__ */ x(UD, { setActivePanel: e }) : /* @__PURE__ */ x(YD, { setActivePanel: e }) })
  ] });
}
function UD({ setActivePanel: t }) {
  return /* @__PURE__ */ ie(Of, { children: [
    /* @__PURE__ */ x(
      st,
      {
        className: "mr-20",
        size: "sm",
        variant: "raised",
        color: "primary",
        onClick: () => {
          R().import.uploadAndReplaceMainImage();
        },
        children: /* @__PURE__ */ x(ye, { message: "Open Photo" })
      }
    ),
    /* @__PURE__ */ x(
      st,
      {
        variant: "outline",
        size: "sm",
        color: "primary",
        onClick: () => {
          t("newCanvas");
        },
        children: /* @__PURE__ */ x(ye, { message: "Create New" })
      }
    ),
    /* @__PURE__ */ x(XD, {})
  ] });
}
function XD() {
  const t = ue(
    (e) => {
      var n, r;
      return (r = (n = e.config.ui) == null ? void 0 : n.openImageDialog) == null ? void 0 : r.sampleImages;
    }
  );
  return t != null && t.length ? /* @__PURE__ */ ie(Of, { children: [
    /* @__PURE__ */ ie("div", { className: "relative py-20 text-main", children: [
      /* @__PURE__ */ x("hr", { className: "absolute h-1 border-none bg-divider w-full top inset-0 m-auto" }),
      /* @__PURE__ */ x("span", { className: "text-sm bg px-6 relative", children: /* @__PURE__ */ x(ye, { message: "or use sample" }) })
    ] }),
    /* @__PURE__ */ x("ul", { className: "flex items-center gap-16", children: t.map((e) => /* @__PURE__ */ x("li", { className: "shrink-0", children: /* @__PURE__ */ x(
      "button",
      {
        type: "button",
        onClick: async () => {
          typeof e.action == "function" ? e.action() : e.url.endsWith(".json") ? (await no(bt(e.url)), O().togglePanel("newImage", !1)) : (await R().import.openBackgroundImage(bt(e.url)), O().togglePanel("newImage", !1));
        },
        children: /* @__PURE__ */ x(
          "img",
          {
            className: "w-80 h-80 rounded overflow-hidden transition-shadow hover:shadow-md",
            src: bt(e.thumbnail),
            alt: ""
          }
        )
      }
    ) }, e.url || e.thumbnail)) })
  ] }) : null;
}
function YD({ setActivePanel: t }) {
  const [e, n] = De({
    width: 800,
    height: 600,
    bgColor: "transparent"
  });
  return /* @__PURE__ */ ie(
    "form",
    {
      onSubmit: (r) => {
        r.preventDefault();
        const { width: i, height: f, bgColor: g } = e;
        i && f && (O().setConfig({ blankCanvasSize: { width: i, height: f } }), R().canvas.openNew(i, f, g), O().togglePanel("newImage", !1), R().history.addInitial());
      },
      children: [
        /* @__PURE__ */ x(
          Qt,
          {
            type: "number",
            label: /* @__PURE__ */ x(ye, { message: "Width" }),
            value: e.width,
            min: 1,
            required: !0,
            className: "mb-16",
            onChange: (r) => {
              n({ ...e, width: r.target.valueAsNumber });
            }
          }
        ),
        /* @__PURE__ */ x(
          Qt,
          {
            type: "number",
            label: /* @__PURE__ */ x(ye, { message: "Height" }),
            value: e.height,
            min: 1,
            required: !0,
            className: "mb-16",
            onChange: (r) => {
              n({ ...e, height: r.target.valueAsNumber });
            }
          }
        ),
        /* @__PURE__ */ x(
          nr,
          {
            onChange: (r) => {
              n({ ...e, bgColor: r });
            },
            className: "mb-16",
            value: e.bgColor,
            label: /* @__PURE__ */ x(ye, { message: "Background color" })
          }
        ),
        /* @__PURE__ */ ie("div", { className: "text-right", children: [
          /* @__PURE__ */ x(
            st,
            {
              size: "sm",
              variant: "text",
              className: "mr-10",
              onClick: () => {
                t("default");
              },
              children: /* @__PURE__ */ x(ye, { message: "Cancel" })
            }
          ),
          /* @__PURE__ */ x(st, { size: "sm", type: "submit", variant: "raised", color: "primary", children: /* @__PURE__ */ x(ye, { message: "Create" }) })
        ] })
      ]
    }
  );
}
const GD = Je(
  (t, e) => {
    const n = tr(t), {
      label: r,
      children: i,
      size: f,
      className: g,
      orientation: l = "horizontal",
      disabled: s,
      required: a,
      invalid: h,
      errorMessage: o,
      description: u
    } = t, c = {}, d = Pt(), m = t.name || d;
    return /* @__PURE__ */ ie(
      "fieldset",
      {
        "aria-describedby": u ? `${d}-description` : void 0,
        ref: e,
        className: ae("text-left", g),
        children: [
          r && /* @__PURE__ */ x("legend", { className: n.label, ...c, children: r }),
          /* @__PURE__ */ x(
            "div",
            {
              className: ae(
                "flex",
                r ? "mt-6" : "mt-0",
                l === "vertical" ? "flex-col gap-10" : "flex-row gap-16"
              ),
              children: mn.map(i, (p) => {
                if (Jt(p))
                  return ut(p, {
                    name: m,
                    size: f,
                    invalid: p.props.invalid || h || void 0,
                    disabled: p.props.disabled || s,
                    required: p.props.required || a
                  });
              })
            }
          ),
          u && !o && /* @__PURE__ */ x("div", { className: n.description, id: `${d}-description`, children: u }),
          o && /* @__PURE__ */ x("div", { className: n.error, children: o })
        ]
      }
    );
  }
), ia = Je((t, e) => {
  const { children: n, autoFocus: r, size: i, invalid: f, isFirst: g, ...l } = t, s = er(e);
  _c({ autoFocus: r }, s);
  const a = KD(i);
  return /* @__PURE__ */ ie(
    "label",
    {
      className: ae(
        "inline-flex gap-8 select-none items-center whitespace-nowrap align-middle",
        a.label,
        t.disabled && "text-disabled pointer-events-none",
        t.invalid && "text-danger"
      ),
      children: [
        /* @__PURE__ */ x(
          "input",
          {
            type: "radio",
            className: ae(
              "focus-visible:ring outline-none",
              "rounded-full transition-button border-2 appearance-none",
              "border-text-muted disabled:border-disabled-fg checked:border-primary checked:hover:border-primary-dark",
              "before:bg-primary disabled:before:bg-disabled-fg before:hover:bg-primary-dark",
              "before:h-full before:w-full before:block before:rounded-full before:scale-10 before:opacity-0 before:transition before:duration-200",
              "checked:before:scale-[.65] checked:before:opacity-100",
              a.circle
            ),
            ref: s,
            ...l
          }
        ),
        n && /* @__PURE__ */ x("span", { children: n })
      ]
    }
  );
});
function KD(t) {
  switch (t) {
    case "xs":
      return { circle: "h-12 w-12", label: "text-xs" };
    case "sm":
      return { circle: "h-16 w-16", label: "text-sm" };
    case "lg":
      return { circle: "h-24 w-24", label: "text-lg" };
    default:
      return { circle: "h-20 w-20", label: "text-base" };
  }
}
function qD() {
  const t = ue((e) => e.openPanels.export);
  return /* @__PURE__ */ x(
    To,
    {
      isOpen: t,
      onOpenChange: (e) => {
        e || O().togglePanel("export", !1);
      },
      type: "modal",
      children: /* @__PURE__ */ x(ZD, {})
    }
  );
}
function ZD() {
  const [t, e] = De(() => {
    var n, r, i, f, g, l;
    return {
      filename: ((r = (n = O().config.tools) == null ? void 0 : n.export) == null ? void 0 : r.defaultName) || "image",
      format: ((f = (i = O().config.tools) == null ? void 0 : i.export) == null ? void 0 : f.defaultFormat) || "jpeg",
      quality: ((l = (g = O().config.tools) == null ? void 0 : g.export) == null ? void 0 : l.defaultQuality) || 0.8
    };
  });
  return /* @__PURE__ */ x(So, { className: "text-center max-w-max text-main", size: "auto", children: /* @__PURE__ */ x(bv, { children: /* @__PURE__ */ ie(
    "form",
    {
      onSubmit: (n) => {
        n.preventDefault(), R().export.save(
          t.filename,
          t.format,
          t.quality
        ), O().togglePanel("export", !1);
      },
      children: [
        /* @__PURE__ */ x(
          Qt,
          {
            required: !0,
            size: "sm",
            label: /* @__PURE__ */ x(ye, { message: "Save As" }),
            value: t.filename,
            onChange: (n) => {
              e({ ...t, filename: n.target.value });
            }
          }
        ),
        /* @__PURE__ */ ie(GD, { size: "sm", className: "my-20", "aria-label": "Image format", children: [
          /* @__PURE__ */ x(
            ia,
            {
              value: "jpeg",
              checked: t.format === "jpeg",
              onChange: (n) => {
                e({ ...t, format: n.target.value });
              },
              children: "JPEG"
            }
          ),
          /* @__PURE__ */ x(
            ia,
            {
              value: "png",
              checked: t.format === "png",
              onChange: (n) => {
                e({ ...t, format: n.target.value });
              },
              children: "PNG"
            }
          ),
          /* @__PURE__ */ x(
            ia,
            {
              value: "json",
              checked: t.format === "json",
              onChange: (n) => {
                e({ ...t, format: n.target.value });
              },
              children: "JSON"
            }
          )
        ] }),
        /* @__PURE__ */ x(
          rr,
          {
            size: "sm",
            minValue: 0.1,
            step: 0.1,
            maxValue: 1,
            value: t.quality,
            onChange: (n) => {
              e({ ...t, quality: n });
            },
            formatOptions: { style: "percent" },
            label: /* @__PURE__ */ x(ye, { message: "Quality" })
          }
        ),
        /* @__PURE__ */ x(
          st,
          {
            variant: "raised",
            color: "primary",
            type: "submit",
            className: "mt-20 w-full",
            size: "sm",
            children: /* @__PURE__ */ x(ye, { message: "Save" })
          }
        )
      ]
    }
  ) }) });
}
function JD() {
  const t = ue((n) => n.objects.all), e = ue((n) => n.objects.active.id);
  return /* @__PURE__ */ ie(
    ot.div,
    {
      ...go,
      className: "absolute bottom-20 right-20 w-224 max-w-[calc(100%-40px)] max-h-[calc(100%-40px)] bg-paper shadow-xl border focus:outline-none rounded overflow-hidden",
      children: [
        /* @__PURE__ */ ie("div", { className: "px-10 py-2 mb-4 font-medium text-sm border-b flex items-center", children: [
          /* @__PURE__ */ x(ye, { message: "Objects" }),
          /* @__PURE__ */ x(
            Fe,
            {
              size: "xs",
              className: "ml-auto flex-shrink-0",
              onClick: () => {
                O().togglePanel("objects", !1);
              },
              children: /* @__PURE__ */ x(_n, {})
            }
          )
        ] }),
        /* @__PURE__ */ x("div", { className: "p-8", children: t.map((n) => {
          const r = n.id === e, i = n.name;
          if (!i)
            return null;
          const f = g2[i], g = f.icon && ce.createElement(f.icon, { className: "icon-sm" });
          return /* @__PURE__ */ x(
            st,
            {
              onClick: () => {
                r || !n.selectable || R().objects.select(n.id);
              },
              variant: "outline",
              color: r ? "primary" : null,
              size: "sm",
              className: ae(
                "w-full mb-8",
                (r || !n.selectable) && "pointer-events-none"
              ),
              justify: "justify-start",
              startIcon: g,
              children: /* @__PURE__ */ x(ye, { ...f.name })
            },
            n.id
          );
        }) })
      ]
    }
  );
}
function QD() {
  const t = ue((n) => n.openPanels.history), e = ue((n) => n.openPanels.objects);
  return /* @__PURE__ */ ie("div", { className: "z-modal", children: [
    /* @__PURE__ */ ie(tn, { children: [
      t && /* @__PURE__ */ x(ND, {}, "historyPanel"),
      e && /* @__PURE__ */ x(JD, {}, "objListPanel")
    ] }),
    /* @__PURE__ */ x(HD, {}),
    /* @__PURE__ */ x(qD, {})
  ] });
}
/**
 * @remix-run/router v1.16.1
 *
 * Copyright (c) Remix Software Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE.md file in the root directory of this source tree.
 *
 * @license MIT
 */
function pl() {
  return pl = Object.assign ? Object.assign.bind() : function(t) {
    for (var e = 1; e < arguments.length; e++) {
      var n = arguments[e];
      for (var r in n)
        Object.prototype.hasOwnProperty.call(n, r) && (t[r] = n[r]);
    }
    return t;
  }, pl.apply(this, arguments);
}
var bf;
(function(t) {
  t.Pop = "POP", t.Push = "PUSH", t.Replace = "REPLACE";
})(bf || (bf = {}));
function Zt(t, e) {
  if (t === !1 || t === null || typeof t > "u")
    throw new Error(e);
}
function yf(t) {
  let {
    pathname: e = "/",
    search: n = "",
    hash: r = ""
  } = t;
  return n && n !== "?" && (e += n.charAt(0) === "?" ? n : "?" + n), r && r !== "#" && (e += r.charAt(0) === "#" ? r : "#" + r), e;
}
function yv(t) {
  let e = {};
  if (t) {
    let n = t.indexOf("#");
    n >= 0 && (e.hash = t.substr(n), t = t.substr(0, n));
    let r = t.indexOf("?");
    r >= 0 && (e.search = t.substr(r), t = t.substr(0, r)), t && (e.pathname = t);
  }
  return e;
}
var wf;
(function(t) {
  t.data = "data", t.deferred = "deferred", t.redirect = "redirect", t.error = "error";
})(wf || (wf = {}));
function eA(t, e) {
  if (e === "/")
    return t;
  if (!t.toLowerCase().startsWith(e.toLowerCase()))
    return null;
  let n = e.endsWith("/") ? e.length - 1 : e.length, r = t.charAt(n);
  return r && r !== "/" ? null : t.slice(n) || "/";
}
function tA(t, e) {
  e === void 0 && (e = "/");
  let {
    pathname: n,
    search: r = "",
    hash: i = ""
  } = typeof t == "string" ? yv(t) : t;
  return {
    pathname: n ? n.startsWith("/") ? n : nA(n, e) : e,
    search: iA(r),
    hash: sA(i)
  };
}
function nA(t, e) {
  let n = e.replace(/\/+$/, "").split("/");
  return t.split("/").forEach((i) => {
    i === ".." ? n.length > 1 && n.pop() : i !== "." && n.push(i);
  }), n.length > 1 ? n.join("/") : "/";
}
function sa(t, e, n, r) {
  return "Cannot include a '" + t + "' character in a manually specified " + ("`to." + e + "` field [" + JSON.stringify(r) + "].  Please separate it out to the ") + ("`to." + n + "` field. Alternatively you may provide the full path as ") + 'a string in <Link to="..."> and the router will parse it for you.';
}
function rA(t) {
  return t.filter((e, n) => n === 0 || e.route.path && e.route.path.length > 0);
}
function wv(t, e) {
  let n = rA(t);
  return e ? n.map((r, i) => i === t.length - 1 ? r.pathname : r.pathnameBase) : n.map((r) => r.pathnameBase);
}
function xv(t, e, n, r) {
  r === void 0 && (r = !1);
  let i;
  typeof t == "string" ? i = yv(t) : (i = pl({}, t), Zt(!i.pathname || !i.pathname.includes("?"), sa("?", "pathname", "search", i)), Zt(!i.pathname || !i.pathname.includes("#"), sa("#", "pathname", "hash", i)), Zt(!i.search || !i.search.includes("#"), sa("#", "search", "hash", i)));
  let f = t === "" || i.pathname === "", g = f ? "/" : i.pathname, l;
  if (g == null)
    l = n;
  else {
    let o = e.length - 1;
    if (!r && g.startsWith("..")) {
      let u = g.split("/");
      for (; u[0] === ".."; )
        u.shift(), o -= 1;
      i.pathname = u.join("/");
    }
    l = o >= 0 ? e[o] : "/";
  }
  let s = tA(i, l), a = g && g !== "/" && g.endsWith("/"), h = (f || g === ".") && n.endsWith("/");
  return !s.pathname.endsWith("/") && (a || h) && (s.pathname += "/"), s;
}
const Cv = (t) => t.join("/").replace(/\/\/+/g, "/"), iA = (t) => !t || t === "?" ? "" : t.startsWith("?") ? t : "?" + t, sA = (t) => !t || t === "#" ? "" : t.startsWith("#") ? t : "#" + t, _v = ["post", "put", "patch", "delete"];
new Set(_v);
const oA = ["get", ..._v];
new Set(oA);
/**
 * React Router v6.23.1
 *
 * Copyright (c) Remix Software Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE.md file in the root directory of this source tree.
 *
 * @license MIT
 */
function gl() {
  return gl = Object.assign ? Object.assign.bind() : function(t) {
    for (var e = 1; e < arguments.length; e++) {
      var n = arguments[e];
      for (var r in n)
        Object.prototype.hasOwnProperty.call(n, r) && (t[r] = n[r]);
    }
    return t;
  }, gl.apply(this, arguments);
}
const Sv = /* @__PURE__ */ ge.createContext(null), Vi = /* @__PURE__ */ ge.createContext(null), Tv = /* @__PURE__ */ ge.createContext(null), Eo = /* @__PURE__ */ ge.createContext({
  outlet: null,
  matches: [],
  isDataRoute: !1
});
function aA(t, e) {
  let {
    relative: n
  } = e === void 0 ? {} : e;
  Pc() || Zt(!1);
  let {
    basename: r,
    navigator: i
  } = ge.useContext(Vi), {
    hash: f,
    pathname: g,
    search: l
  } = kv(t, {
    relative: n
  }), s = g;
  return r !== "/" && (s = g === "/" ? r : Cv([r, g])), i.createHref({
    pathname: s,
    search: l,
    hash: f
  });
}
function Pc() {
  return ge.useContext(Tv) != null;
}
function Mc() {
  return Pc() || Zt(!1), ge.useContext(Tv).location;
}
function Ev(t) {
  ge.useContext(Vi).static || ge.useLayoutEffect(t);
}
function lA() {
  let {
    isDataRoute: t
  } = ge.useContext(Eo);
  return t ? dA() : cA();
}
function cA() {
  Pc() || Zt(!1);
  let t = ge.useContext(Sv), {
    basename: e,
    future: n,
    navigator: r
  } = ge.useContext(Vi), {
    matches: i
  } = ge.useContext(Eo), {
    pathname: f
  } = Mc(), g = JSON.stringify(wv(i, n.v7_relativeSplatPath)), l = ge.useRef(!1);
  return Ev(() => {
    l.current = !0;
  }), ge.useCallback(function(a, h) {
    if (h === void 0 && (h = {}), !l.current)
      return;
    if (typeof a == "number") {
      r.go(a);
      return;
    }
    let o = xv(a, JSON.parse(g), f, h.relative === "path");
    t == null && e !== "/" && (o.pathname = o.pathname === "/" ? e : Cv([e, o.pathname])), (h.replace ? r.replace : r.push)(o, h.state, h);
  }, [e, r, g, f, t]);
}
function kv(t, e) {
  let {
    relative: n
  } = e === void 0 ? {} : e, {
    future: r
  } = ge.useContext(Vi), {
    matches: i
  } = ge.useContext(Eo), {
    pathname: f
  } = Mc(), g = JSON.stringify(wv(i, r.v7_relativeSplatPath));
  return ge.useMemo(() => xv(t, JSON.parse(g), f, n === "path"), [t, g, f, n]);
}
var Ov = /* @__PURE__ */ function(t) {
  return t.UseBlocker = "useBlocker", t.UseRevalidator = "useRevalidator", t.UseNavigateStable = "useNavigate", t;
}(Ov || {}), Dv = /* @__PURE__ */ function(t) {
  return t.UseBlocker = "useBlocker", t.UseLoaderData = "useLoaderData", t.UseActionData = "useActionData", t.UseRouteError = "useRouteError", t.UseNavigation = "useNavigation", t.UseRouteLoaderData = "useRouteLoaderData", t.UseMatches = "useMatches", t.UseRevalidator = "useRevalidator", t.UseNavigateStable = "useNavigate", t.UseRouteId = "useRouteId", t;
}(Dv || {});
function uA(t) {
  let e = ge.useContext(Sv);
  return e || Zt(!1), e;
}
function hA(t) {
  let e = ge.useContext(Eo);
  return e || Zt(!1), e;
}
function fA(t) {
  let e = hA(), n = e.matches[e.matches.length - 1];
  return n.route.id || Zt(!1), n.route.id;
}
function dA() {
  let {
    router: t
  } = uA(Ov.UseNavigateStable), e = fA(Dv.UseNavigateStable), n = ge.useRef(!1);
  return Ev(() => {
    n.current = !0;
  }), ge.useCallback(function(i, f) {
    f === void 0 && (f = {}), n.current && (typeof i == "number" ? t.navigate(i) : t.navigate(i, gl({
      fromRouteId: e
    }, f)));
  }, [t, e]);
}
new Promise(() => {
});
/**
 * React Router DOM v6.23.1
 *
 * Copyright (c) Remix Software Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE.md file in the root directory of this source tree.
 *
 * @license MIT
 */
function ml() {
  return ml = Object.assign ? Object.assign.bind() : function(t) {
    for (var e = 1; e < arguments.length; e++) {
      var n = arguments[e];
      for (var r in n)
        Object.prototype.hasOwnProperty.call(n, r) && (t[r] = n[r]);
    }
    return t;
  }, ml.apply(this, arguments);
}
function pA(t, e) {
  if (t == null)
    return {};
  var n = {}, r = Object.keys(t), i, f;
  for (f = 0; f < r.length; f++)
    i = r[f], !(e.indexOf(i) >= 0) && (n[i] = t[i]);
  return n;
}
function gA(t) {
  return !!(t.metaKey || t.altKey || t.ctrlKey || t.shiftKey);
}
function mA(t, e) {
  return t.button === 0 && // Ignore everything but left clicks
  (!e || e === "_self") && // Let browser handle "target=_blank" etc.
  !gA(t);
}
const vA = ["onClick", "relative", "reloadDocument", "replace", "state", "target", "to", "preventScrollReset", "unstable_viewTransition"], bA = "6";
try {
  window.__reactRouterVersion = bA;
} catch {
}
const yA = typeof window < "u" && typeof window.document < "u" && typeof window.document.createElement < "u", wA = /^(?:[a-z][a-z0-9+.-]*:|\/\/)/i, xA = /* @__PURE__ */ ge.forwardRef(function(e, n) {
  let {
    onClick: r,
    relative: i,
    reloadDocument: f,
    replace: g,
    state: l,
    target: s,
    to: a,
    preventScrollReset: h,
    unstable_viewTransition: o
  } = e, u = pA(e, vA), {
    basename: c
  } = ge.useContext(Vi), d, m = !1;
  if (typeof a == "string" && wA.test(a) && (d = a, yA))
    try {
      let y = new URL(window.location.href), w = a.startsWith("//") ? new URL(y.protocol + a) : new URL(a), C = eA(w.pathname, c);
      w.origin === y.origin && C != null ? a = C + w.search + w.hash : m = !0;
    } catch {
    }
  let p = aA(a, {
    relative: i
  }), v = CA(a, {
    replace: g,
    state: l,
    target: s,
    preventScrollReset: h,
    relative: i,
    unstable_viewTransition: o
  });
  function b(y) {
    r && r(y), y.defaultPrevented || v(y);
  }
  return (
    // eslint-disable-next-line jsx-a11y/anchor-has-content
    /* @__PURE__ */ ge.createElement("a", ml({}, u, {
      href: d || p,
      onClick: m || f ? r : b,
      ref: n,
      target: s
    }))
  );
});
var xf;
(function(t) {
  t.UseScrollRestoration = "useScrollRestoration", t.UseSubmit = "useSubmit", t.UseSubmitFetcher = "useSubmitFetcher", t.UseFetcher = "useFetcher", t.useViewTransitionState = "useViewTransitionState";
})(xf || (xf = {}));
var Cf;
(function(t) {
  t.UseFetcher = "useFetcher", t.UseFetchers = "useFetchers", t.UseScrollRestoration = "useScrollRestoration";
})(Cf || (Cf = {}));
function CA(t, e) {
  let {
    target: n,
    replace: r,
    state: i,
    preventScrollReset: f,
    relative: g,
    unstable_viewTransition: l
  } = e === void 0 ? {} : e, s = lA(), a = Mc(), h = kv(t, {
    relative: g
  });
  return ge.useCallback((o) => {
    if (mA(o, n)) {
      o.preventDefault();
      let u = r !== void 0 ? r : yf(a) === yf(h);
      s(t, {
        replace: u,
        state: i,
        preventScrollReset: f,
        relative: g,
        unstable_viewTransition: l
      });
    }
  }, [a, s, h, r, i, n, t, f, g, l]);
}
const _A = be(
  /* @__PURE__ */ x("path", { d: "M11 15h2v2h-2v-2zm0-8h2v6h-2V7zm.99-5C6.47 2 2 6.48 2 12s4.47 10 9.99 10C17.52 22 22 17.52 22 12S17.52 2 11.99 2zM12 20c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8z" }),
  "ErrorOutlineOutlined"
), SA = be(
  /* @__PURE__ */ x("path", { d: "M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8zm4.59-12.42L10 14.17l-2.59-2.58L6 13l4 4 8-8z" }),
  "CheckCircleOutlined"
), TA = { opacity: 0, y: 50, scale: 0.3 }, EA = { opacity: 1, y: 0, scale: 1 }, kA = {
  opacity: 0,
  scale: 0.5
};
function OA() {
  const t = fp((e) => e.toasts);
  return /* @__PURE__ */ x("div", { className: "pointer-events-none relative", children: /* @__PURE__ */ x(tn, { initial: !1, children: t.map((e) => /* @__PURE__ */ x(
    "div",
    {
      className: ae(
        "fixed z-toast mx-auto p-20",
        e.position === "bottom-center" ? "bottom-0 left-0 right-0" : "bottom-0 right-0"
      ),
      children: /* @__PURE__ */ ie(
        ot.div,
        {
          initial: e.disableEnterAnimation ? void 0 : TA,
          animate: e.disableEnterAnimation ? void 0 : EA,
          exit: e.disableExitAnimation ? void 0 : kA,
          className: ae(
            "pointer-events-auto mx-auto flex max-h-100 min-h-50 w-min min-w-288 max-w-500 items-center gap-10 rounded-lg border bg-paper bg-paper py-6 pl-16 pr-6 text-sm text-main shadow-lg"
          ),
          onPointerEnter: () => {
            var n;
            return (n = e.timer) == null ? void 0 : n.pause();
          },
          onPointerLeave: () => {
            var n;
            return (n = e.timer) == null ? void 0 : n.resume();
          },
          role: "alert",
          "aria-live": e.type === "danger" ? "assertive" : "polite",
          children: [
            e.type === "danger" && /* @__PURE__ */ x(
              _A,
              {
                className: "flex-shrink-0 text-danger",
                size: "md"
              }
            ),
            e.type === "loading" && /* @__PURE__ */ x(
              hv,
              {
                size: "sm",
                className: "flex-shrink-0",
                isIndeterminate: !0
              }
            ),
            e.type === "positive" && /* @__PURE__ */ x(
              SA,
              {
                className: "flex-shrink-0 text-positive",
                size: "md"
              }
            ),
            /* @__PURE__ */ x(
              "div",
              {
                className: "mr-auto w-max overflow-hidden overflow-ellipsis",
                "data-testid": "toast-message",
                children: /* @__PURE__ */ x(sl, { value: e.message })
              }
            ),
            e.action && /* @__PURE__ */ x(
              st,
              {
                variant: "text",
                color: "primary",
                size: "sm",
                className: "flex-shrink-0",
                onFocus: () => {
                  var n;
                  return (n = e.timer) == null ? void 0 : n.pause();
                },
                onBlur: () => {
                  var n;
                  return (n = e.timer) == null ? void 0 : n.resume();
                },
                onClick: () => Er().remove(e.id),
                elementType: xA,
                to: e.action.action,
                children: /* @__PURE__ */ x(sl, { value: e.action.label })
              }
            ),
            e.type !== "loading" && /* @__PURE__ */ x(
              Fe,
              {
                onFocus: () => {
                  var n;
                  return (n = e.timer) == null ? void 0 : n.pause();
                },
                onBlur: () => {
                  var n;
                  return (n = e.timer) == null ? void 0 : n.resume();
                },
                type: "button",
                className: "flex-shrink-0",
                onClick: () => {
                  Er().remove(e.id);
                },
                size: "sm",
                children: /* @__PURE__ */ x(_n, {})
              }
            )
          ]
        }
      )
    },
    e.id
  )) }) });
}
function _f(t) {
  return _g() ? t.metaKey : t.ctrlKey;
}
function DA(t) {
  switch (t.key) {
    case "z":
      _f(t) && (t.preventDefault(), t.stopPropagation(), t.shiftKey ? R().history.redo() : R().history.undo());
      break;
    case "ArrowUp":
      t.preventDefault(), t.stopPropagation(), R().objects.move("up");
      break;
    case "ArrowRight":
      t.preventDefault(), t.stopPropagation(), R().objects.move("right");
      break;
    case "ArrowDown":
      t.preventDefault(), t.stopPropagation(), R().objects.move("down");
      break;
    case "ArrowLeft":
      t.preventDefault(), t.stopPropagation(), R().objects.move("left");
      break;
    case "Delete":
      t.preventDefault(), t.stopPropagation(), R().objects.delete();
      break;
    case "v":
      _f(t) && (t.preventDefault(), t.stopPropagation(), AA());
      break;
  }
}
async function AA() {
  try {
    const t = await navigator.clipboard.read();
    for (const e of t)
      for (const n of e.types)
        if (n.startsWith("image/")) {
          const r = await e.getType(n), i = new FileReader();
          i.onload = (f) => {
            var g;
            (g = f.target) != null && g.result && R().import.addImageFromData(f.target.result);
          }, i.readAsDataURL(r);
          return;
        }
  } catch (t) {
    console.error(t);
  }
}
const PA = /* @__PURE__ */ new Map(), oa = /* @__PURE__ */ new Map(), Sf = {
  status: "inactive"
};
async function* MA(t) {
  const e = [];
  for (const n of t.items)
    if (n.kind === "file") {
      const r = n.webkitGetAsEntry();
      r && e.push(r);
    }
  for (const n of e)
    if (n.isFile) {
      if (n.name === ".DS_Store")
        continue;
      const r = await Pv(n);
      yield new uo(r, n.fullPath);
    } else
      n.isDirectory && (yield* Av(n));
}
async function* Av(t) {
  const e = t.createReader();
  let n;
  do {
    n = await new Promise((r, i) => {
      e.readEntries(r, i);
    });
    for (const r of n)
      if (r.isFile) {
        if (r.name === ".DS_Store")
          continue;
        const i = await Pv(r);
        yield new uo(i, r.fullPath);
      } else
        r.isDirectory && (yield* Av(r));
  } while (n.length > 0);
}
function Pv(t) {
  return new Promise((e, n) => t.file(e, n));
}
async function FA(t) {
  const e = [];
  for await (const n of t)
    e.push(n);
  return e;
}
const IA = 400;
function RA({
  id: t,
  disabled: e,
  ref: n,
  ...r
}) {
  const i = de({
    dragOverElements: /* @__PURE__ */ new Set(),
    dropActivateTimer: void 0
  }).current, f = de(r);
  f.current = r, Ci(() => (oa.set(t, {
    ...oa.get(t),
    disabled: e,
    id: t,
    ref: n
  }), () => {
    oa.delete(t);
  }), [t, f, e, n]);
  const g = (u) => {
    var m;
    const c = f.current, d = c.allowDragEventsFromItself || n.current !== ((m = u.ref) == null ? void 0 : m.current);
    return !!(u != null && u.type && d && c.types.includes(u.type) && (!c.acceptsDrop || c.acceptsDrop(u)));
  }, l = (u) => {
    var d, m;
    const c = Gr(u);
    c && ((m = (d = f.current).onDragLeave) == null || m.call(d, c));
  };
  return {
    droppableProps: e ? {} : {
      onDragOver: (u) => {
        var d, m;
        u.preventDefault(), u.stopPropagation();
        const c = Gr(u);
        c && g(c) && ((m = (d = f.current).onDragOver) == null || m.call(d, c, u));
      },
      onDragEnter: (u) => {
        var d, m;
        if (u.stopPropagation(), i.dragOverElements.add(u.target), i.dragOverElements.size > 1)
          return;
        const c = Gr(u);
        c && g(c) && ((m = (d = f.current).onDragEnter) == null || m.call(d, c), clearTimeout(i.dropActivateTimer), typeof f.current.onDropActivate == "function" && (i.dropActivateTimer = setTimeout(() => {
          var p, v;
          c && ((v = (p = f.current).onDropActivate) == null || v.call(p, c));
        }, IA)));
      },
      onDragLeave: (u) => {
        u.stopPropagation(), i.dragOverElements.delete(u.target);
        for (const d of i.dragOverElements)
          u.currentTarget.contains(d) || i.dragOverElements.delete(d);
        if (i.dragOverElements.size > 0)
          return;
        const c = Gr(u);
        c && g(c) && (l(u), clearTimeout(i.dropActivateTimer));
      },
      onDrop: async (u) => {
        var d, m, p, v;
        u.preventDefault(), u.stopPropagation(), i.dragOverElements.clear(), l(u), clearTimeout(i.dropActivateTimer);
        const c = Gr(u);
        c && ((m = (d = f.current).onDragLeave) == null || m.call(d, c), g(c) && ((v = (p = f.current).onDrop) == null || v.call(p, c)));
      }
    }
  };
}
function Gr(t) {
  if (Sf.dragTargetId != null)
    return PA.get(Sf.dragTargetId);
  if (t.dataTransfer.types.includes("Files"))
    return {
      type: "nativeFile",
      el: null,
      ref: null,
      getData: () => FA(MA(t.dataTransfer))
    };
}
function LA() {
  const t = ue((d) => {
    var m;
    return (m = d.config.ui) == null ? void 0 : m.visible;
  }) ?? !0, e = ue((d) => {
    var m, p;
    return (p = (m = d.config.ui) == null ? void 0 : m.nav) == null ? void 0 : p.position;
  }) ?? "bottom", n = ue((d) => {
    var m, p;
    return (p = (m = d.config.ui) == null ? void 0 : m.menubar) == null ? void 0 : p.position;
  }) ?? "top", r = ue((d) => {
    var m;
    return (m = d.config.ui) == null ? void 0 : m.allowEditorClose;
  }) ?? !0, i = de(null), f = de(null), { isModal: g, isMobile: l } = yo(), s = Oe(async (d) => {
    var p, v;
    if (O().activeTool || O().dirty || d.type !== "nativeFile")
      return;
    const m = await d.getData();
    R().import.fileIsValid(m[0]) && (((v = (p = O().config.tools) == null ? void 0 : p.import) == null ? void 0 : v.openDroppedImageAsBackground) ?? !1 ? await R().import.openBackgroundImage(m[0]) : await R().import.openUploadedFile(m[0]));
  }, []), { droppableProps: a } = RA({
    id: "pixie-root",
    ref: f,
    types: ["nativeFile"],
    onDrop: s
  });
  Se(() => {
    var p, v;
    O().fabric || (ue.setState({ canvasRef: i }), t5(i.current), (p = O().config.ui) != null && p.defaultTool && O().setActiveTool((v = O().config.ui) == null ? void 0 : v.defaultTool, null), R().canvas.loadInitialContent().then(() => {
      var b, y;
      (y = (b = O().config).onLoad) == null || y.call(b, O().editor);
    }));
    const d = fh(f, () => {
      O().setStageSize(dh(f.current));
    }), m = fh(i, () => {
      O().setCanvasSize(dh(i.current));
    });
    return () => {
      d(), m();
    };
  }, [f]);
  const h = {
    visible: {
      opacity: 1,
      scale: 1,
      display: "flex"
    },
    hidden: { opacity: 0, transitionEnd: { display: "none" } }
  }, o = ae(
    "pixie-root flex flex-col overflow-hidden bg-background text-main no-tap-highlight w-full h-full",
    {
      relative: !g,
      "fixed inset-0 w-full h-full z-20": g,
      "shadow-lg border rounded-md m-auto max-h-[calc(100vh-90px)] max-w-[calc(100vw-90px)]": g && !l
    }
  );
  return /* @__PURE__ */ ie(SS, { features: TS, strict: !0, children: [
    g && t && !l && r && /* @__PURE__ */ x(
      Fe,
      {
        className: "z-20 fixed right-2 top-2 text-white",
        size: "lg",
        onClick: () => {
          O().editor.close();
        },
        children: /* @__PURE__ */ x(_n, {})
      }
    ),
    g && t && /* @__PURE__ */ x(wc, { position: "fixed", disableInitialTransition: !0 }),
    /* @__PURE__ */ ie(
      ot.div,
      {
        initial: !1,
        variants: h,
        animate: t ? "visible" : "hidden",
        className: o,
        children: [
          n === "top" && /* @__PURE__ */ x(Dh, {}),
          e === "top" && /* @__PURE__ */ x(vf, { className: "pt-14" }),
          /* @__PURE__ */ ie(
            "main",
            {
              className: "relative flex-auto my-20 overflow-hidden outline-none",
              tabIndex: -1,
              ...nn(a, {
                onKeyDownCapture: DA
              }),
              ref: f,
              children: [
                /* @__PURE__ */ x(TT, {}),
                /* @__PURE__ */ x(JE, { ref: i })
              ]
            }
          ),
          /* @__PURE__ */ x(MO, {}),
          e === "bottom" && /* @__PURE__ */ x(vf, {}),
          n === "bottom" && /* @__PURE__ */ x(Dh, {}),
          /* @__PURE__ */ x(QD, {}),
          /* @__PURE__ */ x(OA, {})
        ]
      }
    )
  ] });
}
(function() {
  fabric.Object.ENLIVEN_PROPS.push("eraser");
  var t = fabric.Object.prototype._drawClipPath, e = fabric.Object.prototype.needsItsOwnCache, n = fabric.Object.prototype.toObject, r = fabric.Object.prototype.getSvgCommons, i = fabric.Object.prototype._createBaseClipPathSVGMarkup, f = fabric.Object.prototype._createBaseSVGMarkup;
  fabric.Object.prototype.cacheProperties.push("eraser"), fabric.Object.prototype.stateProperties.push("eraser"), fabric.util.object.extend(fabric.Object.prototype, {
    /**
     * Indicates whether this object can be erased by {@link fabric.EraserBrush}
     * The `deep` option introduces fine grained control over a group's `erasable` property.
     * When set to `deep` the eraser will erase nested objects if they are erasable, leaving the group and the other objects untouched.
     * When set to `true` the eraser will erase the entire group. Once the group changes the eraser is propagated to its children for proper functionality.
     * When set to `false` the eraser will leave all objects including the group untouched.
     * @tutorial {@link http://fabricjs.com/erasing#erasable_property}
     * @type boolean | 'deep'
     * @default true
     */
    erasable: !0,
    /**
     * @tutorial {@link http://fabricjs.com/erasing#eraser}
     * @type fabric.Eraser
     */
    eraser: void 0,
    /**
     * @override
     * @returns Boolean
     */
    needsItsOwnCache: function() {
      return e.call(this) || !!this.eraser;
    },
    /**
     * draw eraser above clip path
     * @override
     * @private
     * @param {CanvasRenderingContext2D} ctx
     * @param {fabric.Object} clipPath
     */
    _drawClipPath: function(s, a) {
      if (t.call(this, s, a), this.eraser) {
        var h = this._getNonTransformedDimensions();
        this.eraser.isType("eraser") && this.eraser.set({
          width: h.x,
          height: h.y
        }), t.call(this, s, this.eraser);
      }
    },
    /**
     * Returns an object representation of an instance
     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output
     * @return {Object} Object representation of an instance
     */
    toObject: function(s) {
      var a = n.call(this, ["erasable"].concat(s));
      return this.eraser && !this.eraser.excludeFromExport && (a.eraser = this.eraser.toObject(s)), a;
    },
    /* _TO_SVG_START_ */
    /**
     * Returns id attribute for svg output
     * @override
     * @return {String}
     */
    getSvgCommons: function() {
      return r.call(this) + (this.eraser ? 'mask="url(#' + this.eraser.clipPathId + ')" ' : "");
    },
    /**
     * create svg markup for eraser
     * use <mask> to achieve erasing for svg, credit: https://travishorn.com/removing-parts-of-shapes-in-svg-b539a89e5649
     * must be called before object markup creation as it relies on the `clipPathId` property of the mask
     * @param {Function} [reviver]
     * @returns
     */
    _createEraserSVGMarkup: function(s) {
      return this.eraser ? (this.eraser.clipPathId = "MASK_" + fabric.Object.__uid++, [
        '<mask id="',
        this.eraser.clipPathId,
        '" >',
        this.eraser.toSVG(s),
        "</mask>",
        `
`
      ].join("")) : "";
    },
    /**
     * @private
     */
    _createBaseClipPathSVGMarkup: function(s, a) {
      return [
        this._createEraserSVGMarkup(a && a.reviver),
        i.call(this, s, a)
      ].join("");
    },
    /**
     * @private
     */
    _createBaseSVGMarkup: function(s, a) {
      return [
        this._createEraserSVGMarkup(a && a.reviver),
        f.call(this, s, a)
      ].join("");
    }
    /* _TO_SVG_END_ */
  });
  var g = fabric.Group.prototype._restoreObjectsState;
  fabric.util.object.extend(fabric.Group.prototype, {
    /**
     * @private
     * @param {fabric.Path} path
     */
    _addEraserPathToObjects: function(s) {
      this._objects.forEach(function(a) {
        fabric.EraserBrush.prototype._addPathToObjectEraser.call(
          fabric.EraserBrush.prototype,
          a,
          s
        );
      });
    },
    /**
     * Applies the group's eraser to its objects
     * @tutorial {@link http://fabricjs.com/erasing#erasable_property}
     */
    applyEraserToObjects: function() {
      var s = this, a = this.eraser;
      if (a) {
        delete this.eraser;
        var h = s.calcTransformMatrix();
        a.clone(function(o) {
          var u = s.clipPath;
          o.getObjects("path").forEach(function(c) {
            var d = fabric.util.multiplyTransformMatrices(
              h,
              c.calcTransformMatrix()
            );
            fabric.util.applyTransformToObject(c, d), u ? u.clone(function(m) {
              var p = fabric.EraserBrush.prototype.applyClipPathToPath.call(
                fabric.EraserBrush.prototype,
                c,
                m,
                h
              );
              s._addEraserPathToObjects(p);
            }, ["absolutePositioned", "inverted"]) : s._addEraserPathToObjects(c);
          });
        });
      }
    },
    /**
     * Propagate the group's eraser to its objects, crucial for proper functionality of the eraser within the group and nested objects.
     * @private
     */
    _restoreObjectsState: function() {
      return this.erasable === !0 && this.applyEraserToObjects(), g.call(this);
    }
  }), fabric.Eraser = fabric.util.createClass(fabric.Group, {
    /**
     * @readonly
     * @static
     */
    type: "eraser",
    /**
     * @default
     */
    originX: "center",
    /**
     * @default
     */
    originY: "center",
    drawObject: function(s) {
      s.save(), s.fillStyle = "black", s.fillRect(-this.width / 2, -this.height / 2, this.width, this.height), s.restore(), this.callSuper("drawObject", s);
    },
    /**
     * eraser should retain size
     * dimensions should not change when paths are added or removed
     * handled by {@link fabric.Object#_drawClipPath}
     * @override
     * @private
     */
    _getBounds: function() {
    },
    /* _TO_SVG_START_ */
    /**
     * Returns svg representation of an instance
     * use <mask> to achieve erasing for svg, credit: https://travishorn.com/removing-parts-of-shapes-in-svg-b539a89e5649
     * for masking we need to add a white rect before all paths
     *
     * @param {Function} [reviver] Method for further parsing of svg representation.
     * @return {String} svg representation of an instance
     */
    _toSVG: function(s) {
      var a = ["<g ", "COMMON_PARTS", ` >
`], h = -this.width / 2, o = -this.height / 2, u = [
        "<rect ",
        'fill="white" ',
        'x="',
        h,
        '" y="',
        o,
        '" width="',
        this.width,
        '" height="',
        this.height,
        `" />
`
      ].join("");
      a.push("		", u);
      for (var c = 0, d = this._objects.length; c < d; c++)
        a.push("		", this._objects[c].toSVG(s));
      return a.push(`</g>
`), a;
    }
    /* _TO_SVG_END_ */
  }), fabric.Eraser.fromObject = function(s, a) {
    var h = s.objects;
    fabric.util.enlivenObjects(h, function(o) {
      var u = fabric.util.object.clone(s, !0);
      delete u.objects, fabric.util.enlivenObjectEnlivables(s, u, function() {
        a && a(new fabric.Eraser(o, u, !0));
      });
    });
  };
  var l = fabric.Canvas.prototype._renderOverlay;
  fabric.util.object.extend(fabric.Canvas.prototype, {
    /**
     * Used by {@link #renderAll}
     * @returns boolean
     */
    isErasing: function() {
      return this.isDrawingMode && this.freeDrawingBrush && this.freeDrawingBrush.type === "eraser" && this.freeDrawingBrush._isErasing;
    },
    /**
     * While erasing the brush clips out the erasing path from canvas
     * so we need to render it on top of canvas every render
     * @param {CanvasRenderingContext2D} ctx
     */
    _renderOverlay: function(s) {
      l.call(this, s), this.isErasing() && !this.freeDrawingBrush.inverted && this.freeDrawingBrush._render();
    }
  }), fabric.EraserBrush = fabric.util.createClass(
    fabric.PencilBrush,
    /** @lends fabric.EraserBrush.prototype */
    {
      type: "eraser",
      /**
       * When set to `true` the brush will create a visual effect of undoing erasing
       */
      inverted: !1,
      /**
       * @private
       */
      _isErasing: !1,
      /**
       *
       * @private
       * @param {fabric.Object} object
       * @returns boolean
       */
      _isErasable: function(s) {
        return s.erasable !== !1;
      },
      /**
       * @private
       * This is designed to support erasing a collection with both erasable and non-erasable objects.
       * Iterates over collections to allow nested selective erasing.
       * Prepares the pattern brush that will draw on the top context to achieve the desired visual effect.
       * If brush is **NOT** inverted render all non-erasable objects.
       * If brush is inverted render all erasable objects that have been erased with their clip path inverted.
       * This will render the erased parts as if they were not erased.
       *
       * @param {fabric.Collection} collection
       * @param {CanvasRenderingContext2D} ctx
       * @param {{ visibility: fabric.Object[], eraser: fabric.Object[], collection: fabric.Object[] }} restorationContext
       */
      _prepareCollectionTraversal: function(s, a, h) {
        s.forEachObject(function(o) {
          o.forEachObject && o.erasable === "deep" ? this._prepareCollectionTraversal(o, a, h) : !this.inverted && o.erasable && o.visible ? (o.visible = !1, s.dirty = !0, h.visibility.push(o), h.collection.push(s)) : this.inverted && o.visible && (o.erasable && o.eraser ? (o.eraser.inverted = !0, o.dirty = !0, s.dirty = !0, h.eraser.push(o), h.collection.push(s)) : (o.visible = !1, s.dirty = !0, h.visibility.push(o), h.collection.push(s)));
        }, this);
      },
      /**
       * Prepare the pattern for the erasing brush
       * This pattern will be drawn on the top context, achieving a visual effect of erasing only erasable objects
       * @todo decide how overlay color should behave when `inverted === true`, currently draws over it which is undesirable
       * @private
       */
      preparePattern: function() {
        this._patternCanvas || (this._patternCanvas = fabric.util.createCanvasElement());
        var s = this._patternCanvas;
        s.width = this.canvas.width, s.height = this.canvas.height;
        var a = s.getContext("2d");
        if (this.canvas._isRetinaScaling()) {
          var h = this.canvas.getRetinaScaling();
          this.canvas.__initRetinaScaling(h, s, a);
        }
        var o = this.canvas.backgroundImage, u = o && this._isErasable(o), c = this.canvas.overlayImage, d = c && this._isErasable(c);
        if (!this.inverted && (o && !u || this.canvas.backgroundColor))
          u && (this.canvas.backgroundImage = void 0), this.canvas._renderBackground(a), u && (this.canvas.backgroundImage = o);
        else if (this.inverted && o && u) {
          var m = this.canvas.backgroundColor;
          this.canvas.backgroundColor = void 0, this.canvas._renderBackground(a), this.canvas.backgroundColor = m;
        }
        a.save(), a.transform.apply(a, this.canvas.viewportTransform);
        var p = { visibility: [], eraser: [], collection: [] };
        if (this._prepareCollectionTraversal(this.canvas, a, p), this.canvas._renderObjects(a, this.canvas._objects), p.visibility.forEach(function(v) {
          v.visible = !0;
        }), p.eraser.forEach(function(v) {
          v.eraser.inverted = !1, v.dirty = !0;
        }), p.collection.forEach(function(v) {
          v.dirty = !0;
        }), a.restore(), !this.inverted && (c && !d || this.canvas.overlayColor))
          d && (this.canvas.overlayImage = void 0), l.call(this.canvas, a), d && (this.canvas.overlayImage = c);
        else if (this.inverted && c && d) {
          var m = this.canvas.overlayColor;
          this.canvas.overlayColor = void 0, l.call(this.canvas, a), this.canvas.overlayColor = m;
        }
      },
      /**
       * Sets brush styles
       * @private
       * @param {CanvasRenderingContext2D} ctx
       */
      _setBrushStyles: function(s) {
        this.callSuper("_setBrushStyles", s), s.strokeStyle = "black";
      },
      /**
       * **Customiztion**
       *
       * if you need the eraser to update on each render (i.e animating during erasing) override this method by **adding** the following (performance may suffer):
       * @example
       * ```
       * if(ctx === this.canvas.contextTop) {
       *  this.preparePattern();
       * }
       * ```
       *
       * @override fabric.BaseBrush#_saveAndTransform
       * @param {CanvasRenderingContext2D} ctx
       */
      _saveAndTransform: function(s) {
        this.callSuper("_saveAndTransform", s), this._setBrushStyles(s), s.globalCompositeOperation = s === this.canvas.getContext() ? "destination-out" : "source-over";
      },
      /**
       * We indicate {@link fabric.PencilBrush} to repaint itself if necessary
       * @returns
       */
      needsFullRender: function() {
        return !0;
      },
      /**
       *
       * @param {fabric.Point} pointer
       * @param {fabric.IEvent} options
       * @returns
       */
      onMouseDown: function(s, a) {
        this.canvas._isMainEvent(a.e) && (this._prepareForDrawing(s), this._captureDrawingPath(s), this.preparePattern(), this._isErasing = !0, this.canvas.fire("erasing:start"), this._render());
      },
      /**
       * Rendering Logic:
       * 1. Use brush to clip canvas by rendering it on top of canvas (unnecessary if `inverted === true`)
       * 2. Render brush with canvas pattern on top context
       *
       */
      _render: function() {
        var s;
        this.inverted || (s = this.canvas.getContext(), this.callSuper("_render", s)), s = this.canvas.contextTop, this.canvas.clearContext(s), this.callSuper("_render", s), s.save();
        var a = this.canvas.getRetinaScaling(), h = 1 / a;
        s.scale(h, h), s.globalCompositeOperation = "source-in", s.drawImage(this._patternCanvas, 0, 0), s.restore();
      },
      /**
       * Creates fabric.Path object
       * @override
       * @private
       * @param {(string|number)[][]} pathData Path data
       * @return {fabric.Path} Path to add on canvas
       * @returns
       */
      createPath: function(s) {
        var a = this.callSuper("createPath", s);
        return a.globalCompositeOperation = this.inverted ? "source-over" : "destination-out", a.stroke = this.inverted ? "white" : "black", a;
      },
      /**
       * Utility to apply a clip path to a path.
       * Used to preserve clipping on eraser paths in nested objects.
       * Called when a group has a clip path that should be applied to the path before applying erasing on the group's objects.
       * @param {fabric.Path} path The eraser path in canvas coordinate plane
       * @param {fabric.Object} clipPath The clipPath to apply to the path
       * @param {number[]} clipPathContainerTransformMatrix The transform matrix of the object that the clip path belongs to
       * @returns {fabric.Path} path with clip path
       */
      applyClipPathToPath: function(s, a, h) {
        var o = fabric.util.invertTransform(s.calcTransformMatrix()), u = a.calcTransformMatrix(), c = a.absolutePositioned ? o : fabric.util.multiplyTransformMatrices(
          o,
          h
        );
        return a.absolutePositioned = !1, fabric.util.applyTransformToObject(
          a,
          fabric.util.multiplyTransformMatrices(
            c,
            u
          )
        ), s.clipPath = s.clipPath ? fabric.util.mergeClipPaths(a, s.clipPath) : a, s;
      },
      /**
       * Utility to apply a clip path to a path.
       * Used to preserve clipping on eraser paths in nested objects.
       * Called when a group has a clip path that should be applied to the path before applying erasing on the group's objects.
       * @param {fabric.Path} path The eraser path
       * @param {fabric.Object} object The clipPath to apply to path belongs to object
       * @param {Function} callback Callback to be invoked with the cloned path after applying the clip path
       */
      clonePathWithClipPath: function(s, a, h) {
        var o = a.calcTransformMatrix(), u = a.clipPath, c = this;
        s.clone(function(d) {
          u.clone(function(m) {
            h(c.applyClipPathToPath(d, m, o));
          }, ["absolutePositioned", "inverted"]);
        });
      },
      /**
       * Adds path to object's eraser, walks down object's descendants if necessary
       *
       * @fires erasing:end on object
       * @param {fabric.Object} obj
       * @param {fabric.Path} path
       */
      _addPathToObjectEraser: function(s, a) {
        var h = this;
        if (s.forEachObject && s.erasable === "deep") {
          var o = s._objects.filter(function(c) {
            return c.erasable;
          });
          o.length > 0 && s.clipPath ? this.clonePathWithClipPath(a, s, function(c) {
            o.forEach(function(d) {
              h._addPathToObjectEraser(d, c);
            });
          }) : o.length > 0 && o.forEach(function(c) {
            h._addPathToObjectEraser(c, a);
          });
          return;
        }
        var u = s.eraser;
        u || (u = new fabric.Eraser(), s.eraser = u), a.clone(function(c) {
          var d = fabric.util.multiplyTransformMatrices(
            fabric.util.invertTransform(
              s.calcTransformMatrix()
            ),
            c.calcTransformMatrix()
          );
          fabric.util.applyTransformToObject(c, d), u.addWithUpdate(c), s.set("dirty", !0), s.fire("erasing:end", {
            path: c
          }), s.group && Array.isArray(h.__subTargets) && h.__subTargets.push(s);
        });
      },
      /**
       * Add the eraser path to canvas drawables' clip paths
       *
       * @param {fabric.Canvas} source
       * @param {fabric.Canvas} path
       * @returns {Object} canvas drawables that were erased by the path
       */
      applyEraserToCanvas: function(s) {
        var a = this.canvas, h = {};
        return [
          "backgroundImage",
          "overlayImage"
        ].forEach(function(o) {
          var u = a[o];
          u && u.erasable && (this._addPathToObjectEraser(u, s), h[o] = u);
        }, this), h;
      },
      /**
       * On mouseup after drawing the path on contextTop canvas
       * we use the points captured to create an new fabric path object
       * and add it to every intersected erasable object.
       */
      _finalizeAndAddPath: function() {
        var s = this.canvas.contextTop, a = this.canvas;
        s.closePath(), this.decimate && (this._points = this.decimatePoints(this._points, this.decimate)), a.clearContext(a.contextTop), this._isErasing = !1;
        var h = this._points && this._points.length > 1 ? this.convertPointsToSVGPath(this._points) : null;
        if (!h || this._isEmptySVGPath(h)) {
          a.fire("erasing:end"), a.requestRenderAll();
          return;
        }
        var o = this.createPath(h);
        o.setCoords(), a.fire("before:path:created", { path: o });
        var u = this.applyEraserToCanvas(o), c = this;
        this.__subTargets = [];
        var d = [];
        a.forEachObject(function(m) {
          m.erasable && m.intersectsWithObject(o, !0, !0) && (c._addPathToObjectEraser(m, o), d.push(m));
        }), a.fire("erasing:end", {
          path: o,
          targets: d,
          subTargets: this.__subTargets,
          drawables: u
        }), delete this.__subTargets, a.requestRenderAll(), this._resetShadow(), a.fire("path:created", { path: o });
      }
    }
  );
})();
la.enableBoundaryChecking(!1);
const si = class si {
  constructor(e) {
    Te(this, "tools", {});
    Te(this, "fabric", null);
    if (e.sentryDsn && D1({
      dsn: e.sentryDsn
    }), Vv(ex), !e.selector)
      throw new Error('Pixie required "selector" option.');
    const n = document.querySelector(e.selector);
    if (!n)
      return;
    n.classList.add("pi"), K2(n), this.setConfig(e), ue.setState({ editor: this }), Nv(n).render(
      /* @__PURE__ */ x(ce.StrictMode, { children: /* @__PURE__ */ x(LA, {}) })
    );
  }
  get state() {
    return O();
  }
  get defaultConfig() {
    return si.defaultConfig;
  }
  /**
   * Open editor.
   */
  open(e = {}) {
    return new Promise(async (n) => {
      var r;
      Object.keys(e).length ? await this.resetEditor({
        ...Qd(e, {
          ui: { visible: !0 },
          image: e.image || O().config.image,
          state: e.state || O().config.state,
          blankCanvasSize: e.blankCanvasSize || O().config.blankCanvasSize
        })
      }) : (r = O().config.ui) != null && r.visible || O().setConfig({ ui: { visible: !0 } }), n();
    });
  }
  /**
   * Close editor.
   */
  close() {
    var e, n, r;
    (e = O().config.ui) != null && e.visible && (this.setConfig({ ui: { visible: !1 } }), (r = (n = O().config).onClose) == null || r.call(n));
  }
  /**
   * Override editor configuration.
   */
  setConfig(e) {
    O().setConfig(e);
  }
  /**
   * Open file upload window and add selected image to canvas.
   */
  uploadAndAddImage() {
    return R().import.uploadAndAddImage();
  }
  /**
   * Open file upload window and replace canvas contents with selected image.
   */
  uploadAndReplaceMainImage() {
    return R().import.uploadAndReplaceMainImage();
  }
  /**
   * Open file upload window and replace canvas contents with selected state file.
   */
  uploadAndOpenStateFile() {
    return R().import.uploadAndOpenStateFile();
  }
  /**
   * Clear current canvas and open a new one at specified size.
   */
  newCanvas(e, n, r) {
    return R().canvas.openNew(e, n, r);
  }
  /**
   * Get current canvas state as json string.
   */
  getState(e) {
    return JSON.stringify(xs(e));
  }
  /**
   * Replace current canvas contents with specified pixie state.
   */
  setState(e) {
    return R().import.loadState(e);
  }
  /**
   * Replace current canvas contents with pixie state file loaded from specified url.
   */
  async setStateFromUrl(e) {
    const n = await no(e);
    return R().import.loadState(n);
  }
  /**
   * Open specified tool (crop, draw, text etc.)
   */
  openTool(e) {
    Rl(e);
  }
  /**
   * Apply any pending changes from currently open tool.
   * This is identical to clicking "apply" button in the editor.
   */
  applyChanges() {
    O().applyChanges();
  }
  /**
   * Cancel any pending changes from currently open tool.
   * This is identical to clicking "cancel" button in the editor.
   */
  cancelChanges() {
    O().cancelChanges();
  }
  /**
   * Fully reset editor state and optionally
   * override specified configuration.
   */
  async resetEditor(e) {
    await Ia(e), await R().canvas.loadInitialContent();
  }
  /**
   * Toggle specified floating panel.
   */
  togglePanel(e, n) {
    e === "objects" && O().togglePanel("history", !1), e === "history" && O().togglePanel("objects", !1), O().togglePanel(e, n);
  }
  on(e, n) {
    var r;
    (r = this.fabric) == null || r.on(e, n);
  }
  /**
   * Check if any modifications made to canvas have not been applied yet.
   */
  isDirty() {
    return O().dirty;
  }
  /**
   * @hidden
   */
  get(e) {
    return this.tools[e];
  }
  /**
   * Display specified notification message in the editor.
   */
  notify(e) {
    return Fr(e);
  }
  /**
   * Create a new editor instance.
   */
  static init(e) {
    return new Promise((n) => {
      const r = e.onLoad;
      e.onLoad = (i) => {
        r == null || r(i), n(i);
      }, new this(e);
    });
  }
};
Te(si, "defaultConfig", $d), Te(si, "version", hw);
let Tf = si;
export {
  Tf as Pixie
};
//# sourceMappingURL=pixie.es.js.map
